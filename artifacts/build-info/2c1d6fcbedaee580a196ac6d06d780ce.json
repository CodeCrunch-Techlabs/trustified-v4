{"id":"2c1d6fcbedaee580a196ac6d06d780ce","_format":"hh-sol-build-info-1","solcVersion":"0.8.4","solcLongVersion":"0.8.4+commit.c7e474f2","input":{"language":"Solidity","sources":{"@creds-protocol/contracts/base/CredentialConstants.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nuint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n"},"@creds-protocol/contracts/base/CredentialCore.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"../interfaces/ICredentialCore.sol\";\nimport \"../interfaces/IVerifier.sol\";\n\n/// @title Credential core contract.\n/// @notice Minimal code to allow users to signal their endorsement of an arbitrary string.\n/// @dev The following code verifies that the proof is correct and saves the hash of the\n/// nullifier to prevent double-signaling. External nullifier and Merkle trees (i.e. creds) must be\n/// managed externally.\ncontract CredentialCore is ICredentialCore {\n    /// @dev Asserts that no nullifier already exists and if the zero-knowledge proof is valid.\n    /// Otherwise it reverts.\n    /// @param signal: Credential signal.\n    /// @param root: Root of the Merkle tree.\n    /// @param nullifierHash: Nullifier hash.\n    /// @param externalNullifier: External nullifier.\n    /// @param proof: Zero-knowledge proof.\n    /// @param verifier: Verifier address.\n    function _verifyProof(\n        bytes32 signal,\n        uint256 root,\n        uint256 nullifierHash,\n        uint256 externalNullifier,\n        uint256[8] calldata proof,\n        IVerifier verifier\n    ) internal view {\n        uint256 signalHash = _hashSignal(signal);\n\n        verifier.verifyProof(\n            [proof[0], proof[1]],\n            [[proof[2], proof[3]], [proof[4], proof[5]]],\n            [proof[6], proof[7]],\n            [root, nullifierHash, signalHash, externalNullifier]\n        );\n    }\n\n    /// @dev Creates a keccak256 hash of the signal.\n    /// @param signal: Credential signal.\n    /// @return Hash of the signal.\n    function _hashSignal(bytes32 signal) private pure returns (uint256) {\n        return uint256(keccak256(abi.encodePacked(signal))) >> 8;\n    }\n}\n"},"@creds-protocol/contracts/base/CredentialCreds.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport {SNARK_SCALAR_FIELD} from \"./CredentialConstants.sol\";\nimport \"../interfaces/ICredentialCreds.sol\";\nimport \"../zk-kit/incremental-merkle-tree.sol/IncrementalBinaryTree.sol\";\nimport \"../openzeppelin/contracts/utils/Context.sol\";\n\n/// @title Credential creds contract.\n/// @dev The following code allows you to create, issue and withdraw creds.\n/// You can use getters to obtain informations about creds (root, depth, number of leaves).\nabstract contract CredentialCreds is Context, ICredentialCreds {\n    using IncrementalBinaryTree for IncrementalTreeData;\n\n    /// @dev Gets a cred id and returns the tree data.\n    mapping(uint256 => IncrementalTreeData) internal merkleTree;\n\n    /// @dev Creates a new cred by initializing the associated tree.\n    /// @param credID: Id of the cred.\n    /// @param merkleTreeDepth: Depth of the tree.\n    /// @param zeroValue: Zero value of the tree.\n    function _createCred(\n        address issuer,\n        uint256 credID,\n        uint256 merkleTreeDepth,\n        uint256 zeroValue\n    ) internal virtual {\n        if (credID >= SNARK_SCALAR_FIELD) {\n            revert Credential__CredIdIsNotLessThanSnarkScalarField();\n        }\n\n        if (getMerkleTreeDepth(credID) != 0) {\n            revert Credential__CredAlreadyExists();\n        }\n\n        merkleTree[credID].init(merkleTreeDepth, zeroValue);\n\n        emit CredCreated(issuer, credID, merkleTreeDepth, zeroValue);\n    }\n\n    /// @dev Adds an identity commitment to an existing cred.\n    /// @param credID: Id of the cred.\n    /// @param identityCommitment: New identity commitment.\n    function _addIdentity(uint256 credID, uint256 identityCommitment) internal virtual {\n        if (getMerkleTreeDepth(credID) == 0) {\n            revert Credential__CredDoesNotExist();\n        }\n\n        merkleTree[credID].insert(identityCommitment);\n\n        uint256 merkleTreeRoot = getMerkleTreeRoot(credID);\n        uint256 index = getNumberOfMerkleTreeLeaves(credID) - 1;\n\n        emit IdentityAdded(credID, index, identityCommitment, merkleTreeRoot);\n    }\n\n    /// @dev Updates an identity commitment of an existing cred. A proof of membership is\n    /// needed to check if the node to be updated is part of the tree.\n    /// @param credID: Id of the cred.\n    /// @param identityCommitment: Existing identity commitment to be updated.\n    /// @param newIdentityCommitment: New identity commitment.\n    /// @param proofSiblings: Array of the sibling nodes of the proof of membership.\n    /// @param proofPathIndices: Path of the proof of membership.\n    function _updateIdentity(\n        uint256 credID,\n        uint256 identityCommitment,\n        uint256 newIdentityCommitment,\n        uint256[] calldata proofSiblings,\n        uint8[] calldata proofPathIndices\n    ) internal virtual {\n        if (getMerkleTreeRoot(credID) == 0) {\n            revert Credential__CredDoesNotExist();\n        }\n\n        merkleTree[credID].update(identityCommitment, newIdentityCommitment, proofSiblings, proofPathIndices);\n\n        uint256 merkleTreeRoot = getMerkleTreeRoot(credID);\n        uint256 index = proofPathIndicesToIdentityIndex(proofPathIndices);\n\n        emit IdentityUpdated(credID, index, identityCommitment, newIdentityCommitment, merkleTreeRoot);\n    }\n\n    /// @dev Removes an identity commitment from an existing cred. A proof of membership is\n    /// needed to check if the node to be deleted is part of the tree.\n    /// @param credID: Id of the cred.\n    /// @param identityCommitment: Existing identity commitment to be removed.\n    /// @param proofSiblings: Array of the sibling nodes of the proof of membership.\n    /// @param proofPathIndices: Path of the proof of membership.\n    function _removeIdentity(\n        uint256 credID,\n        uint256 identityCommitment,\n        uint256[] calldata proofSiblings,\n        uint8[] calldata proofPathIndices\n    ) internal virtual {\n        if (getMerkleTreeRoot(credID) == 0) {\n            revert Credential__CredDoesNotExist();\n        }\n\n        merkleTree[credID].remove(identityCommitment, proofSiblings, proofPathIndices);\n\n        uint256 merkleTreeRoot = getMerkleTreeRoot(credID);\n        uint256 index = proofPathIndicesToIdentityIndex(proofPathIndices);\n\n        emit IdentityRemoved(credID, index, identityCommitment, merkleTreeRoot);\n    }\n\n    /// @dev See {ICredentialCreds-getMerkleTreeRoot}.\n    function getMerkleTreeRoot(uint256 credID) public view virtual override returns (uint256) {\n        return merkleTree[credID].root;\n    }\n\n    /// @dev See {ICredentialCreds-getMerkleTreeDepth}.\n    function getMerkleTreeDepth(uint256 credID) public view virtual override returns (uint256) {\n        return merkleTree[credID].depth;\n    }\n\n    /// @dev See {ICredentialCreds-getNumberOfMerkleTreeLeaves}.\n    function getNumberOfMerkleTreeLeaves(uint256 credID) public view virtual override returns (uint256) {\n        return merkleTree[credID].numberOfLeaves;\n    }\n\n    /// @dev Converts the path indices of a Merkle proof to the identity commitment index in the tree.\n    /// @param proofPathIndices: Path of the proof of membership.\n    /// @return Index of a cred identity.\n    function proofPathIndicesToIdentityIndex(uint8[] calldata proofPathIndices) private pure returns (uint256) {\n        uint256 identityIndex = 0;\n\n        for (uint8 i = uint8(proofPathIndices.length); i > 0; ) {\n            if (identityIndex > 0 || proofPathIndices[i - 1] != 0) {\n                identityIndex *= 2;\n\n                if (proofPathIndices[i - 1] == 1) {\n                    identityIndex += 1;\n                }\n            }\n\n            unchecked {\n                --i;\n            }\n        }\n\n        return identityIndex;\n    }\n}\n"},"@creds-protocol/contracts/base/CredsProtocolRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\ncontract CredsProtocolRegistry {\n\n    mapping(address => address[]) public issuerContractAddress;\n    mapping(address => bool) public isRegisteredIssuer;\n\n    function registerIssuer(address _issuer, address _issuerContractAddress) external {\n        issuerContractAddress[_issuer].push(_issuerContractAddress);\n        isRegisteredIssuer[_issuer] = true;\n    }\n\n}"},"@creds-protocol/contracts/CredsIssuer.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"./interfaces/ICredential.sol\";\nimport \"./interfaces/IVerifier.sol\";\nimport \"./base/CredentialCore.sol\";\nimport \"./base/CredentialCreds.sol\";\nimport \"./base/CredsProtocolRegistry.sol\";\n\n/// @title CredsIssuer\ncontract CredsIssuer is ICredential, CredentialCore, CredentialCreds {\n    \n    address public credsIssuer;\n    string public issuerName;\n    string public issuerSymbol;\n    uint256 public credsIssuedCount;\n\n    address public credsProtocolRegistry = 0x414b893562f46f5180971c3389784A447581b2d3;\n\n    /// @dev Gets a tree depth and returns its verifier address.\n    mapping(uint256 => IVerifier) public verifiers;\n\n    /// @dev Gets a cred id and returns the cred parameters.\n    mapping(uint256 => Cred) public creds;\n    \n    /// @dev Checks if the cred issuer is the transaction sender.\n    modifier onlyCredsIssuer() {\n        if (credsIssuer == _msgSender()) {\n            revert Credential__CallerIsNotTheCredIssuer();\n        }\n        _;\n    }\n\n    /// @dev Checks if there is a verifier for the given tree depth.\n    /// @param merkleTreeDepth: Depth of the tree.\n    modifier onlySupportedMerkleTreeDepth(uint256 merkleTreeDepth) {\n        if (address(verifiers[merkleTreeDepth]) == address(0)) {\n            revert Credential__MerkleTreeDepthIsNotSupported();\n        }\n        _;\n    }\n\n    /// @dev Initializes the Credential verifiers used to verify the user's ZK proofs.\n    /// @param _verifiers: List of Credential verifiers (address and related Merkle tree depth).\n    constructor(\n        Verifier[] memory _verifiers,\n        address _issuer,\n        string memory _issuerName,\n        string memory _issuerSymbol) \n    {\n        for (uint8 i = 0; i < _verifiers.length; ) {\n            verifiers[_verifiers[i].merkleTreeDepth] = IVerifier(_verifiers[i].contractAddress);\n\n            unchecked {\n                ++i;\n            }\n        }\n        credsIssuer = _issuer;\n        issuerName =_issuerName;\n        issuerSymbol =_issuerSymbol; \n        CredsProtocolRegistry(credsProtocolRegistry).registerIssuer(_issuer, address(this));\n        emit issuerRegistered(_issuer, _issuerName, _issuerSymbol);\n    }\n\n    function createCred(\n        uint256 credId,\n        uint256 merkleTreeDepth,\n        uint256 zeroValue,\n        address admin,\n        string memory credURI\n    ) internal onlySupportedMerkleTreeDepth(merkleTreeDepth) {\n        _createCred(msg.sender, credId, merkleTreeDepth, zeroValue);\n\n        creds[credId].admin = admin;\n        creds[credId].credURI = credURI;\n        creds[credId].merkleRootDuration = 1 hours;\n        credsIssuedCount = credsIssuedCount + 1;\n    }\n\n    function createCred(\n        uint256 credId,\n        uint256 merkleTreeDepth,\n        uint256 zeroValue,\n        address admin,\n        uint256 merkleTreeRootDuration,\n        string memory credURI\n    ) internal onlySupportedMerkleTreeDepth(merkleTreeDepth) {\n        _createCred(msg.sender, credId, merkleTreeDepth, zeroValue);\n\n        creds[credId].admin = admin;\n        creds[credId].credURI = credURI;\n        creds[credId].merkleRootDuration = merkleTreeRootDuration;\n        credsIssuedCount = credsIssuedCount + 1;\n    }\n\n    function addIdentity(uint256 credId, uint256 identityCommitment) internal {\n        _addIdentity(credId, identityCommitment);\n\n        uint256 merkleTreeRoot = getMerkleTreeRoot(credId);\n\n        creds[credId].merkleRootCreationDates[merkleTreeRoot] = block.timestamp;\n    }\n\n    function addIdentities(uint256 credId, uint256[] calldata identityCommitments)\n        internal\n    {\n        for (uint8 i = 0; i < identityCommitments.length; ) {\n            _addIdentity(credId, identityCommitments[i]);\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        uint256 merkleTreeRoot = getMerkleTreeRoot(credId);\n\n        creds[credId].merkleRootCreationDates[merkleTreeRoot] = block.timestamp;\n    }\n\n    function updateIdentity(\n        uint256 credId,\n        uint256 identityCommitment,\n        uint256 newIdentityCommitment,\n        uint256[] calldata proofSiblings,\n        uint8[] calldata proofPathIndices\n    ) internal {\n        _updateIdentity(credId, identityCommitment, newIdentityCommitment, proofSiblings, proofPathIndices);\n    }\n\n    function removeIdentity(\n        uint256 credId,\n        uint256 identityCommitment,\n        uint256[] calldata proofSiblings,\n        uint8[] calldata proofPathIndices\n    ) internal {\n        _removeIdentity(credId, identityCommitment, proofSiblings, proofPathIndices);\n    }\n\n    function verifyProof(\n        uint256 credId,\n        uint256 merkleTreeRoot,\n        bytes32 signal,\n        uint256 nullifierHash,\n        uint256 externalNullifier,\n        uint256[8] calldata proof\n    ) internal {\n        uint256 currentMerkleTreeRoot = getMerkleTreeRoot(credId);\n\n        if (currentMerkleTreeRoot == 0) {\n            revert Credential__CredDoesNotExist();\n        }\n\n        if (merkleTreeRoot != currentMerkleTreeRoot) {\n            uint256 merkleRootCreationDate = creds[credId].merkleRootCreationDates[merkleTreeRoot];\n            uint256 merkleRootDuration = creds[credId].merkleRootDuration;\n\n            if (merkleRootCreationDate == 0) {\n                revert Credential__MerkleTreeRootIsNotPartOfTheCred();\n            }\n\n            if (block.timestamp > merkleRootCreationDate + merkleRootDuration) {\n                revert Credential__MerkleTreeRootIsExpired();\n            }\n        }\n\n        if (creds[credId].nullifierHashes[nullifierHash]) {\n            revert Credential__YouAreUsingTheSameNillifierTwice();\n        }\n\n        uint256 merkleTreeDepth = getMerkleTreeDepth(credId);\n\n        IVerifier verifier = verifiers[merkleTreeDepth];\n\n        _verifyProof(signal, merkleTreeRoot, nullifierHash, externalNullifier, proof, verifier);\n\n        creds[credId].nullifierHashes[nullifierHash] = true;\n\n        emit ProofVerified(credId, merkleTreeRoot, nullifierHash, externalNullifier, signal);\n    }\n}\n"},"@creds-protocol/contracts/interfaces/ICredential.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\n/// @title Credential interface.\n/// @dev Interface of a Credential contract.\ninterface ICredential {\n    error Credential__CallerIsNotTheCredIssuer();\n    error Credential__MerkleTreeDepthIsNotSupported();\n    error Credential__MerkleTreeRootIsExpired();\n    error Credential__MerkleTreeRootIsNotPartOfTheCred();\n    error Credential__YouAreUsingTheSameNillifierTwice();\n\n    /// It defines all the cred parameters, in addition to those in the Merkle tree.\n    struct Cred {\n        address admin;\n        string credURI;\n        uint256 merkleRootDuration;\n        mapping(uint256 => uint256) merkleRootCreationDates;\n        mapping(uint256 => bool) nullifierHashes;\n    }\n\n    struct Verifier {\n        address contractAddress;\n        uint256 merkleTreeDepth;\n    }\n\n    /// @dev Emitted when an admin is assigned to a cred.\n    /// @param issuerAddress: Address of the issuer\n    /// @param issuerName: Name of the issuer\n    /// @param issuerSymbol: Symbol of the issuer\n    event issuerRegistered(\n        address indexed issuerAddress, \n        string indexed issuerName, \n        string indexed issuerSymbol\n    );\n\n    /// @dev Emitted when a Credential proof is verified.\n    /// @param credId: Id of the cred.\n    /// @param merkleTreeRoot: Root of the Merkle tree.\n    /// @param externalNullifier: External nullifier.\n    /// @param nullifierHash: Nullifier hash.\n    /// @param signal: Credential signal.\n    event ProofVerified(\n        uint256 indexed credId,\n        uint256 merkleTreeRoot,\n        uint256 externalNullifier,\n        uint256 nullifierHash,\n        bytes32 signal\n    );\n    \n}"},"@creds-protocol/contracts/interfaces/ICredentialCore.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\n/// @title CredentialCore interface.\n/// @dev Interface of CredentialCore contract.\ninterface ICredentialCore {\n    /// @notice Emitted when a proof is verified correctly and a new nullifier hash is added.\n    /// @param nullifierHash: Hash of external and identity nullifiers.\n    event NullifierHashAdded(uint256 nullifierHash);\n}\n"},"@creds-protocol/contracts/interfaces/ICredentialCreds.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\n/// @title CredentialCreds interface.\n/// @dev Interface of a CredentialCreds contract.\ninterface ICredentialCreds {\n    \n    error Credential__CredDoesNotExist();\n    error Credential__CredAlreadyExists();\n    error Credential__CredIdIsNotLessThanSnarkScalarField();\n\n    /// @dev Emitted when a new cred is created.\n    /// @param issuer: Cred Issuer\n    /// @param credId: Id of the cred.\n    /// @param merkleTreeDepth: Depth of the tree.\n    /// @param zeroValue: Zero value of the tree.\n    event CredCreated(address indexed issuer, uint256 indexed credId, uint256 merkleTreeDepth, uint256 zeroValue);\n\n    /// @dev Emitted when a new identity commitment is added.\n    /// @param credId: Cred id of the cred.\n    /// @param index: Identity commitment index.\n    /// @param identityCommitment: New identity commitment.\n    /// @param merkleTreeRoot: New root hash of the tree.\n    event IdentityAdded(uint256 indexed credId, uint256 index, uint256 identityCommitment, uint256 merkleTreeRoot);\n\n    /// @dev Emitted when an identity commitment is updated.\n    /// @param credId: Cred id of the cred.\n    /// @param index: Identity commitment index.\n    /// @param identityCommitment: Existing identity commitment to be updated.\n    /// @param newIdentityCommitment: New identity commitment.\n    /// @param merkleTreeRoot: New root hash of the tree.\n    event IdentityUpdated(\n        uint256 indexed credId,\n        uint256 index,\n        uint256 identityCommitment,\n        uint256 newIdentityCommitment,\n        uint256 merkleTreeRoot\n    );\n\n    /// @dev Emitted when a new identity commitment is removed.\n    /// @param credId: Cred id of the cred.\n    /// @param index: Identity commitment index.\n    /// @param identityCommitment: Existing identity commitment to be removed.\n    /// @param merkleTreeRoot: New root hash of the tree.\n    event IdentityRemoved(uint256 indexed credId, uint256 index, uint256 identityCommitment, uint256 merkleTreeRoot);\n\n    /// @dev Returns the last root hash of a cred.\n    /// @param credId: Id of the cred.\n    /// @return Root hash of the cred.\n    function getMerkleTreeRoot(uint256 credId) external view returns (uint256);\n\n    /// @dev Returns the depth of the tree of a cred.\n    /// @param credId: Id of the cred.\n    /// @return Depth of the cred tree.\n    function getMerkleTreeDepth(uint256 credId) external view returns (uint256);\n\n    /// @dev Returns the number of tree leaves of a cred.\n    /// @param credId: Id of the cred.\n    /// @return Number of tree leaves.\n    function getNumberOfMerkleTreeLeaves(uint256 credId) external view returns (uint256);\n}\n"},"@creds-protocol/contracts/interfaces/IVerifier.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\n/// @title Verifier interface.\n/// @dev Interface of Verifier contract.\ninterface IVerifier {\n    function verifyProof(\n        uint256[2] memory a,\n        uint256[2][2] memory b,\n        uint256[2] memory c,\n        uint256[4] memory input\n    ) external view;\n}"},"@creds-protocol/contracts/openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@creds-protocol/contracts/zk-kit/incremental-merkle-tree.sol/Hashes.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nlibrary PoseidonT3 {\n    function poseidon(uint256[2] memory) public pure returns (uint256) {}\n}\n\nlibrary PoseidonT6 {\n    function poseidon(uint256[5] memory) public pure returns (uint256) {}\n}\n"},"@creds-protocol/contracts/zk-kit/incremental-merkle-tree.sol/IncrementalBinaryTree.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport {PoseidonT3} from \"./Hashes.sol\";\n\n// Each incremental tree has certain properties and data that will\n// be used to add new leaves.\nstruct IncrementalTreeData {\n    uint256 depth; // Depth of the tree (levels - 1).\n    uint256 root; // Root hash of the tree.\n    uint256 numberOfLeaves; // Number of leaves of the tree.\n    mapping(uint256 => uint256) zeroes; // Zero hashes used for empty nodes (level -> zero hash).\n    // The nodes of the subtrees used in the last addition of a leaf (level -> [left node, right node]).\n    mapping(uint256 => uint256[2]) lastSubtrees; // Caching these values is essential to efficient appends.\n}\n\n/// @title Incremental binary Merkle tree.\n/// @dev The incremental tree allows to calculate the root hash each time a leaf is added, ensuring\n/// the integrity of the tree.\nlibrary IncrementalBinaryTree {\n    uint8 internal constant MAX_DEPTH = 32;\n    uint256 internal constant SNARK_SCALAR_FIELD =\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\n\n    /// @dev Initializes a tree.\n    /// @param self: Tree data.\n    /// @param depth: Depth of the tree.\n    /// @param zero: Zero value to be used.\n    function init(\n        IncrementalTreeData storage self,\n        uint256 depth,\n        uint256 zero\n    ) public {\n        require(zero < SNARK_SCALAR_FIELD, \"IncrementalBinaryTree: leaf must be < SNARK_SCALAR_FIELD\");\n        require(depth > 0 && depth <= MAX_DEPTH, \"IncrementalBinaryTree: tree depth must be between 1 and 32\");\n\n        self.depth = depth;\n\n        for (uint8 i = 0; i < depth; ) {\n            self.zeroes[i] = zero;\n            zero = PoseidonT3.poseidon([zero, zero]);\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        self.root = zero;\n    }\n\n    /// @dev Inserts a leaf in the tree.\n    /// @param self: Tree data.\n    /// @param leaf: Leaf to be inserted.\n    function insert(IncrementalTreeData storage self, uint256 leaf) public {\n        uint256 depth = self.depth;\n\n        require(leaf < SNARK_SCALAR_FIELD, \"IncrementalBinaryTree: leaf must be < SNARK_SCALAR_FIELD\");\n        require(self.numberOfLeaves < 2**depth, \"IncrementalBinaryTree: tree is full\");\n\n        uint256 index = self.numberOfLeaves;\n        uint256 hash = leaf;\n\n        for (uint8 i = 0; i < depth; ) {\n            if (index & 1 == 0) {\n                self.lastSubtrees[i] = [hash, self.zeroes[i]];\n            } else {\n                self.lastSubtrees[i][1] = hash;\n            }\n\n            hash = PoseidonT3.poseidon(self.lastSubtrees[i]);\n            index >>= 1;\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        self.root = hash;\n        self.numberOfLeaves += 1;\n    }\n\n    /// @dev Updates a leaf in the tree.\n    /// @param self: Tree data.\n    /// @param leaf: Leaf to be updated.\n    /// @param newLeaf: New leaf.\n    /// @param proofSiblings: Array of the sibling nodes of the proof of membership.\n    /// @param proofPathIndices: Path of the proof of membership.\n    function update(\n        IncrementalTreeData storage self,\n        uint256 leaf,\n        uint256 newLeaf,\n        uint256[] calldata proofSiblings,\n        uint8[] calldata proofPathIndices\n    ) public {\n        require(\n            verify(self, leaf, proofSiblings, proofPathIndices),\n            \"IncrementalBinaryTree: leaf is not part of the tree\"\n        );\n\n        uint256 depth = self.depth;\n        uint256 hash = newLeaf;\n\n        for (uint8 i = 0; i < depth; ) {\n            if (proofPathIndices[i] == 0) {\n                if (proofSiblings[i] == self.lastSubtrees[i][1]) {\n                    self.lastSubtrees[i][0] = hash;\n                }\n\n                hash = PoseidonT3.poseidon([hash, proofSiblings[i]]);\n            } else {\n                if (proofSiblings[i] == self.lastSubtrees[i][0]) {\n                    self.lastSubtrees[i][1] = hash;\n                }\n\n                hash = PoseidonT3.poseidon([proofSiblings[i], hash]);\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        self.root = hash;\n    }\n\n    /// @dev Removes a leaf from the tree.\n    /// @param self: Tree data.\n    /// @param leaf: Leaf to be removed.\n    /// @param proofSiblings: Array of the sibling nodes of the proof of membership.\n    /// @param proofPathIndices: Path of the proof of membership.\n    function remove(\n        IncrementalTreeData storage self,\n        uint256 leaf,\n        uint256[] calldata proofSiblings,\n        uint8[] calldata proofPathIndices\n    ) public {\n        update(self, leaf, self.zeroes[0], proofSiblings, proofPathIndices);\n    }\n\n    /// @dev Verify if the path is correct and the leaf is part of the tree.\n    /// @param self: Tree data.\n    /// @param leaf: Leaf to be removed.\n    /// @param proofSiblings: Array of the sibling nodes of the proof of membership.\n    /// @param proofPathIndices: Path of the proof of membership.\n    /// @return True or false.\n    function verify(\n        IncrementalTreeData storage self,\n        uint256 leaf,\n        uint256[] calldata proofSiblings,\n        uint8[] calldata proofPathIndices\n    ) private view returns (bool) {\n        require(leaf < SNARK_SCALAR_FIELD, \"IncrementalBinaryTree: leaf must be < SNARK_SCALAR_FIELD\");\n        uint256 depth = self.depth;\n        require(\n            proofPathIndices.length == depth && proofSiblings.length == depth,\n            \"IncrementalBinaryTree: length of path is not correct\"\n        );\n\n        uint256 hash = leaf;\n\n        for (uint8 i = 0; i < depth; ) {\n            require(\n                proofSiblings[i] < SNARK_SCALAR_FIELD,\n                \"IncrementalBinaryTree: sibling node must be < SNARK_SCALAR_FIELD\"\n            );\n\n            if (proofPathIndices[i] == 0) {\n                hash = PoseidonT3.poseidon([hash, proofSiblings[i]]);\n            } else {\n                hash = PoseidonT3.poseidon([proofSiblings[i], hash]);\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        return hash == self.root;\n    }\n}\n"},"@openzeppelin/contracts/security/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256, /* firstTokenId */\n        uint256 batchSize\n    ) internal virtual {\n        if (batchSize > 1) {\n            if (from != address(0)) {\n                _balances[from] -= batchSize;\n            }\n            if (to != address(0)) {\n                _balances[to] += batchSize;\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/Counters.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"},"contracts/comman/FERC721URIStorage.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n     /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(\n            _isApprovedOrOwner(from, tokenId),\n            \"ERC721: transfer caller is not owner nor approved\"\n        );\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\n     * the storage mapping.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"},"contracts/Trustified-NonTransferable.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\nimport \"./comman/FERC721URIStorage.sol\";\n\ncontract TrustifiedNonTransferable is ERC721URIStorage {\n    using Counters for Counters.Counter;\n    Counters.Counter private _tokenIdCounter;\n    Counters.Counter private _eventIdCounter;\n\n    mapping(uint256 => uint256[]) public tokenIds;\n\n    mapping(uint256 => bool) private transferStatus;\n\n    event TokenMinted(address, uint256);\n    event TokenTransfered(address, address, uint256);\n\n    constructor() ERC721(\"Trustified\", \"TFN\") {}\n\n    function safeMint() public returns (uint256) {\n        uint256 tokenId = _tokenIdCounter.current();\n        _tokenIdCounter.increment();\n        _mint(address(this), tokenId);\n        return tokenId;\n    }\n\n     function safeMintBadge(string memory tokenURI) public returns (uint256) {\n        uint256 tokenId = _tokenIdCounter.current();\n        _tokenIdCounter.increment();\n        _mint(address(this), tokenId);\n        _setTokenURI(tokenId, tokenURI);\n        return tokenId;\n    }\n\n    function bulkMintERC721(uint256 quantity) public {\n        uint256 eventId = _eventIdCounter.current();\n        _eventIdCounter.increment();\n        for (uint256 i = 0; i < quantity; i++) {\n            uint256 tokenId = safeMint();\n            tokenIds[eventId].push(tokenId);\n        }\n        emit TokenMinted(msg.sender, eventId);\n    }\n\n\n    function bulkMintBadgesERC721(string memory tokenUri, uint256 quantity) public {\n        uint256 eventId = _eventIdCounter.current();\n        _eventIdCounter.increment();\n        for (uint256 i = 0; i < quantity; i++) {\n            uint256 tokenId = safeMintBadge(tokenUri);\n            tokenIds[eventId].push(tokenId);\n        }\n        emit TokenMinted(msg.sender, eventId);\n    }\n\n    function getTokenIds(uint256 eventId)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        return tokenIds[eventId];\n    }\n\n    function transferToken(\n        address from,\n        address to,\n        uint256 tokenId,\n        string memory tokenURI\n    ) public {\n        require(\n            transferStatus[tokenId] != true,\n            \"This token can not be transferred!\"\n        );\n        _setTokenURI(tokenId, tokenURI);\n        IERC721(address(this)).transferFrom(from, to, tokenId);\n        emit TokenTransfered(from, to, tokenId);\n        transferStatus[tokenId] = true;\n    }\n\n      function transferBadgesToken(address from, address to, uint256 tokenId) public {\n        require(\n            transferStatus[tokenId] != true,\n            \"This token can not be transferred!\"\n        );\n        IERC721(address(this)).transferFrom(from, to, tokenId);\n        emit TokenTransfered(from, to, tokenId);\n        transferStatus[tokenId] = true;\n    }\n}\n"},"contracts/Trustified.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\nimport \"./comman/FERC721URIStorage.sol\";\n\ncontract Trustified is ERC721URIStorage {\n    using Counters for Counters.Counter;\n    Counters.Counter private _tokenIdCounter;\n    Counters.Counter private _eventIdCounter;\n\n    mapping(uint256 => uint256[]) public tokenIds;\n\n    event TokenMinted(address, uint256);\n    event TokenTransfered(address, address, uint256);\n\n    constructor() ERC721(\"Trustified\", \"TFN\") {}\n\n    function safeMint() public returns (uint256) {\n        uint256 tokenId = _tokenIdCounter.current();\n        _tokenIdCounter.increment();\n        _mint(address(this), tokenId);\n\n        return tokenId;\n    }\n\n     function safeMintBadge(string memory tokenURI) public returns (uint256) {\n        uint256 tokenId = _tokenIdCounter.current();\n        _tokenIdCounter.increment();\n        _mint(address(this), tokenId);\n        _setTokenURI(tokenId, tokenURI);\n        return tokenId;\n    }\n\n\n    function bulkMintERC721(uint256 quantity) public {\n        uint256 eventId = _eventIdCounter.current();\n        _eventIdCounter.increment();\n        for (uint256 i = 0; i < quantity; i++) {\n            uint256 tokenId = safeMint();\n            tokenIds[eventId].push(tokenId);\n        }\n        emit TokenMinted(msg.sender, eventId);\n    }\n\n      function bulkMintBadgesERC721(string memory tokenUri, uint256 quantity) public {\n        uint256 eventId = _eventIdCounter.current();\n        _eventIdCounter.increment();\n        for (uint256 i = 0; i < quantity; i++) {\n            uint256 tokenId = safeMintBadge(tokenUri);\n            tokenIds[eventId].push(tokenId);\n        }\n        emit TokenMinted(msg.sender, eventId);\n    }\n\n    function getTokenIds(uint256 eventId)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        return tokenIds[eventId];\n    }\n\n    function transferToken(\n        address from,\n        address to,\n        uint256 tokenId,\n        string memory tokenURI\n    ) public {\n        _setTokenURI(tokenId, tokenURI);\n        IERC721(address(this)).transferFrom(from, to, tokenId);       \n        emit TokenTransfered(from, to, tokenId);\n    }\n\n      function transferBadgesToken(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public {\n        IERC721(address(this)).transferFrom(from, to, tokenId);\n        emit TokenTransfered(from, to, tokenId);\n    }\n}\n"},"contracts/TrustifiedCred.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@creds-protocol/contracts/CredsIssuer.sol\";\n\ncontract TrustifiedCred is CredsIssuer {\n    using Counters for Counters.Counter;\n    Counters.Counter private _credIds;\n\n    address public owner;\n\n    event CredCreated(address, uint256, uint256, uint256, string);\n    event IssueCred(address, uint256, uint256);\n\n    constructor(\n        Verifier[] memory _verifiers,\n        address _issuer,\n        string memory _issuerName,\n        string memory _issuerSymbol\n    ) CredsIssuer(_verifiers, _issuer, _issuerName, _issuerSymbol) {}\n\n    function issueCred(\n        uint256 merkleTreeDepth,\n        uint256 zeroValue,\n        string memory credURI\n    ) public {\n        uint256 _credId = _credIds.current();\n        _credIds.increment();\n        createCred(_credId, merkleTreeDepth, zeroValue, msg.sender, credURI);\n        emit CredCreated(\n            msg.sender,\n            _credId,\n            merkleTreeDepth,\n            zeroValue,\n            credURI\n        );\n    }\n\n    function claimCredToTrustifiedIssuer(\n        uint256 credId,\n        uint256 identityCommitment\n    ) public {\n        addIdentity(credId, identityCommitment);\n    }\n}\n"},"contracts/TrustifiedCreds.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./TrustifiedCred.sol\";\nimport \"@creds-protocol/contracts/interfaces/ICredential.sol\";\n\n\ncontract TrustifiedCreds is ICredential {\n    mapping(address => address[]) private credIssuers;\n\n    event createIssuer(address, address);\n\n    function createCredIssuer(\n        Verifier[] memory _verifiers,\n        address _issuer,\n        string memory _issuerName,\n        string memory _issuerSymbol\n    ) public {\n        address _address = address(\n            new TrustifiedCred(_verifiers, _issuer, _issuerName, _issuerSymbol)\n        ); \n\n        credIssuers[msg.sender].push(_address);\n        emit createIssuer(msg.sender, _address);\n    }\n}\n"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"6321","formattedMessage":"Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\n   --> @openzeppelin/contracts/utils/Address.sol:200:30:\n    |\n200 |     ) internal view returns (bytes memory) {\n    |                              ^^^^^^^^^^^^\n\n","message":"Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.","severity":"warning","sourceLocation":{"end":7658,"file":"@openzeppelin/contracts/utils/Address.sol","start":7646},"type":"Warning"},{"component":"general","errorCode":"6321","formattedMessage":"Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\n   --> @openzeppelin/contracts/utils/Address.sol:223:30:\n    |\n223 |     ) internal pure returns (bytes memory) {\n    |                              ^^^^^^^^^^^^\n\n","message":"Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.","severity":"warning","sourceLocation":{"end":8473,"file":"@openzeppelin/contracts/utils/Address.sol","start":8461},"type":"Warning"}],"sources":{"@creds-protocol/contracts/CredsIssuer.sol":{"ast":{"absolutePath":"@creds-protocol/contracts/CredsIssuer.sol","exportedSymbols":{"Context":[1152],"CredentialCore":[593],"CredentialCreds":[927],"CredsIssuer":[494],"CredsProtocolRegistry":[960],"ICredential":[1016],"ICredentialCore":[1025],"ICredentialCreds":[1105],"IVerifier":[1130],"IncrementalBinaryTree":[1649],"IncrementalTreeData":[1197],"PoseidonT3":[1165],"SNARK_SCALAR_FIELD":[499]},"id":495,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","0.8",".4"],"nodeType":"PragmaDirective","src":"32:22:0"},{"absolutePath":"@creds-protocol/contracts/interfaces/ICredential.sol","file":"./interfaces/ICredential.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":495,"sourceUnit":1017,"src":"56:38:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@creds-protocol/contracts/interfaces/IVerifier.sol","file":"./interfaces/IVerifier.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":495,"sourceUnit":1131,"src":"95:36:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@creds-protocol/contracts/base/CredentialCore.sol","file":"./base/CredentialCore.sol","id":4,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":495,"sourceUnit":594,"src":"132:35:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@creds-protocol/contracts/base/CredentialCreds.sol","file":"./base/CredentialCreds.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":495,"sourceUnit":928,"src":"168:36:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@creds-protocol/contracts/base/CredsProtocolRegistry.sol","file":"./base/CredsProtocolRegistry.sol","id":6,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":495,"sourceUnit":961,"src":"205:42:0","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":8,"name":"ICredential","nodeType":"IdentifierPath","referencedDeclaration":1016,"src":"296:11:0"},"id":9,"nodeType":"InheritanceSpecifier","src":"296:11:0"},{"baseName":{"id":10,"name":"CredentialCore","nodeType":"IdentifierPath","referencedDeclaration":593,"src":"309:14:0"},"id":11,"nodeType":"InheritanceSpecifier","src":"309:14:0"},{"baseName":{"id":12,"name":"CredentialCreds","nodeType":"IdentifierPath","referencedDeclaration":927,"src":"325:15:0"},"id":13,"nodeType":"InheritanceSpecifier","src":"325:15:0"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":7,"nodeType":"StructuredDocumentation","src":"249:23:0","text":"@title CredsIssuer"},"fullyImplemented":true,"id":494,"linearizedBaseContracts":[494,927,1105,1152,593,1025,1016],"name":"CredsIssuer","nameLocation":"281:11:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"4ce39ead","id":15,"mutability":"mutable","name":"credsIssuer","nameLocation":"367:11:0","nodeType":"VariableDeclaration","scope":494,"src":"352:26:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":14,"name":"address","nodeType":"ElementaryTypeName","src":"352:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"2e9868f8","id":17,"mutability":"mutable","name":"issuerName","nameLocation":"398:10:0","nodeType":"VariableDeclaration","scope":494,"src":"384:24:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":16,"name":"string","nodeType":"ElementaryTypeName","src":"384:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"public"},{"constant":false,"functionSelector":"439d7275","id":19,"mutability":"mutable","name":"issuerSymbol","nameLocation":"428:12:0","nodeType":"VariableDeclaration","scope":494,"src":"414:26:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":18,"name":"string","nodeType":"ElementaryTypeName","src":"414:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"public"},{"constant":false,"functionSelector":"eb496106","id":21,"mutability":"mutable","name":"credsIssuedCount","nameLocation":"461:16:0","nodeType":"VariableDeclaration","scope":494,"src":"446:31:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":20,"name":"uint256","nodeType":"ElementaryTypeName","src":"446:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"c308dd5b","id":24,"mutability":"mutable","name":"credsProtocolRegistry","nameLocation":"499:21:0","nodeType":"VariableDeclaration","scope":494,"src":"484:81:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":22,"name":"address","nodeType":"ElementaryTypeName","src":"484:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"hexValue":"307834313462383933353632663436663531383039373163333338393738344134343735383162326433","id":23,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"523:42:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0x414b893562f46f5180971c3389784A447581b2d3"},"visibility":"public"},{"constant":false,"documentation":{"id":25,"nodeType":"StructuredDocumentation","src":"572:60:0","text":"@dev Gets a tree depth and returns its verifier address."},"functionSelector":"ac1eff68","id":30,"mutability":"mutable","name":"verifiers","nameLocation":"674:9:0","nodeType":"VariableDeclaration","scope":494,"src":"637:46:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_contract$_IVerifier_$1130_$","typeString":"mapping(uint256 => contract IVerifier)"},"typeName":{"id":29,"keyType":{"id":26,"name":"uint256","nodeType":"ElementaryTypeName","src":"645:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"637:29:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_contract$_IVerifier_$1130_$","typeString":"mapping(uint256 => contract IVerifier)"},"valueType":{"id":28,"nodeType":"UserDefinedTypeName","pathNode":{"id":27,"name":"IVerifier","nodeType":"IdentifierPath","referencedDeclaration":1130,"src":"656:9:0"},"referencedDeclaration":1130,"src":"656:9:0","typeDescriptions":{"typeIdentifier":"t_contract$_IVerifier_$1130","typeString":"contract IVerifier"}}},"visibility":"public"},{"constant":false,"documentation":{"id":31,"nodeType":"StructuredDocumentation","src":"690:56:0","text":"@dev Gets a cred id and returns the cred parameters."},"functionSelector":"81cc7a45","id":36,"mutability":"mutable","name":"creds","nameLocation":"783:5:0","nodeType":"VariableDeclaration","scope":494,"src":"751:37:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Cred_$988_storage_$","typeString":"mapping(uint256 => struct ICredential.Cred)"},"typeName":{"id":35,"keyType":{"id":32,"name":"uint256","nodeType":"ElementaryTypeName","src":"759:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"751:24:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Cred_$988_storage_$","typeString":"mapping(uint256 => struct ICredential.Cred)"},"valueType":{"id":34,"nodeType":"UserDefinedTypeName","pathNode":{"id":33,"name":"Cred","nodeType":"IdentifierPath","referencedDeclaration":988,"src":"770:4:0"},"referencedDeclaration":988,"src":"770:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_Cred_$988_storage_ptr","typeString":"struct ICredential.Cred"}}},"visibility":"public"},{"body":{"id":49,"nodeType":"Block","src":"892:130:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":42,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":39,"name":"credsIssuer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":15,"src":"906:11:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":40,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1142,"src":"921:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"921:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"906:27:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":47,"nodeType":"IfStatement","src":"902:103:0","trueBody":{"id":46,"nodeType":"Block","src":"935:70:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":43,"name":"Credential__CallerIsNotTheCredIssuer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":965,"src":"956:36:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":44,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"956:38:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":45,"nodeType":"RevertStatement","src":"949:45:0"}]}},{"id":48,"nodeType":"PlaceholderStatement","src":"1014:1:0"}]},"documentation":{"id":37,"nodeType":"StructuredDocumentation","src":"799:61:0","text":"@dev Checks if the cred issuer is the transaction sender."},"id":50,"name":"onlyCredsIssuer","nameLocation":"874:15:0","nodeType":"ModifierDefinition","parameters":{"id":38,"nodeType":"ParameterList","parameters":[],"src":"889:2:0"},"src":"865:157:0","virtual":false,"visibility":"internal"},{"body":{"id":72,"nodeType":"Block","src":"1211:157:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"baseExpression":{"id":57,"name":"verifiers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"1233:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_contract$_IVerifier_$1130_$","typeString":"mapping(uint256 => contract IVerifier)"}},"id":59,"indexExpression":{"id":58,"name":"merkleTreeDepth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":53,"src":"1243:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1233:26:0","typeDescriptions":{"typeIdentifier":"t_contract$_IVerifier_$1130","typeString":"contract IVerifier"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IVerifier_$1130","typeString":"contract IVerifier"}],"id":56,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1225:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":55,"name":"address","nodeType":"ElementaryTypeName","src":"1225:7:0","typeDescriptions":{}}},"id":60,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1225:35:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":63,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1272:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":62,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1264:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":61,"name":"address","nodeType":"ElementaryTypeName","src":"1264:7:0","typeDescriptions":{}}},"id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1264:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1225:49:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":70,"nodeType":"IfStatement","src":"1221:130:0","trueBody":{"id":69,"nodeType":"Block","src":"1276:75:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":66,"name":"Credential__MerkleTreeDepthIsNotSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"1297:41:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":67,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1297:43:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":68,"nodeType":"RevertStatement","src":"1290:50:0"}]}},{"id":71,"nodeType":"PlaceholderStatement","src":"1360:1:0"}]},"documentation":{"id":51,"nodeType":"StructuredDocumentation","src":"1028:115:0","text":"@dev Checks if there is a verifier for the given tree depth.\n @param merkleTreeDepth: Depth of the tree."},"id":73,"name":"onlySupportedMerkleTreeDepth","nameLocation":"1157:28:0","nodeType":"ModifierDefinition","parameters":{"id":54,"nodeType":"ParameterList","parameters":[{"constant":false,"id":53,"mutability":"mutable","name":"merkleTreeDepth","nameLocation":"1194:15:0","nodeType":"VariableDeclaration","scope":73,"src":"1186:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":52,"name":"uint256","nodeType":"ElementaryTypeName","src":"1186:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1185:25:0"},"src":"1148:220:0","virtual":false,"visibility":"internal"},{"body":{"id":144,"nodeType":"Block","src":"1711:490:0","statements":[{"body":{"id":113,"nodeType":"Block","src":"1764:168:0","statements":[{"expression":{"id":107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":95,"name":"verifiers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"1778:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_contract$_IVerifier_$1130_$","typeString":"mapping(uint256 => contract IVerifier)"}},"id":100,"indexExpression":{"expression":{"baseExpression":{"id":96,"name":"_verifiers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":78,"src":"1788:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr","typeString":"struct ICredential.Verifier memory[] memory"}},"id":98,"indexExpression":{"id":97,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":88,"src":"1799:1:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1788:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_Verifier_$993_memory_ptr","typeString":"struct ICredential.Verifier memory"}},"id":99,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"merkleTreeDepth","nodeType":"MemberAccess","referencedDeclaration":992,"src":"1788:29:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1778:40:0","typeDescriptions":{"typeIdentifier":"t_contract$_IVerifier_$1130","typeString":"contract IVerifier"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"baseExpression":{"id":102,"name":"_verifiers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":78,"src":"1831:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr","typeString":"struct ICredential.Verifier memory[] memory"}},"id":104,"indexExpression":{"id":103,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":88,"src":"1842:1:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1831:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_Verifier_$993_memory_ptr","typeString":"struct ICredential.Verifier memory"}},"id":105,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"contractAddress","nodeType":"MemberAccess","referencedDeclaration":990,"src":"1831:29:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":101,"name":"IVerifier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1130,"src":"1821:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IVerifier_$1130_$","typeString":"type(contract IVerifier)"}},"id":106,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1821:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IVerifier_$1130","typeString":"contract IVerifier"}},"src":"1778:83:0","typeDescriptions":{"typeIdentifier":"t_contract$_IVerifier_$1130","typeString":"contract IVerifier"}},"id":108,"nodeType":"ExpressionStatement","src":"1778:83:0"},{"id":112,"nodeType":"UncheckedBlock","src":"1876:46:0","statements":[{"expression":{"id":110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"1904:3:0","subExpression":{"id":109,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":88,"src":"1906:1:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":111,"nodeType":"ExpressionStatement","src":"1904:3:0"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":94,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":91,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":88,"src":"1739:1:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":92,"name":"_verifiers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":78,"src":"1743:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr","typeString":"struct ICredential.Verifier memory[] memory"}},"id":93,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1743:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1739:21:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":114,"initializationExpression":{"assignments":[88],"declarations":[{"constant":false,"id":88,"mutability":"mutable","name":"i","nameLocation":"1732:1:0","nodeType":"VariableDeclaration","scope":114,"src":"1726:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":87,"name":"uint8","nodeType":"ElementaryTypeName","src":"1726:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":90,"initialValue":{"hexValue":"30","id":89,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1736:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1726:11:0"},"nodeType":"ForStatement","src":"1721:211:0"},{"expression":{"id":117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":115,"name":"credsIssuer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":15,"src":"1941:11:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":116,"name":"_issuer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"1955:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1941:21:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":118,"nodeType":"ExpressionStatement","src":"1941:21:0"},{"expression":{"id":121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":119,"name":"issuerName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":17,"src":"1972:10:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":120,"name":"_issuerName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"1984:11:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1972:23:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":122,"nodeType":"ExpressionStatement","src":"1972:23:0"},{"expression":{"id":125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":123,"name":"issuerSymbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19,"src":"2005:12:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":124,"name":"_issuerSymbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"2019:13:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2005:27:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":126,"nodeType":"ExpressionStatement","src":"2005:27:0"},{"expression":{"arguments":[{"id":131,"name":"_issuer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"2103:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":134,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2120:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_CredsIssuer_$494","typeString":"contract CredsIssuer"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CredsIssuer_$494","typeString":"contract CredsIssuer"}],"id":133,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2112:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":132,"name":"address","nodeType":"ElementaryTypeName","src":"2112:7:0","typeDescriptions":{}}},"id":135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2112:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":128,"name":"credsProtocolRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"2065:21:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":127,"name":"CredsProtocolRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":960,"src":"2043:21:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_CredsProtocolRegistry_$960_$","typeString":"type(contract CredsProtocolRegistry)"}},"id":129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2043:44:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_CredsProtocolRegistry_$960","typeString":"contract CredsProtocolRegistry"}},"id":130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"registerIssuer","nodeType":"MemberAccess","referencedDeclaration":959,"src":"2043:59:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) external"}},"id":136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2043:83:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":137,"nodeType":"ExpressionStatement","src":"2043:83:0"},{"eventCall":{"arguments":[{"id":139,"name":"_issuer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"2158:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":140,"name":"_issuerName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"2167:11:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":141,"name":"_issuerSymbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"2180:13:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":138,"name":"issuerRegistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1002,"src":"2141:16:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (address,string memory,string memory)"}},"id":142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2141:53:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":143,"nodeType":"EmitStatement","src":"2136:58:0"}]},"documentation":{"id":74,"nodeType":"StructuredDocumentation","src":"1374:179:0","text":"@dev Initializes the Credential verifiers used to verify the user's ZK proofs.\n @param _verifiers: List of Credential verifiers (address and related Merkle tree depth)."},"id":145,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":85,"nodeType":"ParameterList","parameters":[{"constant":false,"id":78,"mutability":"mutable","name":"_verifiers","nameLocation":"1597:10:0","nodeType":"VariableDeclaration","scope":145,"src":"1579:28:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr","typeString":"struct ICredential.Verifier[]"},"typeName":{"baseType":{"id":76,"nodeType":"UserDefinedTypeName","pathNode":{"id":75,"name":"Verifier","nodeType":"IdentifierPath","referencedDeclaration":993,"src":"1579:8:0"},"referencedDeclaration":993,"src":"1579:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_Verifier_$993_storage_ptr","typeString":"struct ICredential.Verifier"}},"id":77,"nodeType":"ArrayTypeName","src":"1579:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Verifier_$993_storage_$dyn_storage_ptr","typeString":"struct ICredential.Verifier[]"}},"visibility":"internal"},{"constant":false,"id":80,"mutability":"mutable","name":"_issuer","nameLocation":"1625:7:0","nodeType":"VariableDeclaration","scope":145,"src":"1617:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":79,"name":"address","nodeType":"ElementaryTypeName","src":"1617:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":82,"mutability":"mutable","name":"_issuerName","nameLocation":"1656:11:0","nodeType":"VariableDeclaration","scope":145,"src":"1642:25:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":81,"name":"string","nodeType":"ElementaryTypeName","src":"1642:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":84,"mutability":"mutable","name":"_issuerSymbol","nameLocation":"1691:13:0","nodeType":"VariableDeclaration","scope":145,"src":"1677:27:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":83,"name":"string","nodeType":"ElementaryTypeName","src":"1677:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1569:136:0"},"returnParameters":{"id":86,"nodeType":"ParameterList","parameters":[],"src":"1711:0:0"},"scope":494,"src":"1558:643:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":196,"nodeType":"Block","src":"2426:256:0","statements":[{"expression":{"arguments":[{"expression":{"id":162,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2448:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2448:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":164,"name":"credId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"2460:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":165,"name":"merkleTreeDepth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":149,"src":"2468:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":166,"name":"zeroValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":151,"src":"2485:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":161,"name":"_createCred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":661,"src":"2436:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256,uint256)"}},"id":167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2436:59:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":168,"nodeType":"ExpressionStatement","src":"2436:59:0"},{"expression":{"id":174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":169,"name":"creds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":36,"src":"2506:5:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Cred_$988_storage_$","typeString":"mapping(uint256 => struct ICredential.Cred storage ref)"}},"id":171,"indexExpression":{"id":170,"name":"credId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"2512:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2506:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_Cred_$988_storage","typeString":"struct ICredential.Cred storage ref"}},"id":172,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"admin","nodeType":"MemberAccess","referencedDeclaration":975,"src":"2506:19:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":173,"name":"admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":153,"src":"2528:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2506:27:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":175,"nodeType":"ExpressionStatement","src":"2506:27:0"},{"expression":{"id":181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":176,"name":"creds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":36,"src":"2543:5:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Cred_$988_storage_$","typeString":"mapping(uint256 => struct ICredential.Cred storage ref)"}},"id":178,"indexExpression":{"id":177,"name":"credId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"2549:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2543:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_Cred_$988_storage","typeString":"struct ICredential.Cred storage ref"}},"id":179,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"credURI","nodeType":"MemberAccess","referencedDeclaration":977,"src":"2543:21:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":180,"name":"credURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":155,"src":"2567:7:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2543:31:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":182,"nodeType":"ExpressionStatement","src":"2543:31:0"},{"expression":{"id":188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":183,"name":"creds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":36,"src":"2584:5:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Cred_$988_storage_$","typeString":"mapping(uint256 => struct ICredential.Cred storage ref)"}},"id":185,"indexExpression":{"id":184,"name":"credId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"2590:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2584:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_Cred_$988_storage","typeString":"struct ICredential.Cred storage ref"}},"id":186,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"merkleRootDuration","nodeType":"MemberAccess","referencedDeclaration":979,"src":"2584:32:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2619:7:0","subdenomination":"hours","typeDescriptions":{"typeIdentifier":"t_rational_3600_by_1","typeString":"int_const 3600"},"value":"1"},"src":"2584:42:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":189,"nodeType":"ExpressionStatement","src":"2584:42:0"},{"expression":{"id":194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":190,"name":"credsIssuedCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"2636:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":191,"name":"credsIssuedCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"2655:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2674:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2655:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2636:39:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":195,"nodeType":"ExpressionStatement","src":"2636:39:0"}]},"id":197,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":158,"name":"merkleTreeDepth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":149,"src":"2409:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":159,"kind":"modifierInvocation","modifierName":{"id":157,"name":"onlySupportedMerkleTreeDepth","nodeType":"IdentifierPath","referencedDeclaration":73,"src":"2380:28:0"},"nodeType":"ModifierInvocation","src":"2380:45:0"}],"name":"createCred","nameLocation":"2216:10:0","nodeType":"FunctionDefinition","parameters":{"id":156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":147,"mutability":"mutable","name":"credId","nameLocation":"2244:6:0","nodeType":"VariableDeclaration","scope":197,"src":"2236:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":146,"name":"uint256","nodeType":"ElementaryTypeName","src":"2236:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":149,"mutability":"mutable","name":"merkleTreeDepth","nameLocation":"2268:15:0","nodeType":"VariableDeclaration","scope":197,"src":"2260:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":148,"name":"uint256","nodeType":"ElementaryTypeName","src":"2260:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":151,"mutability":"mutable","name":"zeroValue","nameLocation":"2301:9:0","nodeType":"VariableDeclaration","scope":197,"src":"2293:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":150,"name":"uint256","nodeType":"ElementaryTypeName","src":"2293:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":153,"mutability":"mutable","name":"admin","nameLocation":"2328:5:0","nodeType":"VariableDeclaration","scope":197,"src":"2320:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":152,"name":"address","nodeType":"ElementaryTypeName","src":"2320:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":155,"mutability":"mutable","name":"credURI","nameLocation":"2357:7:0","nodeType":"VariableDeclaration","scope":197,"src":"2343:21:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":154,"name":"string","nodeType":"ElementaryTypeName","src":"2343:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2226:144:0"},"returnParameters":{"id":160,"nodeType":"ParameterList","parameters":[],"src":"2426:0:0"},"scope":494,"src":"2207:475:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":250,"nodeType":"Block","src":"2947:271:0","statements":[{"expression":{"arguments":[{"expression":{"id":216,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2969:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2969:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":218,"name":"credId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":199,"src":"2981:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":219,"name":"merkleTreeDepth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":201,"src":"2989:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":220,"name":"zeroValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":203,"src":"3006:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":215,"name":"_createCred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":661,"src":"2957:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256,uint256)"}},"id":221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2957:59:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":222,"nodeType":"ExpressionStatement","src":"2957:59:0"},{"expression":{"id":228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":223,"name":"creds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":36,"src":"3027:5:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Cred_$988_storage_$","typeString":"mapping(uint256 => struct ICredential.Cred storage ref)"}},"id":225,"indexExpression":{"id":224,"name":"credId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":199,"src":"3033:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3027:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_Cred_$988_storage","typeString":"struct ICredential.Cred storage ref"}},"id":226,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"admin","nodeType":"MemberAccess","referencedDeclaration":975,"src":"3027:19:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":227,"name":"admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":205,"src":"3049:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3027:27:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":229,"nodeType":"ExpressionStatement","src":"3027:27:0"},{"expression":{"id":235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":230,"name":"creds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":36,"src":"3064:5:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Cred_$988_storage_$","typeString":"mapping(uint256 => struct ICredential.Cred storage ref)"}},"id":232,"indexExpression":{"id":231,"name":"credId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":199,"src":"3070:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3064:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_Cred_$988_storage","typeString":"struct ICredential.Cred storage ref"}},"id":233,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"credURI","nodeType":"MemberAccess","referencedDeclaration":977,"src":"3064:21:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":234,"name":"credURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":209,"src":"3088:7:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"3064:31:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":236,"nodeType":"ExpressionStatement","src":"3064:31:0"},{"expression":{"id":242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":237,"name":"creds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":36,"src":"3105:5:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Cred_$988_storage_$","typeString":"mapping(uint256 => struct ICredential.Cred storage ref)"}},"id":239,"indexExpression":{"id":238,"name":"credId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":199,"src":"3111:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3105:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_Cred_$988_storage","typeString":"struct ICredential.Cred storage ref"}},"id":240,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"merkleRootDuration","nodeType":"MemberAccess","referencedDeclaration":979,"src":"3105:32:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":241,"name":"merkleTreeRootDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":207,"src":"3140:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3105:57:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":243,"nodeType":"ExpressionStatement","src":"3105:57:0"},{"expression":{"id":248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":244,"name":"credsIssuedCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"3172:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":245,"name":"credsIssuedCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"3191:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3210:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3191:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3172:39:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":249,"nodeType":"ExpressionStatement","src":"3172:39:0"}]},"id":251,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":212,"name":"merkleTreeDepth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":201,"src":"2930:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":213,"kind":"modifierInvocation","modifierName":{"id":211,"name":"onlySupportedMerkleTreeDepth","nodeType":"IdentifierPath","referencedDeclaration":73,"src":"2901:28:0"},"nodeType":"ModifierInvocation","src":"2901:45:0"}],"name":"createCred","nameLocation":"2697:10:0","nodeType":"FunctionDefinition","parameters":{"id":210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":199,"mutability":"mutable","name":"credId","nameLocation":"2725:6:0","nodeType":"VariableDeclaration","scope":251,"src":"2717:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":198,"name":"uint256","nodeType":"ElementaryTypeName","src":"2717:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":201,"mutability":"mutable","name":"merkleTreeDepth","nameLocation":"2749:15:0","nodeType":"VariableDeclaration","scope":251,"src":"2741:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":200,"name":"uint256","nodeType":"ElementaryTypeName","src":"2741:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":203,"mutability":"mutable","name":"zeroValue","nameLocation":"2782:9:0","nodeType":"VariableDeclaration","scope":251,"src":"2774:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":202,"name":"uint256","nodeType":"ElementaryTypeName","src":"2774:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":205,"mutability":"mutable","name":"admin","nameLocation":"2809:5:0","nodeType":"VariableDeclaration","scope":251,"src":"2801:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":204,"name":"address","nodeType":"ElementaryTypeName","src":"2801:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":207,"mutability":"mutable","name":"merkleTreeRootDuration","nameLocation":"2832:22:0","nodeType":"VariableDeclaration","scope":251,"src":"2824:30:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":206,"name":"uint256","nodeType":"ElementaryTypeName","src":"2824:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":209,"mutability":"mutable","name":"credURI","nameLocation":"2878:7:0","nodeType":"VariableDeclaration","scope":251,"src":"2864:21:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":208,"name":"string","nodeType":"ElementaryTypeName","src":"2864:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2707:184:0"},"returnParameters":{"id":214,"nodeType":"ParameterList","parameters":[],"src":"2947:0:0"},"scope":494,"src":"2688:530:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":279,"nodeType":"Block","src":"3298:200:0","statements":[{"expression":{"arguments":[{"id":259,"name":"credId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":253,"src":"3321:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":260,"name":"identityCommitment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":255,"src":"3329:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":258,"name":"_addIdentity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":708,"src":"3308:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3308:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":262,"nodeType":"ExpressionStatement","src":"3308:40:0"},{"assignments":[264],"declarations":[{"constant":false,"id":264,"mutability":"mutable","name":"merkleTreeRoot","nameLocation":"3367:14:0","nodeType":"VariableDeclaration","scope":279,"src":"3359:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":263,"name":"uint256","nodeType":"ElementaryTypeName","src":"3359:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":268,"initialValue":{"arguments":[{"id":266,"name":"credId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":253,"src":"3402:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":265,"name":"getMerkleTreeRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"3384:17:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3384:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3359:50:0"},{"expression":{"id":277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":269,"name":"creds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":36,"src":"3420:5:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Cred_$988_storage_$","typeString":"mapping(uint256 => struct ICredential.Cred storage ref)"}},"id":271,"indexExpression":{"id":270,"name":"credId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":253,"src":"3426:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3420:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_Cred_$988_storage","typeString":"struct ICredential.Cred storage ref"}},"id":272,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"merkleRootCreationDates","nodeType":"MemberAccess","referencedDeclaration":983,"src":"3420:37:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":274,"indexExpression":{"id":273,"name":"merkleTreeRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":264,"src":"3458:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3420:53:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":275,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3476:5:0","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"3476:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3420:71:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":278,"nodeType":"ExpressionStatement","src":"3420:71:0"}]},"id":280,"implemented":true,"kind":"function","modifiers":[],"name":"addIdentity","nameLocation":"3233:11:0","nodeType":"FunctionDefinition","parameters":{"id":256,"nodeType":"ParameterList","parameters":[{"constant":false,"id":253,"mutability":"mutable","name":"credId","nameLocation":"3253:6:0","nodeType":"VariableDeclaration","scope":280,"src":"3245:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":252,"name":"uint256","nodeType":"ElementaryTypeName","src":"3245:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":255,"mutability":"mutable","name":"identityCommitment","nameLocation":"3269:18:0","nodeType":"VariableDeclaration","scope":280,"src":"3261:26:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":254,"name":"uint256","nodeType":"ElementaryTypeName","src":"3261:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3244:44:0"},"returnParameters":{"id":257,"nodeType":"ParameterList","parameters":[],"src":"3298:0:0"},"scope":494,"src":"3224:274:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":325,"nodeType":"Block","src":"3604:340:0","statements":[{"body":{"id":307,"nodeType":"Block","src":"3666:129:0","statements":[{"expression":{"arguments":[{"id":297,"name":"credId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"3693:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":298,"name":"identityCommitments","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":285,"src":"3701:19:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":300,"indexExpression":{"id":299,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":289,"src":"3721:1:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3701:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":296,"name":"_addIdentity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":708,"src":"3680:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":301,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3680:44:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":302,"nodeType":"ExpressionStatement","src":"3680:44:0"},{"id":306,"nodeType":"UncheckedBlock","src":"3739:46:0","statements":[{"expression":{"id":304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"3767:3:0","subExpression":{"id":303,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":289,"src":"3769:1:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":305,"nodeType":"ExpressionStatement","src":"3767:3:0"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":292,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":289,"src":"3632:1:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":293,"name":"identityCommitments","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":285,"src":"3636:19:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"3636:26:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3632:30:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":308,"initializationExpression":{"assignments":[289],"declarations":[{"constant":false,"id":289,"mutability":"mutable","name":"i","nameLocation":"3625:1:0","nodeType":"VariableDeclaration","scope":308,"src":"3619:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":288,"name":"uint8","nodeType":"ElementaryTypeName","src":"3619:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":291,"initialValue":{"hexValue":"30","id":290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3629:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3619:11:0"},"nodeType":"ForStatement","src":"3614:181:0"},{"assignments":[310],"declarations":[{"constant":false,"id":310,"mutability":"mutable","name":"merkleTreeRoot","nameLocation":"3813:14:0","nodeType":"VariableDeclaration","scope":325,"src":"3805:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":309,"name":"uint256","nodeType":"ElementaryTypeName","src":"3805:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":314,"initialValue":{"arguments":[{"id":312,"name":"credId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"3848:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":311,"name":"getMerkleTreeRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"3830:17:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":313,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3830:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3805:50:0"},{"expression":{"id":323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":315,"name":"creds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":36,"src":"3866:5:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Cred_$988_storage_$","typeString":"mapping(uint256 => struct ICredential.Cred storage ref)"}},"id":317,"indexExpression":{"id":316,"name":"credId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"3872:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3866:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_Cred_$988_storage","typeString":"struct ICredential.Cred storage ref"}},"id":318,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"merkleRootCreationDates","nodeType":"MemberAccess","referencedDeclaration":983,"src":"3866:37:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":320,"indexExpression":{"id":319,"name":"merkleTreeRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":310,"src":"3904:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3866:53:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":321,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3922:5:0","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"3922:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3866:71:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":324,"nodeType":"ExpressionStatement","src":"3866:71:0"}]},"id":326,"implemented":true,"kind":"function","modifiers":[],"name":"addIdentities","nameLocation":"3513:13:0","nodeType":"FunctionDefinition","parameters":{"id":286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":282,"mutability":"mutable","name":"credId","nameLocation":"3535:6:0","nodeType":"VariableDeclaration","scope":326,"src":"3527:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":281,"name":"uint256","nodeType":"ElementaryTypeName","src":"3527:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":285,"mutability":"mutable","name":"identityCommitments","nameLocation":"3562:19:0","nodeType":"VariableDeclaration","scope":326,"src":"3543:38:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":283,"name":"uint256","nodeType":"ElementaryTypeName","src":"3543:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":284,"nodeType":"ArrayTypeName","src":"3543:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3526:56:0"},"returnParameters":{"id":287,"nodeType":"ParameterList","parameters":[],"src":"3604:0:0"},"scope":494,"src":"3504:440:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":349,"nodeType":"Block","src":"4173:116:0","statements":[{"expression":{"arguments":[{"id":342,"name":"credId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":328,"src":"4199:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":343,"name":"identityCommitment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":330,"src":"4207:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":344,"name":"newIdentityCommitment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":332,"src":"4227:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":345,"name":"proofSiblings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"4250:13:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":346,"name":"proofPathIndices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":338,"src":"4265:16:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_calldata_ptr","typeString":"uint8[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint8_$dyn_calldata_ptr","typeString":"uint8[] calldata"}],"id":341,"name":"_updateIdentity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"4183:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_array$_t_uint256_$dyn_calldata_ptr_$_t_array$_t_uint8_$dyn_calldata_ptr_$returns$__$","typeString":"function (uint256,uint256,uint256,uint256[] calldata,uint8[] calldata)"}},"id":347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4183:99:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":348,"nodeType":"ExpressionStatement","src":"4183:99:0"}]},"id":350,"implemented":true,"kind":"function","modifiers":[],"name":"updateIdentity","nameLocation":"3959:14:0","nodeType":"FunctionDefinition","parameters":{"id":339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":328,"mutability":"mutable","name":"credId","nameLocation":"3991:6:0","nodeType":"VariableDeclaration","scope":350,"src":"3983:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":327,"name":"uint256","nodeType":"ElementaryTypeName","src":"3983:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":330,"mutability":"mutable","name":"identityCommitment","nameLocation":"4015:18:0","nodeType":"VariableDeclaration","scope":350,"src":"4007:26:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":329,"name":"uint256","nodeType":"ElementaryTypeName","src":"4007:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":332,"mutability":"mutable","name":"newIdentityCommitment","nameLocation":"4051:21:0","nodeType":"VariableDeclaration","scope":350,"src":"4043:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":331,"name":"uint256","nodeType":"ElementaryTypeName","src":"4043:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":335,"mutability":"mutable","name":"proofSiblings","nameLocation":"4101:13:0","nodeType":"VariableDeclaration","scope":350,"src":"4082:32:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":333,"name":"uint256","nodeType":"ElementaryTypeName","src":"4082:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":334,"nodeType":"ArrayTypeName","src":"4082:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":338,"mutability":"mutable","name":"proofPathIndices","nameLocation":"4141:16:0","nodeType":"VariableDeclaration","scope":350,"src":"4124:33:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_calldata_ptr","typeString":"uint8[]"},"typeName":{"baseType":{"id":336,"name":"uint8","nodeType":"ElementaryTypeName","src":"4124:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":337,"nodeType":"ArrayTypeName","src":"4124:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_storage_ptr","typeString":"uint8[]"}},"visibility":"internal"}],"src":"3973:190:0"},"returnParameters":{"id":340,"nodeType":"ParameterList","parameters":[],"src":"4173:0:0"},"scope":494,"src":"3950:339:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":370,"nodeType":"Block","src":"4479:93:0","statements":[{"expression":{"arguments":[{"id":364,"name":"credId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":352,"src":"4505:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":365,"name":"identityCommitment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":354,"src":"4513:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":366,"name":"proofSiblings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":357,"src":"4533:13:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":367,"name":"proofPathIndices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":360,"src":"4548:16:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_calldata_ptr","typeString":"uint8[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint8_$dyn_calldata_ptr","typeString":"uint8[] calldata"}],"id":363,"name":"_removeIdentity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":818,"src":"4489:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_array$_t_uint256_$dyn_calldata_ptr_$_t_array$_t_uint8_$dyn_calldata_ptr_$returns$__$","typeString":"function (uint256,uint256,uint256[] calldata,uint8[] calldata)"}},"id":368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4489:76:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":369,"nodeType":"ExpressionStatement","src":"4489:76:0"}]},"id":371,"implemented":true,"kind":"function","modifiers":[],"name":"removeIdentity","nameLocation":"4304:14:0","nodeType":"FunctionDefinition","parameters":{"id":361,"nodeType":"ParameterList","parameters":[{"constant":false,"id":352,"mutability":"mutable","name":"credId","nameLocation":"4336:6:0","nodeType":"VariableDeclaration","scope":371,"src":"4328:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":351,"name":"uint256","nodeType":"ElementaryTypeName","src":"4328:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":354,"mutability":"mutable","name":"identityCommitment","nameLocation":"4360:18:0","nodeType":"VariableDeclaration","scope":371,"src":"4352:26:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":353,"name":"uint256","nodeType":"ElementaryTypeName","src":"4352:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":357,"mutability":"mutable","name":"proofSiblings","nameLocation":"4407:13:0","nodeType":"VariableDeclaration","scope":371,"src":"4388:32:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":355,"name":"uint256","nodeType":"ElementaryTypeName","src":"4388:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":356,"nodeType":"ArrayTypeName","src":"4388:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":360,"mutability":"mutable","name":"proofPathIndices","nameLocation":"4447:16:0","nodeType":"VariableDeclaration","scope":371,"src":"4430:33:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_calldata_ptr","typeString":"uint8[]"},"typeName":{"baseType":{"id":358,"name":"uint8","nodeType":"ElementaryTypeName","src":"4430:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":359,"nodeType":"ArrayTypeName","src":"4430:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_storage_ptr","typeString":"uint8[]"}},"visibility":"internal"}],"src":"4318:151:0"},"returnParameters":{"id":362,"nodeType":"ParameterList","parameters":[],"src":"4479:0:0"},"scope":494,"src":"4295:277:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":492,"nodeType":"Block","src":"4795:1224:0","statements":[{"assignments":[389],"declarations":[{"constant":false,"id":389,"mutability":"mutable","name":"currentMerkleTreeRoot","nameLocation":"4813:21:0","nodeType":"VariableDeclaration","scope":492,"src":"4805:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":388,"name":"uint256","nodeType":"ElementaryTypeName","src":"4805:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":393,"initialValue":{"arguments":[{"id":391,"name":"credId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":373,"src":"4855:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":390,"name":"getMerkleTreeRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"4837:17:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":392,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4837:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4805:57:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":394,"name":"currentMerkleTreeRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":389,"src":"4877:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4902:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4877:26:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":401,"nodeType":"IfStatement","src":"4873:94:0","trueBody":{"id":400,"nodeType":"Block","src":"4905:62:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":397,"name":"Credential__CredDoesNotExist","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1030,"src":"4926:28:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":398,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4926:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":399,"nodeType":"RevertStatement","src":"4919:37:0"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":402,"name":"merkleTreeRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":375,"src":"4981:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":403,"name":"currentMerkleTreeRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":389,"src":"4999:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4981:39:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":441,"nodeType":"IfStatement","src":"4977:522:0","trueBody":{"id":440,"nodeType":"Block","src":"5022:477:0","statements":[{"assignments":[406],"declarations":[{"constant":false,"id":406,"mutability":"mutable","name":"merkleRootCreationDate","nameLocation":"5044:22:0","nodeType":"VariableDeclaration","scope":440,"src":"5036:30:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":405,"name":"uint256","nodeType":"ElementaryTypeName","src":"5036:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":413,"initialValue":{"baseExpression":{"expression":{"baseExpression":{"id":407,"name":"creds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":36,"src":"5069:5:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Cred_$988_storage_$","typeString":"mapping(uint256 => struct ICredential.Cred storage ref)"}},"id":409,"indexExpression":{"id":408,"name":"credId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":373,"src":"5075:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5069:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_Cred_$988_storage","typeString":"struct ICredential.Cred storage ref"}},"id":410,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"merkleRootCreationDates","nodeType":"MemberAccess","referencedDeclaration":983,"src":"5069:37:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":412,"indexExpression":{"id":411,"name":"merkleTreeRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":375,"src":"5107:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5069:53:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5036:86:0"},{"assignments":[415],"declarations":[{"constant":false,"id":415,"mutability":"mutable","name":"merkleRootDuration","nameLocation":"5144:18:0","nodeType":"VariableDeclaration","scope":440,"src":"5136:26:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":414,"name":"uint256","nodeType":"ElementaryTypeName","src":"5136:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":420,"initialValue":{"expression":{"baseExpression":{"id":416,"name":"creds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":36,"src":"5165:5:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Cred_$988_storage_$","typeString":"mapping(uint256 => struct ICredential.Cred storage ref)"}},"id":418,"indexExpression":{"id":417,"name":"credId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":373,"src":"5171:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5165:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_Cred_$988_storage","typeString":"struct ICredential.Cred storage ref"}},"id":419,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"merkleRootDuration","nodeType":"MemberAccess","referencedDeclaration":979,"src":"5165:32:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5136:61:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":421,"name":"merkleRootCreationDate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":406,"src":"5216:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5242:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5216:27:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":428,"nodeType":"IfStatement","src":"5212:119:0","trueBody":{"id":427,"nodeType":"Block","src":"5245:86:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":424,"name":"Credential__MerkleTreeRootIsNotPartOfTheCred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":971,"src":"5270:44:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":425,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5270:46:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":426,"nodeType":"RevertStatement","src":"5263:53:0"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":429,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5349:5:0","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"5349:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":431,"name":"merkleRootCreationDate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":406,"src":"5367:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":432,"name":"merkleRootDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":415,"src":"5392:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5367:43:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5349:61:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":439,"nodeType":"IfStatement","src":"5345:144:0","trueBody":{"id":438,"nodeType":"Block","src":"5412:77:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":435,"name":"Credential__MerkleTreeRootIsExpired","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"5437:35:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5437:37:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":437,"nodeType":"RevertStatement","src":"5430:44:0"}]}}]}},{"condition":{"baseExpression":{"expression":{"baseExpression":{"id":442,"name":"creds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":36,"src":"5513:5:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Cred_$988_storage_$","typeString":"mapping(uint256 => struct ICredential.Cred storage ref)"}},"id":444,"indexExpression":{"id":443,"name":"credId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":373,"src":"5519:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5513:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_Cred_$988_storage","typeString":"struct ICredential.Cred storage ref"}},"id":445,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"nullifierHashes","nodeType":"MemberAccess","referencedDeclaration":987,"src":"5513:29:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":447,"indexExpression":{"id":446,"name":"nullifierHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":379,"src":"5543:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5513:44:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":452,"nodeType":"IfStatement","src":"5509:128:0","trueBody":{"id":451,"nodeType":"Block","src":"5559:78:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":448,"name":"Credential__YouAreUsingTheSameNillifierTwice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":973,"src":"5580:44:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":449,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5580:46:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":450,"nodeType":"RevertStatement","src":"5573:53:0"}]}},{"assignments":[454],"declarations":[{"constant":false,"id":454,"mutability":"mutable","name":"merkleTreeDepth","nameLocation":"5655:15:0","nodeType":"VariableDeclaration","scope":492,"src":"5647:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":453,"name":"uint256","nodeType":"ElementaryTypeName","src":"5647:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":458,"initialValue":{"arguments":[{"id":456,"name":"credId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":373,"src":"5692:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":455,"name":"getMerkleTreeDepth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":848,"src":"5673:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":457,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5673:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5647:52:0"},{"assignments":[461],"declarations":[{"constant":false,"id":461,"mutability":"mutable","name":"verifier","nameLocation":"5720:8:0","nodeType":"VariableDeclaration","scope":492,"src":"5710:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVerifier_$1130","typeString":"contract IVerifier"},"typeName":{"id":460,"nodeType":"UserDefinedTypeName","pathNode":{"id":459,"name":"IVerifier","nodeType":"IdentifierPath","referencedDeclaration":1130,"src":"5710:9:0"},"referencedDeclaration":1130,"src":"5710:9:0","typeDescriptions":{"typeIdentifier":"t_contract$_IVerifier_$1130","typeString":"contract IVerifier"}},"visibility":"internal"}],"id":465,"initialValue":{"baseExpression":{"id":462,"name":"verifiers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"5731:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_contract$_IVerifier_$1130_$","typeString":"mapping(uint256 => contract IVerifier)"}},"id":464,"indexExpression":{"id":463,"name":"merkleTreeDepth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"5741:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5731:26:0","typeDescriptions":{"typeIdentifier":"t_contract$_IVerifier_$1130","typeString":"contract IVerifier"}},"nodeType":"VariableDeclarationStatement","src":"5710:47:0"},{"expression":{"arguments":[{"id":467,"name":"signal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":377,"src":"5781:6:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":468,"name":"merkleTreeRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":375,"src":"5789:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":469,"name":"nullifierHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":379,"src":"5805:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":470,"name":"externalNullifier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":381,"src":"5820:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":471,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":385,"src":"5839:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$8_calldata_ptr","typeString":"uint256[8] calldata"}},{"id":472,"name":"verifier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":461,"src":"5846:8:0","typeDescriptions":{"typeIdentifier":"t_contract$_IVerifier_$1130","typeString":"contract IVerifier"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$8_calldata_ptr","typeString":"uint256[8] calldata"},{"typeIdentifier":"t_contract$_IVerifier_$1130","typeString":"contract IVerifier"}],"id":466,"name":"_verifyProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":571,"src":"5768:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_uint256_$_t_uint256_$_t_uint256_$_t_array$_t_uint256_$8_calldata_ptr_$_t_contract$_IVerifier_$1130_$returns$__$","typeString":"function (bytes32,uint256,uint256,uint256,uint256[8] calldata,contract IVerifier) view"}},"id":473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5768:87:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":474,"nodeType":"ExpressionStatement","src":"5768:87:0"},{"expression":{"id":482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":475,"name":"creds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":36,"src":"5866:5:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Cred_$988_storage_$","typeString":"mapping(uint256 => struct ICredential.Cred storage ref)"}},"id":477,"indexExpression":{"id":476,"name":"credId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":373,"src":"5872:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5866:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_Cred_$988_storage","typeString":"struct ICredential.Cred storage ref"}},"id":478,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"nullifierHashes","nodeType":"MemberAccess","referencedDeclaration":987,"src":"5866:29:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":480,"indexExpression":{"id":479,"name":"nullifierHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":379,"src":"5896:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5866:44:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5913:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5866:51:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":483,"nodeType":"ExpressionStatement","src":"5866:51:0"},{"eventCall":{"arguments":[{"id":485,"name":"credId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":373,"src":"5947:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":486,"name":"merkleTreeRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":375,"src":"5955:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":487,"name":"nullifierHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":379,"src":"5971:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":488,"name":"externalNullifier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":381,"src":"5986:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":489,"name":"signal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":377,"src":"6005:6:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":484,"name":"ProofVerified","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1015,"src":"5933:13:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_bytes32_$returns$__$","typeString":"function (uint256,uint256,uint256,uint256,bytes32)"}},"id":490,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5933:79:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":491,"nodeType":"EmitStatement","src":"5928:84:0"}]},"id":493,"implemented":true,"kind":"function","modifiers":[],"name":"verifyProof","nameLocation":"4587:11:0","nodeType":"FunctionDefinition","parameters":{"id":386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":373,"mutability":"mutable","name":"credId","nameLocation":"4616:6:0","nodeType":"VariableDeclaration","scope":493,"src":"4608:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":372,"name":"uint256","nodeType":"ElementaryTypeName","src":"4608:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":375,"mutability":"mutable","name":"merkleTreeRoot","nameLocation":"4640:14:0","nodeType":"VariableDeclaration","scope":493,"src":"4632:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":374,"name":"uint256","nodeType":"ElementaryTypeName","src":"4632:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":377,"mutability":"mutable","name":"signal","nameLocation":"4672:6:0","nodeType":"VariableDeclaration","scope":493,"src":"4664:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":376,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4664:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":379,"mutability":"mutable","name":"nullifierHash","nameLocation":"4696:13:0","nodeType":"VariableDeclaration","scope":493,"src":"4688:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":378,"name":"uint256","nodeType":"ElementaryTypeName","src":"4688:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":381,"mutability":"mutable","name":"externalNullifier","nameLocation":"4727:17:0","nodeType":"VariableDeclaration","scope":493,"src":"4719:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":380,"name":"uint256","nodeType":"ElementaryTypeName","src":"4719:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":385,"mutability":"mutable","name":"proof","nameLocation":"4774:5:0","nodeType":"VariableDeclaration","scope":493,"src":"4754:25:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$8_calldata_ptr","typeString":"uint256[8]"},"typeName":{"baseType":{"id":382,"name":"uint256","nodeType":"ElementaryTypeName","src":"4754:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":384,"length":{"hexValue":"38","id":383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4762:1:0","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"nodeType":"ArrayTypeName","src":"4754:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$8_storage_ptr","typeString":"uint256[8]"}},"visibility":"internal"}],"src":"4598:187:0"},"returnParameters":{"id":387,"nodeType":"ParameterList","parameters":[],"src":"4795:0:0"},"scope":494,"src":"4578:1441:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":495,"src":"272:5749:0","usedErrors":[965,967,969,971,973,1030,1032,1034]}],"src":"32:5990:0"},"id":0},"@creds-protocol/contracts/base/CredentialConstants.sol":{"ast":{"absolutePath":"@creds-protocol/contracts/base/CredentialConstants.sol","exportedSymbols":{"SNARK_SCALAR_FIELD":[499]},"id":500,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":496,"literals":["solidity","0.8",".4"],"nodeType":"PragmaDirective","src":"31:22:1"},{"constant":true,"id":499,"mutability":"constant","name":"SNARK_SCALAR_FIELD","nameLocation":"72:18:1","nodeType":"VariableDeclaration","scope":500,"src":"55:115:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":497,"name":"uint256","nodeType":"ElementaryTypeName","src":"55:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3231383838323432383731383339323735323232323436343035373435323537323735303838353438333634343030343136303334333433363938323034313836353735383038343935363137","id":498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"93:77:1","typeDescriptions":{"typeIdentifier":"t_rational_21888242871839275222246405745257275088548364400416034343698204186575808495617_by_1","typeString":"int_const 2188...(69 digits omitted)...5617"},"value":"21888242871839275222246405745257275088548364400416034343698204186575808495617"},"visibility":"internal"}],"src":"31:141:1"},"id":1},"@creds-protocol/contracts/base/CredentialCore.sol":{"ast":{"absolutePath":"@creds-protocol/contracts/base/CredentialCore.sol","exportedSymbols":{"CredentialCore":[593],"ICredentialCore":[1025],"IVerifier":[1130]},"id":594,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":501,"literals":["solidity","0.8",".4"],"nodeType":"PragmaDirective","src":"31:22:2"},{"absolutePath":"@creds-protocol/contracts/interfaces/ICredentialCore.sol","file":"../interfaces/ICredentialCore.sol","id":502,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":594,"sourceUnit":1026,"src":"55:43:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@creds-protocol/contracts/interfaces/IVerifier.sol","file":"../interfaces/IVerifier.sol","id":503,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":594,"sourceUnit":1131,"src":"99:37:2","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":505,"name":"ICredentialCore","nodeType":"IdentifierPath","referencedDeclaration":1025,"src":"507:15:2"},"id":506,"nodeType":"InheritanceSpecifier","src":"507:15:2"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":504,"nodeType":"StructuredDocumentation","src":"138:342:2","text":"@title Credential core contract.\n @notice Minimal code to allow users to signal their endorsement of an arbitrary string.\n @dev The following code verifies that the proof is correct and saves the hash of the\n nullifier to prevent double-signaling. External nullifier and Merkle trees (i.e. creds) must be\n managed externally."},"fullyImplemented":true,"id":593,"linearizedBaseContracts":[593,1025],"name":"CredentialCore","nameLocation":"489:14:2","nodeType":"ContractDefinition","nodes":[{"body":{"id":570,"nodeType":"Block","src":"1147:290:2","statements":[{"assignments":[526],"declarations":[{"constant":false,"id":526,"mutability":"mutable","name":"signalHash","nameLocation":"1165:10:2","nodeType":"VariableDeclaration","scope":570,"src":"1157:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":525,"name":"uint256","nodeType":"ElementaryTypeName","src":"1157:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":530,"initialValue":{"arguments":[{"id":528,"name":"signal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":509,"src":"1190:6:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":527,"name":"_hashSignal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":592,"src":"1178:11:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_uint256_$","typeString":"function (bytes32) pure returns (uint256)"}},"id":529,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1178:19:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1157:40:2"},{"expression":{"arguments":[{"components":[{"baseExpression":{"id":534,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"1243:5:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$8_calldata_ptr","typeString":"uint256[8] calldata"}},"id":536,"indexExpression":{"hexValue":"30","id":535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1249:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1243:8:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":537,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"1253:5:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$8_calldata_ptr","typeString":"uint256[8] calldata"}},"id":539,"indexExpression":{"hexValue":"31","id":538,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1259:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1253:8:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":540,"isConstant":false,"isInlineArray":true,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1242:20:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"components":[{"components":[{"baseExpression":{"id":541,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"1278:5:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$8_calldata_ptr","typeString":"uint256[8] calldata"}},"id":543,"indexExpression":{"hexValue":"32","id":542,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1284:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1278:8:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":544,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"1288:5:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$8_calldata_ptr","typeString":"uint256[8] calldata"}},"id":546,"indexExpression":{"hexValue":"33","id":545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1294:1:2","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1288:8:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":547,"isConstant":false,"isInlineArray":true,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1277:20:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"components":[{"baseExpression":{"id":548,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"1300:5:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$8_calldata_ptr","typeString":"uint256[8] calldata"}},"id":550,"indexExpression":{"hexValue":"34","id":549,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1306:1:2","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1300:8:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":551,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"1310:5:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$8_calldata_ptr","typeString":"uint256[8] calldata"}},"id":553,"indexExpression":{"hexValue":"35","id":552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1316:1:2","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1310:8:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":554,"isConstant":false,"isInlineArray":true,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1299:20:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}}],"id":555,"isConstant":false,"isInlineArray":true,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1276:44:2","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$2_memory_ptr_$2_memory_ptr","typeString":"uint256[2] memory[2] memory"}},{"components":[{"baseExpression":{"id":556,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"1335:5:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$8_calldata_ptr","typeString":"uint256[8] calldata"}},"id":558,"indexExpression":{"hexValue":"36","id":557,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1341:1:2","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1335:8:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":559,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"1345:5:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$8_calldata_ptr","typeString":"uint256[8] calldata"}},"id":561,"indexExpression":{"hexValue":"37","id":560,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1351:1:2","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1345:8:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":562,"isConstant":false,"isInlineArray":true,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1334:20:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"components":[{"id":563,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":511,"src":"1369:4:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":564,"name":"nullifierHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":513,"src":"1375:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":565,"name":"signalHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":526,"src":"1390:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":566,"name":"externalNullifier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":515,"src":"1402:17:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":567,"isConstant":false,"isInlineArray":true,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1368:52:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$4_memory_ptr","typeString":"uint256[4] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_array$_t_array$_t_uint256_$2_memory_ptr_$2_memory_ptr","typeString":"uint256[2] memory[2] memory"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_array$_t_uint256_$4_memory_ptr","typeString":"uint256[4] memory"}],"expression":{"id":531,"name":"verifier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":522,"src":"1208:8:2","typeDescriptions":{"typeIdentifier":"t_contract$_IVerifier_$1130","typeString":"contract IVerifier"}},"id":533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"verifyProof","nodeType":"MemberAccess","referencedDeclaration":1129,"src":"1208:20:2","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_array$_t_uint256_$2_memory_ptr_$_t_array$_t_array$_t_uint256_$2_memory_ptr_$2_memory_ptr_$_t_array$_t_uint256_$2_memory_ptr_$_t_array$_t_uint256_$4_memory_ptr_$returns$__$","typeString":"function (uint256[2] memory,uint256[2] memory[2] memory,uint256[2] memory,uint256[4] memory) view external"}},"id":568,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1208:222:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":569,"nodeType":"ExpressionStatement","src":"1208:222:2"}]},"documentation":{"id":507,"nodeType":"StructuredDocumentation","src":"529:396:2","text":"@dev Asserts that no nullifier already exists and if the zero-knowledge proof is valid.\n Otherwise it reverts.\n @param signal: Credential signal.\n @param root: Root of the Merkle tree.\n @param nullifierHash: Nullifier hash.\n @param externalNullifier: External nullifier.\n @param proof: Zero-knowledge proof.\n @param verifier: Verifier address."},"id":571,"implemented":true,"kind":"function","modifiers":[],"name":"_verifyProof","nameLocation":"939:12:2","nodeType":"FunctionDefinition","parameters":{"id":523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":509,"mutability":"mutable","name":"signal","nameLocation":"969:6:2","nodeType":"VariableDeclaration","scope":571,"src":"961:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":508,"name":"bytes32","nodeType":"ElementaryTypeName","src":"961:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":511,"mutability":"mutable","name":"root","nameLocation":"993:4:2","nodeType":"VariableDeclaration","scope":571,"src":"985:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":510,"name":"uint256","nodeType":"ElementaryTypeName","src":"985:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":513,"mutability":"mutable","name":"nullifierHash","nameLocation":"1015:13:2","nodeType":"VariableDeclaration","scope":571,"src":"1007:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":512,"name":"uint256","nodeType":"ElementaryTypeName","src":"1007:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":515,"mutability":"mutable","name":"externalNullifier","nameLocation":"1046:17:2","nodeType":"VariableDeclaration","scope":571,"src":"1038:25:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":514,"name":"uint256","nodeType":"ElementaryTypeName","src":"1038:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":519,"mutability":"mutable","name":"proof","nameLocation":"1093:5:2","nodeType":"VariableDeclaration","scope":571,"src":"1073:25:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$8_calldata_ptr","typeString":"uint256[8]"},"typeName":{"baseType":{"id":516,"name":"uint256","nodeType":"ElementaryTypeName","src":"1073:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":518,"length":{"hexValue":"38","id":517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1081:1:2","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"nodeType":"ArrayTypeName","src":"1073:10:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$8_storage_ptr","typeString":"uint256[8]"}},"visibility":"internal"},{"constant":false,"id":522,"mutability":"mutable","name":"verifier","nameLocation":"1118:8:2","nodeType":"VariableDeclaration","scope":571,"src":"1108:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVerifier_$1130","typeString":"contract IVerifier"},"typeName":{"id":521,"nodeType":"UserDefinedTypeName","pathNode":{"id":520,"name":"IVerifier","nodeType":"IdentifierPath","referencedDeclaration":1130,"src":"1108:9:2"},"referencedDeclaration":1130,"src":"1108:9:2","typeDescriptions":{"typeIdentifier":"t_contract$_IVerifier_$1130","typeString":"contract IVerifier"}},"visibility":"internal"}],"src":"951:181:2"},"returnParameters":{"id":524,"nodeType":"ParameterList","parameters":[],"src":"1147:0:2"},"scope":593,"src":"930:507:2","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":591,"nodeType":"Block","src":"1642:73:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"arguments":[{"id":584,"name":"signal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":574,"src":"1694:6:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":582,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1677:3:2","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":583,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"1677:16:2","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1677:24:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":581,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1667:9:2","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1667:35:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":580,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1659:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":579,"name":"uint256","nodeType":"ElementaryTypeName","src":"1659:7:2","typeDescriptions":{}}},"id":587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1659:44:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":588,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1707:1:2","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"1659:49:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":578,"id":590,"nodeType":"Return","src":"1652:56:2"}]},"documentation":{"id":572,"nodeType":"StructuredDocumentation","src":"1443:126:2","text":"@dev Creates a keccak256 hash of the signal.\n @param signal: Credential signal.\n @return Hash of the signal."},"id":592,"implemented":true,"kind":"function","modifiers":[],"name":"_hashSignal","nameLocation":"1583:11:2","nodeType":"FunctionDefinition","parameters":{"id":575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":574,"mutability":"mutable","name":"signal","nameLocation":"1603:6:2","nodeType":"VariableDeclaration","scope":592,"src":"1595:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":573,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1595:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1594:16:2"},"returnParameters":{"id":578,"nodeType":"ParameterList","parameters":[{"constant":false,"id":577,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":592,"src":"1633:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":576,"name":"uint256","nodeType":"ElementaryTypeName","src":"1633:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1632:9:2"},"scope":593,"src":"1574:141:2","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":594,"src":"480:1237:2","usedErrors":[]}],"src":"31:1687:2"},"id":2},"@creds-protocol/contracts/base/CredentialCreds.sol":{"ast":{"absolutePath":"@creds-protocol/contracts/base/CredentialCreds.sol","exportedSymbols":{"Context":[1152],"CredentialCreds":[927],"ICredentialCreds":[1105],"IncrementalBinaryTree":[1649],"IncrementalTreeData":[1197],"PoseidonT3":[1165],"SNARK_SCALAR_FIELD":[499]},"id":928,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":595,"literals":["solidity","0.8",".4"],"nodeType":"PragmaDirective","src":"31:22:3"},{"absolutePath":"@creds-protocol/contracts/base/CredentialConstants.sol","file":"./CredentialConstants.sol","id":597,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":928,"sourceUnit":500,"src":"55:61:3","symbolAliases":[{"foreign":{"id":596,"name":"SNARK_SCALAR_FIELD","nodeType":"Identifier","overloadedDeclarations":[],"src":"63:18:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@creds-protocol/contracts/interfaces/ICredentialCreds.sol","file":"../interfaces/ICredentialCreds.sol","id":598,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":928,"sourceUnit":1106,"src":"117:44:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@creds-protocol/contracts/zk-kit/incremental-merkle-tree.sol/IncrementalBinaryTree.sol","file":"../zk-kit/incremental-merkle-tree.sol/IncrementalBinaryTree.sol","id":599,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":928,"sourceUnit":1650,"src":"162:73:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@creds-protocol/contracts/openzeppelin/contracts/utils/Context.sol","file":"../openzeppelin/contracts/utils/Context.sol","id":600,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":928,"sourceUnit":1153,"src":"236:53:3","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":602,"name":"Context","nodeType":"IdentifierPath","referencedDeclaration":1152,"src":"534:7:3"},"id":603,"nodeType":"InheritanceSpecifier","src":"534:7:3"},{"baseName":{"id":604,"name":"ICredentialCreds","nodeType":"IdentifierPath","referencedDeclaration":1105,"src":"543:16:3"},"id":605,"nodeType":"InheritanceSpecifier","src":"543:16:3"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":601,"nodeType":"StructuredDocumentation","src":"291:206:3","text":"@title Credential creds contract.\n @dev The following code allows you to create, issue and withdraw creds.\n You can use getters to obtain informations about creds (root, depth, number of leaves)."},"fullyImplemented":true,"id":927,"linearizedBaseContracts":[927,1105,1152],"name":"CredentialCreds","nameLocation":"515:15:3","nodeType":"ContractDefinition","nodes":[{"id":609,"libraryName":{"id":606,"name":"IncrementalBinaryTree","nodeType":"IdentifierPath","referencedDeclaration":1649,"src":"572:21:3"},"nodeType":"UsingForDirective","src":"566:52:3","typeName":{"id":608,"nodeType":"UserDefinedTypeName","pathNode":{"id":607,"name":"IncrementalTreeData","nodeType":"IdentifierPath","referencedDeclaration":1197,"src":"598:19:3"},"referencedDeclaration":1197,"src":"598:19:3","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage_ptr","typeString":"struct IncrementalTreeData"}}},{"constant":false,"documentation":{"id":610,"nodeType":"StructuredDocumentation","src":"624:50:3","text":"@dev Gets a cred id and returns the tree data."},"id":615,"mutability":"mutable","name":"merkleTree","nameLocation":"728:10:3","nodeType":"VariableDeclaration","scope":927,"src":"679:59:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_IncrementalTreeData_$1197_storage_$","typeString":"mapping(uint256 => struct IncrementalTreeData)"},"typeName":{"id":614,"keyType":{"id":611,"name":"uint256","nodeType":"ElementaryTypeName","src":"687:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"679:39:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_IncrementalTreeData_$1197_storage_$","typeString":"mapping(uint256 => struct IncrementalTreeData)"},"valueType":{"id":613,"nodeType":"UserDefinedTypeName","pathNode":{"id":612,"name":"IncrementalTreeData","nodeType":"IdentifierPath","referencedDeclaration":1197,"src":"698:19:3"},"referencedDeclaration":1197,"src":"698:19:3","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage_ptr","typeString":"struct IncrementalTreeData"}}},"visibility":"internal"},{"body":{"id":660,"nodeType":"Block","src":"1106:374:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":627,"name":"credID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":620,"src":"1120:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":628,"name":"SNARK_SCALAR_FIELD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":499,"src":"1130:18:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1120:28:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":634,"nodeType":"IfStatement","src":"1116:115:3","trueBody":{"id":633,"nodeType":"Block","src":"1150:81:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":630,"name":"Credential__CredIdIsNotLessThanSnarkScalarField","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"1171:47:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":631,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1171:49:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":632,"nodeType":"RevertStatement","src":"1164:56:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":636,"name":"credID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":620,"src":"1264:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":635,"name":"getMerkleTreeDepth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":848,"src":"1245:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1245:26:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1275:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1245:31:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":644,"nodeType":"IfStatement","src":"1241:100:3","trueBody":{"id":643,"nodeType":"Block","src":"1278:63:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":640,"name":"Credential__CredAlreadyExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1032,"src":"1299:29:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1299:31:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":642,"nodeType":"RevertStatement","src":"1292:38:3"}]}},{"expression":{"arguments":[{"id":649,"name":"merkleTreeDepth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":622,"src":"1375:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":650,"name":"zeroValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":624,"src":"1392:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":645,"name":"merkleTree","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"1351:10:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_IncrementalTreeData_$1197_storage_$","typeString":"mapping(uint256 => struct IncrementalTreeData storage ref)"}},"id":647,"indexExpression":{"id":646,"name":"credID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":620,"src":"1362:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1351:18:3","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage","typeString":"struct IncrementalTreeData storage ref"}},"id":648,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"init","nodeType":"MemberAccess","referencedDeclaration":1276,"src":"1351:23:3","typeDescriptions":{"typeIdentifier":"t_function_delegatecall_nonpayable$_t_struct$_IncrementalTreeData_$1197_storage_ptr_$_t_uint256_$_t_uint256_$returns$__$bound_to$_t_struct$_IncrementalTreeData_$1197_storage_ptr_$","typeString":"function (struct IncrementalTreeData storage pointer,uint256,uint256)"}},"id":651,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1351:51:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":652,"nodeType":"ExpressionStatement","src":"1351:51:3"},{"eventCall":{"arguments":[{"id":654,"name":"issuer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":618,"src":"1430:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":655,"name":"credID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":620,"src":"1438:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":656,"name":"merkleTreeDepth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":622,"src":"1446:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":657,"name":"zeroValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":624,"src":"1463:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":653,"name":"CredCreated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1045,"src":"1418:11:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256,uint256)"}},"id":658,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1418:55:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":659,"nodeType":"EmitStatement","src":"1413:60:3"}]},"documentation":{"id":616,"nodeType":"StructuredDocumentation","src":"745:204:3","text":"@dev Creates a new cred by initializing the associated tree.\n @param credID: Id of the cred.\n @param merkleTreeDepth: Depth of the tree.\n @param zeroValue: Zero value of the tree."},"id":661,"implemented":true,"kind":"function","modifiers":[],"name":"_createCred","nameLocation":"963:11:3","nodeType":"FunctionDefinition","parameters":{"id":625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":618,"mutability":"mutable","name":"issuer","nameLocation":"992:6:3","nodeType":"VariableDeclaration","scope":661,"src":"984:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":617,"name":"address","nodeType":"ElementaryTypeName","src":"984:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":620,"mutability":"mutable","name":"credID","nameLocation":"1016:6:3","nodeType":"VariableDeclaration","scope":661,"src":"1008:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":619,"name":"uint256","nodeType":"ElementaryTypeName","src":"1008:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":622,"mutability":"mutable","name":"merkleTreeDepth","nameLocation":"1040:15:3","nodeType":"VariableDeclaration","scope":661,"src":"1032:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":621,"name":"uint256","nodeType":"ElementaryTypeName","src":"1032:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":624,"mutability":"mutable","name":"zeroValue","nameLocation":"1073:9:3","nodeType":"VariableDeclaration","scope":661,"src":"1065:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":623,"name":"uint256","nodeType":"ElementaryTypeName","src":"1065:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"974:114:3"},"returnParameters":{"id":626,"nodeType":"ParameterList","parameters":[],"src":"1106:0:3"},"scope":927,"src":"954:526:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":707,"nodeType":"Block","src":"1730:377:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":670,"name":"credID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":664,"src":"1763:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":669,"name":"getMerkleTreeDepth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":848,"src":"1744:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1744:26:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":672,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1774:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1744:31:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":678,"nodeType":"IfStatement","src":"1740:99:3","trueBody":{"id":677,"nodeType":"Block","src":"1777:62:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":674,"name":"Credential__CredDoesNotExist","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1030,"src":"1798:28:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":675,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1798:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":676,"nodeType":"RevertStatement","src":"1791:37:3"}]}},{"expression":{"arguments":[{"id":683,"name":"identityCommitment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":666,"src":"1875:18:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":679,"name":"merkleTree","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"1849:10:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_IncrementalTreeData_$1197_storage_$","typeString":"mapping(uint256 => struct IncrementalTreeData storage ref)"}},"id":681,"indexExpression":{"id":680,"name":"credID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":664,"src":"1860:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1849:18:3","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage","typeString":"struct IncrementalTreeData storage ref"}},"id":682,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"insert","nodeType":"MemberAccess","referencedDeclaration":1387,"src":"1849:25:3","typeDescriptions":{"typeIdentifier":"t_function_delegatecall_nonpayable$_t_struct$_IncrementalTreeData_$1197_storage_ptr_$_t_uint256_$returns$__$bound_to$_t_struct$_IncrementalTreeData_$1197_storage_ptr_$","typeString":"function (struct IncrementalTreeData storage pointer,uint256)"}},"id":684,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1849:45:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":685,"nodeType":"ExpressionStatement","src":"1849:45:3"},{"assignments":[687],"declarations":[{"constant":false,"id":687,"mutability":"mutable","name":"merkleTreeRoot","nameLocation":"1913:14:3","nodeType":"VariableDeclaration","scope":707,"src":"1905:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":686,"name":"uint256","nodeType":"ElementaryTypeName","src":"1905:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":691,"initialValue":{"arguments":[{"id":689,"name":"credID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":664,"src":"1948:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":688,"name":"getMerkleTreeRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"1930:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":690,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1930:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1905:50:3"},{"assignments":[693],"declarations":[{"constant":false,"id":693,"mutability":"mutable","name":"index","nameLocation":"1973:5:3","nodeType":"VariableDeclaration","scope":707,"src":"1965:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":692,"name":"uint256","nodeType":"ElementaryTypeName","src":"1965:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":699,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":695,"name":"credID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":664,"src":"2009:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":694,"name":"getNumberOfMerkleTreeLeaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":863,"src":"1981:27:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":696,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1981:35:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2019:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1981:39:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1965:55:3"},{"eventCall":{"arguments":[{"id":701,"name":"credID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":664,"src":"2050:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":702,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":693,"src":"2058:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":703,"name":"identityCommitment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":666,"src":"2065:18:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":704,"name":"merkleTreeRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":687,"src":"2085:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":700,"name":"IdentityAdded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1056,"src":"2036:13:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256,uint256,uint256)"}},"id":705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2036:64:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":706,"nodeType":"EmitStatement","src":"2031:69:3"}]},"documentation":{"id":662,"nodeType":"StructuredDocumentation","src":"1486:156:3","text":"@dev Adds an identity commitment to an existing cred.\n @param credID: Id of the cred.\n @param identityCommitment: New identity commitment."},"id":708,"implemented":true,"kind":"function","modifiers":[],"name":"_addIdentity","nameLocation":"1656:12:3","nodeType":"FunctionDefinition","parameters":{"id":667,"nodeType":"ParameterList","parameters":[{"constant":false,"id":664,"mutability":"mutable","name":"credID","nameLocation":"1677:6:3","nodeType":"VariableDeclaration","scope":708,"src":"1669:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":663,"name":"uint256","nodeType":"ElementaryTypeName","src":"1669:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":666,"mutability":"mutable","name":"identityCommitment","nameLocation":"1693:18:3","nodeType":"VariableDeclaration","scope":708,"src":"1685:26:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":665,"name":"uint256","nodeType":"ElementaryTypeName","src":"1685:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1668:44:3"},"returnParameters":{"id":668,"nodeType":"ParameterList","parameters":[],"src":"1730:0:3"},"scope":927,"src":"1647:460:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":764,"nodeType":"Block","src":"2838:467:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":725,"name":"credID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":711,"src":"2870:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":724,"name":"getMerkleTreeRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"2852:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2852:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":727,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2881:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2852:30:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":733,"nodeType":"IfStatement","src":"2848:98:3","trueBody":{"id":732,"nodeType":"Block","src":"2884:62:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":729,"name":"Credential__CredDoesNotExist","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1030,"src":"2905:28:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":730,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2905:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":731,"nodeType":"RevertStatement","src":"2898:37:3"}]}},{"expression":{"arguments":[{"id":738,"name":"identityCommitment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"2982:18:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":739,"name":"newIdentityCommitment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"3002:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":740,"name":"proofSiblings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"3025:13:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":741,"name":"proofPathIndices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"3040:16:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_calldata_ptr","typeString":"uint8[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint8_$dyn_calldata_ptr","typeString":"uint8[] calldata"}],"expression":{"baseExpression":{"id":734,"name":"merkleTree","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"2956:10:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_IncrementalTreeData_$1197_storage_$","typeString":"mapping(uint256 => struct IncrementalTreeData storage ref)"}},"id":736,"indexExpression":{"id":735,"name":"credID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":711,"src":"2967:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2956:18:3","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage","typeString":"struct IncrementalTreeData storage ref"}},"id":737,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"update","nodeType":"MemberAccess","referencedDeclaration":1517,"src":"2956:25:3","typeDescriptions":{"typeIdentifier":"t_function_delegatecall_nonpayable$_t_struct$_IncrementalTreeData_$1197_storage_ptr_$_t_uint256_$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint8_$dyn_memory_ptr_$returns$__$bound_to$_t_struct$_IncrementalTreeData_$1197_storage_ptr_$","typeString":"function (struct IncrementalTreeData storage pointer,uint256,uint256,uint256[] memory,uint8[] memory)"}},"id":742,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2956:101:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":743,"nodeType":"ExpressionStatement","src":"2956:101:3"},{"assignments":[745],"declarations":[{"constant":false,"id":745,"mutability":"mutable","name":"merkleTreeRoot","nameLocation":"3076:14:3","nodeType":"VariableDeclaration","scope":764,"src":"3068:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":744,"name":"uint256","nodeType":"ElementaryTypeName","src":"3068:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":749,"initialValue":{"arguments":[{"id":747,"name":"credID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":711,"src":"3111:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":746,"name":"getMerkleTreeRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"3093:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":748,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3093:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3068:50:3"},{"assignments":[751],"declarations":[{"constant":false,"id":751,"mutability":"mutable","name":"index","nameLocation":"3136:5:3","nodeType":"VariableDeclaration","scope":764,"src":"3128:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":750,"name":"uint256","nodeType":"ElementaryTypeName","src":"3128:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":755,"initialValue":{"arguments":[{"id":753,"name":"proofPathIndices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"3176:16:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_calldata_ptr","typeString":"uint8[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint8_$dyn_calldata_ptr","typeString":"uint8[] calldata"}],"id":752,"name":"proofPathIndicesToIdentityIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"3144:31:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint8_$dyn_calldata_ptr_$returns$_t_uint256_$","typeString":"function (uint8[] calldata) pure returns (uint256)"}},"id":754,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3144:49:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3128:65:3"},{"eventCall":{"arguments":[{"id":757,"name":"credID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":711,"src":"3225:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":758,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":751,"src":"3233:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":759,"name":"identityCommitment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"3240:18:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":760,"name":"newIdentityCommitment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"3260:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":761,"name":"merkleTreeRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":745,"src":"3283:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":756,"name":"IdentityUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1069,"src":"3209:15:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256,uint256,uint256,uint256)"}},"id":762,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3209:89:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":763,"nodeType":"EmitStatement","src":"3204:94:3"}]},"documentation":{"id":709,"nodeType":"StructuredDocumentation","src":"2113:488:3","text":"@dev Updates an identity commitment of an existing cred. A proof of membership is\n needed to check if the node to be updated is part of the tree.\n @param credID: Id of the cred.\n @param identityCommitment: Existing identity commitment to be updated.\n @param newIdentityCommitment: New identity commitment.\n @param proofSiblings: Array of the sibling nodes of the proof of membership.\n @param proofPathIndices: Path of the proof of membership."},"id":765,"implemented":true,"kind":"function","modifiers":[],"name":"_updateIdentity","nameLocation":"2615:15:3","nodeType":"FunctionDefinition","parameters":{"id":722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":711,"mutability":"mutable","name":"credID","nameLocation":"2648:6:3","nodeType":"VariableDeclaration","scope":765,"src":"2640:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":710,"name":"uint256","nodeType":"ElementaryTypeName","src":"2640:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":713,"mutability":"mutable","name":"identityCommitment","nameLocation":"2672:18:3","nodeType":"VariableDeclaration","scope":765,"src":"2664:26:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":712,"name":"uint256","nodeType":"ElementaryTypeName","src":"2664:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":715,"mutability":"mutable","name":"newIdentityCommitment","nameLocation":"2708:21:3","nodeType":"VariableDeclaration","scope":765,"src":"2700:29:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":714,"name":"uint256","nodeType":"ElementaryTypeName","src":"2700:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":718,"mutability":"mutable","name":"proofSiblings","nameLocation":"2758:13:3","nodeType":"VariableDeclaration","scope":765,"src":"2739:32:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":716,"name":"uint256","nodeType":"ElementaryTypeName","src":"2739:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":717,"nodeType":"ArrayTypeName","src":"2739:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":721,"mutability":"mutable","name":"proofPathIndices","nameLocation":"2798:16:3","nodeType":"VariableDeclaration","scope":765,"src":"2781:33:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_calldata_ptr","typeString":"uint8[]"},"typeName":{"baseType":{"id":719,"name":"uint8","nodeType":"ElementaryTypeName","src":"2781:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":720,"nodeType":"ArrayTypeName","src":"2781:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_storage_ptr","typeString":"uint8[]"}},"visibility":"internal"}],"src":"2630:190:3"},"returnParameters":{"id":723,"nodeType":"ParameterList","parameters":[],"src":"2838:0:3"},"scope":927,"src":"2606:699:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":817,"nodeType":"Block","src":"3936:421:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":780,"name":"credID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":768,"src":"3968:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":779,"name":"getMerkleTreeRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"3950:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3950:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3979:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3950:30:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":788,"nodeType":"IfStatement","src":"3946:98:3","trueBody":{"id":787,"nodeType":"Block","src":"3982:62:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":784,"name":"Credential__CredDoesNotExist","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1030,"src":"4003:28:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4003:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":786,"nodeType":"RevertStatement","src":"3996:37:3"}]}},{"expression":{"arguments":[{"id":793,"name":"identityCommitment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"4080:18:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":794,"name":"proofSiblings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":773,"src":"4100:13:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":795,"name":"proofPathIndices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":776,"src":"4115:16:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_calldata_ptr","typeString":"uint8[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint8_$dyn_calldata_ptr","typeString":"uint8[] calldata"}],"expression":{"baseExpression":{"id":789,"name":"merkleTree","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"4054:10:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_IncrementalTreeData_$1197_storage_$","typeString":"mapping(uint256 => struct IncrementalTreeData storage ref)"}},"id":791,"indexExpression":{"id":790,"name":"credID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":768,"src":"4065:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4054:18:3","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage","typeString":"struct IncrementalTreeData storage ref"}},"id":792,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"remove","nodeType":"MemberAccess","referencedDeclaration":1544,"src":"4054:25:3","typeDescriptions":{"typeIdentifier":"t_function_delegatecall_nonpayable$_t_struct$_IncrementalTreeData_$1197_storage_ptr_$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint8_$dyn_memory_ptr_$returns$__$bound_to$_t_struct$_IncrementalTreeData_$1197_storage_ptr_$","typeString":"function (struct IncrementalTreeData storage pointer,uint256,uint256[] memory,uint8[] memory)"}},"id":796,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4054:78:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":797,"nodeType":"ExpressionStatement","src":"4054:78:3"},{"assignments":[799],"declarations":[{"constant":false,"id":799,"mutability":"mutable","name":"merkleTreeRoot","nameLocation":"4151:14:3","nodeType":"VariableDeclaration","scope":817,"src":"4143:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":798,"name":"uint256","nodeType":"ElementaryTypeName","src":"4143:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":803,"initialValue":{"arguments":[{"id":801,"name":"credID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":768,"src":"4186:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":800,"name":"getMerkleTreeRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"4168:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4168:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4143:50:3"},{"assignments":[805],"declarations":[{"constant":false,"id":805,"mutability":"mutable","name":"index","nameLocation":"4211:5:3","nodeType":"VariableDeclaration","scope":817,"src":"4203:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":804,"name":"uint256","nodeType":"ElementaryTypeName","src":"4203:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":809,"initialValue":{"arguments":[{"id":807,"name":"proofPathIndices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":776,"src":"4251:16:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_calldata_ptr","typeString":"uint8[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint8_$dyn_calldata_ptr","typeString":"uint8[] calldata"}],"id":806,"name":"proofPathIndicesToIdentityIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"4219:31:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint8_$dyn_calldata_ptr_$returns$_t_uint256_$","typeString":"function (uint8[] calldata) pure returns (uint256)"}},"id":808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4219:49:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4203:65:3"},{"eventCall":{"arguments":[{"id":811,"name":"credID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":768,"src":"4300:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":812,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":805,"src":"4308:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":813,"name":"identityCommitment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"4315:18:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":814,"name":"merkleTreeRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":799,"src":"4335:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":810,"name":"IdentityRemoved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1080,"src":"4284:15:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256,uint256,uint256)"}},"id":815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4284:66:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":816,"nodeType":"EmitStatement","src":"4279:71:3"}]},"documentation":{"id":766,"nodeType":"StructuredDocumentation","src":"3311:427:3","text":"@dev Removes an identity commitment from an existing cred. A proof of membership is\n needed to check if the node to be deleted is part of the tree.\n @param credID: Id of the cred.\n @param identityCommitment: Existing identity commitment to be removed.\n @param proofSiblings: Array of the sibling nodes of the proof of membership.\n @param proofPathIndices: Path of the proof of membership."},"id":818,"implemented":true,"kind":"function","modifiers":[],"name":"_removeIdentity","nameLocation":"3752:15:3","nodeType":"FunctionDefinition","parameters":{"id":777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":768,"mutability":"mutable","name":"credID","nameLocation":"3785:6:3","nodeType":"VariableDeclaration","scope":818,"src":"3777:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":767,"name":"uint256","nodeType":"ElementaryTypeName","src":"3777:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":770,"mutability":"mutable","name":"identityCommitment","nameLocation":"3809:18:3","nodeType":"VariableDeclaration","scope":818,"src":"3801:26:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":769,"name":"uint256","nodeType":"ElementaryTypeName","src":"3801:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":773,"mutability":"mutable","name":"proofSiblings","nameLocation":"3856:13:3","nodeType":"VariableDeclaration","scope":818,"src":"3837:32:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":771,"name":"uint256","nodeType":"ElementaryTypeName","src":"3837:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":772,"nodeType":"ArrayTypeName","src":"3837:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":776,"mutability":"mutable","name":"proofPathIndices","nameLocation":"3896:16:3","nodeType":"VariableDeclaration","scope":818,"src":"3879:33:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_calldata_ptr","typeString":"uint8[]"},"typeName":{"baseType":{"id":774,"name":"uint8","nodeType":"ElementaryTypeName","src":"3879:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":775,"nodeType":"ArrayTypeName","src":"3879:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_storage_ptr","typeString":"uint8[]"}},"visibility":"internal"}],"src":"3767:151:3"},"returnParameters":{"id":778,"nodeType":"ParameterList","parameters":[],"src":"3936:0:3"},"scope":927,"src":"3743:614:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[1088],"body":{"id":832,"nodeType":"Block","src":"4508:47:3","statements":[{"expression":{"expression":{"baseExpression":{"id":827,"name":"merkleTree","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"4525:10:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_IncrementalTreeData_$1197_storage_$","typeString":"mapping(uint256 => struct IncrementalTreeData storage ref)"}},"id":829,"indexExpression":{"id":828,"name":"credID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":821,"src":"4536:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4525:18:3","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage","typeString":"struct IncrementalTreeData storage ref"}},"id":830,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"root","nodeType":"MemberAccess","referencedDeclaration":1184,"src":"4525:23:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":826,"id":831,"nodeType":"Return","src":"4518:30:3"}]},"documentation":{"id":819,"nodeType":"StructuredDocumentation","src":"4363:50:3","text":"@dev See {ICredentialCreds-getMerkleTreeRoot}."},"functionSelector":"dabc4d51","id":833,"implemented":true,"kind":"function","modifiers":[],"name":"getMerkleTreeRoot","nameLocation":"4427:17:3","nodeType":"FunctionDefinition","overrides":{"id":823,"nodeType":"OverrideSpecifier","overrides":[],"src":"4481:8:3"},"parameters":{"id":822,"nodeType":"ParameterList","parameters":[{"constant":false,"id":821,"mutability":"mutable","name":"credID","nameLocation":"4453:6:3","nodeType":"VariableDeclaration","scope":833,"src":"4445:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":820,"name":"uint256","nodeType":"ElementaryTypeName","src":"4445:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4444:16:3"},"returnParameters":{"id":826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":825,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":833,"src":"4499:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":824,"name":"uint256","nodeType":"ElementaryTypeName","src":"4499:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4498:9:3"},"scope":927,"src":"4418:137:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1096],"body":{"id":847,"nodeType":"Block","src":"4708:48:3","statements":[{"expression":{"expression":{"baseExpression":{"id":842,"name":"merkleTree","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"4725:10:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_IncrementalTreeData_$1197_storage_$","typeString":"mapping(uint256 => struct IncrementalTreeData storage ref)"}},"id":844,"indexExpression":{"id":843,"name":"credID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"4736:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4725:18:3","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage","typeString":"struct IncrementalTreeData storage ref"}},"id":845,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"depth","nodeType":"MemberAccess","referencedDeclaration":1182,"src":"4725:24:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":841,"id":846,"nodeType":"Return","src":"4718:31:3"}]},"documentation":{"id":834,"nodeType":"StructuredDocumentation","src":"4561:51:3","text":"@dev See {ICredentialCreds-getMerkleTreeDepth}."},"functionSelector":"6389e107","id":848,"implemented":true,"kind":"function","modifiers":[],"name":"getMerkleTreeDepth","nameLocation":"4626:18:3","nodeType":"FunctionDefinition","overrides":{"id":838,"nodeType":"OverrideSpecifier","overrides":[],"src":"4681:8:3"},"parameters":{"id":837,"nodeType":"ParameterList","parameters":[{"constant":false,"id":836,"mutability":"mutable","name":"credID","nameLocation":"4653:6:3","nodeType":"VariableDeclaration","scope":848,"src":"4645:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":835,"name":"uint256","nodeType":"ElementaryTypeName","src":"4645:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4644:16:3"},"returnParameters":{"id":841,"nodeType":"ParameterList","parameters":[{"constant":false,"id":840,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":848,"src":"4699:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":839,"name":"uint256","nodeType":"ElementaryTypeName","src":"4699:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4698:9:3"},"scope":927,"src":"4617:139:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1104],"body":{"id":862,"nodeType":"Block","src":"4927:57:3","statements":[{"expression":{"expression":{"baseExpression":{"id":857,"name":"merkleTree","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"4944:10:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_IncrementalTreeData_$1197_storage_$","typeString":"mapping(uint256 => struct IncrementalTreeData storage ref)"}},"id":859,"indexExpression":{"id":858,"name":"credID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"4955:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4944:18:3","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage","typeString":"struct IncrementalTreeData storage ref"}},"id":860,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"numberOfLeaves","nodeType":"MemberAccess","referencedDeclaration":1186,"src":"4944:33:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":856,"id":861,"nodeType":"Return","src":"4937:40:3"}]},"documentation":{"id":849,"nodeType":"StructuredDocumentation","src":"4762:60:3","text":"@dev See {ICredentialCreds-getNumberOfMerkleTreeLeaves}."},"functionSelector":"638480be","id":863,"implemented":true,"kind":"function","modifiers":[],"name":"getNumberOfMerkleTreeLeaves","nameLocation":"4836:27:3","nodeType":"FunctionDefinition","overrides":{"id":853,"nodeType":"OverrideSpecifier","overrides":[],"src":"4900:8:3"},"parameters":{"id":852,"nodeType":"ParameterList","parameters":[{"constant":false,"id":851,"mutability":"mutable","name":"credID","nameLocation":"4872:6:3","nodeType":"VariableDeclaration","scope":863,"src":"4864:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":850,"name":"uint256","nodeType":"ElementaryTypeName","src":"4864:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4863:16:3"},"returnParameters":{"id":856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":855,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":863,"src":"4918:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":854,"name":"uint256","nodeType":"ElementaryTypeName","src":"4918:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4917:9:3"},"scope":927,"src":"4827:157:3","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":925,"nodeType":"Block","src":"5308:440:3","statements":[{"assignments":[873],"declarations":[{"constant":false,"id":873,"mutability":"mutable","name":"identityIndex","nameLocation":"5326:13:3","nodeType":"VariableDeclaration","scope":925,"src":"5318:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":872,"name":"uint256","nodeType":"ElementaryTypeName","src":"5318:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":875,"initialValue":{"hexValue":"30","id":874,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5342:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5318:25:3"},{"body":{"id":921,"nodeType":"Block","src":"5410:301:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":887,"name":"identityIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":873,"src":"5428:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5444:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5428:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":890,"name":"proofPathIndices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":867,"src":"5449:16:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_calldata_ptr","typeString":"uint8[] calldata"}},"id":894,"indexExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":891,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":877,"src":"5466:1:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5470:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5466:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5449:23:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5476:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5449:28:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5428:49:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":916,"nodeType":"IfStatement","src":"5424:217:3","trueBody":{"id":915,"nodeType":"Block","src":"5479:162:3","statements":[{"expression":{"id":900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":898,"name":"identityIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":873,"src":"5497:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"hexValue":"32","id":899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5514:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"5497:18:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":901,"nodeType":"ExpressionStatement","src":"5497:18:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":902,"name":"proofPathIndices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":867,"src":"5538:16:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_calldata_ptr","typeString":"uint8[] calldata"}},"id":906,"indexExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":903,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":877,"src":"5555:1:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5559:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5555:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5538:23:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":907,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5565:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5538:28:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":914,"nodeType":"IfStatement","src":"5534:93:3","trueBody":{"id":913,"nodeType":"Block","src":"5568:59:3","statements":[{"expression":{"id":911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":909,"name":"identityIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":873,"src":"5590:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":910,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5607:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5590:18:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":912,"nodeType":"ExpressionStatement","src":"5590:18:3"}]}}]}},{"id":920,"nodeType":"UncheckedBlock","src":"5655:46:3","statements":[{"expression":{"id":918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"5683:3:3","subExpression":{"id":917,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":877,"src":"5685:1:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":919,"nodeType":"ExpressionStatement","src":"5683:3:3"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":884,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":877,"src":"5401:1:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":885,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5405:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5401:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":922,"initializationExpression":{"assignments":[877],"declarations":[{"constant":false,"id":877,"mutability":"mutable","name":"i","nameLocation":"5365:1:3","nodeType":"VariableDeclaration","scope":922,"src":"5359:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":876,"name":"uint8","nodeType":"ElementaryTypeName","src":"5359:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":883,"initialValue":{"arguments":[{"expression":{"id":880,"name":"proofPathIndices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":867,"src":"5375:16:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_calldata_ptr","typeString":"uint8[] calldata"}},"id":881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"5375:23:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":879,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5369:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":878,"name":"uint8","nodeType":"ElementaryTypeName","src":"5369:5:3","typeDescriptions":{}}},"id":882,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5369:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"5359:40:3"},"nodeType":"ForStatement","src":"5354:357:3"},{"expression":{"id":923,"name":"identityIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":873,"src":"5728:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":871,"id":924,"nodeType":"Return","src":"5721:20:3"}]},"documentation":{"id":864,"nodeType":"StructuredDocumentation","src":"4990:206:3","text":"@dev Converts the path indices of a Merkle proof to the identity commitment index in the tree.\n @param proofPathIndices: Path of the proof of membership.\n @return Index of a cred identity."},"id":926,"implemented":true,"kind":"function","modifiers":[],"name":"proofPathIndicesToIdentityIndex","nameLocation":"5210:31:3","nodeType":"FunctionDefinition","parameters":{"id":868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":867,"mutability":"mutable","name":"proofPathIndices","nameLocation":"5259:16:3","nodeType":"VariableDeclaration","scope":926,"src":"5242:33:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_calldata_ptr","typeString":"uint8[]"},"typeName":{"baseType":{"id":865,"name":"uint8","nodeType":"ElementaryTypeName","src":"5242:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":866,"nodeType":"ArrayTypeName","src":"5242:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_storage_ptr","typeString":"uint8[]"}},"visibility":"internal"}],"src":"5241:35:3"},"returnParameters":{"id":871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":870,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":926,"src":"5299:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":869,"name":"uint256","nodeType":"ElementaryTypeName","src":"5299:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5298:9:3"},"scope":927,"src":"5201:547:3","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":928,"src":"497:5253:3","usedErrors":[1030,1032,1034]}],"src":"31:5720:3"},"id":3},"@creds-protocol/contracts/base/CredsProtocolRegistry.sol":{"ast":{"absolutePath":"@creds-protocol/contracts/base/CredsProtocolRegistry.sol","exportedSymbols":{"CredsProtocolRegistry":[960]},"id":961,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":929,"literals":["solidity","0.8",".4"],"nodeType":"PragmaDirective","src":"33:22:4"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":960,"linearizedBaseContracts":[960],"name":"CredsProtocolRegistry","nameLocation":"66:21:4","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"5a235e13","id":934,"mutability":"mutable","name":"issuerContractAddress","nameLocation":"132:21:4","nodeType":"VariableDeclaration","scope":960,"src":"95:58:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(address => address[])"},"typeName":{"id":933,"keyType":{"id":930,"name":"address","nodeType":"ElementaryTypeName","src":"103:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"95:29:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(address => address[])"},"valueType":{"baseType":{"id":931,"name":"address","nodeType":"ElementaryTypeName","src":"114:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":932,"nodeType":"ArrayTypeName","src":"114:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}}},"visibility":"public"},{"constant":false,"functionSelector":"2d33d7d5","id":938,"mutability":"mutable","name":"isRegisteredIssuer","nameLocation":"191:18:4","nodeType":"VariableDeclaration","scope":960,"src":"159:50:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":937,"keyType":{"id":935,"name":"address","nodeType":"ElementaryTypeName","src":"167:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"159:24:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":936,"name":"bool","nodeType":"ElementaryTypeName","src":"178:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"body":{"id":958,"nodeType":"Block","src":"298:120:4","statements":[{"expression":{"arguments":[{"id":949,"name":"_issuerContractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":942,"src":"344:22:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"id":945,"name":"issuerContractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":934,"src":"308:21:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(address => address[] storage ref)"}},"id":947,"indexExpression":{"id":946,"name":"_issuer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"330:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"308:30:4","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"push","nodeType":"MemberAccess","src":"308:35:4","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$bound_to$_t_array$_t_address_$dyn_storage_ptr_$","typeString":"function (address[] storage pointer,address)"}},"id":950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"308:59:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":951,"nodeType":"ExpressionStatement","src":"308:59:4"},{"expression":{"id":956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":952,"name":"isRegisteredIssuer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"377:18:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":954,"indexExpression":{"id":953,"name":"_issuer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"396:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"377:27:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":955,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"407:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"377:34:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":957,"nodeType":"ExpressionStatement","src":"377:34:4"}]},"functionSelector":"c2551c82","id":959,"implemented":true,"kind":"function","modifiers":[],"name":"registerIssuer","nameLocation":"225:14:4","nodeType":"FunctionDefinition","parameters":{"id":943,"nodeType":"ParameterList","parameters":[{"constant":false,"id":940,"mutability":"mutable","name":"_issuer","nameLocation":"248:7:4","nodeType":"VariableDeclaration","scope":959,"src":"240:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":939,"name":"address","nodeType":"ElementaryTypeName","src":"240:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":942,"mutability":"mutable","name":"_issuerContractAddress","nameLocation":"265:22:4","nodeType":"VariableDeclaration","scope":959,"src":"257:30:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":941,"name":"address","nodeType":"ElementaryTypeName","src":"257:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"239:49:4"},"returnParameters":{"id":944,"nodeType":"ParameterList","parameters":[],"src":"298:0:4"},"scope":960,"src":"216:202:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":961,"src":"57:364:4","usedErrors":[]}],"src":"33:388:4"},"id":4},"@creds-protocol/contracts/interfaces/ICredential.sol":{"ast":{"absolutePath":"@creds-protocol/contracts/interfaces/ICredential.sol","exportedSymbols":{"ICredential":[1016]},"id":1017,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":962,"literals":["solidity","0.8",".4"],"nodeType":"PragmaDirective","src":"31:22:5"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":963,"nodeType":"StructuredDocumentation","src":"55:78:5","text":"@title Credential interface.\n @dev Interface of a Credential contract."},"fullyImplemented":true,"id":1016,"linearizedBaseContracts":[1016],"name":"ICredential","nameLocation":"143:11:5","nodeType":"ContractDefinition","nodes":[{"id":965,"name":"Credential__CallerIsNotTheCredIssuer","nameLocation":"167:36:5","nodeType":"ErrorDefinition","parameters":{"id":964,"nodeType":"ParameterList","parameters":[],"src":"203:2:5"},"src":"161:45:5"},{"id":967,"name":"Credential__MerkleTreeDepthIsNotSupported","nameLocation":"217:41:5","nodeType":"ErrorDefinition","parameters":{"id":966,"nodeType":"ParameterList","parameters":[],"src":"258:2:5"},"src":"211:50:5"},{"id":969,"name":"Credential__MerkleTreeRootIsExpired","nameLocation":"272:35:5","nodeType":"ErrorDefinition","parameters":{"id":968,"nodeType":"ParameterList","parameters":[],"src":"307:2:5"},"src":"266:44:5"},{"id":971,"name":"Credential__MerkleTreeRootIsNotPartOfTheCred","nameLocation":"321:44:5","nodeType":"ErrorDefinition","parameters":{"id":970,"nodeType":"ParameterList","parameters":[],"src":"365:2:5"},"src":"315:53:5"},{"id":973,"name":"Credential__YouAreUsingTheSameNillifierTwice","nameLocation":"379:44:5","nodeType":"ErrorDefinition","parameters":{"id":972,"nodeType":"ParameterList","parameters":[],"src":"423:2:5"},"src":"373:53:5"},{"canonicalName":"ICredential.Cred","id":988,"members":[{"constant":false,"id":975,"mutability":"mutable","name":"admin","nameLocation":"547:5:5","nodeType":"VariableDeclaration","scope":988,"src":"539:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":974,"name":"address","nodeType":"ElementaryTypeName","src":"539:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":977,"mutability":"mutable","name":"credURI","nameLocation":"569:7:5","nodeType":"VariableDeclaration","scope":988,"src":"562:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":976,"name":"string","nodeType":"ElementaryTypeName","src":"562:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":979,"mutability":"mutable","name":"merkleRootDuration","nameLocation":"594:18:5","nodeType":"VariableDeclaration","scope":988,"src":"586:26:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":978,"name":"uint256","nodeType":"ElementaryTypeName","src":"586:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":983,"mutability":"mutable","name":"merkleRootCreationDates","nameLocation":"650:23:5","nodeType":"VariableDeclaration","scope":988,"src":"622:51:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":982,"keyType":{"id":980,"name":"uint256","nodeType":"ElementaryTypeName","src":"630:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"622:27:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueType":{"id":981,"name":"uint256","nodeType":"ElementaryTypeName","src":"641:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"id":987,"mutability":"mutable","name":"nullifierHashes","nameLocation":"708:15:5","nodeType":"VariableDeclaration","scope":988,"src":"683:40:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"},"typeName":{"id":986,"keyType":{"id":984,"name":"uint256","nodeType":"ElementaryTypeName","src":"691:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"683:24:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"},"valueType":{"id":985,"name":"bool","nodeType":"ElementaryTypeName","src":"702:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"}],"name":"Cred","nameLocation":"524:4:5","nodeType":"StructDefinition","scope":1016,"src":"517:213:5","visibility":"public"},{"canonicalName":"ICredential.Verifier","id":993,"members":[{"constant":false,"id":990,"mutability":"mutable","name":"contractAddress","nameLocation":"770:15:5","nodeType":"VariableDeclaration","scope":993,"src":"762:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":989,"name":"address","nodeType":"ElementaryTypeName","src":"762:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":992,"mutability":"mutable","name":"merkleTreeDepth","nameLocation":"803:15:5","nodeType":"VariableDeclaration","scope":993,"src":"795:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":991,"name":"uint256","nodeType":"ElementaryTypeName","src":"795:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Verifier","nameLocation":"743:8:5","nodeType":"StructDefinition","scope":1016,"src":"736:89:5","visibility":"public"},{"anonymous":false,"documentation":{"id":994,"nodeType":"StructuredDocumentation","src":"831:201:5","text":"@dev Emitted when an admin is assigned to a cred.\n @param issuerAddress: Address of the issuer\n @param issuerName: Name of the issuer\n @param issuerSymbol: Symbol of the issuer"},"id":1002,"name":"issuerRegistered","nameLocation":"1043:16:5","nodeType":"EventDefinition","parameters":{"id":1001,"nodeType":"ParameterList","parameters":[{"constant":false,"id":996,"indexed":true,"mutability":"mutable","name":"issuerAddress","nameLocation":"1085:13:5","nodeType":"VariableDeclaration","scope":1002,"src":"1069:29:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":995,"name":"address","nodeType":"ElementaryTypeName","src":"1069:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":998,"indexed":true,"mutability":"mutable","name":"issuerName","nameLocation":"1124:10:5","nodeType":"VariableDeclaration","scope":1002,"src":"1109:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":997,"name":"string","nodeType":"ElementaryTypeName","src":"1109:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1000,"indexed":true,"mutability":"mutable","name":"issuerSymbol","nameLocation":"1160:12:5","nodeType":"VariableDeclaration","scope":1002,"src":"1145:27:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":999,"name":"string","nodeType":"ElementaryTypeName","src":"1145:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1059:119:5"},"src":"1037:142:5"},{"anonymous":false,"documentation":{"id":1003,"nodeType":"StructuredDocumentation","src":"1185:290:5","text":"@dev Emitted when a Credential proof is verified.\n @param credId: Id of the cred.\n @param merkleTreeRoot: Root of the Merkle tree.\n @param externalNullifier: External nullifier.\n @param nullifierHash: Nullifier hash.\n @param signal: Credential signal."},"id":1015,"name":"ProofVerified","nameLocation":"1486:13:5","nodeType":"EventDefinition","parameters":{"id":1014,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1005,"indexed":true,"mutability":"mutable","name":"credId","nameLocation":"1525:6:5","nodeType":"VariableDeclaration","scope":1015,"src":"1509:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1004,"name":"uint256","nodeType":"ElementaryTypeName","src":"1509:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1007,"indexed":false,"mutability":"mutable","name":"merkleTreeRoot","nameLocation":"1549:14:5","nodeType":"VariableDeclaration","scope":1015,"src":"1541:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1006,"name":"uint256","nodeType":"ElementaryTypeName","src":"1541:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1009,"indexed":false,"mutability":"mutable","name":"externalNullifier","nameLocation":"1581:17:5","nodeType":"VariableDeclaration","scope":1015,"src":"1573:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1008,"name":"uint256","nodeType":"ElementaryTypeName","src":"1573:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1011,"indexed":false,"mutability":"mutable","name":"nullifierHash","nameLocation":"1616:13:5","nodeType":"VariableDeclaration","scope":1015,"src":"1608:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1010,"name":"uint256","nodeType":"ElementaryTypeName","src":"1608:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1013,"indexed":false,"mutability":"mutable","name":"signal","nameLocation":"1647:6:5","nodeType":"VariableDeclaration","scope":1015,"src":"1639:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1012,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1639:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1499:160:5"},"src":"1480:180:5"}],"scope":1017,"src":"133:1534:5","usedErrors":[965,967,969,971,973]}],"src":"31:1636:5"},"id":5},"@creds-protocol/contracts/interfaces/ICredentialCore.sol":{"ast":{"absolutePath":"@creds-protocol/contracts/interfaces/ICredentialCore.sol","exportedSymbols":{"ICredentialCore":[1025]},"id":1026,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1018,"literals":["solidity","0.8",".4"],"nodeType":"PragmaDirective","src":"31:22:6"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":1019,"nodeType":"StructuredDocumentation","src":"55:84:6","text":"@title CredentialCore interface.\n @dev Interface of CredentialCore contract."},"fullyImplemented":true,"id":1025,"linearizedBaseContracts":[1025],"name":"ICredentialCore","nameLocation":"149:15:6","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1020,"nodeType":"StructuredDocumentation","src":"171:161:6","text":"@notice Emitted when a proof is verified correctly and a new nullifier hash is added.\n @param nullifierHash: Hash of external and identity nullifiers."},"id":1024,"name":"NullifierHashAdded","nameLocation":"343:18:6","nodeType":"EventDefinition","parameters":{"id":1023,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1022,"indexed":false,"mutability":"mutable","name":"nullifierHash","nameLocation":"370:13:6","nodeType":"VariableDeclaration","scope":1024,"src":"362:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1021,"name":"uint256","nodeType":"ElementaryTypeName","src":"362:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"361:23:6"},"src":"337:48:6"}],"scope":1026,"src":"139:248:6","usedErrors":[]}],"src":"31:357:6"},"id":6},"@creds-protocol/contracts/interfaces/ICredentialCreds.sol":{"ast":{"absolutePath":"@creds-protocol/contracts/interfaces/ICredentialCreds.sol","exportedSymbols":{"ICredentialCreds":[1105]},"id":1106,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1027,"literals":["solidity","0.8",".4"],"nodeType":"PragmaDirective","src":"31:22:7"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":1028,"nodeType":"StructuredDocumentation","src":"55:88:7","text":"@title CredentialCreds interface.\n @dev Interface of a CredentialCreds contract."},"fullyImplemented":false,"id":1105,"linearizedBaseContracts":[1105],"name":"ICredentialCreds","nameLocation":"153:16:7","nodeType":"ContractDefinition","nodes":[{"id":1030,"name":"Credential__CredDoesNotExist","nameLocation":"187:28:7","nodeType":"ErrorDefinition","parameters":{"id":1029,"nodeType":"ParameterList","parameters":[],"src":"215:2:7"},"src":"181:37:7"},{"id":1032,"name":"Credential__CredAlreadyExists","nameLocation":"229:29:7","nodeType":"ErrorDefinition","parameters":{"id":1031,"nodeType":"ParameterList","parameters":[],"src":"258:2:7"},"src":"223:38:7"},{"id":1034,"name":"Credential__CredIdIsNotLessThanSnarkScalarField","nameLocation":"272:47:7","nodeType":"ErrorDefinition","parameters":{"id":1033,"nodeType":"ParameterList","parameters":[],"src":"319:2:7"},"src":"266:56:7"},{"anonymous":false,"documentation":{"id":1035,"nodeType":"StructuredDocumentation","src":"328:219:7","text":"@dev Emitted when a new cred is created.\n @param issuer: Cred Issuer\n @param credId: Id of the cred.\n @param merkleTreeDepth: Depth of the tree.\n @param zeroValue: Zero value of the tree."},"id":1045,"name":"CredCreated","nameLocation":"558:11:7","nodeType":"EventDefinition","parameters":{"id":1044,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1037,"indexed":true,"mutability":"mutable","name":"issuer","nameLocation":"586:6:7","nodeType":"VariableDeclaration","scope":1045,"src":"570:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1036,"name":"address","nodeType":"ElementaryTypeName","src":"570:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1039,"indexed":true,"mutability":"mutable","name":"credId","nameLocation":"610:6:7","nodeType":"VariableDeclaration","scope":1045,"src":"594:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1038,"name":"uint256","nodeType":"ElementaryTypeName","src":"594:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1041,"indexed":false,"mutability":"mutable","name":"merkleTreeDepth","nameLocation":"626:15:7","nodeType":"VariableDeclaration","scope":1045,"src":"618:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1040,"name":"uint256","nodeType":"ElementaryTypeName","src":"618:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1043,"indexed":false,"mutability":"mutable","name":"zeroValue","nameLocation":"651:9:7","nodeType":"VariableDeclaration","scope":1045,"src":"643:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1042,"name":"uint256","nodeType":"ElementaryTypeName","src":"643:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"569:92:7"},"src":"552:110:7"},{"anonymous":false,"documentation":{"id":1046,"nodeType":"StructuredDocumentation","src":"668:268:7","text":"@dev Emitted when a new identity commitment is added.\n @param credId: Cred id of the cred.\n @param index: Identity commitment index.\n @param identityCommitment: New identity commitment.\n @param merkleTreeRoot: New root hash of the tree."},"id":1056,"name":"IdentityAdded","nameLocation":"947:13:7","nodeType":"EventDefinition","parameters":{"id":1055,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1048,"indexed":true,"mutability":"mutable","name":"credId","nameLocation":"977:6:7","nodeType":"VariableDeclaration","scope":1056,"src":"961:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1047,"name":"uint256","nodeType":"ElementaryTypeName","src":"961:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1050,"indexed":false,"mutability":"mutable","name":"index","nameLocation":"993:5:7","nodeType":"VariableDeclaration","scope":1056,"src":"985:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1049,"name":"uint256","nodeType":"ElementaryTypeName","src":"985:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1052,"indexed":false,"mutability":"mutable","name":"identityCommitment","nameLocation":"1008:18:7","nodeType":"VariableDeclaration","scope":1056,"src":"1000:26:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1051,"name":"uint256","nodeType":"ElementaryTypeName","src":"1000:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1054,"indexed":false,"mutability":"mutable","name":"merkleTreeRoot","nameLocation":"1036:14:7","nodeType":"VariableDeclaration","scope":1056,"src":"1028:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1053,"name":"uint256","nodeType":"ElementaryTypeName","src":"1028:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"960:91:7"},"src":"941:111:7"},{"anonymous":false,"documentation":{"id":1057,"nodeType":"StructuredDocumentation","src":"1058:349:7","text":"@dev Emitted when an identity commitment is updated.\n @param credId: Cred id of the cred.\n @param index: Identity commitment index.\n @param identityCommitment: Existing identity commitment to be updated.\n @param newIdentityCommitment: New identity commitment.\n @param merkleTreeRoot: New root hash of the tree."},"id":1069,"name":"IdentityUpdated","nameLocation":"1418:15:7","nodeType":"EventDefinition","parameters":{"id":1068,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1059,"indexed":true,"mutability":"mutable","name":"credId","nameLocation":"1459:6:7","nodeType":"VariableDeclaration","scope":1069,"src":"1443:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1058,"name":"uint256","nodeType":"ElementaryTypeName","src":"1443:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1061,"indexed":false,"mutability":"mutable","name":"index","nameLocation":"1483:5:7","nodeType":"VariableDeclaration","scope":1069,"src":"1475:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1060,"name":"uint256","nodeType":"ElementaryTypeName","src":"1475:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1063,"indexed":false,"mutability":"mutable","name":"identityCommitment","nameLocation":"1506:18:7","nodeType":"VariableDeclaration","scope":1069,"src":"1498:26:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1062,"name":"uint256","nodeType":"ElementaryTypeName","src":"1498:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1065,"indexed":false,"mutability":"mutable","name":"newIdentityCommitment","nameLocation":"1542:21:7","nodeType":"VariableDeclaration","scope":1069,"src":"1534:29:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1064,"name":"uint256","nodeType":"ElementaryTypeName","src":"1534:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1067,"indexed":false,"mutability":"mutable","name":"merkleTreeRoot","nameLocation":"1581:14:7","nodeType":"VariableDeclaration","scope":1069,"src":"1573:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1066,"name":"uint256","nodeType":"ElementaryTypeName","src":"1573:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1433:168:7"},"src":"1412:190:7"},{"anonymous":false,"documentation":{"id":1070,"nodeType":"StructuredDocumentation","src":"1608:289:7","text":"@dev Emitted when a new identity commitment is removed.\n @param credId: Cred id of the cred.\n @param index: Identity commitment index.\n @param identityCommitment: Existing identity commitment to be removed.\n @param merkleTreeRoot: New root hash of the tree."},"id":1080,"name":"IdentityRemoved","nameLocation":"1908:15:7","nodeType":"EventDefinition","parameters":{"id":1079,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1072,"indexed":true,"mutability":"mutable","name":"credId","nameLocation":"1940:6:7","nodeType":"VariableDeclaration","scope":1080,"src":"1924:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1071,"name":"uint256","nodeType":"ElementaryTypeName","src":"1924:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1074,"indexed":false,"mutability":"mutable","name":"index","nameLocation":"1956:5:7","nodeType":"VariableDeclaration","scope":1080,"src":"1948:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1073,"name":"uint256","nodeType":"ElementaryTypeName","src":"1948:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1076,"indexed":false,"mutability":"mutable","name":"identityCommitment","nameLocation":"1971:18:7","nodeType":"VariableDeclaration","scope":1080,"src":"1963:26:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1075,"name":"uint256","nodeType":"ElementaryTypeName","src":"1963:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1078,"indexed":false,"mutability":"mutable","name":"merkleTreeRoot","nameLocation":"1999:14:7","nodeType":"VariableDeclaration","scope":1080,"src":"1991:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1077,"name":"uint256","nodeType":"ElementaryTypeName","src":"1991:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1923:91:7"},"src":"1902:113:7"},{"documentation":{"id":1081,"nodeType":"StructuredDocumentation","src":"2021:124:7","text":"@dev Returns the last root hash of a cred.\n @param credId: Id of the cred.\n @return Root hash of the cred."},"functionSelector":"dabc4d51","id":1088,"implemented":false,"kind":"function","modifiers":[],"name":"getMerkleTreeRoot","nameLocation":"2159:17:7","nodeType":"FunctionDefinition","parameters":{"id":1084,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1083,"mutability":"mutable","name":"credId","nameLocation":"2185:6:7","nodeType":"VariableDeclaration","scope":1088,"src":"2177:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1082,"name":"uint256","nodeType":"ElementaryTypeName","src":"2177:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2176:16:7"},"returnParameters":{"id":1087,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1086,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1088,"src":"2216:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1085,"name":"uint256","nodeType":"ElementaryTypeName","src":"2216:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2215:9:7"},"scope":1105,"src":"2150:75:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1089,"nodeType":"StructuredDocumentation","src":"2231:128:7","text":"@dev Returns the depth of the tree of a cred.\n @param credId: Id of the cred.\n @return Depth of the cred tree."},"functionSelector":"6389e107","id":1096,"implemented":false,"kind":"function","modifiers":[],"name":"getMerkleTreeDepth","nameLocation":"2373:18:7","nodeType":"FunctionDefinition","parameters":{"id":1092,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1091,"mutability":"mutable","name":"credId","nameLocation":"2400:6:7","nodeType":"VariableDeclaration","scope":1096,"src":"2392:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1090,"name":"uint256","nodeType":"ElementaryTypeName","src":"2392:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2391:16:7"},"returnParameters":{"id":1095,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1094,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1096,"src":"2431:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1093,"name":"uint256","nodeType":"ElementaryTypeName","src":"2431:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2430:9:7"},"scope":1105,"src":"2364:76:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1097,"nodeType":"StructuredDocumentation","src":"2446:131:7","text":"@dev Returns the number of tree leaves of a cred.\n @param credId: Id of the cred.\n @return Number of tree leaves."},"functionSelector":"638480be","id":1104,"implemented":false,"kind":"function","modifiers":[],"name":"getNumberOfMerkleTreeLeaves","nameLocation":"2591:27:7","nodeType":"FunctionDefinition","parameters":{"id":1100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1099,"mutability":"mutable","name":"credId","nameLocation":"2627:6:7","nodeType":"VariableDeclaration","scope":1104,"src":"2619:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1098,"name":"uint256","nodeType":"ElementaryTypeName","src":"2619:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2618:16:7"},"returnParameters":{"id":1103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1102,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1104,"src":"2658:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1101,"name":"uint256","nodeType":"ElementaryTypeName","src":"2658:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2657:9:7"},"scope":1105,"src":"2582:85:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1106,"src":"143:2526:7","usedErrors":[1030,1032,1034]}],"src":"31:2639:7"},"id":7},"@creds-protocol/contracts/interfaces/IVerifier.sol":{"ast":{"absolutePath":"@creds-protocol/contracts/interfaces/IVerifier.sol","exportedSymbols":{"IVerifier":[1130]},"id":1131,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1107,"literals":["solidity","0.8",".4"],"nodeType":"PragmaDirective","src":"31:22:8"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":1108,"nodeType":"StructuredDocumentation","src":"55:72:8","text":"@title Verifier interface.\n @dev Interface of Verifier contract."},"fullyImplemented":false,"id":1130,"linearizedBaseContracts":[1130],"name":"IVerifier","nameLocation":"137:9:8","nodeType":"ContractDefinition","nodes":[{"functionSelector":"5fe8c13b","id":1129,"implemented":false,"kind":"function","modifiers":[],"name":"verifyProof","nameLocation":"162:11:8","nodeType":"FunctionDefinition","parameters":{"id":1127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1112,"mutability":"mutable","name":"a","nameLocation":"201:1:8","nodeType":"VariableDeclaration","scope":1129,"src":"183:19:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1109,"name":"uint256","nodeType":"ElementaryTypeName","src":"183:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1111,"length":{"hexValue":"32","id":1110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"191:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"183:10:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"},{"constant":false,"id":1118,"mutability":"mutable","name":"b","nameLocation":"233:1:8","nodeType":"VariableDeclaration","scope":1129,"src":"212:22:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$2_memory_ptr_$2_memory_ptr","typeString":"uint256[2][2]"},"typeName":{"baseType":{"baseType":{"id":1113,"name":"uint256","nodeType":"ElementaryTypeName","src":"212:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1115,"length":{"hexValue":"32","id":1114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"220:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"212:10:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"id":1117,"length":{"hexValue":"32","id":1116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"223:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"212:13:8","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$2_storage_$2_storage_ptr","typeString":"uint256[2][2]"}},"visibility":"internal"},{"constant":false,"id":1122,"mutability":"mutable","name":"c","nameLocation":"262:1:8","nodeType":"VariableDeclaration","scope":1129,"src":"244:19:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1119,"name":"uint256","nodeType":"ElementaryTypeName","src":"244:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1121,"length":{"hexValue":"32","id":1120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"252:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"244:10:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"},{"constant":false,"id":1126,"mutability":"mutable","name":"input","nameLocation":"291:5:8","nodeType":"VariableDeclaration","scope":1129,"src":"273:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$4_memory_ptr","typeString":"uint256[4]"},"typeName":{"baseType":{"id":1123,"name":"uint256","nodeType":"ElementaryTypeName","src":"273:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1125,"length":{"hexValue":"34","id":1124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"281:1:8","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"nodeType":"ArrayTypeName","src":"273:10:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$4_storage_ptr","typeString":"uint256[4]"}},"visibility":"internal"}],"src":"173:129:8"},"returnParameters":{"id":1128,"nodeType":"ParameterList","parameters":[],"src":"316:0:8"},"scope":1130,"src":"153:164:8","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1131,"src":"127:192:8","usedErrors":[]}],"src":"31:288:8"},"id":8},"@creds-protocol/contracts/openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@creds-protocol/contracts/openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[1152]},"id":1153,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1132,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:9"},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":1133,"nodeType":"StructuredDocumentation","src":"111:496:9","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1152,"linearizedBaseContracts":[1152],"name":"Context","nameLocation":"626:7:9","nodeType":"ContractDefinition","nodes":[{"body":{"id":1141,"nodeType":"Block","src":"702:34:9","statements":[{"expression":{"expression":{"id":1138,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:9","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"719:10:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1137,"id":1140,"nodeType":"Return","src":"712:17:9"}]},"id":1142,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:9","nodeType":"FunctionDefinition","parameters":{"id":1134,"nodeType":"ParameterList","parameters":[],"src":"659:2:9"},"returnParameters":{"id":1137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1136,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1142,"src":"693:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1135,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:9"},"scope":1152,"src":"640:96:9","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1150,"nodeType":"Block","src":"809:32:9","statements":[{"expression":{"expression":{"id":1147,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:9","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"data","nodeType":"MemberAccess","src":"826:8:9","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1146,"id":1149,"nodeType":"Return","src":"819:15:9"}]},"id":1151,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:9","nodeType":"FunctionDefinition","parameters":{"id":1143,"nodeType":"ParameterList","parameters":[],"src":"759:2:9"},"returnParameters":{"id":1146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1145,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1151,"src":"793:14:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1144,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:9"},"scope":1152,"src":"742:99:9","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1153,"src":"608:235:9","usedErrors":[]}],"src":"86:758:9"},"id":9},"@creds-protocol/contracts/zk-kit/incremental-merkle-tree.sol/Hashes.sol":{"ast":{"absolutePath":"@creds-protocol/contracts/zk-kit/incremental-merkle-tree.sol/Hashes.sol","exportedSymbols":{"PoseidonT3":[1165],"PoseidonT6":[1176]},"id":1177,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1154,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"31:23:10"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":1165,"linearizedBaseContracts":[1165],"name":"PoseidonT3","nameLocation":"64:10:10","nodeType":"ContractDefinition","nodes":[{"body":{"id":1163,"nodeType":"Block","src":"148:2:10","statements":[]},"functionSelector":"29a5f2f6","id":1164,"implemented":true,"kind":"function","modifiers":[],"name":"poseidon","nameLocation":"90:8:10","nodeType":"FunctionDefinition","parameters":{"id":1159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1158,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1164,"src":"99:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1155,"name":"uint256","nodeType":"ElementaryTypeName","src":"99:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1157,"length":{"hexValue":"32","id":1156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"107:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"99:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"}],"src":"98:19:10"},"returnParameters":{"id":1162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1161,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1164,"src":"139:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1160,"name":"uint256","nodeType":"ElementaryTypeName","src":"139:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"138:9:10"},"scope":1165,"src":"81:69:10","stateMutability":"pure","virtual":false,"visibility":"public"}],"scope":1177,"src":"56:96:10","usedErrors":[]},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":1176,"linearizedBaseContracts":[1176],"name":"PoseidonT6","nameLocation":"162:10:10","nodeType":"ContractDefinition","nodes":[{"body":{"id":1174,"nodeType":"Block","src":"246:2:10","statements":[]},"functionSelector":"4937a258","id":1175,"implemented":true,"kind":"function","modifiers":[],"name":"poseidon","nameLocation":"188:8:10","nodeType":"FunctionDefinition","parameters":{"id":1170,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1169,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1175,"src":"197:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$5_memory_ptr","typeString":"uint256[5]"},"typeName":{"baseType":{"id":1166,"name":"uint256","nodeType":"ElementaryTypeName","src":"197:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1168,"length":{"hexValue":"35","id":1167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"205:1:10","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"nodeType":"ArrayTypeName","src":"197:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$5_storage_ptr","typeString":"uint256[5]"}},"visibility":"internal"}],"src":"196:19:10"},"returnParameters":{"id":1173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1172,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1175,"src":"237:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1171,"name":"uint256","nodeType":"ElementaryTypeName","src":"237:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"236:9:10"},"scope":1176,"src":"179:69:10","stateMutability":"pure","virtual":false,"visibility":"public"}],"scope":1177,"src":"154:96:10","usedErrors":[]}],"src":"31:220:10"},"id":10},"@creds-protocol/contracts/zk-kit/incremental-merkle-tree.sol/IncrementalBinaryTree.sol":{"ast":{"absolutePath":"@creds-protocol/contracts/zk-kit/incremental-merkle-tree.sol/IncrementalBinaryTree.sol","exportedSymbols":{"IncrementalBinaryTree":[1649],"IncrementalTreeData":[1197],"PoseidonT3":[1165]},"id":1650,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1178,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:11"},{"absolutePath":"@creds-protocol/contracts/zk-kit/incremental-merkle-tree.sol/Hashes.sol","file":"./Hashes.sol","id":1180,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1650,"sourceUnit":1177,"src":"57:40:11","symbolAliases":[{"foreign":{"id":1179,"name":"PoseidonT3","nodeType":"Identifier","overloadedDeclarations":[],"src":"65:10:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"canonicalName":"IncrementalTreeData","id":1197,"members":[{"constant":false,"id":1182,"mutability":"mutable","name":"depth","nameLocation":"237:5:11","nodeType":"VariableDeclaration","scope":1197,"src":"229:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1181,"name":"uint256","nodeType":"ElementaryTypeName","src":"229:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1184,"mutability":"mutable","name":"root","nameLocation":"291:4:11","nodeType":"VariableDeclaration","scope":1197,"src":"283:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1183,"name":"uint256","nodeType":"ElementaryTypeName","src":"283:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1186,"mutability":"mutable","name":"numberOfLeaves","nameLocation":"335:14:11","nodeType":"VariableDeclaration","scope":1197,"src":"327:22:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1185,"name":"uint256","nodeType":"ElementaryTypeName","src":"327:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1190,"mutability":"mutable","name":"zeroes","nameLocation":"416:6:11","nodeType":"VariableDeclaration","scope":1197,"src":"388:34:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":1189,"keyType":{"id":1187,"name":"uint256","nodeType":"ElementaryTypeName","src":"396:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"388:27:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueType":{"id":1188,"name":"uint256","nodeType":"ElementaryTypeName","src":"407:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"id":1196,"mutability":"mutable","name":"lastSubtrees","nameLocation":"622:12:11","nodeType":"VariableDeclaration","scope":1197,"src":"591:43:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_array$_t_uint256_$2_storage_$","typeString":"mapping(uint256 => uint256[2])"},"typeName":{"id":1195,"keyType":{"id":1191,"name":"uint256","nodeType":"ElementaryTypeName","src":"599:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"591:30:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_array$_t_uint256_$2_storage_$","typeString":"mapping(uint256 => uint256[2])"},"valueType":{"baseType":{"id":1192,"name":"uint256","nodeType":"ElementaryTypeName","src":"610:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1194,"length":{"hexValue":"32","id":1193,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"618:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"610:10:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}}},"visibility":"internal"}],"name":"IncrementalTreeData","nameLocation":"203:19:11","nodeType":"StructDefinition","scope":1650,"src":"196:500:11","visibility":"public"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":1198,"nodeType":"StructuredDocumentation","src":"698:174:11","text":"@title Incremental binary Merkle tree.\n @dev The incremental tree allows to calculate the root hash each time a leaf is added, ensuring\n the integrity of the tree."},"fullyImplemented":true,"id":1649,"linearizedBaseContracts":[1649],"name":"IncrementalBinaryTree","nameLocation":"880:21:11","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1201,"mutability":"constant","name":"MAX_DEPTH","nameLocation":"932:9:11","nodeType":"VariableDeclaration","scope":1649,"src":"908:38:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1199,"name":"uint8","nodeType":"ElementaryTypeName","src":"908:5:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3332","id":1200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"944:2:11","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"visibility":"internal"},{"constant":true,"id":1204,"mutability":"constant","name":"SNARK_SCALAR_FIELD","nameLocation":"978:18:11","nodeType":"VariableDeclaration","scope":1649,"src":"952:132:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1202,"name":"uint256","nodeType":"ElementaryTypeName","src":"952:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3231383838323432383731383339323735323232323436343035373435323537323735303838353438333634343030343136303334333433363938323034313836353735383038343935363137","id":1203,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1007:77:11","typeDescriptions":{"typeIdentifier":"t_rational_21888242871839275222246405745257275088548364400416034343698204186575808495617_by_1","typeString":"int_const 2188...(69 digits omitted)...5617"},"value":"21888242871839275222246405745257275088548364400416034343698204186575808495617"},"visibility":"internal"},{"body":{"id":1275,"nodeType":"Block","src":"1355:480:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1216,"name":"zero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1212,"src":"1373:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1217,"name":"SNARK_SCALAR_FIELD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"1380:18:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1373:25:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e6372656d656e74616c42696e617279547265653a206c656166206d757374206265203c20534e41524b5f5343414c41525f4649454c44","id":1219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1400:58:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_8b8db1558a0a283e0a9442c31e94b10cc2d3fde6e01b7fd4aa819ae25430befe","typeString":"literal_string \"IncrementalBinaryTree: leaf must be < SNARK_SCALAR_FIELD\""},"value":"IncrementalBinaryTree: leaf must be < SNARK_SCALAR_FIELD"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8b8db1558a0a283e0a9442c31e94b10cc2d3fde6e01b7fd4aa819ae25430befe","typeString":"literal_string \"IncrementalBinaryTree: leaf must be < SNARK_SCALAR_FIELD\""}],"id":1215,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1365:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1365:94:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1221,"nodeType":"ExpressionStatement","src":"1365:94:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1223,"name":"depth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1210,"src":"1477:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1224,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1485:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1477:9:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1226,"name":"depth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1210,"src":"1490:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":1227,"name":"MAX_DEPTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1201,"src":"1499:9:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"1490:18:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1477:31:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e6372656d656e74616c42696e617279547265653a2074726565206465707468206d757374206265206265747765656e203120616e64203332","id":1230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1510:60:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_d1a9caf7371d7849cac8e00abf12726da9a4649405a81c36fdd95d9f9a7ca1b7","typeString":"literal_string \"IncrementalBinaryTree: tree depth must be between 1 and 32\""},"value":"IncrementalBinaryTree: tree depth must be between 1 and 32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d1a9caf7371d7849cac8e00abf12726da9a4649405a81c36fdd95d9f9a7ca1b7","typeString":"literal_string \"IncrementalBinaryTree: tree depth must be between 1 and 32\""}],"id":1222,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1469:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1469:102:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1232,"nodeType":"ExpressionStatement","src":"1469:102:11"},{"expression":{"id":1237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1233,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1208,"src":"1582:4:11","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage_ptr","typeString":"struct IncrementalTreeData storage pointer"}},"id":1235,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"depth","nodeType":"MemberAccess","referencedDeclaration":1182,"src":"1582:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1236,"name":"depth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1210,"src":"1595:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1582:18:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1238,"nodeType":"ExpressionStatement","src":"1582:18:11"},{"body":{"id":1267,"nodeType":"Block","src":"1642:160:11","statements":[{"expression":{"id":1252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":1246,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1208,"src":"1656:4:11","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage_ptr","typeString":"struct IncrementalTreeData storage pointer"}},"id":1249,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"zeroes","nodeType":"MemberAccess","referencedDeclaration":1190,"src":"1656:11:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1250,"indexExpression":{"id":1248,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1240,"src":"1668:1:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1656:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1251,"name":"zero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1212,"src":"1673:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1656:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1253,"nodeType":"ExpressionStatement","src":"1656:21:11"},{"expression":{"id":1261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1254,"name":"zero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1212,"src":"1691:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"components":[{"id":1257,"name":"zero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1212,"src":"1719:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1258,"name":"zero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1212,"src":"1725:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1259,"isConstant":false,"isInlineArray":true,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1718:12:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}],"expression":{"id":1255,"name":"PoseidonT3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"1698:10:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PoseidonT3_$1165_$","typeString":"type(library PoseidonT3)"}},"id":1256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"poseidon","nodeType":"MemberAccess","referencedDeclaration":1164,"src":"1698:19:11","typeDescriptions":{"typeIdentifier":"t_function_delegatecall_pure$_t_array$_t_uint256_$2_memory_ptr_$returns$_t_uint256_$","typeString":"function (uint256[2] memory) pure returns (uint256)"}},"id":1260,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1698:33:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1691:40:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1262,"nodeType":"ExpressionStatement","src":"1691:40:11"},{"id":1266,"nodeType":"UncheckedBlock","src":"1746:46:11","statements":[{"expression":{"id":1264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"1774:3:11","subExpression":{"id":1263,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1240,"src":"1776:1:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1265,"nodeType":"ExpressionStatement","src":"1774:3:11"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1243,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1240,"src":"1629:1:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1244,"name":"depth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1210,"src":"1633:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1629:9:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1268,"initializationExpression":{"assignments":[1240],"declarations":[{"constant":false,"id":1240,"mutability":"mutable","name":"i","nameLocation":"1622:1:11","nodeType":"VariableDeclaration","scope":1268,"src":"1616:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1239,"name":"uint8","nodeType":"ElementaryTypeName","src":"1616:5:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1242,"initialValue":{"hexValue":"30","id":1241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1626:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1616:11:11"},"nodeType":"ForStatement","src":"1611:191:11"},{"expression":{"id":1273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1269,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1208,"src":"1812:4:11","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage_ptr","typeString":"struct IncrementalTreeData storage pointer"}},"id":1271,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"root","nodeType":"MemberAccess","referencedDeclaration":1184,"src":"1812:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1272,"name":"zero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1212,"src":"1824:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1812:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1274,"nodeType":"ExpressionStatement","src":"1812:16:11"}]},"documentation":{"id":1205,"nodeType":"StructuredDocumentation","src":"1091:145:11","text":"@dev Initializes a tree.\n @param self: Tree data.\n @param depth: Depth of the tree.\n @param zero: Zero value to be used."},"functionSelector":"1095fbb4","id":1276,"implemented":true,"kind":"function","modifiers":[],"name":"init","nameLocation":"1250:4:11","nodeType":"FunctionDefinition","parameters":{"id":1213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1208,"mutability":"mutable","name":"self","nameLocation":"1292:4:11","nodeType":"VariableDeclaration","scope":1276,"src":"1264:32:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage_ptr","typeString":"struct IncrementalTreeData"},"typeName":{"id":1207,"nodeType":"UserDefinedTypeName","pathNode":{"id":1206,"name":"IncrementalTreeData","nodeType":"IdentifierPath","referencedDeclaration":1197,"src":"1264:19:11"},"referencedDeclaration":1197,"src":"1264:19:11","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage_ptr","typeString":"struct IncrementalTreeData"}},"visibility":"internal"},{"constant":false,"id":1210,"mutability":"mutable","name":"depth","nameLocation":"1314:5:11","nodeType":"VariableDeclaration","scope":1276,"src":"1306:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1209,"name":"uint256","nodeType":"ElementaryTypeName","src":"1306:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1212,"mutability":"mutable","name":"zero","nameLocation":"1337:4:11","nodeType":"VariableDeclaration","scope":1276,"src":"1329:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1211,"name":"uint256","nodeType":"ElementaryTypeName","src":"1329:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1254:93:11"},"returnParameters":{"id":1214,"nodeType":"ParameterList","parameters":[],"src":"1355:0:11"},"scope":1649,"src":"1241:594:11","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1386,"nodeType":"Block","src":"2027:752:11","statements":[{"assignments":[1286],"declarations":[{"constant":false,"id":1286,"mutability":"mutable","name":"depth","nameLocation":"2045:5:11","nodeType":"VariableDeclaration","scope":1386,"src":"2037:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1285,"name":"uint256","nodeType":"ElementaryTypeName","src":"2037:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1289,"initialValue":{"expression":{"id":1287,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"2053:4:11","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage_ptr","typeString":"struct IncrementalTreeData storage pointer"}},"id":1288,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"depth","nodeType":"MemberAccess","referencedDeclaration":1182,"src":"2053:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2037:26:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1291,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"2082:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1292,"name":"SNARK_SCALAR_FIELD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"2089:18:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2082:25:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e6372656d656e74616c42696e617279547265653a206c656166206d757374206265203c20534e41524b5f5343414c41525f4649454c44","id":1294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2109:58:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_8b8db1558a0a283e0a9442c31e94b10cc2d3fde6e01b7fd4aa819ae25430befe","typeString":"literal_string \"IncrementalBinaryTree: leaf must be < SNARK_SCALAR_FIELD\""},"value":"IncrementalBinaryTree: leaf must be < SNARK_SCALAR_FIELD"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8b8db1558a0a283e0a9442c31e94b10cc2d3fde6e01b7fd4aa819ae25430befe","typeString":"literal_string \"IncrementalBinaryTree: leaf must be < SNARK_SCALAR_FIELD\""}],"id":1290,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2074:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2074:94:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1296,"nodeType":"ExpressionStatement","src":"2074:94:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1298,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"2186:4:11","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage_ptr","typeString":"struct IncrementalTreeData storage pointer"}},"id":1299,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"numberOfLeaves","nodeType":"MemberAccess","referencedDeclaration":1186,"src":"2186:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1300,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2208:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":1301,"name":"depth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1286,"src":"2211:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2208:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2186:30:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e6372656d656e74616c42696e617279547265653a20747265652069732066756c6c","id":1304,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2218:37:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_62c13f9e20ef6a49418227b3dc1613b161135d2222a0c493c73c44c2e361acda","typeString":"literal_string \"IncrementalBinaryTree: tree is full\""},"value":"IncrementalBinaryTree: tree is full"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_62c13f9e20ef6a49418227b3dc1613b161135d2222a0c493c73c44c2e361acda","typeString":"literal_string \"IncrementalBinaryTree: tree is full\""}],"id":1297,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2178:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2178:78:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1306,"nodeType":"ExpressionStatement","src":"2178:78:11"},{"assignments":[1308],"declarations":[{"constant":false,"id":1308,"mutability":"mutable","name":"index","nameLocation":"2275:5:11","nodeType":"VariableDeclaration","scope":1386,"src":"2267:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1307,"name":"uint256","nodeType":"ElementaryTypeName","src":"2267:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1311,"initialValue":{"expression":{"id":1309,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"2283:4:11","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage_ptr","typeString":"struct IncrementalTreeData storage pointer"}},"id":1310,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"numberOfLeaves","nodeType":"MemberAccess","referencedDeclaration":1186,"src":"2283:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2267:35:11"},{"assignments":[1313],"declarations":[{"constant":false,"id":1313,"mutability":"mutable","name":"hash","nameLocation":"2320:4:11","nodeType":"VariableDeclaration","scope":1386,"src":"2312:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1312,"name":"uint256","nodeType":"ElementaryTypeName","src":"2312:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1315,"initialValue":{"id":1314,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"2327:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2312:19:11"},{"body":{"id":1372,"nodeType":"Block","src":"2373:339:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1323,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1308,"src":"2391:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"31","id":1324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2399:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2391:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2404:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2391:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1352,"nodeType":"Block","src":"2491:63:11","statements":[{"expression":{"id":1350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":1342,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"2509:4:11","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage_ptr","typeString":"struct IncrementalTreeData storage pointer"}},"id":1346,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"lastSubtrees","nodeType":"MemberAccess","referencedDeclaration":1196,"src":"2509:17:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_array$_t_uint256_$2_storage_$","typeString":"mapping(uint256 => uint256[2] storage ref)"}},"id":1347,"indexExpression":{"id":1344,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1317,"src":"2527:1:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2509:20:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage","typeString":"uint256[2] storage ref"}},"id":1348,"indexExpression":{"hexValue":"31","id":1345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2530:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2509:23:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1349,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1313,"src":"2535:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2509:30:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1351,"nodeType":"ExpressionStatement","src":"2509:30:11"}]},"id":1353,"nodeType":"IfStatement","src":"2387:167:11","trueBody":{"id":1341,"nodeType":"Block","src":"2407:78:11","statements":[{"expression":{"id":1339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":1328,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"2425:4:11","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage_ptr","typeString":"struct IncrementalTreeData storage pointer"}},"id":1331,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"lastSubtrees","nodeType":"MemberAccess","referencedDeclaration":1196,"src":"2425:17:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_array$_t_uint256_$2_storage_$","typeString":"mapping(uint256 => uint256[2] storage ref)"}},"id":1332,"indexExpression":{"id":1330,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1317,"src":"2443:1:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2425:20:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage","typeString":"uint256[2] storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"id":1333,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1313,"src":"2449:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"expression":{"id":1334,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"2455:4:11","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage_ptr","typeString":"struct IncrementalTreeData storage pointer"}},"id":1335,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"zeroes","nodeType":"MemberAccess","referencedDeclaration":1190,"src":"2455:11:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1337,"indexExpression":{"id":1336,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1317,"src":"2467:1:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2455:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1338,"isConstant":false,"isInlineArray":true,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2448:22:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"src":"2425:45:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage","typeString":"uint256[2] storage ref"}},"id":1340,"nodeType":"ExpressionStatement","src":"2425:45:11"}]}},{"expression":{"id":1362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1354,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1313,"src":"2568:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"expression":{"id":1357,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"2595:4:11","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage_ptr","typeString":"struct IncrementalTreeData storage pointer"}},"id":1358,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"lastSubtrees","nodeType":"MemberAccess","referencedDeclaration":1196,"src":"2595:17:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_array$_t_uint256_$2_storage_$","typeString":"mapping(uint256 => uint256[2] storage ref)"}},"id":1360,"indexExpression":{"id":1359,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1317,"src":"2613:1:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2595:20:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage","typeString":"uint256[2] storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$2_storage","typeString":"uint256[2] storage ref"}],"expression":{"id":1355,"name":"PoseidonT3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"2575:10:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PoseidonT3_$1165_$","typeString":"type(library PoseidonT3)"}},"id":1356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"poseidon","nodeType":"MemberAccess","referencedDeclaration":1164,"src":"2575:19:11","typeDescriptions":{"typeIdentifier":"t_function_delegatecall_pure$_t_array$_t_uint256_$2_memory_ptr_$returns$_t_uint256_$","typeString":"function (uint256[2] memory) pure returns (uint256)"}},"id":1361,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2575:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2568:48:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1363,"nodeType":"ExpressionStatement","src":"2568:48:11"},{"expression":{"id":1366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1364,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1308,"src":"2630:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"31","id":1365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2640:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2630:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1367,"nodeType":"ExpressionStatement","src":"2630:11:11"},{"id":1371,"nodeType":"UncheckedBlock","src":"2656:46:11","statements":[{"expression":{"id":1369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"2684:3:11","subExpression":{"id":1368,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1317,"src":"2686:1:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1370,"nodeType":"ExpressionStatement","src":"2684:3:11"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1320,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1317,"src":"2360:1:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1321,"name":"depth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1286,"src":"2364:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2360:9:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1373,"initializationExpression":{"assignments":[1317],"declarations":[{"constant":false,"id":1317,"mutability":"mutable","name":"i","nameLocation":"2353:1:11","nodeType":"VariableDeclaration","scope":1373,"src":"2347:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1316,"name":"uint8","nodeType":"ElementaryTypeName","src":"2347:5:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1319,"initialValue":{"hexValue":"30","id":1318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2357:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2347:11:11"},"nodeType":"ForStatement","src":"2342:370:11"},{"expression":{"id":1378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1374,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"2722:4:11","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage_ptr","typeString":"struct IncrementalTreeData storage pointer"}},"id":1376,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"root","nodeType":"MemberAccess","referencedDeclaration":1184,"src":"2722:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1377,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1313,"src":"2734:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2722:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1379,"nodeType":"ExpressionStatement","src":"2722:16:11"},{"expression":{"id":1384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1380,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"2748:4:11","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage_ptr","typeString":"struct IncrementalTreeData storage pointer"}},"id":1382,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"numberOfLeaves","nodeType":"MemberAccess","referencedDeclaration":1186,"src":"2748:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2771:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2748:24:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1385,"nodeType":"ExpressionStatement","src":"2748:24:11"}]},"documentation":{"id":1277,"nodeType":"StructuredDocumentation","src":"1841:110:11","text":"@dev Inserts a leaf in the tree.\n @param self: Tree data.\n @param leaf: Leaf to be inserted."},"functionSelector":"168703fa","id":1387,"implemented":true,"kind":"function","modifiers":[],"name":"insert","nameLocation":"1965:6:11","nodeType":"FunctionDefinition","parameters":{"id":1283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1280,"mutability":"mutable","name":"self","nameLocation":"2000:4:11","nodeType":"VariableDeclaration","scope":1387,"src":"1972:32:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage_ptr","typeString":"struct IncrementalTreeData"},"typeName":{"id":1279,"nodeType":"UserDefinedTypeName","pathNode":{"id":1278,"name":"IncrementalTreeData","nodeType":"IdentifierPath","referencedDeclaration":1197,"src":"1972:19:11"},"referencedDeclaration":1197,"src":"1972:19:11","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage_ptr","typeString":"struct IncrementalTreeData"}},"visibility":"internal"},{"constant":false,"id":1282,"mutability":"mutable","name":"leaf","nameLocation":"2014:4:11","nodeType":"VariableDeclaration","scope":1387,"src":"2006:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1281,"name":"uint256","nodeType":"ElementaryTypeName","src":"2006:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1971:48:11"},"returnParameters":{"id":1284,"nodeType":"ParameterList","parameters":[],"src":"2027:0:11"},"scope":1649,"src":"1956:823:11","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1516,"nodeType":"Block","src":"3287:869:11","statements":[{"expression":{"arguments":[{"arguments":[{"id":1406,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1391,"src":"3325:4:11","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage_ptr","typeString":"struct IncrementalTreeData storage pointer"}},{"id":1407,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1393,"src":"3331:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1408,"name":"proofSiblings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1398,"src":"3337:13:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":1409,"name":"proofPathIndices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"3352:16:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_calldata_ptr","typeString":"uint8[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage_ptr","typeString":"struct IncrementalTreeData storage pointer"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint8_$dyn_calldata_ptr","typeString":"uint8[] calldata"}],"id":1405,"name":"verify","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1648,"src":"3318:6:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_IncrementalTreeData_$1197_storage_ptr_$_t_uint256_$_t_array$_t_uint256_$dyn_calldata_ptr_$_t_array$_t_uint8_$dyn_calldata_ptr_$returns$_t_bool_$","typeString":"function (struct IncrementalTreeData storage pointer,uint256,uint256[] calldata,uint8[] calldata) view returns (bool)"}},"id":1410,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3318:51:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e6372656d656e74616c42696e617279547265653a206c656166206973206e6f742070617274206f66207468652074726565","id":1411,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3383:53:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_dbecebe72e2da15cb1517ee278f7226b5f42240a1f2bcbb33f940af2c87579ee","typeString":"literal_string \"IncrementalBinaryTree: leaf is not part of the tree\""},"value":"IncrementalBinaryTree: leaf is not part of the tree"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_dbecebe72e2da15cb1517ee278f7226b5f42240a1f2bcbb33f940af2c87579ee","typeString":"literal_string \"IncrementalBinaryTree: leaf is not part of the tree\""}],"id":1404,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3297:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1412,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3297:149:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1413,"nodeType":"ExpressionStatement","src":"3297:149:11"},{"assignments":[1415],"declarations":[{"constant":false,"id":1415,"mutability":"mutable","name":"depth","nameLocation":"3465:5:11","nodeType":"VariableDeclaration","scope":1516,"src":"3457:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1414,"name":"uint256","nodeType":"ElementaryTypeName","src":"3457:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1418,"initialValue":{"expression":{"id":1416,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1391,"src":"3473:4:11","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage_ptr","typeString":"struct IncrementalTreeData storage pointer"}},"id":1417,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"depth","nodeType":"MemberAccess","referencedDeclaration":1182,"src":"3473:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3457:26:11"},{"assignments":[1420],"declarations":[{"constant":false,"id":1420,"mutability":"mutable","name":"hash","nameLocation":"3501:4:11","nodeType":"VariableDeclaration","scope":1516,"src":"3493:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1419,"name":"uint256","nodeType":"ElementaryTypeName","src":"3493:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1422,"initialValue":{"id":1421,"name":"newLeaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1395,"src":"3508:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3493:22:11"},{"body":{"id":1508,"nodeType":"Block","src":"3557:566:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1430,"name":"proofPathIndices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"3575:16:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_calldata_ptr","typeString":"uint8[] calldata"}},"id":1432,"indexExpression":{"id":1431,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1424,"src":"3592:1:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3575:19:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3598:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3575:24:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1502,"nodeType":"Block","src":"3830:223:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1469,"name":"proofSiblings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1398,"src":"3852:13:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1471,"indexExpression":{"id":1470,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1424,"src":"3866:1:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3852:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"baseExpression":{"baseExpression":{"expression":{"id":1472,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1391,"src":"3872:4:11","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage_ptr","typeString":"struct IncrementalTreeData storage pointer"}},"id":1473,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"lastSubtrees","nodeType":"MemberAccess","referencedDeclaration":1196,"src":"3872:17:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_array$_t_uint256_$2_storage_$","typeString":"mapping(uint256 => uint256[2] storage ref)"}},"id":1475,"indexExpression":{"id":1474,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1424,"src":"3890:1:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3872:20:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage","typeString":"uint256[2] storage ref"}},"id":1477,"indexExpression":{"hexValue":"30","id":1476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3893:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3872:23:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3852:43:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1490,"nodeType":"IfStatement","src":"3848:120:11","trueBody":{"id":1489,"nodeType":"Block","src":"3897:71:11","statements":[{"expression":{"id":1487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":1479,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1391,"src":"3919:4:11","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage_ptr","typeString":"struct IncrementalTreeData storage pointer"}},"id":1483,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"lastSubtrees","nodeType":"MemberAccess","referencedDeclaration":1196,"src":"3919:17:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_array$_t_uint256_$2_storage_$","typeString":"mapping(uint256 => uint256[2] storage ref)"}},"id":1484,"indexExpression":{"id":1481,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1424,"src":"3937:1:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3919:20:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage","typeString":"uint256[2] storage ref"}},"id":1485,"indexExpression":{"hexValue":"31","id":1482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3940:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3919:23:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1486,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1420,"src":"3945:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3919:30:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1488,"nodeType":"ExpressionStatement","src":"3919:30:11"}]}},{"expression":{"id":1500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1491,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1420,"src":"3986:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"components":[{"baseExpression":{"id":1494,"name":"proofSiblings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1398,"src":"4014:13:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1496,"indexExpression":{"id":1495,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1424,"src":"4028:1:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4014:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1497,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1420,"src":"4032:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1498,"isConstant":false,"isInlineArray":true,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4013:24:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}],"expression":{"id":1492,"name":"PoseidonT3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"3993:10:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PoseidonT3_$1165_$","typeString":"type(library PoseidonT3)"}},"id":1493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"poseidon","nodeType":"MemberAccess","referencedDeclaration":1164,"src":"3993:19:11","typeDescriptions":{"typeIdentifier":"t_function_delegatecall_pure$_t_array$_t_uint256_$2_memory_ptr_$returns$_t_uint256_$","typeString":"function (uint256[2] memory) pure returns (uint256)"}},"id":1499,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3993:45:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3986:52:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1501,"nodeType":"ExpressionStatement","src":"3986:52:11"}]},"id":1503,"nodeType":"IfStatement","src":"3571:482:11","trueBody":{"id":1468,"nodeType":"Block","src":"3601:223:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1435,"name":"proofSiblings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1398,"src":"3623:13:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1437,"indexExpression":{"id":1436,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1424,"src":"3637:1:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3623:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"baseExpression":{"baseExpression":{"expression":{"id":1438,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1391,"src":"3643:4:11","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage_ptr","typeString":"struct IncrementalTreeData storage pointer"}},"id":1439,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"lastSubtrees","nodeType":"MemberAccess","referencedDeclaration":1196,"src":"3643:17:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_array$_t_uint256_$2_storage_$","typeString":"mapping(uint256 => uint256[2] storage ref)"}},"id":1441,"indexExpression":{"id":1440,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1424,"src":"3661:1:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3643:20:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage","typeString":"uint256[2] storage ref"}},"id":1443,"indexExpression":{"hexValue":"31","id":1442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3664:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3643:23:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3623:43:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1456,"nodeType":"IfStatement","src":"3619:120:11","trueBody":{"id":1455,"nodeType":"Block","src":"3668:71:11","statements":[{"expression":{"id":1453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":1445,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1391,"src":"3690:4:11","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage_ptr","typeString":"struct IncrementalTreeData storage pointer"}},"id":1449,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"lastSubtrees","nodeType":"MemberAccess","referencedDeclaration":1196,"src":"3690:17:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_array$_t_uint256_$2_storage_$","typeString":"mapping(uint256 => uint256[2] storage ref)"}},"id":1450,"indexExpression":{"id":1447,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1424,"src":"3708:1:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3690:20:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage","typeString":"uint256[2] storage ref"}},"id":1451,"indexExpression":{"hexValue":"30","id":1448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3711:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3690:23:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1452,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1420,"src":"3716:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3690:30:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1454,"nodeType":"ExpressionStatement","src":"3690:30:11"}]}},{"expression":{"id":1466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1457,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1420,"src":"3757:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"components":[{"id":1460,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1420,"src":"3785:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":1461,"name":"proofSiblings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1398,"src":"3791:13:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1463,"indexExpression":{"id":1462,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1424,"src":"3805:1:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3791:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1464,"isConstant":false,"isInlineArray":true,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3784:24:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}],"expression":{"id":1458,"name":"PoseidonT3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"3764:10:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PoseidonT3_$1165_$","typeString":"type(library PoseidonT3)"}},"id":1459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"poseidon","nodeType":"MemberAccess","referencedDeclaration":1164,"src":"3764:19:11","typeDescriptions":{"typeIdentifier":"t_function_delegatecall_pure$_t_array$_t_uint256_$2_memory_ptr_$returns$_t_uint256_$","typeString":"function (uint256[2] memory) pure returns (uint256)"}},"id":1465,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3764:45:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3757:52:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1467,"nodeType":"ExpressionStatement","src":"3757:52:11"}]}},{"id":1507,"nodeType":"UncheckedBlock","src":"4067:46:11","statements":[{"expression":{"id":1505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"4095:3:11","subExpression":{"id":1504,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1424,"src":"4097:1:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1506,"nodeType":"ExpressionStatement","src":"4095:3:11"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1427,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1424,"src":"3544:1:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1428,"name":"depth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1415,"src":"3548:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3544:9:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1509,"initializationExpression":{"assignments":[1424],"declarations":[{"constant":false,"id":1424,"mutability":"mutable","name":"i","nameLocation":"3537:1:11","nodeType":"VariableDeclaration","scope":1509,"src":"3531:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1423,"name":"uint8","nodeType":"ElementaryTypeName","src":"3531:5:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1426,"initialValue":{"hexValue":"30","id":1425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3541:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3531:11:11"},"nodeType":"ForStatement","src":"3526:597:11"},{"expression":{"id":1514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1510,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1391,"src":"4133:4:11","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage_ptr","typeString":"struct IncrementalTreeData storage pointer"}},"id":1512,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"root","nodeType":"MemberAccess","referencedDeclaration":1184,"src":"4133:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1513,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1420,"src":"4145:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4133:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1515,"nodeType":"ExpressionStatement","src":"4133:16:11"}]},"documentation":{"id":1388,"nodeType":"StructuredDocumentation","src":"2785:294:11","text":"@dev Updates a leaf in the tree.\n @param self: Tree data.\n @param leaf: Leaf to be updated.\n @param newLeaf: New leaf.\n @param proofSiblings: Array of the sibling nodes of the proof of membership.\n @param proofPathIndices: Path of the proof of membership."},"functionSelector":"a5478827","id":1517,"implemented":true,"kind":"function","modifiers":[],"name":"update","nameLocation":"3093:6:11","nodeType":"FunctionDefinition","parameters":{"id":1402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1391,"mutability":"mutable","name":"self","nameLocation":"3137:4:11","nodeType":"VariableDeclaration","scope":1517,"src":"3109:32:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage_ptr","typeString":"struct IncrementalTreeData"},"typeName":{"id":1390,"nodeType":"UserDefinedTypeName","pathNode":{"id":1389,"name":"IncrementalTreeData","nodeType":"IdentifierPath","referencedDeclaration":1197,"src":"3109:19:11"},"referencedDeclaration":1197,"src":"3109:19:11","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage_ptr","typeString":"struct IncrementalTreeData"}},"visibility":"internal"},{"constant":false,"id":1393,"mutability":"mutable","name":"leaf","nameLocation":"3159:4:11","nodeType":"VariableDeclaration","scope":1517,"src":"3151:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1392,"name":"uint256","nodeType":"ElementaryTypeName","src":"3151:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1395,"mutability":"mutable","name":"newLeaf","nameLocation":"3181:7:11","nodeType":"VariableDeclaration","scope":1517,"src":"3173:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1394,"name":"uint256","nodeType":"ElementaryTypeName","src":"3173:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1398,"mutability":"mutable","name":"proofSiblings","nameLocation":"3217:13:11","nodeType":"VariableDeclaration","scope":1517,"src":"3198:32:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1396,"name":"uint256","nodeType":"ElementaryTypeName","src":"3198:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1397,"nodeType":"ArrayTypeName","src":"3198:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1401,"mutability":"mutable","name":"proofPathIndices","nameLocation":"3257:16:11","nodeType":"VariableDeclaration","scope":1517,"src":"3240:33:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_calldata_ptr","typeString":"uint8[]"},"typeName":{"baseType":{"id":1399,"name":"uint8","nodeType":"ElementaryTypeName","src":"3240:5:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1400,"nodeType":"ArrayTypeName","src":"3240:7:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_storage_ptr","typeString":"uint8[]"}},"visibility":"internal"}],"src":"3099:180:11"},"returnParameters":{"id":1403,"nodeType":"ParameterList","parameters":[],"src":"3287:0:11"},"scope":1649,"src":"3084:1072:11","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1543,"nodeType":"Block","src":"4607:84:11","statements":[{"expression":{"arguments":[{"id":1533,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1521,"src":"4624:4:11","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage_ptr","typeString":"struct IncrementalTreeData storage pointer"}},{"id":1534,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1523,"src":"4630:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"expression":{"id":1535,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1521,"src":"4636:4:11","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage_ptr","typeString":"struct IncrementalTreeData storage pointer"}},"id":1536,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"zeroes","nodeType":"MemberAccess","referencedDeclaration":1190,"src":"4636:11:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1538,"indexExpression":{"hexValue":"30","id":1537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4648:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4636:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1539,"name":"proofSiblings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1526,"src":"4652:13:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":1540,"name":"proofPathIndices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1529,"src":"4667:16:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_calldata_ptr","typeString":"uint8[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage_ptr","typeString":"struct IncrementalTreeData storage pointer"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint8_$dyn_calldata_ptr","typeString":"uint8[] calldata"}],"id":1532,"name":"update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1517,"src":"4617:6:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_IncrementalTreeData_$1197_storage_ptr_$_t_uint256_$_t_uint256_$_t_array$_t_uint256_$dyn_calldata_ptr_$_t_array$_t_uint8_$dyn_calldata_ptr_$returns$__$","typeString":"function (struct IncrementalTreeData storage pointer,uint256,uint256,uint256[] calldata,uint8[] calldata)"}},"id":1541,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4617:67:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1542,"nodeType":"ExpressionStatement","src":"4617:67:11"}]},"documentation":{"id":1518,"nodeType":"StructuredDocumentation","src":"4162:262:11","text":"@dev Removes a leaf from the tree.\n @param self: Tree data.\n @param leaf: Leaf to be removed.\n @param proofSiblings: Array of the sibling nodes of the proof of membership.\n @param proofPathIndices: Path of the proof of membership."},"functionSelector":"0629596f","id":1544,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"4438:6:11","nodeType":"FunctionDefinition","parameters":{"id":1530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1521,"mutability":"mutable","name":"self","nameLocation":"4482:4:11","nodeType":"VariableDeclaration","scope":1544,"src":"4454:32:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage_ptr","typeString":"struct IncrementalTreeData"},"typeName":{"id":1520,"nodeType":"UserDefinedTypeName","pathNode":{"id":1519,"name":"IncrementalTreeData","nodeType":"IdentifierPath","referencedDeclaration":1197,"src":"4454:19:11"},"referencedDeclaration":1197,"src":"4454:19:11","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage_ptr","typeString":"struct IncrementalTreeData"}},"visibility":"internal"},{"constant":false,"id":1523,"mutability":"mutable","name":"leaf","nameLocation":"4504:4:11","nodeType":"VariableDeclaration","scope":1544,"src":"4496:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1522,"name":"uint256","nodeType":"ElementaryTypeName","src":"4496:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1526,"mutability":"mutable","name":"proofSiblings","nameLocation":"4537:13:11","nodeType":"VariableDeclaration","scope":1544,"src":"4518:32:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1524,"name":"uint256","nodeType":"ElementaryTypeName","src":"4518:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1525,"nodeType":"ArrayTypeName","src":"4518:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1529,"mutability":"mutable","name":"proofPathIndices","nameLocation":"4577:16:11","nodeType":"VariableDeclaration","scope":1544,"src":"4560:33:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_calldata_ptr","typeString":"uint8[]"},"typeName":{"baseType":{"id":1527,"name":"uint8","nodeType":"ElementaryTypeName","src":"4560:5:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1528,"nodeType":"ArrayTypeName","src":"4560:7:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_storage_ptr","typeString":"uint8[]"}},"visibility":"internal"}],"src":"4444:155:11"},"returnParameters":{"id":1531,"nodeType":"ParameterList","parameters":[],"src":"4607:0:11"},"scope":1649,"src":"4429:262:11","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1647,"nodeType":"Block","src":"5228:892:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1562,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1550,"src":"5246:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1563,"name":"SNARK_SCALAR_FIELD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"5253:18:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5246:25:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e6372656d656e74616c42696e617279547265653a206c656166206d757374206265203c20534e41524b5f5343414c41525f4649454c44","id":1565,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5273:58:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_8b8db1558a0a283e0a9442c31e94b10cc2d3fde6e01b7fd4aa819ae25430befe","typeString":"literal_string \"IncrementalBinaryTree: leaf must be < SNARK_SCALAR_FIELD\""},"value":"IncrementalBinaryTree: leaf must be < SNARK_SCALAR_FIELD"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8b8db1558a0a283e0a9442c31e94b10cc2d3fde6e01b7fd4aa819ae25430befe","typeString":"literal_string \"IncrementalBinaryTree: leaf must be < SNARK_SCALAR_FIELD\""}],"id":1561,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5238:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5238:94:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1567,"nodeType":"ExpressionStatement","src":"5238:94:11"},{"assignments":[1569],"declarations":[{"constant":false,"id":1569,"mutability":"mutable","name":"depth","nameLocation":"5350:5:11","nodeType":"VariableDeclaration","scope":1647,"src":"5342:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1568,"name":"uint256","nodeType":"ElementaryTypeName","src":"5342:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1572,"initialValue":{"expression":{"id":1570,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1548,"src":"5358:4:11","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage_ptr","typeString":"struct IncrementalTreeData storage pointer"}},"id":1571,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"depth","nodeType":"MemberAccess","referencedDeclaration":1182,"src":"5358:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5342:26:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1574,"name":"proofPathIndices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1556,"src":"5399:16:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_calldata_ptr","typeString":"uint8[] calldata"}},"id":1575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"5399:23:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1576,"name":"depth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1569,"src":"5426:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5399:32:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1578,"name":"proofSiblings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1553,"src":"5435:13:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"5435:20:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1580,"name":"depth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1569,"src":"5459:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5435:29:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5399:65:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e6372656d656e74616c42696e617279547265653a206c656e677468206f662070617468206973206e6f7420636f7272656374","id":1583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5478:54:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_f672d3008f899b6a6167b66795e4c332b0f76a2f6917d25a6718ff9a0d7fb9d2","typeString":"literal_string \"IncrementalBinaryTree: length of path is not correct\""},"value":"IncrementalBinaryTree: length of path is not correct"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f672d3008f899b6a6167b66795e4c332b0f76a2f6917d25a6718ff9a0d7fb9d2","typeString":"literal_string \"IncrementalBinaryTree: length of path is not correct\""}],"id":1573,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5378:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5378:164:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1585,"nodeType":"ExpressionStatement","src":"5378:164:11"},{"assignments":[1587],"declarations":[{"constant":false,"id":1587,"mutability":"mutable","name":"hash","nameLocation":"5561:4:11","nodeType":"VariableDeclaration","scope":1647,"src":"5553:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1586,"name":"uint256","nodeType":"ElementaryTypeName","src":"5553:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1589,"initialValue":{"id":1588,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1550,"src":"5568:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5553:19:11"},{"body":{"id":1640,"nodeType":"Block","src":"5614:465:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1598,"name":"proofSiblings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1553,"src":"5653:13:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1600,"indexExpression":{"id":1599,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1591,"src":"5667:1:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5653:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1601,"name":"SNARK_SCALAR_FIELD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"5672:18:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5653:37:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e6372656d656e74616c42696e617279547265653a207369626c696e67206e6f6465206d757374206265203c20534e41524b5f5343414c41525f4649454c44","id":1603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5708:66:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_9e725d0cb0796474eb4cece98e977fe71fb6f37d207a543c5669547a629e4806","typeString":"literal_string \"IncrementalBinaryTree: sibling node must be < SNARK_SCALAR_FIELD\""},"value":"IncrementalBinaryTree: sibling node must be < SNARK_SCALAR_FIELD"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9e725d0cb0796474eb4cece98e977fe71fb6f37d207a543c5669547a629e4806","typeString":"literal_string \"IncrementalBinaryTree: sibling node must be < SNARK_SCALAR_FIELD\""}],"id":1597,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5628:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1604,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5628:160:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1605,"nodeType":"ExpressionStatement","src":"5628:160:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1606,"name":"proofPathIndices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1556,"src":"5807:16:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_calldata_ptr","typeString":"uint8[] calldata"}},"id":1608,"indexExpression":{"id":1607,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1591,"src":"5824:1:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5807:19:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1609,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5830:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5807:24:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1634,"nodeType":"Block","src":"5924:85:11","statements":[{"expression":{"id":1632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1623,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1587,"src":"5942:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"components":[{"baseExpression":{"id":1626,"name":"proofSiblings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1553,"src":"5970:13:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1628,"indexExpression":{"id":1627,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1591,"src":"5984:1:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5970:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1629,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1587,"src":"5988:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1630,"isConstant":false,"isInlineArray":true,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5969:24:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}],"expression":{"id":1624,"name":"PoseidonT3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"5949:10:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PoseidonT3_$1165_$","typeString":"type(library PoseidonT3)"}},"id":1625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"poseidon","nodeType":"MemberAccess","referencedDeclaration":1164,"src":"5949:19:11","typeDescriptions":{"typeIdentifier":"t_function_delegatecall_pure$_t_array$_t_uint256_$2_memory_ptr_$returns$_t_uint256_$","typeString":"function (uint256[2] memory) pure returns (uint256)"}},"id":1631,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5949:45:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5942:52:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1633,"nodeType":"ExpressionStatement","src":"5942:52:11"}]},"id":1635,"nodeType":"IfStatement","src":"5803:206:11","trueBody":{"id":1622,"nodeType":"Block","src":"5833:85:11","statements":[{"expression":{"id":1620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1611,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1587,"src":"5851:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"components":[{"id":1614,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1587,"src":"5879:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":1615,"name":"proofSiblings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1553,"src":"5885:13:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1617,"indexExpression":{"id":1616,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1591,"src":"5899:1:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5885:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1618,"isConstant":false,"isInlineArray":true,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5878:24:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}],"expression":{"id":1612,"name":"PoseidonT3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"5858:10:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PoseidonT3_$1165_$","typeString":"type(library PoseidonT3)"}},"id":1613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"poseidon","nodeType":"MemberAccess","referencedDeclaration":1164,"src":"5858:19:11","typeDescriptions":{"typeIdentifier":"t_function_delegatecall_pure$_t_array$_t_uint256_$2_memory_ptr_$returns$_t_uint256_$","typeString":"function (uint256[2] memory) pure returns (uint256)"}},"id":1619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5858:45:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5851:52:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1621,"nodeType":"ExpressionStatement","src":"5851:52:11"}]}},{"id":1639,"nodeType":"UncheckedBlock","src":"6023:46:11","statements":[{"expression":{"id":1637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"6051:3:11","subExpression":{"id":1636,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1591,"src":"6053:1:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1638,"nodeType":"ExpressionStatement","src":"6051:3:11"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1594,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1591,"src":"5601:1:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1595,"name":"depth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1569,"src":"5605:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5601:9:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1641,"initializationExpression":{"assignments":[1591],"declarations":[{"constant":false,"id":1591,"mutability":"mutable","name":"i","nameLocation":"5594:1:11","nodeType":"VariableDeclaration","scope":1641,"src":"5588:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1590,"name":"uint8","nodeType":"ElementaryTypeName","src":"5588:5:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1593,"initialValue":{"hexValue":"30","id":1592,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5598:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5588:11:11"},"nodeType":"ForStatement","src":"5583:496:11"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1642,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1587,"src":"6096:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1643,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1548,"src":"6104:4:11","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage_ptr","typeString":"struct IncrementalTreeData storage pointer"}},"id":1644,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"root","nodeType":"MemberAccess","referencedDeclaration":1184,"src":"6104:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6096:17:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1560,"id":1646,"nodeType":"Return","src":"6089:24:11"}]},"documentation":{"id":1545,"nodeType":"StructuredDocumentation","src":"4697:327:11","text":"@dev Verify if the path is correct and the leaf is part of the tree.\n @param self: Tree data.\n @param leaf: Leaf to be removed.\n @param proofSiblings: Array of the sibling nodes of the proof of membership.\n @param proofPathIndices: Path of the proof of membership.\n @return True or false."},"id":1648,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"5038:6:11","nodeType":"FunctionDefinition","parameters":{"id":1557,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1548,"mutability":"mutable","name":"self","nameLocation":"5082:4:11","nodeType":"VariableDeclaration","scope":1648,"src":"5054:32:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage_ptr","typeString":"struct IncrementalTreeData"},"typeName":{"id":1547,"nodeType":"UserDefinedTypeName","pathNode":{"id":1546,"name":"IncrementalTreeData","nodeType":"IdentifierPath","referencedDeclaration":1197,"src":"5054:19:11"},"referencedDeclaration":1197,"src":"5054:19:11","typeDescriptions":{"typeIdentifier":"t_struct$_IncrementalTreeData_$1197_storage_ptr","typeString":"struct IncrementalTreeData"}},"visibility":"internal"},{"constant":false,"id":1550,"mutability":"mutable","name":"leaf","nameLocation":"5104:4:11","nodeType":"VariableDeclaration","scope":1648,"src":"5096:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1549,"name":"uint256","nodeType":"ElementaryTypeName","src":"5096:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1553,"mutability":"mutable","name":"proofSiblings","nameLocation":"5137:13:11","nodeType":"VariableDeclaration","scope":1648,"src":"5118:32:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1551,"name":"uint256","nodeType":"ElementaryTypeName","src":"5118:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1552,"nodeType":"ArrayTypeName","src":"5118:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1556,"mutability":"mutable","name":"proofPathIndices","nameLocation":"5177:16:11","nodeType":"VariableDeclaration","scope":1648,"src":"5160:33:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_calldata_ptr","typeString":"uint8[]"},"typeName":{"baseType":{"id":1554,"name":"uint8","nodeType":"ElementaryTypeName","src":"5160:5:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1555,"nodeType":"ArrayTypeName","src":"5160:7:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_storage_ptr","typeString":"uint8[]"}},"visibility":"internal"}],"src":"5044:155:11"},"returnParameters":{"id":1560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1559,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1648,"src":"5222:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1558,"name":"bool","nodeType":"ElementaryTypeName","src":"5222:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5221:6:11"},"scope":1649,"src":"5029:1091:11","stateMutability":"view","virtual":false,"visibility":"private"}],"scope":1650,"src":"872:5250:11","usedErrors":[]}],"src":"32:6091:11"},"id":11},"@openzeppelin/contracts/security/ReentrancyGuard.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/security/ReentrancyGuard.sol","exportedSymbols":{"ReentrancyGuard":[1703]},"id":1704,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1651,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:12"},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":1652,"nodeType":"StructuredDocumentation","src":"137:750:12","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"id":1703,"linearizedBaseContracts":[1703],"name":"ReentrancyGuard","nameLocation":"906:15:12","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1655,"mutability":"constant","name":"_NOT_ENTERED","nameLocation":"1701:12:12","nodeType":"VariableDeclaration","scope":1703,"src":"1676:41:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1653,"name":"uint256","nodeType":"ElementaryTypeName","src":"1676:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":1654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1716:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":1658,"mutability":"constant","name":"_ENTERED","nameLocation":"1748:8:12","nodeType":"VariableDeclaration","scope":1703,"src":"1723:37:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1656,"name":"uint256","nodeType":"ElementaryTypeName","src":"1723:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":1657,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1759:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":false,"id":1660,"mutability":"mutable","name":"_status","nameLocation":"1783:7:12","nodeType":"VariableDeclaration","scope":1703,"src":"1767:23:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1659,"name":"uint256","nodeType":"ElementaryTypeName","src":"1767:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"body":{"id":1667,"nodeType":"Block","src":"1811:39:12","statements":[{"expression":{"id":1665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1663,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1660,"src":"1821:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1664,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1655,"src":"1831:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1821:22:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1666,"nodeType":"ExpressionStatement","src":"1821:22:12"}]},"id":1668,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1661,"nodeType":"ParameterList","parameters":[],"src":"1808:2:12"},"returnParameters":{"id":1662,"nodeType":"ParameterList","parameters":[],"src":"1811:0:12"},"scope":1703,"src":"1797:53:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1678,"nodeType":"Block","src":"2251:79:12","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1671,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1694,"src":"2261:19:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2261:21:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1673,"nodeType":"ExpressionStatement","src":"2261:21:12"},{"id":1674,"nodeType":"PlaceholderStatement","src":"2292:1:12"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1675,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1702,"src":"2303:18:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1676,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2303:20:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1677,"nodeType":"ExpressionStatement","src":"2303:20:12"}]},"documentation":{"id":1669,"nodeType":"StructuredDocumentation","src":"1856:366:12","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"id":1679,"name":"nonReentrant","nameLocation":"2236:12:12","nodeType":"ModifierDefinition","parameters":{"id":1670,"nodeType":"ParameterList","parameters":[],"src":"2248:2:12"},"src":"2227:103:12","virtual":false,"visibility":"internal"},{"body":{"id":1693,"nodeType":"Block","src":"2375:248:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1683,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1660,"src":"2468:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1684,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1658,"src":"2479:8:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2468:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","id":1686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2489:33:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""},"value":"ReentrancyGuard: reentrant call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""}],"id":1682,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2460:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1687,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2460:63:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1688,"nodeType":"ExpressionStatement","src":"2460:63:12"},{"expression":{"id":1691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1689,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1660,"src":"2598:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1690,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1658,"src":"2608:8:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2598:18:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1692,"nodeType":"ExpressionStatement","src":"2598:18:12"}]},"id":1694,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"2345:19:12","nodeType":"FunctionDefinition","parameters":{"id":1680,"nodeType":"ParameterList","parameters":[],"src":"2364:2:12"},"returnParameters":{"id":1681,"nodeType":"ParameterList","parameters":[],"src":"2375:0:12"},"scope":1703,"src":"2336:287:12","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1701,"nodeType":"Block","src":"2667:171:12","statements":[{"expression":{"id":1699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1697,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1660,"src":"2809:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1698,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1655,"src":"2819:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2809:22:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1700,"nodeType":"ExpressionStatement","src":"2809:22:12"}]},"id":1702,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"2638:18:12","nodeType":"FunctionDefinition","parameters":{"id":1695,"nodeType":"ParameterList","parameters":[],"src":"2656:2:12"},"returnParameters":{"id":1696,"nodeType":"ParameterList","parameters":[],"src":"2667:0:12"},"scope":1703,"src":"2629:209:12","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":1704,"src":"888:1952:12","usedErrors":[]}],"src":"112:2729:12"},"id":12},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","exportedSymbols":{"Address":[3139],"Context":[3161],"ERC165":[3434],"ERC721":[2648],"IERC165":[3446],"IERC721":[2764],"IERC721Metadata":[2809],"IERC721Receiver":[2782],"Math":[4311],"Strings":[3410]},"id":2649,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1705,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:13"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"./IERC721.sol","id":1706,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2649,"sourceUnit":2765,"src":"132:23:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","file":"./IERC721Receiver.sol","id":1707,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2649,"sourceUnit":2783,"src":"156:31:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","file":"./extensions/IERC721Metadata.sol","id":1708,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2649,"sourceUnit":2810,"src":"188:42:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../utils/Address.sol","id":1709,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2649,"sourceUnit":3140,"src":"231:33:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":1710,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2649,"sourceUnit":3162,"src":"265:33:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../../utils/Strings.sol","id":1711,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2649,"sourceUnit":3411,"src":"299:33:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../../utils/introspection/ERC165.sol","id":1712,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2649,"sourceUnit":3435,"src":"333:46:13","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1714,"name":"Context","nodeType":"IdentifierPath","referencedDeclaration":3161,"src":"647:7:13"},"id":1715,"nodeType":"InheritanceSpecifier","src":"647:7:13"},{"baseName":{"id":1716,"name":"ERC165","nodeType":"IdentifierPath","referencedDeclaration":3434,"src":"656:6:13"},"id":1717,"nodeType":"InheritanceSpecifier","src":"656:6:13"},{"baseName":{"id":1718,"name":"IERC721","nodeType":"IdentifierPath","referencedDeclaration":2764,"src":"664:7:13"},"id":1719,"nodeType":"InheritanceSpecifier","src":"664:7:13"},{"baseName":{"id":1720,"name":"IERC721Metadata","nodeType":"IdentifierPath","referencedDeclaration":2809,"src":"673:15:13"},"id":1721,"nodeType":"InheritanceSpecifier","src":"673:15:13"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":1713,"nodeType":"StructuredDocumentation","src":"381:246:13","text":" @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."},"fullyImplemented":true,"id":2648,"linearizedBaseContracts":[2648,2809,2764,3434,3446,3161],"name":"ERC721","nameLocation":"637:6:13","nodeType":"ContractDefinition","nodes":[{"id":1724,"libraryName":{"id":1722,"name":"Address","nodeType":"IdentifierPath","referencedDeclaration":3139,"src":"701:7:13"},"nodeType":"UsingForDirective","src":"695:26:13","typeName":{"id":1723,"name":"address","nodeType":"ElementaryTypeName","src":"713:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"id":1727,"libraryName":{"id":1725,"name":"Strings","nodeType":"IdentifierPath","referencedDeclaration":3410,"src":"732:7:13"},"nodeType":"UsingForDirective","src":"726:26:13","typeName":{"id":1726,"name":"uint256","nodeType":"ElementaryTypeName","src":"744:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":1729,"mutability":"mutable","name":"_name","nameLocation":"791:5:13","nodeType":"VariableDeclaration","scope":2648,"src":"776:20:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":1728,"name":"string","nodeType":"ElementaryTypeName","src":"776:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":1731,"mutability":"mutable","name":"_symbol","nameLocation":"838:7:13","nodeType":"VariableDeclaration","scope":2648,"src":"823:22:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":1730,"name":"string","nodeType":"ElementaryTypeName","src":"823:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":1735,"mutability":"mutable","name":"_owners","nameLocation":"934:7:13","nodeType":"VariableDeclaration","scope":2648,"src":"898:43:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":1734,"keyType":{"id":1732,"name":"uint256","nodeType":"ElementaryTypeName","src":"906:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"898:27:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueType":{"id":1733,"name":"address","nodeType":"ElementaryTypeName","src":"917:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":1739,"mutability":"mutable","name":"_balances","nameLocation":"1028:9:13","nodeType":"VariableDeclaration","scope":2648,"src":"992:45:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":1738,"keyType":{"id":1736,"name":"address","nodeType":"ElementaryTypeName","src":"1000:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"992:27:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":1737,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":1743,"mutability":"mutable","name":"_tokenApprovals","nameLocation":"1129:15:13","nodeType":"VariableDeclaration","scope":2648,"src":"1093:51:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":1742,"keyType":{"id":1740,"name":"uint256","nodeType":"ElementaryTypeName","src":"1101:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1093:27:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueType":{"id":1741,"name":"address","nodeType":"ElementaryTypeName","src":"1112:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":1749,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"1252:18:13","nodeType":"VariableDeclaration","scope":2648,"src":"1199:71:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":1748,"keyType":{"id":1744,"name":"address","nodeType":"ElementaryTypeName","src":"1207:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1199:44:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueType":{"id":1747,"keyType":{"id":1745,"name":"address","nodeType":"ElementaryTypeName","src":"1226:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1218:24:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":1746,"name":"bool","nodeType":"ElementaryTypeName","src":"1237:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"body":{"id":1765,"nodeType":"Block","src":"1446:57:13","statements":[{"expression":{"id":1759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1757,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1729,"src":"1456:5:13","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1758,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1752,"src":"1464:5:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1456:13:13","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1760,"nodeType":"ExpressionStatement","src":"1456:13:13"},{"expression":{"id":1763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1761,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1731,"src":"1479:7:13","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1762,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1754,"src":"1489:7:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1479:17:13","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1764,"nodeType":"ExpressionStatement","src":"1479:17:13"}]},"documentation":{"id":1750,"nodeType":"StructuredDocumentation","src":"1277:108:13","text":" @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."},"id":1766,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1752,"mutability":"mutable","name":"name_","nameLocation":"1416:5:13","nodeType":"VariableDeclaration","scope":1766,"src":"1402:19:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1751,"name":"string","nodeType":"ElementaryTypeName","src":"1402:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1754,"mutability":"mutable","name":"symbol_","nameLocation":"1437:7:13","nodeType":"VariableDeclaration","scope":1766,"src":"1423:21:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1753,"name":"string","nodeType":"ElementaryTypeName","src":"1423:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1401:44:13"},"returnParameters":{"id":1756,"nodeType":"ParameterList","parameters":[],"src":"1446:0:13"},"scope":2648,"src":"1390:113:13","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[3433,3445],"body":{"id":1796,"nodeType":"Block","src":"1678:192:13","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1777,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1769,"src":"1707:11:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1779,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2764,"src":"1727:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$2764_$","typeString":"type(contract IERC721)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721_$2764_$","typeString":"type(contract IERC721)"}],"id":1778,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1722:4:13","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1780,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1722:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721_$2764","typeString":"type(contract IERC721)"}},"id":1781,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"1722:25:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1707:40:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1783,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1769,"src":"1763:11:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1785,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2809,"src":"1783:15:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$2809_$","typeString":"type(contract IERC721Metadata)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$2809_$","typeString":"type(contract IERC721Metadata)"}],"id":1784,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1778:4:13","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1786,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1778:21:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Metadata_$2809","typeString":"type(contract IERC721Metadata)"}},"id":1787,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"1778:33:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1763:48:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1707:104:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1792,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1769,"src":"1851:11:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":1790,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1827:5:13","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721_$2648_$","typeString":"type(contract super ERC721)"}},"id":1791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":3433,"src":"1827:23:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":1793,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1827:36:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1707:156:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1776,"id":1795,"nodeType":"Return","src":"1688:175:13"}]},"documentation":{"id":1767,"nodeType":"StructuredDocumentation","src":"1509:56:13","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1797,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1579:17:13","nodeType":"FunctionDefinition","overrides":{"id":1773,"nodeType":"OverrideSpecifier","overrides":[{"id":1771,"name":"ERC165","nodeType":"IdentifierPath","referencedDeclaration":3434,"src":"1646:6:13"},{"id":1772,"name":"IERC165","nodeType":"IdentifierPath","referencedDeclaration":3446,"src":"1654:7:13"}],"src":"1637:25:13"},"parameters":{"id":1770,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1769,"mutability":"mutable","name":"interfaceId","nameLocation":"1604:11:13","nodeType":"VariableDeclaration","scope":1797,"src":"1597:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1768,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1597:6:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1596:20:13"},"returnParameters":{"id":1776,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1775,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1797,"src":"1672:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1774,"name":"bool","nodeType":"ElementaryTypeName","src":"1672:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1671:6:13"},"scope":2648,"src":"1570:300:13","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2689],"body":{"id":1820,"nodeType":"Block","src":"2010:123:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1807,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1800,"src":"2028:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1810,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2045:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1809,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2037:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1808,"name":"address","nodeType":"ElementaryTypeName","src":"2037:7:13","typeDescriptions":{}}},"id":1811,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2037:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2028:19:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f7420612076616c6964206f776e6572","id":1813,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2049:43:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""},"value":"ERC721: address zero is not a valid owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""}],"id":1806,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2020:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1814,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2020:73:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1815,"nodeType":"ExpressionStatement","src":"2020:73:13"},{"expression":{"baseExpression":{"id":1816,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1739,"src":"2110:9:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1818,"indexExpression":{"id":1817,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1800,"src":"2120:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2110:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1805,"id":1819,"nodeType":"Return","src":"2103:23:13"}]},"documentation":{"id":1798,"nodeType":"StructuredDocumentation","src":"1876:48:13","text":" @dev See {IERC721-balanceOf}."},"functionSelector":"70a08231","id":1821,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1938:9:13","nodeType":"FunctionDefinition","overrides":{"id":1802,"nodeType":"OverrideSpecifier","overrides":[],"src":"1983:8:13"},"parameters":{"id":1801,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1800,"mutability":"mutable","name":"owner","nameLocation":"1956:5:13","nodeType":"VariableDeclaration","scope":1821,"src":"1948:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1799,"name":"address","nodeType":"ElementaryTypeName","src":"1948:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1947:15:13"},"returnParameters":{"id":1805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1804,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1821,"src":"2001:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1803,"name":"uint256","nodeType":"ElementaryTypeName","src":"2001:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2000:9:13"},"scope":2648,"src":"1929:204:13","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2697],"body":{"id":1848,"nodeType":"Block","src":"2271:138:13","statements":[{"assignments":[1831],"declarations":[{"constant":false,"id":1831,"mutability":"mutable","name":"owner","nameLocation":"2289:5:13","nodeType":"VariableDeclaration","scope":1848,"src":"2281:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1830,"name":"address","nodeType":"ElementaryTypeName","src":"2281:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1835,"initialValue":{"arguments":[{"id":1833,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1824,"src":"2306:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1832,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"2297:8:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1834,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2297:17:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2281:33:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1837,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1831,"src":"2332:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2349:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1839,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2341:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1838,"name":"address","nodeType":"ElementaryTypeName","src":"2341:7:13","typeDescriptions":{}}},"id":1841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2341:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2332:19:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":1843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2353:26:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":1836,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2324:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1844,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2324:56:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1845,"nodeType":"ExpressionStatement","src":"2324:56:13"},{"expression":{"id":1846,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1831,"src":"2397:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1829,"id":1847,"nodeType":"Return","src":"2390:12:13"}]},"documentation":{"id":1822,"nodeType":"StructuredDocumentation","src":"2139:46:13","text":" @dev See {IERC721-ownerOf}."},"functionSelector":"6352211e","id":1849,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"2199:7:13","nodeType":"FunctionDefinition","overrides":{"id":1826,"nodeType":"OverrideSpecifier","overrides":[],"src":"2244:8:13"},"parameters":{"id":1825,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1824,"mutability":"mutable","name":"tokenId","nameLocation":"2215:7:13","nodeType":"VariableDeclaration","scope":1849,"src":"2207:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1823,"name":"uint256","nodeType":"ElementaryTypeName","src":"2207:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2206:17:13"},"returnParameters":{"id":1829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1828,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1849,"src":"2262:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1827,"name":"address","nodeType":"ElementaryTypeName","src":"2262:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2261:9:13"},"scope":2648,"src":"2190:219:13","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2794],"body":{"id":1858,"nodeType":"Block","src":"2540:29:13","statements":[{"expression":{"id":1856,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1729,"src":"2557:5:13","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":1855,"id":1857,"nodeType":"Return","src":"2550:12:13"}]},"documentation":{"id":1850,"nodeType":"StructuredDocumentation","src":"2415:51:13","text":" @dev See {IERC721Metadata-name}."},"functionSelector":"06fdde03","id":1859,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2480:4:13","nodeType":"FunctionDefinition","overrides":{"id":1852,"nodeType":"OverrideSpecifier","overrides":[],"src":"2507:8:13"},"parameters":{"id":1851,"nodeType":"ParameterList","parameters":[],"src":"2484:2:13"},"returnParameters":{"id":1855,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1854,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1859,"src":"2525:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1853,"name":"string","nodeType":"ElementaryTypeName","src":"2525:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2524:15:13"},"scope":2648,"src":"2471:98:13","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2800],"body":{"id":1868,"nodeType":"Block","src":"2704:31:13","statements":[{"expression":{"id":1866,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1731,"src":"2721:7:13","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":1865,"id":1867,"nodeType":"Return","src":"2714:14:13"}]},"documentation":{"id":1860,"nodeType":"StructuredDocumentation","src":"2575:53:13","text":" @dev See {IERC721Metadata-symbol}."},"functionSelector":"95d89b41","id":1869,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2642:6:13","nodeType":"FunctionDefinition","overrides":{"id":1862,"nodeType":"OverrideSpecifier","overrides":[],"src":"2671:8:13"},"parameters":{"id":1861,"nodeType":"ParameterList","parameters":[],"src":"2648:2:13"},"returnParameters":{"id":1865,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1864,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1869,"src":"2689:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1863,"name":"string","nodeType":"ElementaryTypeName","src":"2689:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2688:15:13"},"scope":2648,"src":"2633:102:13","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2808],"body":{"id":1907,"nodeType":"Block","src":"2889:188:13","statements":[{"expression":{"arguments":[{"id":1879,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1872,"src":"2914:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1878,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2526,"src":"2899:14:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":1880,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2899:23:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1881,"nodeType":"ExpressionStatement","src":"2899:23:13"},{"assignments":[1883],"declarations":[{"constant":false,"id":1883,"mutability":"mutable","name":"baseURI","nameLocation":"2947:7:13","nodeType":"VariableDeclaration","scope":1907,"src":"2933:21:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1882,"name":"string","nodeType":"ElementaryTypeName","src":"2933:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1886,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1884,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1917,"src":"2957:8:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":1885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2957:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"2933:34:13"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1889,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"2990:7:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1888,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2984:5:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1887,"name":"bytes","nodeType":"ElementaryTypeName","src":"2984:5:13","typeDescriptions":{}}},"id":1890,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2984:14:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2984:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3008:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2984:25:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":1904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3068:2:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":1905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2984:86:13","trueExpression":{"arguments":[{"arguments":[{"id":1898,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"3036:7:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1899,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1872,"src":"3045:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":3293,"src":"3045:16:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3045:18:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1896,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3019:3:13","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1897,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"3019:16:13","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1902,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3019:45:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1895,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3012:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1894,"name":"string","nodeType":"ElementaryTypeName","src":"3012:6:13","typeDescriptions":{}}},"id":1903,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3012:53:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1877,"id":1906,"nodeType":"Return","src":"2977:93:13"}]},"documentation":{"id":1870,"nodeType":"StructuredDocumentation","src":"2741:55:13","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":1908,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"2810:8:13","nodeType":"FunctionDefinition","overrides":{"id":1874,"nodeType":"OverrideSpecifier","overrides":[],"src":"2856:8:13"},"parameters":{"id":1873,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1872,"mutability":"mutable","name":"tokenId","nameLocation":"2827:7:13","nodeType":"VariableDeclaration","scope":1908,"src":"2819:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1871,"name":"uint256","nodeType":"ElementaryTypeName","src":"2819:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2818:17:13"},"returnParameters":{"id":1877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1876,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1908,"src":"2874:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1875,"name":"string","nodeType":"ElementaryTypeName","src":"2874:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2873:15:13"},"scope":2648,"src":"2801:276:13","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":1916,"nodeType":"Block","src":"3385:26:13","statements":[{"expression":{"hexValue":"","id":1914,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3402:2:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":1913,"id":1915,"nodeType":"Return","src":"3395:9:13"}]},"documentation":{"id":1909,"nodeType":"StructuredDocumentation","src":"3083:231:13","text":" @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."},"id":1917,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"3328:8:13","nodeType":"FunctionDefinition","parameters":{"id":1910,"nodeType":"ParameterList","parameters":[],"src":"3336:2:13"},"returnParameters":{"id":1913,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1912,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1917,"src":"3370:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1911,"name":"string","nodeType":"ElementaryTypeName","src":"3370:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3369:15:13"},"scope":2648,"src":"3319:92:13","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[2737],"body":{"id":1959,"nodeType":"Block","src":"3538:336:13","statements":[{"assignments":[1927],"declarations":[{"constant":false,"id":1927,"mutability":"mutable","name":"owner","nameLocation":"3556:5:13","nodeType":"VariableDeclaration","scope":1959,"src":"3548:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1926,"name":"address","nodeType":"ElementaryTypeName","src":"3548:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1932,"initialValue":{"arguments":[{"id":1930,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1922,"src":"3579:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1928,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2648,"src":"3564:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$2648_$","typeString":"type(contract ERC721)"}},"id":1929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":1849,"src":"3564:14:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3564:23:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3548:39:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1934,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"3605:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1935,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1927,"src":"3611:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3605:11:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e6572","id":1937,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3618:35:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""},"value":"ERC721: approval to current owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""}],"id":1933,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3597:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1938,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3597:57:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1939,"nodeType":"ExpressionStatement","src":"3597:57:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1941,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"3686:10:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1942,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3686:12:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1943,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1927,"src":"3702:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3686:21:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1946,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1927,"src":"3728:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1947,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"3735:10:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1948,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3735:12:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1945,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2013,"src":"3711:16:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":1949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3711:37:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3686:62:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","id":1951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3762:63:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","typeString":"literal_string \"ERC721: approve caller is not token owner or approved for all\""},"value":"ERC721: approve caller is not token owner or approved for all"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","typeString":"literal_string \"ERC721: approve caller is not token owner or approved for all\""}],"id":1940,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3665:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1952,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3665:170:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1953,"nodeType":"ExpressionStatement","src":"3665:170:13"},{"expression":{"arguments":[{"id":1955,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"3855:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1956,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1922,"src":"3859:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1954,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2480,"src":"3846:8:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1957,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3846:21:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1958,"nodeType":"ExpressionStatement","src":"3846:21:13"}]},"documentation":{"id":1918,"nodeType":"StructuredDocumentation","src":"3417:46:13","text":" @dev See {IERC721-approve}."},"functionSelector":"095ea7b3","id":1960,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3477:7:13","nodeType":"FunctionDefinition","overrides":{"id":1924,"nodeType":"OverrideSpecifier","overrides":[],"src":"3529:8:13"},"parameters":{"id":1923,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1920,"mutability":"mutable","name":"to","nameLocation":"3493:2:13","nodeType":"VariableDeclaration","scope":1960,"src":"3485:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1919,"name":"address","nodeType":"ElementaryTypeName","src":"3485:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1922,"mutability":"mutable","name":"tokenId","nameLocation":"3505:7:13","nodeType":"VariableDeclaration","scope":1960,"src":"3497:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1921,"name":"uint256","nodeType":"ElementaryTypeName","src":"3497:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3484:29:13"},"returnParameters":{"id":1925,"nodeType":"ParameterList","parameters":[],"src":"3538:0:13"},"scope":2648,"src":"3468:406:13","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2753],"body":{"id":1977,"nodeType":"Block","src":"4020:82:13","statements":[{"expression":{"arguments":[{"id":1970,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"4045:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1969,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2526,"src":"4030:14:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":1971,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4030:23:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1972,"nodeType":"ExpressionStatement","src":"4030:23:13"},{"expression":{"baseExpression":{"id":1973,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1743,"src":"4071:15:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1975,"indexExpression":{"id":1974,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"4087:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4071:24:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1968,"id":1976,"nodeType":"Return","src":"4064:31:13"}]},"documentation":{"id":1961,"nodeType":"StructuredDocumentation","src":"3880:50:13","text":" @dev See {IERC721-getApproved}."},"functionSelector":"081812fc","id":1978,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"3944:11:13","nodeType":"FunctionDefinition","overrides":{"id":1965,"nodeType":"OverrideSpecifier","overrides":[],"src":"3993:8:13"},"parameters":{"id":1964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1963,"mutability":"mutable","name":"tokenId","nameLocation":"3964:7:13","nodeType":"VariableDeclaration","scope":1978,"src":"3956:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1962,"name":"uint256","nodeType":"ElementaryTypeName","src":"3956:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3955:17:13"},"returnParameters":{"id":1968,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1967,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1978,"src":"4011:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1966,"name":"address","nodeType":"ElementaryTypeName","src":"4011:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4010:9:13"},"scope":2648,"src":"3935:167:13","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2745],"body":{"id":1994,"nodeType":"Block","src":"4253:69:13","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1988,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"4282:10:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1989,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4282:12:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1990,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1981,"src":"4296:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1991,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1983,"src":"4306:8:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1987,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2512,"src":"4263:18:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":1992,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4263:52:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1993,"nodeType":"ExpressionStatement","src":"4263:52:13"}]},"documentation":{"id":1979,"nodeType":"StructuredDocumentation","src":"4108:56:13","text":" @dev See {IERC721-setApprovalForAll}."},"functionSelector":"a22cb465","id":1995,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4178:17:13","nodeType":"FunctionDefinition","overrides":{"id":1985,"nodeType":"OverrideSpecifier","overrides":[],"src":"4244:8:13"},"parameters":{"id":1984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1981,"mutability":"mutable","name":"operator","nameLocation":"4204:8:13","nodeType":"VariableDeclaration","scope":1995,"src":"4196:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1980,"name":"address","nodeType":"ElementaryTypeName","src":"4196:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1983,"mutability":"mutable","name":"approved","nameLocation":"4219:8:13","nodeType":"VariableDeclaration","scope":1995,"src":"4214:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1982,"name":"bool","nodeType":"ElementaryTypeName","src":"4214:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4195:33:13"},"returnParameters":{"id":1986,"nodeType":"ParameterList","parameters":[],"src":"4253:0:13"},"scope":2648,"src":"4169:153:13","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2763],"body":{"id":2012,"nodeType":"Block","src":"4491:59:13","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":2006,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1749,"src":"4508:18:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":2008,"indexExpression":{"id":2007,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1998,"src":"4527:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4508:25:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2010,"indexExpression":{"id":2009,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2000,"src":"4534:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4508:35:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2005,"id":2011,"nodeType":"Return","src":"4501:42:13"}]},"documentation":{"id":1996,"nodeType":"StructuredDocumentation","src":"4328:55:13","text":" @dev See {IERC721-isApprovedForAll}."},"functionSelector":"e985e9c5","id":2013,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4397:16:13","nodeType":"FunctionDefinition","overrides":{"id":2002,"nodeType":"OverrideSpecifier","overrides":[],"src":"4467:8:13"},"parameters":{"id":2001,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1998,"mutability":"mutable","name":"owner","nameLocation":"4422:5:13","nodeType":"VariableDeclaration","scope":2013,"src":"4414:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1997,"name":"address","nodeType":"ElementaryTypeName","src":"4414:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2000,"mutability":"mutable","name":"operator","nameLocation":"4437:8:13","nodeType":"VariableDeclaration","scope":2013,"src":"4429:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1999,"name":"address","nodeType":"ElementaryTypeName","src":"4429:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4413:33:13"},"returnParameters":{"id":2005,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2004,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2013,"src":"4485:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2003,"name":"bool","nodeType":"ElementaryTypeName","src":"4485:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4484:6:13"},"scope":2648,"src":"4388:162:13","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2729],"body":{"id":2039,"nodeType":"Block","src":"4731:207:13","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2026,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"4820:10:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2027,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4820:12:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2028,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2020,"src":"4834:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2025,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2183,"src":"4801:18:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":2029,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4801:41:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":2030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4844:47:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""},"value":"ERC721: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""}],"id":2024,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4793:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4793:99:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2032,"nodeType":"ExpressionStatement","src":"4793:99:13"},{"expression":{"arguments":[{"id":2034,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2016,"src":"4913:4:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2035,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"4919:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2036,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2020,"src":"4923:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2033,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2456,"src":"4903:9:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2037,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4903:28:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2038,"nodeType":"ExpressionStatement","src":"4903:28:13"}]},"documentation":{"id":2014,"nodeType":"StructuredDocumentation","src":"4556:51:13","text":" @dev See {IERC721-transferFrom}."},"functionSelector":"23b872dd","id":2040,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"4621:12:13","nodeType":"FunctionDefinition","overrides":{"id":2022,"nodeType":"OverrideSpecifier","overrides":[],"src":"4722:8:13"},"parameters":{"id":2021,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2016,"mutability":"mutable","name":"from","nameLocation":"4651:4:13","nodeType":"VariableDeclaration","scope":2040,"src":"4643:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2015,"name":"address","nodeType":"ElementaryTypeName","src":"4643:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2018,"mutability":"mutable","name":"to","nameLocation":"4673:2:13","nodeType":"VariableDeclaration","scope":2040,"src":"4665:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2017,"name":"address","nodeType":"ElementaryTypeName","src":"4665:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2020,"mutability":"mutable","name":"tokenId","nameLocation":"4693:7:13","nodeType":"VariableDeclaration","scope":2040,"src":"4685:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2019,"name":"uint256","nodeType":"ElementaryTypeName","src":"4685:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4633:73:13"},"returnParameters":{"id":2023,"nodeType":"ParameterList","parameters":[],"src":"4731:0:13"},"scope":2648,"src":"4612:326:13","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2719],"body":{"id":2058,"nodeType":"Block","src":"5127:56:13","statements":[{"expression":{"arguments":[{"id":2052,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2043,"src":"5154:4:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2053,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2045,"src":"5160:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2054,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2047,"src":"5164:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":2055,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5173:2:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":2051,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[2059,2089],"referencedDeclaration":2089,"src":"5137:16:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":2056,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5137:39:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2057,"nodeType":"ExpressionStatement","src":"5137:39:13"}]},"documentation":{"id":2041,"nodeType":"StructuredDocumentation","src":"4944:55:13","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"42842e0e","id":2059,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"5013:16:13","nodeType":"FunctionDefinition","overrides":{"id":2049,"nodeType":"OverrideSpecifier","overrides":[],"src":"5118:8:13"},"parameters":{"id":2048,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2043,"mutability":"mutable","name":"from","nameLocation":"5047:4:13","nodeType":"VariableDeclaration","scope":2059,"src":"5039:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2042,"name":"address","nodeType":"ElementaryTypeName","src":"5039:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2045,"mutability":"mutable","name":"to","nameLocation":"5069:2:13","nodeType":"VariableDeclaration","scope":2059,"src":"5061:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2044,"name":"address","nodeType":"ElementaryTypeName","src":"5061:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2047,"mutability":"mutable","name":"tokenId","nameLocation":"5089:7:13","nodeType":"VariableDeclaration","scope":2059,"src":"5081:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2046,"name":"uint256","nodeType":"ElementaryTypeName","src":"5081:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5029:73:13"},"returnParameters":{"id":2050,"nodeType":"ParameterList","parameters":[],"src":"5127:0:13"},"scope":2648,"src":"5004:179:13","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2709],"body":{"id":2088,"nodeType":"Block","src":"5399:164:13","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2074,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"5436:10:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2075,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5436:12:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2076,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2066,"src":"5450:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2073,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2183,"src":"5417:18:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":2077,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5417:41:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":2078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5460:47:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""},"value":"ERC721: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""}],"id":2072,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5409:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2079,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5409:99:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2080,"nodeType":"ExpressionStatement","src":"5409:99:13"},{"expression":{"arguments":[{"id":2082,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2062,"src":"5532:4:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2083,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2064,"src":"5538:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2084,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2066,"src":"5542:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2085,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2068,"src":"5551:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2081,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"5518:13:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":2086,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5518:38:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2087,"nodeType":"ExpressionStatement","src":"5518:38:13"}]},"documentation":{"id":2060,"nodeType":"StructuredDocumentation","src":"5189:55:13","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"b88d4fde","id":2089,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"5258:16:13","nodeType":"FunctionDefinition","overrides":{"id":2070,"nodeType":"OverrideSpecifier","overrides":[],"src":"5390:8:13"},"parameters":{"id":2069,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2062,"mutability":"mutable","name":"from","nameLocation":"5292:4:13","nodeType":"VariableDeclaration","scope":2089,"src":"5284:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2061,"name":"address","nodeType":"ElementaryTypeName","src":"5284:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2064,"mutability":"mutable","name":"to","nameLocation":"5314:2:13","nodeType":"VariableDeclaration","scope":2089,"src":"5306:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2063,"name":"address","nodeType":"ElementaryTypeName","src":"5306:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2066,"mutability":"mutable","name":"tokenId","nameLocation":"5334:7:13","nodeType":"VariableDeclaration","scope":2089,"src":"5326:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2065,"name":"uint256","nodeType":"ElementaryTypeName","src":"5326:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2068,"mutability":"mutable","name":"data","nameLocation":"5364:4:13","nodeType":"VariableDeclaration","scope":2089,"src":"5351:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2067,"name":"bytes","nodeType":"ElementaryTypeName","src":"5351:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5274:100:13"},"returnParameters":{"id":2071,"nodeType":"ParameterList","parameters":[],"src":"5399:0:13"},"scope":2648,"src":"5249:314:13","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":2117,"nodeType":"Block","src":"6564:165:13","statements":[{"expression":{"arguments":[{"id":2102,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2092,"src":"6584:4:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2103,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2094,"src":"6590:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2104,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2096,"src":"6594:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2101,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2456,"src":"6574:9:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6574:28:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2106,"nodeType":"ExpressionStatement","src":"6574:28:13"},{"expression":{"arguments":[{"arguments":[{"id":2109,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2092,"src":"6643:4:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2110,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2094,"src":"6649:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2111,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2096,"src":"6653:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2112,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2098,"src":"6662:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2108,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2588,"src":"6620:22:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":2113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6620:47:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":2114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6669:52:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":2107,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6612:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6612:110:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2116,"nodeType":"ExpressionStatement","src":"6612:110:13"}]},"documentation":{"id":2090,"nodeType":"StructuredDocumentation","src":"5569:850:13","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n `data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":2118,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"6433:13:13","nodeType":"FunctionDefinition","parameters":{"id":2099,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2092,"mutability":"mutable","name":"from","nameLocation":"6464:4:13","nodeType":"VariableDeclaration","scope":2118,"src":"6456:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2091,"name":"address","nodeType":"ElementaryTypeName","src":"6456:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2094,"mutability":"mutable","name":"to","nameLocation":"6486:2:13","nodeType":"VariableDeclaration","scope":2118,"src":"6478:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2093,"name":"address","nodeType":"ElementaryTypeName","src":"6478:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2096,"mutability":"mutable","name":"tokenId","nameLocation":"6506:7:13","nodeType":"VariableDeclaration","scope":2118,"src":"6498:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2095,"name":"uint256","nodeType":"ElementaryTypeName","src":"6498:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2098,"mutability":"mutable","name":"data","nameLocation":"6536:4:13","nodeType":"VariableDeclaration","scope":2118,"src":"6523:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2097,"name":"bytes","nodeType":"ElementaryTypeName","src":"6523:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6446:100:13"},"returnParameters":{"id":2100,"nodeType":"ParameterList","parameters":[],"src":"6564:0:13"},"scope":2648,"src":"6424:305:13","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2130,"nodeType":"Block","src":"6913:40:13","statements":[{"expression":{"baseExpression":{"id":2126,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1735,"src":"6930:7:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2128,"indexExpression":{"id":2127,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2121,"src":"6938:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6930:16:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2125,"id":2129,"nodeType":"Return","src":"6923:23:13"}]},"documentation":{"id":2119,"nodeType":"StructuredDocumentation","src":"6735:98:13","text":" @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist"},"id":2131,"implemented":true,"kind":"function","modifiers":[],"name":"_ownerOf","nameLocation":"6847:8:13","nodeType":"FunctionDefinition","parameters":{"id":2122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2121,"mutability":"mutable","name":"tokenId","nameLocation":"6864:7:13","nodeType":"VariableDeclaration","scope":2131,"src":"6856:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2120,"name":"uint256","nodeType":"ElementaryTypeName","src":"6856:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6855:17:13"},"returnParameters":{"id":2125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2124,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2131,"src":"6904:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2123,"name":"address","nodeType":"ElementaryTypeName","src":"6904:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6903:9:13"},"scope":2648,"src":"6838:115:13","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2148,"nodeType":"Block","src":"7327:55:13","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2140,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2134,"src":"7353:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2139,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"7344:8:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7344:17:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7373:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2143,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7365:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2142,"name":"address","nodeType":"ElementaryTypeName","src":"7365:7:13","typeDescriptions":{}}},"id":2145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7365:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7344:31:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2138,"id":2147,"nodeType":"Return","src":"7337:38:13"}]},"documentation":{"id":2132,"nodeType":"StructuredDocumentation","src":"6959:292:13","text":" @dev Returns whether `tokenId` exists.\n Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n Tokens start existing when they are minted (`_mint`),\n and stop existing when they are burned (`_burn`)."},"id":2149,"implemented":true,"kind":"function","modifiers":[],"name":"_exists","nameLocation":"7265:7:13","nodeType":"FunctionDefinition","parameters":{"id":2135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2134,"mutability":"mutable","name":"tokenId","nameLocation":"7281:7:13","nodeType":"VariableDeclaration","scope":2149,"src":"7273:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2133,"name":"uint256","nodeType":"ElementaryTypeName","src":"7273:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7272:17:13"},"returnParameters":{"id":2138,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2137,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2149,"src":"7321:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2136,"name":"bool","nodeType":"ElementaryTypeName","src":"7321:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7320:6:13"},"scope":2648,"src":"7256:126:13","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2182,"nodeType":"Block","src":"7639:162:13","statements":[{"assignments":[2160],"declarations":[{"constant":false,"id":2160,"mutability":"mutable","name":"owner","nameLocation":"7657:5:13","nodeType":"VariableDeclaration","scope":2182,"src":"7649:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2159,"name":"address","nodeType":"ElementaryTypeName","src":"7649:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2165,"initialValue":{"arguments":[{"id":2163,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2154,"src":"7680:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2161,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2648,"src":"7665:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$2648_$","typeString":"type(contract ERC721)"}},"id":2162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":1849,"src":"7665:14:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7665:23:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7649:39:13"},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2166,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2152,"src":"7706:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2167,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2160,"src":"7717:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7706:16:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":2170,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2160,"src":"7743:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2171,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2152,"src":"7750:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2169,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2013,"src":"7726:16:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":2172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7726:32:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7706:52:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2175,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2154,"src":"7774:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2174,"name":"getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1978,"src":"7762:11:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7762:20:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2177,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2152,"src":"7786:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7762:31:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7706:87:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":2180,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7705:89:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2158,"id":2181,"nodeType":"Return","src":"7698:96:13"}]},"documentation":{"id":2150,"nodeType":"StructuredDocumentation","src":"7388:147:13","text":" @dev Returns whether `spender` is allowed to manage `tokenId`.\n Requirements:\n - `tokenId` must exist."},"id":2183,"implemented":true,"kind":"function","modifiers":[],"name":"_isApprovedOrOwner","nameLocation":"7549:18:13","nodeType":"FunctionDefinition","parameters":{"id":2155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2152,"mutability":"mutable","name":"spender","nameLocation":"7576:7:13","nodeType":"VariableDeclaration","scope":2183,"src":"7568:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2151,"name":"address","nodeType":"ElementaryTypeName","src":"7568:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2154,"mutability":"mutable","name":"tokenId","nameLocation":"7593:7:13","nodeType":"VariableDeclaration","scope":2183,"src":"7585:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2153,"name":"uint256","nodeType":"ElementaryTypeName","src":"7585:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7567:34:13"},"returnParameters":{"id":2158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2157,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2183,"src":"7633:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2156,"name":"bool","nodeType":"ElementaryTypeName","src":"7633:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7632:6:13"},"scope":2648,"src":"7540:261:13","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2197,"nodeType":"Block","src":"8196:43:13","statements":[{"expression":{"arguments":[{"id":2192,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2186,"src":"8216:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2193,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2188,"src":"8220:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":2194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8229:2:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":2191,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[2198,2227],"referencedDeclaration":2227,"src":"8206:9:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":2195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8206:26:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2196,"nodeType":"ExpressionStatement","src":"8206:26:13"}]},"documentation":{"id":2184,"nodeType":"StructuredDocumentation","src":"7807:319:13","text":" @dev Safely mints `tokenId` and transfers it to `to`.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":2198,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"8140:9:13","nodeType":"FunctionDefinition","parameters":{"id":2189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2186,"mutability":"mutable","name":"to","nameLocation":"8158:2:13","nodeType":"VariableDeclaration","scope":2198,"src":"8150:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2185,"name":"address","nodeType":"ElementaryTypeName","src":"8150:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2188,"mutability":"mutable","name":"tokenId","nameLocation":"8170:7:13","nodeType":"VariableDeclaration","scope":2198,"src":"8162:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2187,"name":"uint256","nodeType":"ElementaryTypeName","src":"8162:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8149:29:13"},"returnParameters":{"id":2190,"nodeType":"ParameterList","parameters":[],"src":"8196:0:13"},"scope":2648,"src":"8131:108:13","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2226,"nodeType":"Block","src":"8574:195:13","statements":[{"expression":{"arguments":[{"id":2209,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2201,"src":"8590:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2210,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2203,"src":"8594:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2208,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2304,"src":"8584:5:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":2211,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8584:18:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2212,"nodeType":"ExpressionStatement","src":"8584:18:13"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"30","id":2217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8664:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2216,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8656:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2215,"name":"address","nodeType":"ElementaryTypeName","src":"8656:7:13","typeDescriptions":{}}},"id":2218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8656:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2219,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2201,"src":"8668:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2220,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2203,"src":"8672:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2221,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2205,"src":"8681:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2214,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2588,"src":"8633:22:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":2222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8633:53:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":2223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8700:52:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":2213,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8612:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8612:150:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2225,"nodeType":"ExpressionStatement","src":"8612:150:13"}]},"documentation":{"id":2199,"nodeType":"StructuredDocumentation","src":"8245:210:13","text":" @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":2227,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"8469:9:13","nodeType":"FunctionDefinition","parameters":{"id":2206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2201,"mutability":"mutable","name":"to","nameLocation":"8496:2:13","nodeType":"VariableDeclaration","scope":2227,"src":"8488:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2200,"name":"address","nodeType":"ElementaryTypeName","src":"8488:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2203,"mutability":"mutable","name":"tokenId","nameLocation":"8516:7:13","nodeType":"VariableDeclaration","scope":2227,"src":"8508:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2202,"name":"uint256","nodeType":"ElementaryTypeName","src":"8508:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2205,"mutability":"mutable","name":"data","nameLocation":"8546:4:13","nodeType":"VariableDeclaration","scope":2227,"src":"8533:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2204,"name":"bytes","nodeType":"ElementaryTypeName","src":"8533:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8478:78:13"},"returnParameters":{"id":2207,"nodeType":"ParameterList","parameters":[],"src":"8574:0:13"},"scope":2648,"src":"8460:309:13","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2303,"nodeType":"Block","src":"9152:859:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2236,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"9170:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9184:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2238,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9176:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2237,"name":"address","nodeType":"ElementaryTypeName","src":"9176:7:13","typeDescriptions":{}}},"id":2240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9176:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9170:16:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","id":2242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9188:34:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""},"value":"ERC721: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""}],"id":2235,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9162:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9162:61:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2244,"nodeType":"ExpressionStatement","src":"9162:61:13"},{"expression":{"arguments":[{"id":2249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9241:17:13","subExpression":{"arguments":[{"id":2247,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2232,"src":"9250:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2246,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2149,"src":"9242:7:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":2248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9242:16:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","id":2250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9260:30:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""},"value":"ERC721: token already minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""}],"id":2245,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9233:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9233:58:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2252,"nodeType":"ExpressionStatement","src":"9233:58:13"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":2256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9331:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2255,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9323:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2254,"name":"address","nodeType":"ElementaryTypeName","src":"9323:7:13","typeDescriptions":{}}},"id":2257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9323:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2258,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"9335:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2259,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2232,"src":"9339:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":2260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9348:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":2253,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2634,"src":"9302:20:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":2261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9302:48:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2262,"nodeType":"ExpressionStatement","src":"9302:48:13"},{"expression":{"arguments":[{"id":2267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9445:17:13","subExpression":{"arguments":[{"id":2265,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2232,"src":"9454:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2264,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2149,"src":"9446:7:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":2266,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9446:16:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","id":2268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9464:30:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""},"value":"ERC721: token already minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""}],"id":2263,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9437:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9437:58:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2270,"nodeType":"ExpressionStatement","src":"9437:58:13"},{"id":2277,"nodeType":"UncheckedBlock","src":"9506:360:13","statements":[{"expression":{"id":2275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2271,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1739,"src":"9837:9:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2273,"indexExpression":{"id":2272,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"9847:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9837:13:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9854:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9837:18:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2276,"nodeType":"ExpressionStatement","src":"9837:18:13"}]},{"expression":{"id":2282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2278,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1735,"src":"9876:7:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2280,"indexExpression":{"id":2279,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2232,"src":"9884:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9876:16:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2281,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"9895:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9876:21:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2283,"nodeType":"ExpressionStatement","src":"9876:21:13"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":2287,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9930:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2286,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9922:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2285,"name":"address","nodeType":"ElementaryTypeName","src":"9922:7:13","typeDescriptions":{}}},"id":2288,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9922:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2289,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"9934:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2290,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2232,"src":"9938:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2284,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2663,"src":"9913:8:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2291,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9913:33:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2292,"nodeType":"EmitStatement","src":"9908:38:13"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":2296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9985:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2295,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9977:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2294,"name":"address","nodeType":"ElementaryTypeName","src":"9977:7:13","typeDescriptions":{}}},"id":2297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9977:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2298,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"9989:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2299,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2232,"src":"9993:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":2300,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10002:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":2293,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2647,"src":"9957:19:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":2301,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9957:47:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2302,"nodeType":"ExpressionStatement","src":"9957:47:13"}]},"documentation":{"id":2228,"nodeType":"StructuredDocumentation","src":"8775:311:13","text":" @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."},"id":2304,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"9100:5:13","nodeType":"FunctionDefinition","parameters":{"id":2233,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2230,"mutability":"mutable","name":"to","nameLocation":"9114:2:13","nodeType":"VariableDeclaration","scope":2304,"src":"9106:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2229,"name":"address","nodeType":"ElementaryTypeName","src":"9106:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2232,"mutability":"mutable","name":"tokenId","nameLocation":"9126:7:13","nodeType":"VariableDeclaration","scope":2304,"src":"9118:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2231,"name":"uint256","nodeType":"ElementaryTypeName","src":"9118:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9105:29:13"},"returnParameters":{"id":2234,"nodeType":"ParameterList","parameters":[],"src":"9152:0:13"},"scope":2648,"src":"9091:920:13","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2370,"nodeType":"Block","src":"10386:713:13","statements":[{"assignments":[2311],"declarations":[{"constant":false,"id":2311,"mutability":"mutable","name":"owner","nameLocation":"10404:5:13","nodeType":"VariableDeclaration","scope":2370,"src":"10396:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2310,"name":"address","nodeType":"ElementaryTypeName","src":"10396:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2316,"initialValue":{"arguments":[{"id":2314,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"10427:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2312,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2648,"src":"10412:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$2648_$","typeString":"type(contract ERC721)"}},"id":2313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":1849,"src":"10412:14:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10412:23:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10396:39:13"},{"expression":{"arguments":[{"id":2318,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"10467:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10482:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2320,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10474:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2319,"name":"address","nodeType":"ElementaryTypeName","src":"10474:7:13","typeDescriptions":{}}},"id":2322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10474:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2323,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"10486:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":2324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10495:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":2317,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2634,"src":"10446:20:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":2325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10446:51:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2326,"nodeType":"ExpressionStatement","src":"10446:51:13"},{"expression":{"id":2332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2327,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"10599:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2330,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"10622:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2328,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2648,"src":"10607:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$2648_$","typeString":"type(contract ERC721)"}},"id":2329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":1849,"src":"10607:14:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2331,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10607:23:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10599:31:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2333,"nodeType":"ExpressionStatement","src":"10599:31:13"},{"expression":{"id":2337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"10668:31:13","subExpression":{"baseExpression":{"id":2334,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1743,"src":"10675:15:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2336,"indexExpression":{"id":2335,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"10691:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10675:24:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2338,"nodeType":"ExpressionStatement","src":"10668:31:13"},{"id":2345,"nodeType":"UncheckedBlock","src":"10710:237:13","statements":[{"expression":{"id":2343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2339,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1739,"src":"10915:9:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2341,"indexExpression":{"id":2340,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"10925:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10915:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":2342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10935:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10915:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2344,"nodeType":"ExpressionStatement","src":"10915:21:13"}]},{"expression":{"id":2349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"10956:23:13","subExpression":{"baseExpression":{"id":2346,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1735,"src":"10963:7:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2348,"indexExpression":{"id":2347,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"10971:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10963:16:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2350,"nodeType":"ExpressionStatement","src":"10956:23:13"},{"eventCall":{"arguments":[{"id":2352,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"11004:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11019:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2354,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11011:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2353,"name":"address","nodeType":"ElementaryTypeName","src":"11011:7:13","typeDescriptions":{}}},"id":2356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11011:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2357,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"11023:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2351,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2663,"src":"10995:8:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10995:36:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2359,"nodeType":"EmitStatement","src":"10990:41:13"},{"expression":{"arguments":[{"id":2361,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"11062:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11077:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2363,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11069:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2362,"name":"address","nodeType":"ElementaryTypeName","src":"11069:7:13","typeDescriptions":{}}},"id":2365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11069:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2366,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"11081:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":2367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11090:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":2360,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2647,"src":"11042:19:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":2368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11042:50:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2369,"nodeType":"ExpressionStatement","src":"11042:50:13"}]},"documentation":{"id":2305,"nodeType":"StructuredDocumentation","src":"10017:315:13","text":" @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n This is an internal function that does not check if the sender is authorized to operate on the token.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."},"id":2371,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"10346:5:13","nodeType":"FunctionDefinition","parameters":{"id":2308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2307,"mutability":"mutable","name":"tokenId","nameLocation":"10360:7:13","nodeType":"VariableDeclaration","scope":2371,"src":"10352:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2306,"name":"uint256","nodeType":"ElementaryTypeName","src":"10352:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10351:17:13"},"returnParameters":{"id":2309,"nodeType":"ParameterList","parameters":[],"src":"10386:0:13"},"scope":2648,"src":"10337:762:13","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2455,"nodeType":"Block","src":"11532:1124:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2384,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"11565:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2382,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2648,"src":"11550:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$2648_$","typeString":"type(contract ERC721)"}},"id":2383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":1849,"src":"11550:14:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11550:23:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2386,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2374,"src":"11577:4:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11550:31:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":2388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11583:39:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":2381,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11542:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2389,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11542:81:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2390,"nodeType":"ExpressionStatement","src":"11542:81:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2392,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2376,"src":"11641:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11655:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2394,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11647:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2393,"name":"address","nodeType":"ElementaryTypeName","src":"11647:7:13","typeDescriptions":{}}},"id":2396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11647:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11641:16:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f2061646472657373","id":2398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11659:38:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""},"value":"ERC721: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""}],"id":2391,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11633:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11633:65:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2400,"nodeType":"ExpressionStatement","src":"11633:65:13"},{"expression":{"arguments":[{"id":2402,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2374,"src":"11730:4:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2403,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2376,"src":"11736:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2404,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"11740:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":2405,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11749:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":2401,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2634,"src":"11709:20:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":2406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11709:42:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2407,"nodeType":"ExpressionStatement","src":"11709:42:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2411,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"11866:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2409,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2648,"src":"11851:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$2648_$","typeString":"type(contract ERC721)"}},"id":2410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":1849,"src":"11851:14:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2412,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11851:23:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2413,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2374,"src":"11878:4:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11851:31:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":2415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11884:39:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":2408,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11843:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11843:81:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2417,"nodeType":"ExpressionStatement","src":"11843:81:13"},{"expression":{"id":2421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"11986:31:13","subExpression":{"baseExpression":{"id":2418,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1743,"src":"11993:15:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2420,"indexExpression":{"id":2419,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"12009:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11993:24:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2422,"nodeType":"ExpressionStatement","src":"11986:31:13"},{"id":2435,"nodeType":"UncheckedBlock","src":"12028:496:13","statements":[{"expression":{"id":2427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2423,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1739,"src":"12461:9:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2425,"indexExpression":{"id":2424,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2374,"src":"12471:4:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12461:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":2426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12480:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12461:20:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2428,"nodeType":"ExpressionStatement","src":"12461:20:13"},{"expression":{"id":2433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2429,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1739,"src":"12495:9:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2431,"indexExpression":{"id":2430,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2376,"src":"12505:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12495:13:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2432,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12512:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12495:18:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2434,"nodeType":"ExpressionStatement","src":"12495:18:13"}]},{"expression":{"id":2440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2436,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1735,"src":"12533:7:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2438,"indexExpression":{"id":2437,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"12541:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12533:16:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2439,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2376,"src":"12552:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12533:21:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2441,"nodeType":"ExpressionStatement","src":"12533:21:13"},{"eventCall":{"arguments":[{"id":2443,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2374,"src":"12579:4:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2444,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2376,"src":"12585:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2445,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"12589:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2442,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2663,"src":"12570:8:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12570:27:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2447,"nodeType":"EmitStatement","src":"12565:32:13"},{"expression":{"arguments":[{"id":2449,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2374,"src":"12628:4:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2450,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2376,"src":"12634:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2451,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"12638:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":2452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12647:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":2448,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2647,"src":"12608:19:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":2453,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12608:41:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2454,"nodeType":"ExpressionStatement","src":"12608:41:13"}]},"documentation":{"id":2372,"nodeType":"StructuredDocumentation","src":"11105:313:13","text":" @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."},"id":2456,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"11432:9:13","nodeType":"FunctionDefinition","parameters":{"id":2379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2374,"mutability":"mutable","name":"from","nameLocation":"11459:4:13","nodeType":"VariableDeclaration","scope":2456,"src":"11451:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2373,"name":"address","nodeType":"ElementaryTypeName","src":"11451:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2376,"mutability":"mutable","name":"to","nameLocation":"11481:2:13","nodeType":"VariableDeclaration","scope":2456,"src":"11473:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2375,"name":"address","nodeType":"ElementaryTypeName","src":"11473:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2378,"mutability":"mutable","name":"tokenId","nameLocation":"11501:7:13","nodeType":"VariableDeclaration","scope":2456,"src":"11493:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2377,"name":"uint256","nodeType":"ElementaryTypeName","src":"11493:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11441:73:13"},"returnParameters":{"id":2380,"nodeType":"ParameterList","parameters":[],"src":"11532:0:13"},"scope":2648,"src":"11423:1233:13","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2479,"nodeType":"Block","src":"12832:107:13","statements":[{"expression":{"id":2468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2464,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1743,"src":"12842:15:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2466,"indexExpression":{"id":2465,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"12858:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12842:24:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2467,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2459,"src":"12869:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12842:29:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2469,"nodeType":"ExpressionStatement","src":"12842:29:13"},{"eventCall":{"arguments":[{"arguments":[{"id":2473,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"12910:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2471,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2648,"src":"12895:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$2648_$","typeString":"type(contract ERC721)"}},"id":2472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":1849,"src":"12895:14:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2474,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12895:23:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2475,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2459,"src":"12920:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2476,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"12924:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2470,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2672,"src":"12886:8:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12886:46:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2478,"nodeType":"EmitStatement","src":"12881:51:13"}]},"documentation":{"id":2457,"nodeType":"StructuredDocumentation","src":"12662:101:13","text":" @dev Approve `to` to operate on `tokenId`\n Emits an {Approval} event."},"id":2480,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"12777:8:13","nodeType":"FunctionDefinition","parameters":{"id":2462,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2459,"mutability":"mutable","name":"to","nameLocation":"12794:2:13","nodeType":"VariableDeclaration","scope":2480,"src":"12786:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2458,"name":"address","nodeType":"ElementaryTypeName","src":"12786:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2461,"mutability":"mutable","name":"tokenId","nameLocation":"12806:7:13","nodeType":"VariableDeclaration","scope":2480,"src":"12798:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2460,"name":"uint256","nodeType":"ElementaryTypeName","src":"12798:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12785:29:13"},"returnParameters":{"id":2463,"nodeType":"ParameterList","parameters":[],"src":"12832:0:13"},"scope":2648,"src":"12768:171:13","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2511,"nodeType":"Block","src":"13198:184:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2491,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2483,"src":"13216:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2492,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2485,"src":"13225:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13216:17:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","id":2494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13235:27:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""},"value":"ERC721: approve to caller"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""}],"id":2490,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13208:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13208:55:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2496,"nodeType":"ExpressionStatement","src":"13208:55:13"},{"expression":{"id":2503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":2497,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1749,"src":"13273:18:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":2500,"indexExpression":{"id":2498,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2483,"src":"13292:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13273:25:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2501,"indexExpression":{"id":2499,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2485,"src":"13299:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13273:35:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2502,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2487,"src":"13311:8:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13273:46:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2504,"nodeType":"ExpressionStatement","src":"13273:46:13"},{"eventCall":{"arguments":[{"id":2506,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2483,"src":"13349:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2507,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2485,"src":"13356:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2508,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2487,"src":"13366:8:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2505,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2681,"src":"13334:14:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":2509,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13334:41:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2510,"nodeType":"EmitStatement","src":"13329:46:13"}]},"documentation":{"id":2481,"nodeType":"StructuredDocumentation","src":"12945:125:13","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Emits an {ApprovalForAll} event."},"id":2512,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"13084:18:13","nodeType":"FunctionDefinition","parameters":{"id":2488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2483,"mutability":"mutable","name":"owner","nameLocation":"13120:5:13","nodeType":"VariableDeclaration","scope":2512,"src":"13112:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2482,"name":"address","nodeType":"ElementaryTypeName","src":"13112:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2485,"mutability":"mutable","name":"operator","nameLocation":"13143:8:13","nodeType":"VariableDeclaration","scope":2512,"src":"13135:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2484,"name":"address","nodeType":"ElementaryTypeName","src":"13135:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2487,"mutability":"mutable","name":"approved","nameLocation":"13166:8:13","nodeType":"VariableDeclaration","scope":2512,"src":"13161:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2486,"name":"bool","nodeType":"ElementaryTypeName","src":"13161:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13102:78:13"},"returnParameters":{"id":2489,"nodeType":"ParameterList","parameters":[],"src":"13198:0:13"},"scope":2648,"src":"13075:307:13","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2525,"nodeType":"Block","src":"13529:70:13","statements":[{"expression":{"arguments":[{"arguments":[{"id":2520,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2515,"src":"13555:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2519,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2149,"src":"13547:7:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":2521,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13547:16:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":2522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13565:26:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":2518,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13539:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2523,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13539:53:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2524,"nodeType":"ExpressionStatement","src":"13539:53:13"}]},"documentation":{"id":2513,"nodeType":"StructuredDocumentation","src":"13388:73:13","text":" @dev Reverts if the `tokenId` has not been minted yet."},"id":2526,"implemented":true,"kind":"function","modifiers":[],"name":"_requireMinted","nameLocation":"13475:14:13","nodeType":"FunctionDefinition","parameters":{"id":2516,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2515,"mutability":"mutable","name":"tokenId","nameLocation":"13498:7:13","nodeType":"VariableDeclaration","scope":2526,"src":"13490:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2514,"name":"uint256","nodeType":"ElementaryTypeName","src":"13490:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13489:17:13"},"returnParameters":{"id":2517,"nodeType":"ParameterList","parameters":[],"src":"13529:0:13"},"scope":2648,"src":"13466:133:13","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2587,"nodeType":"Block","src":"14306:676:13","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2540,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"14320:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2827,"src":"14320:13:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":2542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14320:15:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2585,"nodeType":"Block","src":"14940:36:13","statements":[{"expression":{"hexValue":"74727565","id":2583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14961:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":2539,"id":2584,"nodeType":"Return","src":"14954:11:13"}]},"id":2586,"nodeType":"IfStatement","src":"14316:660:13","trueBody":{"id":2582,"nodeType":"Block","src":"14337:597:13","statements":[{"clauses":[{"block":{"id":2562,"nodeType":"Block","src":"14451:91:13","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2556,"name":"retval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2554,"src":"14476:6:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":2557,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2782,"src":"14486:15:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$2782_$","typeString":"type(contract IERC721Receiver)"}},"id":2558,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":2781,"src":"14486:32:13","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":2559,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"14486:41:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"14476:51:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2539,"id":2561,"nodeType":"Return","src":"14469:58:13"}]},"errorName":"","id":2563,"nodeType":"TryCatchClause","parameters":{"id":2555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2554,"mutability":"mutable","name":"retval","nameLocation":"14443:6:13","nodeType":"VariableDeclaration","scope":2563,"src":"14436:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2553,"name":"bytes4","nodeType":"ElementaryTypeName","src":"14436:6:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"14435:15:13"},"src":"14427:115:13"},{"block":{"id":2579,"nodeType":"Block","src":"14571:353:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2567,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2565,"src":"14593:6:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"14593:13:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14610:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14593:18:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2577,"nodeType":"Block","src":"14720:190:13","statements":[{"AST":{"nodeType":"YulBlock","src":"14806:86:13","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14843:2:13","type":"","value":"32"},{"name":"reason","nodeType":"YulIdentifier","src":"14847:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14839:3:13"},"nodeType":"YulFunctionCall","src":"14839:15:13"},{"arguments":[{"name":"reason","nodeType":"YulIdentifier","src":"14862:6:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14856:5:13"},"nodeType":"YulFunctionCall","src":"14856:13:13"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14832:6:13"},"nodeType":"YulFunctionCall","src":"14832:38:13"},"nodeType":"YulExpressionStatement","src":"14832:38:13"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"istanbul","externalReferences":[{"declaration":2565,"isOffset":false,"isSlot":false,"src":"14847:6:13","valueSize":1},{"declaration":2565,"isOffset":false,"isSlot":false,"src":"14862:6:13","valueSize":1}],"id":2576,"nodeType":"InlineAssembly","src":"14797:95:13"}]},"id":2578,"nodeType":"IfStatement","src":"14589:321:13","trueBody":{"id":2575,"nodeType":"Block","src":"14613:101:13","statements":[{"expression":{"arguments":[{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":2572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14642:52:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":2571,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"14635:6:13","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14635:60:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2574,"nodeType":"ExpressionStatement","src":"14635:60:13"}]}}]},"errorName":"","id":2580,"nodeType":"TryCatchClause","parameters":{"id":2566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2565,"mutability":"mutable","name":"reason","nameLocation":"14563:6:13","nodeType":"VariableDeclaration","scope":2580,"src":"14550:19:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2564,"name":"bytes","nodeType":"ElementaryTypeName","src":"14550:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14549:21:13"},"src":"14543:381:13"}],"externalCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2547,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"14392:10:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2548,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14392:12:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2549,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2529,"src":"14406:4:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2550,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2533,"src":"14412:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2551,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2535,"src":"14421:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":2544,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"14371:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2543,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2782,"src":"14355:15:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$2782_$","typeString":"type(contract IERC721Receiver)"}},"id":2545,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14355:19:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Receiver_$2782","typeString":"contract IERC721Receiver"}},"id":2546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":2781,"src":"14355:36:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":2552,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14355:71:13","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":2581,"nodeType":"TryStatement","src":"14351:573:13"}]}}]},"documentation":{"id":2527,"nodeType":"StructuredDocumentation","src":"13605:541:13","text":" @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param data bytes optional data to send along with the call\n @return bool whether the call correctly returned the expected magic value"},"id":2588,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOnERC721Received","nameLocation":"14160:22:13","nodeType":"FunctionDefinition","parameters":{"id":2536,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2529,"mutability":"mutable","name":"from","nameLocation":"14200:4:13","nodeType":"VariableDeclaration","scope":2588,"src":"14192:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2528,"name":"address","nodeType":"ElementaryTypeName","src":"14192:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2531,"mutability":"mutable","name":"to","nameLocation":"14222:2:13","nodeType":"VariableDeclaration","scope":2588,"src":"14214:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2530,"name":"address","nodeType":"ElementaryTypeName","src":"14214:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2533,"mutability":"mutable","name":"tokenId","nameLocation":"14242:7:13","nodeType":"VariableDeclaration","scope":2588,"src":"14234:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2532,"name":"uint256","nodeType":"ElementaryTypeName","src":"14234:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2535,"mutability":"mutable","name":"data","nameLocation":"14272:4:13","nodeType":"VariableDeclaration","scope":2588,"src":"14259:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2534,"name":"bytes","nodeType":"ElementaryTypeName","src":"14259:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14182:100:13"},"returnParameters":{"id":2539,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2538,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2588,"src":"14300:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2537,"name":"bool","nodeType":"ElementaryTypeName","src":"14300:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14299:6:13"},"scope":2648,"src":"14151:831:13","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2633,"nodeType":"Block","src":"15856:238:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2600,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2597,"src":"15870:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":2601,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15882:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15870:13:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2632,"nodeType":"IfStatement","src":"15866:222:13","trueBody":{"id":2631,"nodeType":"Block","src":"15885:203:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2603,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2591,"src":"15903:4:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2606,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15919:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2605,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15911:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2604,"name":"address","nodeType":"ElementaryTypeName","src":"15911:7:13","typeDescriptions":{}}},"id":2607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15911:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15903:18:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2616,"nodeType":"IfStatement","src":"15899:85:13","trueBody":{"id":2615,"nodeType":"Block","src":"15923:61:13","statements":[{"expression":{"id":2613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2609,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1739,"src":"15941:9:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2611,"indexExpression":{"id":2610,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2591,"src":"15951:4:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15941:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":2612,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2597,"src":"15960:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15941:28:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2614,"nodeType":"ExpressionStatement","src":"15941:28:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2617,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2593,"src":"16001:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16015:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2619,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16007:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2618,"name":"address","nodeType":"ElementaryTypeName","src":"16007:7:13","typeDescriptions":{}}},"id":2621,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16007:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"16001:16:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2630,"nodeType":"IfStatement","src":"15997:81:13","trueBody":{"id":2629,"nodeType":"Block","src":"16019:59:13","statements":[{"expression":{"id":2627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2623,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1739,"src":"16037:9:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2625,"indexExpression":{"id":2624,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2593,"src":"16047:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16037:13:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2626,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2597,"src":"16054:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16037:26:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2628,"nodeType":"ExpressionStatement","src":"16037:26:13"}]}}]}}]},"documentation":{"id":2589,"nodeType":"StructuredDocumentation","src":"14988:705:13","text":" @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n - When `from` is zero, the tokens will be minted for `to`.\n - When `to` is zero, ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":2634,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"15707:20:13","nodeType":"FunctionDefinition","parameters":{"id":2598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2591,"mutability":"mutable","name":"from","nameLocation":"15745:4:13","nodeType":"VariableDeclaration","scope":2634,"src":"15737:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2590,"name":"address","nodeType":"ElementaryTypeName","src":"15737:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2593,"mutability":"mutable","name":"to","nameLocation":"15767:2:13","nodeType":"VariableDeclaration","scope":2634,"src":"15759:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2592,"name":"address","nodeType":"ElementaryTypeName","src":"15759:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2595,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2634,"src":"15779:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2594,"name":"uint256","nodeType":"ElementaryTypeName","src":"15779:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2597,"mutability":"mutable","name":"batchSize","nameLocation":"15823:9:13","nodeType":"VariableDeclaration","scope":2634,"src":"15815:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2596,"name":"uint256","nodeType":"ElementaryTypeName","src":"15815:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15727:111:13"},"returnParameters":{"id":2599,"nodeType":"ParameterList","parameters":[],"src":"15856:0:13"},"scope":2648,"src":"15698:396:13","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2646,"nodeType":"Block","src":"16951:2:13","statements":[]},"documentation":{"id":2635,"nodeType":"StructuredDocumentation","src":"16100:695:13","text":" @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n - When `from` is zero, the tokens were minted for `to`.\n - When `to` is zero, ``from``'s tokens were burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":2647,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"16809:19:13","nodeType":"FunctionDefinition","parameters":{"id":2644,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2637,"mutability":"mutable","name":"from","nameLocation":"16846:4:13","nodeType":"VariableDeclaration","scope":2647,"src":"16838:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2636,"name":"address","nodeType":"ElementaryTypeName","src":"16838:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2639,"mutability":"mutable","name":"to","nameLocation":"16868:2:13","nodeType":"VariableDeclaration","scope":2647,"src":"16860:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2638,"name":"address","nodeType":"ElementaryTypeName","src":"16860:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2641,"mutability":"mutable","name":"firstTokenId","nameLocation":"16888:12:13","nodeType":"VariableDeclaration","scope":2647,"src":"16880:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2640,"name":"uint256","nodeType":"ElementaryTypeName","src":"16880:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2643,"mutability":"mutable","name":"batchSize","nameLocation":"16918:9:13","nodeType":"VariableDeclaration","scope":2647,"src":"16910:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2642,"name":"uint256","nodeType":"ElementaryTypeName","src":"16910:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16828:105:13"},"returnParameters":{"id":2645,"nodeType":"ParameterList","parameters":[],"src":"16951:0:13"},"scope":2648,"src":"16800:153:13","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":2649,"src":"628:16327:13","usedErrors":[]}],"src":"107:16849:13"},"id":13},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","exportedSymbols":{"IERC165":[3446],"IERC721":[2764]},"id":2765,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2650,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:14"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":2651,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2765,"sourceUnit":3447,"src":"133:47:14","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2653,"name":"IERC165","nodeType":"IdentifierPath","referencedDeclaration":3446,"src":"271:7:14"},"id":2654,"nodeType":"InheritanceSpecifier","src":"271:7:14"}],"contractDependencies":[],"contractKind":"interface","documentation":{"id":2652,"nodeType":"StructuredDocumentation","src":"182:67:14","text":" @dev Required interface of an ERC721 compliant contract."},"fullyImplemented":false,"id":2764,"linearizedBaseContracts":[2764,3446],"name":"IERC721","nameLocation":"260:7:14","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2655,"nodeType":"StructuredDocumentation","src":"285:88:14","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"id":2663,"name":"Transfer","nameLocation":"384:8:14","nodeType":"EventDefinition","parameters":{"id":2662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2657,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"409:4:14","nodeType":"VariableDeclaration","scope":2663,"src":"393:20:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2656,"name":"address","nodeType":"ElementaryTypeName","src":"393:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2659,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"431:2:14","nodeType":"VariableDeclaration","scope":2663,"src":"415:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2658,"name":"address","nodeType":"ElementaryTypeName","src":"415:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2661,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"451:7:14","nodeType":"VariableDeclaration","scope":2663,"src":"435:23:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2660,"name":"uint256","nodeType":"ElementaryTypeName","src":"435:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"392:67:14"},"src":"378:82:14"},{"anonymous":false,"documentation":{"id":2664,"nodeType":"StructuredDocumentation","src":"466:94:14","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"id":2672,"name":"Approval","nameLocation":"571:8:14","nodeType":"EventDefinition","parameters":{"id":2671,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2666,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"596:5:14","nodeType":"VariableDeclaration","scope":2672,"src":"580:21:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2665,"name":"address","nodeType":"ElementaryTypeName","src":"580:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2668,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"619:8:14","nodeType":"VariableDeclaration","scope":2672,"src":"603:24:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2667,"name":"address","nodeType":"ElementaryTypeName","src":"603:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2670,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"645:7:14","nodeType":"VariableDeclaration","scope":2672,"src":"629:23:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2669,"name":"uint256","nodeType":"ElementaryTypeName","src":"629:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"579:74:14"},"src":"565:89:14"},{"anonymous":false,"documentation":{"id":2673,"nodeType":"StructuredDocumentation","src":"660:117:14","text":" @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"id":2681,"name":"ApprovalForAll","nameLocation":"788:14:14","nodeType":"EventDefinition","parameters":{"id":2680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2675,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"819:5:14","nodeType":"VariableDeclaration","scope":2681,"src":"803:21:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2674,"name":"address","nodeType":"ElementaryTypeName","src":"803:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2677,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"842:8:14","nodeType":"VariableDeclaration","scope":2681,"src":"826:24:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2676,"name":"address","nodeType":"ElementaryTypeName","src":"826:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2679,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"857:8:14","nodeType":"VariableDeclaration","scope":2681,"src":"852:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2678,"name":"bool","nodeType":"ElementaryTypeName","src":"852:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"802:64:14"},"src":"782:85:14"},{"documentation":{"id":2682,"nodeType":"StructuredDocumentation","src":"873:76:14","text":" @dev Returns the number of tokens in ``owner``'s account."},"functionSelector":"70a08231","id":2689,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"963:9:14","nodeType":"FunctionDefinition","parameters":{"id":2685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2684,"mutability":"mutable","name":"owner","nameLocation":"981:5:14","nodeType":"VariableDeclaration","scope":2689,"src":"973:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2683,"name":"address","nodeType":"ElementaryTypeName","src":"973:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"972:15:14"},"returnParameters":{"id":2688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2687,"mutability":"mutable","name":"balance","nameLocation":"1019:7:14","nodeType":"VariableDeclaration","scope":2689,"src":"1011:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2686,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1010:17:14"},"scope":2764,"src":"954:74:14","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2690,"nodeType":"StructuredDocumentation","src":"1034:131:14","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":2697,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"1179:7:14","nodeType":"FunctionDefinition","parameters":{"id":2693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2692,"mutability":"mutable","name":"tokenId","nameLocation":"1195:7:14","nodeType":"VariableDeclaration","scope":2697,"src":"1187:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2691,"name":"uint256","nodeType":"ElementaryTypeName","src":"1187:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1186:17:14"},"returnParameters":{"id":2696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2695,"mutability":"mutable","name":"owner","nameLocation":"1235:5:14","nodeType":"VariableDeclaration","scope":2697,"src":"1227:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2694,"name":"address","nodeType":"ElementaryTypeName","src":"1227:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1226:15:14"},"scope":2764,"src":"1170:72:14","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2698,"nodeType":"StructuredDocumentation","src":"1248:556:14","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":2709,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1818:16:14","nodeType":"FunctionDefinition","parameters":{"id":2707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2700,"mutability":"mutable","name":"from","nameLocation":"1852:4:14","nodeType":"VariableDeclaration","scope":2709,"src":"1844:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2699,"name":"address","nodeType":"ElementaryTypeName","src":"1844:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2702,"mutability":"mutable","name":"to","nameLocation":"1874:2:14","nodeType":"VariableDeclaration","scope":2709,"src":"1866:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2701,"name":"address","nodeType":"ElementaryTypeName","src":"1866:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2704,"mutability":"mutable","name":"tokenId","nameLocation":"1894:7:14","nodeType":"VariableDeclaration","scope":2709,"src":"1886:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2703,"name":"uint256","nodeType":"ElementaryTypeName","src":"1886:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2706,"mutability":"mutable","name":"data","nameLocation":"1926:4:14","nodeType":"VariableDeclaration","scope":2709,"src":"1911:19:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2705,"name":"bytes","nodeType":"ElementaryTypeName","src":"1911:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1834:102:14"},"returnParameters":{"id":2708,"nodeType":"ParameterList","parameters":[],"src":"1945:0:14"},"scope":2764,"src":"1809:137:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2710,"nodeType":"StructuredDocumentation","src":"1952:687:14","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"42842e0e","id":2719,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2653:16:14","nodeType":"FunctionDefinition","parameters":{"id":2717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2712,"mutability":"mutable","name":"from","nameLocation":"2687:4:14","nodeType":"VariableDeclaration","scope":2719,"src":"2679:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2711,"name":"address","nodeType":"ElementaryTypeName","src":"2679:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2714,"mutability":"mutable","name":"to","nameLocation":"2709:2:14","nodeType":"VariableDeclaration","scope":2719,"src":"2701:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2713,"name":"address","nodeType":"ElementaryTypeName","src":"2701:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2716,"mutability":"mutable","name":"tokenId","nameLocation":"2729:7:14","nodeType":"VariableDeclaration","scope":2719,"src":"2721:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2715,"name":"uint256","nodeType":"ElementaryTypeName","src":"2721:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2669:73:14"},"returnParameters":{"id":2718,"nodeType":"ParameterList","parameters":[],"src":"2751:0:14"},"scope":2764,"src":"2644:108:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2720,"nodeType":"StructuredDocumentation","src":"2758:732:14","text":" @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":2729,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"3504:12:14","nodeType":"FunctionDefinition","parameters":{"id":2727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2722,"mutability":"mutable","name":"from","nameLocation":"3534:4:14","nodeType":"VariableDeclaration","scope":2729,"src":"3526:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2721,"name":"address","nodeType":"ElementaryTypeName","src":"3526:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2724,"mutability":"mutable","name":"to","nameLocation":"3556:2:14","nodeType":"VariableDeclaration","scope":2729,"src":"3548:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2723,"name":"address","nodeType":"ElementaryTypeName","src":"3548:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2726,"mutability":"mutable","name":"tokenId","nameLocation":"3576:7:14","nodeType":"VariableDeclaration","scope":2729,"src":"3568:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2725,"name":"uint256","nodeType":"ElementaryTypeName","src":"3568:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3516:73:14"},"returnParameters":{"id":2728,"nodeType":"ParameterList","parameters":[],"src":"3598:0:14"},"scope":2764,"src":"3495:104:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2730,"nodeType":"StructuredDocumentation","src":"3605:452:14","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":2737,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4071:7:14","nodeType":"FunctionDefinition","parameters":{"id":2735,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2732,"mutability":"mutable","name":"to","nameLocation":"4087:2:14","nodeType":"VariableDeclaration","scope":2737,"src":"4079:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2731,"name":"address","nodeType":"ElementaryTypeName","src":"4079:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2734,"mutability":"mutable","name":"tokenId","nameLocation":"4099:7:14","nodeType":"VariableDeclaration","scope":2737,"src":"4091:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2733,"name":"uint256","nodeType":"ElementaryTypeName","src":"4091:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4078:29:14"},"returnParameters":{"id":2736,"nodeType":"ParameterList","parameters":[],"src":"4116:0:14"},"scope":2764,"src":"4062:55:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2738,"nodeType":"StructuredDocumentation","src":"4123:309:14","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":2745,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4446:17:14","nodeType":"FunctionDefinition","parameters":{"id":2743,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2740,"mutability":"mutable","name":"operator","nameLocation":"4472:8:14","nodeType":"VariableDeclaration","scope":2745,"src":"4464:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2739,"name":"address","nodeType":"ElementaryTypeName","src":"4464:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2742,"mutability":"mutable","name":"_approved","nameLocation":"4487:9:14","nodeType":"VariableDeclaration","scope":2745,"src":"4482:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2741,"name":"bool","nodeType":"ElementaryTypeName","src":"4482:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4463:34:14"},"returnParameters":{"id":2744,"nodeType":"ParameterList","parameters":[],"src":"4506:0:14"},"scope":2764,"src":"4437:70:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2746,"nodeType":"StructuredDocumentation","src":"4513:139:14","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":2753,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4666:11:14","nodeType":"FunctionDefinition","parameters":{"id":2749,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2748,"mutability":"mutable","name":"tokenId","nameLocation":"4686:7:14","nodeType":"VariableDeclaration","scope":2753,"src":"4678:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2747,"name":"uint256","nodeType":"ElementaryTypeName","src":"4678:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4677:17:14"},"returnParameters":{"id":2752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2751,"mutability":"mutable","name":"operator","nameLocation":"4726:8:14","nodeType":"VariableDeclaration","scope":2753,"src":"4718:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2750,"name":"address","nodeType":"ElementaryTypeName","src":"4718:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4717:18:14"},"scope":2764,"src":"4657:79:14","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2754,"nodeType":"StructuredDocumentation","src":"4742:138:14","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"},"functionSelector":"e985e9c5","id":2763,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4894:16:14","nodeType":"FunctionDefinition","parameters":{"id":2759,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2756,"mutability":"mutable","name":"owner","nameLocation":"4919:5:14","nodeType":"VariableDeclaration","scope":2763,"src":"4911:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2755,"name":"address","nodeType":"ElementaryTypeName","src":"4911:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2758,"mutability":"mutable","name":"operator","nameLocation":"4934:8:14","nodeType":"VariableDeclaration","scope":2763,"src":"4926:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2757,"name":"address","nodeType":"ElementaryTypeName","src":"4926:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4910:33:14"},"returnParameters":{"id":2762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2761,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2763,"src":"4967:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2760,"name":"bool","nodeType":"ElementaryTypeName","src":"4967:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4966:6:14"},"scope":2764,"src":"4885:88:14","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2765,"src":"250:4725:14","usedErrors":[]}],"src":"108:4868:14"},"id":14},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","exportedSymbols":{"IERC721Receiver":[2782]},"id":2783,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2766,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"116:23:15"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":2767,"nodeType":"StructuredDocumentation","src":"141:152:15","text":" @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."},"fullyImplemented":false,"id":2782,"linearizedBaseContracts":[2782],"name":"IERC721Receiver","nameLocation":"304:15:15","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2768,"nodeType":"StructuredDocumentation","src":"326:493:15","text":" @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."},"functionSelector":"150b7a02","id":2781,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"833:16:15","nodeType":"FunctionDefinition","parameters":{"id":2777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2770,"mutability":"mutable","name":"operator","nameLocation":"867:8:15","nodeType":"VariableDeclaration","scope":2781,"src":"859:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2769,"name":"address","nodeType":"ElementaryTypeName","src":"859:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2772,"mutability":"mutable","name":"from","nameLocation":"893:4:15","nodeType":"VariableDeclaration","scope":2781,"src":"885:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2771,"name":"address","nodeType":"ElementaryTypeName","src":"885:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2774,"mutability":"mutable","name":"tokenId","nameLocation":"915:7:15","nodeType":"VariableDeclaration","scope":2781,"src":"907:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2773,"name":"uint256","nodeType":"ElementaryTypeName","src":"907:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2776,"mutability":"mutable","name":"data","nameLocation":"947:4:15","nodeType":"VariableDeclaration","scope":2781,"src":"932:19:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2775,"name":"bytes","nodeType":"ElementaryTypeName","src":"932:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"849:108:15"},"returnParameters":{"id":2780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2779,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2781,"src":"976:6:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2778,"name":"bytes4","nodeType":"ElementaryTypeName","src":"976:6:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"975:8:15"},"scope":2782,"src":"824:160:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2783,"src":"294:692:15","usedErrors":[]}],"src":"116:871:15"},"id":15},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","exportedSymbols":{"IERC165":[3446],"IERC721":[2764],"IERC721Metadata":[2809]},"id":2810,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2784,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:16"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../IERC721.sol","id":2785,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2810,"sourceUnit":2765,"src":"137:24:16","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2787,"name":"IERC721","nodeType":"IdentifierPath","referencedDeclaration":2764,"src":"326:7:16"},"id":2788,"nodeType":"InheritanceSpecifier","src":"326:7:16"}],"contractDependencies":[],"contractKind":"interface","documentation":{"id":2786,"nodeType":"StructuredDocumentation","src":"163:133:16","text":" @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":2809,"linearizedBaseContracts":[2809,2764,3446],"name":"IERC721Metadata","nameLocation":"307:15:16","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2789,"nodeType":"StructuredDocumentation","src":"340:58:16","text":" @dev Returns the token collection name."},"functionSelector":"06fdde03","id":2794,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"412:4:16","nodeType":"FunctionDefinition","parameters":{"id":2790,"nodeType":"ParameterList","parameters":[],"src":"416:2:16"},"returnParameters":{"id":2793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2792,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2794,"src":"442:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2791,"name":"string","nodeType":"ElementaryTypeName","src":"442:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"441:15:16"},"scope":2809,"src":"403:54:16","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2795,"nodeType":"StructuredDocumentation","src":"463:60:16","text":" @dev Returns the token collection symbol."},"functionSelector":"95d89b41","id":2800,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"537:6:16","nodeType":"FunctionDefinition","parameters":{"id":2796,"nodeType":"ParameterList","parameters":[],"src":"543:2:16"},"returnParameters":{"id":2799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2798,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2800,"src":"569:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2797,"name":"string","nodeType":"ElementaryTypeName","src":"569:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"568:15:16"},"scope":2809,"src":"528:56:16","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2801,"nodeType":"StructuredDocumentation","src":"590:90:16","text":" @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"functionSelector":"c87b56dd","id":2808,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"694:8:16","nodeType":"FunctionDefinition","parameters":{"id":2804,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2803,"mutability":"mutable","name":"tokenId","nameLocation":"711:7:16","nodeType":"VariableDeclaration","scope":2808,"src":"703:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2802,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"702:17:16"},"returnParameters":{"id":2807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2806,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2808,"src":"743:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2805,"name":"string","nodeType":"ElementaryTypeName","src":"743:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"742:15:16"},"scope":2809,"src":"685:73:16","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2810,"src":"297:463:16","usedErrors":[]}],"src":"112:649:16"},"id":16},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[3139]},"id":3140,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2811,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:17"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":2812,"nodeType":"StructuredDocumentation","src":"126:67:17","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":3139,"linearizedBaseContracts":[3139],"name":"Address","nameLocation":"202:7:17","nodeType":"ContractDefinition","nodes":[{"body":{"id":2826,"nodeType":"Block","src":"1241:254:17","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2820,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2815,"src":"1465:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"code","nodeType":"MemberAccess","src":"1465:12:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1465:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2823,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1487:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1465:23:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2819,"id":2825,"nodeType":"Return","src":"1458:30:17"}]},"documentation":{"id":2813,"nodeType":"StructuredDocumentation","src":"216:954:17","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":2827,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1184:10:17","nodeType":"FunctionDefinition","parameters":{"id":2816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2815,"mutability":"mutable","name":"account","nameLocation":"1203:7:17","nodeType":"VariableDeclaration","scope":2827,"src":"1195:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2814,"name":"address","nodeType":"ElementaryTypeName","src":"1195:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1194:17:17"},"returnParameters":{"id":2819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2818,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2827,"src":"1235:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2817,"name":"bool","nodeType":"ElementaryTypeName","src":"1235:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1234:6:17"},"scope":3139,"src":"1175:320:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2860,"nodeType":"Block","src":"2483:241:17","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2838,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2509:4:17","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$3139","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$3139","typeString":"library Address"}],"id":2837,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2501:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2836,"name":"address","nodeType":"ElementaryTypeName","src":"2501:7:17","typeDescriptions":{}}},"id":2839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2501:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"2501:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2841,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2832,"src":"2526:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2501:31:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":2843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2534:31:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":2835,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2493:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2844,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2493:73:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2845,"nodeType":"ExpressionStatement","src":"2493:73:17"},{"assignments":[2847,null],"declarations":[{"constant":false,"id":2847,"mutability":"mutable","name":"success","nameLocation":"2583:7:17","nodeType":"VariableDeclaration","scope":2860,"src":"2578:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2846,"name":"bool","nodeType":"ElementaryTypeName","src":"2578:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":2854,"initialValue":{"arguments":[{"hexValue":"","id":2852,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2626:2:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":2848,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2830,"src":"2596:9:17","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":2849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"2596:14:17","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2850,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2832,"src":"2618:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2596:29:17","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2853,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2596:33:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2577:52:17"},{"expression":{"arguments":[{"id":2856,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2847,"src":"2647:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":2857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2656:60:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":2855,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2639:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2858,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2639:78:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2859,"nodeType":"ExpressionStatement","src":"2639:78:17"}]},"documentation":{"id":2828,"nodeType":"StructuredDocumentation","src":"1501:906:17","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":2861,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2421:9:17","nodeType":"FunctionDefinition","parameters":{"id":2833,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2830,"mutability":"mutable","name":"recipient","nameLocation":"2447:9:17","nodeType":"VariableDeclaration","scope":2861,"src":"2431:25:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":2829,"name":"address","nodeType":"ElementaryTypeName","src":"2431:15:17","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":2832,"mutability":"mutable","name":"amount","nameLocation":"2466:6:17","nodeType":"VariableDeclaration","scope":2861,"src":"2458:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2831,"name":"uint256","nodeType":"ElementaryTypeName","src":"2458:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2430:43:17"},"returnParameters":{"id":2834,"nodeType":"ParameterList","parameters":[],"src":"2483:0:17"},"scope":3139,"src":"2412:312:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2878,"nodeType":"Block","src":"3555:96:17","statements":[{"expression":{"arguments":[{"id":2872,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2864,"src":"3594:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2873,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2866,"src":"3602:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2874,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3608:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":2875,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3611:32:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":2871,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2919,2963],"referencedDeclaration":2963,"src":"3572:21:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3572:72:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2870,"id":2877,"nodeType":"Return","src":"3565:79:17"}]},"documentation":{"id":2862,"nodeType":"StructuredDocumentation","src":"2730:731:17","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":2879,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3475:12:17","nodeType":"FunctionDefinition","parameters":{"id":2867,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2864,"mutability":"mutable","name":"target","nameLocation":"3496:6:17","nodeType":"VariableDeclaration","scope":2879,"src":"3488:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2863,"name":"address","nodeType":"ElementaryTypeName","src":"3488:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2866,"mutability":"mutable","name":"data","nameLocation":"3517:4:17","nodeType":"VariableDeclaration","scope":2879,"src":"3504:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2865,"name":"bytes","nodeType":"ElementaryTypeName","src":"3504:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3487:35:17"},"returnParameters":{"id":2870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2869,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2879,"src":"3541:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2868,"name":"bytes","nodeType":"ElementaryTypeName","src":"3541:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3540:14:17"},"scope":3139,"src":"3466:185:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2898,"nodeType":"Block","src":"4020:76:17","statements":[{"expression":{"arguments":[{"id":2892,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2882,"src":"4059:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2893,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"4067:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4073:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":2895,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2886,"src":"4076:12:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2891,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2919,2963],"referencedDeclaration":2963,"src":"4037:21:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2896,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4037:52:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2890,"id":2897,"nodeType":"Return","src":"4030:59:17"}]},"documentation":{"id":2880,"nodeType":"StructuredDocumentation","src":"3657:211:17","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":2899,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3882:12:17","nodeType":"FunctionDefinition","parameters":{"id":2887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2882,"mutability":"mutable","name":"target","nameLocation":"3912:6:17","nodeType":"VariableDeclaration","scope":2899,"src":"3904:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2881,"name":"address","nodeType":"ElementaryTypeName","src":"3904:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2884,"mutability":"mutable","name":"data","nameLocation":"3941:4:17","nodeType":"VariableDeclaration","scope":2899,"src":"3928:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2883,"name":"bytes","nodeType":"ElementaryTypeName","src":"3928:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2886,"mutability":"mutable","name":"errorMessage","nameLocation":"3969:12:17","nodeType":"VariableDeclaration","scope":2899,"src":"3955:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2885,"name":"string","nodeType":"ElementaryTypeName","src":"3955:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3894:93:17"},"returnParameters":{"id":2890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2889,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2899,"src":"4006:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2888,"name":"bytes","nodeType":"ElementaryTypeName","src":"4006:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4005:14:17"},"scope":3139,"src":"3873:223:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2918,"nodeType":"Block","src":"4601:111:17","statements":[{"expression":{"arguments":[{"id":2912,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2902,"src":"4640:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2913,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2904,"src":"4648:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2914,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2906,"src":"4654:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":2915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4661:43:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":2911,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2919,2963],"referencedDeclaration":2963,"src":"4618:21:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2916,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4618:87:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2910,"id":2917,"nodeType":"Return","src":"4611:94:17"}]},"documentation":{"id":2900,"nodeType":"StructuredDocumentation","src":"4102:351:17","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":2919,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4467:21:17","nodeType":"FunctionDefinition","parameters":{"id":2907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2902,"mutability":"mutable","name":"target","nameLocation":"4506:6:17","nodeType":"VariableDeclaration","scope":2919,"src":"4498:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2901,"name":"address","nodeType":"ElementaryTypeName","src":"4498:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2904,"mutability":"mutable","name":"data","nameLocation":"4535:4:17","nodeType":"VariableDeclaration","scope":2919,"src":"4522:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2903,"name":"bytes","nodeType":"ElementaryTypeName","src":"4522:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2906,"mutability":"mutable","name":"value","nameLocation":"4557:5:17","nodeType":"VariableDeclaration","scope":2919,"src":"4549:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2905,"name":"uint256","nodeType":"ElementaryTypeName","src":"4549:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4488:80:17"},"returnParameters":{"id":2910,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2909,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2919,"src":"4587:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2908,"name":"bytes","nodeType":"ElementaryTypeName","src":"4587:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4586:14:17"},"scope":3139,"src":"4458:254:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2962,"nodeType":"Block","src":"5139:267:17","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2936,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5165:4:17","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$3139","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$3139","typeString":"library Address"}],"id":2935,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5157:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2934,"name":"address","nodeType":"ElementaryTypeName","src":"5157:7:17","typeDescriptions":{}}},"id":2937,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5157:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"5157:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2939,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2926,"src":"5182:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:30:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":2941,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5189:40:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":2933,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5149:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2942,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5149:81:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2943,"nodeType":"ExpressionStatement","src":"5149:81:17"},{"assignments":[2945,2947],"declarations":[{"constant":false,"id":2945,"mutability":"mutable","name":"success","nameLocation":"5246:7:17","nodeType":"VariableDeclaration","scope":2962,"src":"5241:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2944,"name":"bool","nodeType":"ElementaryTypeName","src":"5241:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2947,"mutability":"mutable","name":"returndata","nameLocation":"5268:10:17","nodeType":"VariableDeclaration","scope":2962,"src":"5255:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2946,"name":"bytes","nodeType":"ElementaryTypeName","src":"5255:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2954,"initialValue":{"arguments":[{"id":2952,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2924,"src":"5308:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2948,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"5282:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"5282:11:17","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2950,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2926,"src":"5301:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5282:25:17","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2953,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5282:31:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5240:73:17"},{"expression":{"arguments":[{"id":2956,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"5357:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2957,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2945,"src":"5365:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2958,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2947,"src":"5374:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2959,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"5386:12:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2955,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3094,"src":"5330:26:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":2960,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5330:69:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2932,"id":2961,"nodeType":"Return","src":"5323:76:17"}]},"documentation":{"id":2920,"nodeType":"StructuredDocumentation","src":"4718:237:17","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":2963,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4969:21:17","nodeType":"FunctionDefinition","parameters":{"id":2929,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2922,"mutability":"mutable","name":"target","nameLocation":"5008:6:17","nodeType":"VariableDeclaration","scope":2963,"src":"5000:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2921,"name":"address","nodeType":"ElementaryTypeName","src":"5000:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2924,"mutability":"mutable","name":"data","nameLocation":"5037:4:17","nodeType":"VariableDeclaration","scope":2963,"src":"5024:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2923,"name":"bytes","nodeType":"ElementaryTypeName","src":"5024:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2926,"mutability":"mutable","name":"value","nameLocation":"5059:5:17","nodeType":"VariableDeclaration","scope":2963,"src":"5051:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2925,"name":"uint256","nodeType":"ElementaryTypeName","src":"5051:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2928,"mutability":"mutable","name":"errorMessage","nameLocation":"5088:12:17","nodeType":"VariableDeclaration","scope":2963,"src":"5074:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2927,"name":"string","nodeType":"ElementaryTypeName","src":"5074:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4990:116:17"},"returnParameters":{"id":2932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2931,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2963,"src":"5125:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2930,"name":"bytes","nodeType":"ElementaryTypeName","src":"5125:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5124:14:17"},"scope":3139,"src":"4960:446:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2979,"nodeType":"Block","src":"5683:97:17","statements":[{"expression":{"arguments":[{"id":2974,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2966,"src":"5719:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2975,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2968,"src":"5727:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":2976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5733:39:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":2973,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[2980,3009],"referencedDeclaration":3009,"src":"5700:18:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":2977,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5700:73:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2972,"id":2978,"nodeType":"Return","src":"5693:80:17"}]},"documentation":{"id":2964,"nodeType":"StructuredDocumentation","src":"5412:166:17","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":2980,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5592:18:17","nodeType":"FunctionDefinition","parameters":{"id":2969,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2966,"mutability":"mutable","name":"target","nameLocation":"5619:6:17","nodeType":"VariableDeclaration","scope":2980,"src":"5611:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2965,"name":"address","nodeType":"ElementaryTypeName","src":"5611:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2968,"mutability":"mutable","name":"data","nameLocation":"5640:4:17","nodeType":"VariableDeclaration","scope":2980,"src":"5627:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2967,"name":"bytes","nodeType":"ElementaryTypeName","src":"5627:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5610:35:17"},"returnParameters":{"id":2972,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2971,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2980,"src":"5669:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2970,"name":"bytes","nodeType":"ElementaryTypeName","src":"5669:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5668:14:17"},"scope":3139,"src":"5583:197:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3008,"nodeType":"Block","src":"6122:168:17","statements":[{"assignments":[2993,2995],"declarations":[{"constant":false,"id":2993,"mutability":"mutable","name":"success","nameLocation":"6138:7:17","nodeType":"VariableDeclaration","scope":3008,"src":"6133:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2992,"name":"bool","nodeType":"ElementaryTypeName","src":"6133:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2995,"mutability":"mutable","name":"returndata","nameLocation":"6160:10:17","nodeType":"VariableDeclaration","scope":3008,"src":"6147:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2994,"name":"bytes","nodeType":"ElementaryTypeName","src":"6147:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3000,"initialValue":{"arguments":[{"id":2998,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2985,"src":"6192:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2996,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2983,"src":"6174:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"staticcall","nodeType":"MemberAccess","src":"6174:17:17","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":2999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6174:23:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6132:65:17"},{"expression":{"arguments":[{"id":3002,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2983,"src":"6241:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3003,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2993,"src":"6249:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3004,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2995,"src":"6258:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3005,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2987,"src":"6270:12:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3001,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3094,"src":"6214:26:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":3006,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6214:69:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2991,"id":3007,"nodeType":"Return","src":"6207:76:17"}]},"documentation":{"id":2981,"nodeType":"StructuredDocumentation","src":"5786:173:17","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":3009,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5973:18:17","nodeType":"FunctionDefinition","parameters":{"id":2988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2983,"mutability":"mutable","name":"target","nameLocation":"6009:6:17","nodeType":"VariableDeclaration","scope":3009,"src":"6001:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2982,"name":"address","nodeType":"ElementaryTypeName","src":"6001:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2985,"mutability":"mutable","name":"data","nameLocation":"6038:4:17","nodeType":"VariableDeclaration","scope":3009,"src":"6025:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2984,"name":"bytes","nodeType":"ElementaryTypeName","src":"6025:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2987,"mutability":"mutable","name":"errorMessage","nameLocation":"6066:12:17","nodeType":"VariableDeclaration","scope":3009,"src":"6052:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2986,"name":"string","nodeType":"ElementaryTypeName","src":"6052:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5991:93:17"},"returnParameters":{"id":2991,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2990,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3009,"src":"6108:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2989,"name":"bytes","nodeType":"ElementaryTypeName","src":"6108:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6107:14:17"},"scope":3139,"src":"5964:326:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3025,"nodeType":"Block","src":"6566:101:17","statements":[{"expression":{"arguments":[{"id":3020,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3012,"src":"6604:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3021,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3014,"src":"6612:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":3022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6618:41:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":3019,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[3026,3055],"referencedDeclaration":3055,"src":"6583:20:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":3023,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6583:77:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3018,"id":3024,"nodeType":"Return","src":"6576:84:17"}]},"documentation":{"id":3010,"nodeType":"StructuredDocumentation","src":"6296:168:17","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":3026,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6478:20:17","nodeType":"FunctionDefinition","parameters":{"id":3015,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3012,"mutability":"mutable","name":"target","nameLocation":"6507:6:17","nodeType":"VariableDeclaration","scope":3026,"src":"6499:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3011,"name":"address","nodeType":"ElementaryTypeName","src":"6499:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3014,"mutability":"mutable","name":"data","nameLocation":"6528:4:17","nodeType":"VariableDeclaration","scope":3026,"src":"6515:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3013,"name":"bytes","nodeType":"ElementaryTypeName","src":"6515:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6498:35:17"},"returnParameters":{"id":3018,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3017,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3026,"src":"6552:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3016,"name":"bytes","nodeType":"ElementaryTypeName","src":"6552:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6551:14:17"},"scope":3139,"src":"6469:198:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3054,"nodeType":"Block","src":"7008:170:17","statements":[{"assignments":[3039,3041],"declarations":[{"constant":false,"id":3039,"mutability":"mutable","name":"success","nameLocation":"7024:7:17","nodeType":"VariableDeclaration","scope":3054,"src":"7019:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3038,"name":"bool","nodeType":"ElementaryTypeName","src":"7019:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3041,"mutability":"mutable","name":"returndata","nameLocation":"7046:10:17","nodeType":"VariableDeclaration","scope":3054,"src":"7033:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3040,"name":"bytes","nodeType":"ElementaryTypeName","src":"7033:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3046,"initialValue":{"arguments":[{"id":3044,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"7080:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3042,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3029,"src":"7060:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"delegatecall","nodeType":"MemberAccess","src":"7060:19:17","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":3045,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7060:25:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7018:67:17"},{"expression":{"arguments":[{"id":3048,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3029,"src":"7129:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3049,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3039,"src":"7137:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3050,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3041,"src":"7146:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3051,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3033,"src":"7158:12:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3047,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3094,"src":"7102:26:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":3052,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7102:69:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3037,"id":3053,"nodeType":"Return","src":"7095:76:17"}]},"documentation":{"id":3027,"nodeType":"StructuredDocumentation","src":"6673:175:17","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":3055,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6862:20:17","nodeType":"FunctionDefinition","parameters":{"id":3034,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3029,"mutability":"mutable","name":"target","nameLocation":"6900:6:17","nodeType":"VariableDeclaration","scope":3055,"src":"6892:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3028,"name":"address","nodeType":"ElementaryTypeName","src":"6892:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3031,"mutability":"mutable","name":"data","nameLocation":"6929:4:17","nodeType":"VariableDeclaration","scope":3055,"src":"6916:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3030,"name":"bytes","nodeType":"ElementaryTypeName","src":"6916:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3033,"mutability":"mutable","name":"errorMessage","nameLocation":"6957:12:17","nodeType":"VariableDeclaration","scope":3055,"src":"6943:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3032,"name":"string","nodeType":"ElementaryTypeName","src":"6943:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6882:93:17"},"returnParameters":{"id":3037,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3036,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3055,"src":"6994:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3035,"name":"bytes","nodeType":"ElementaryTypeName","src":"6994:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6993:14:17"},"scope":3139,"src":"6853:325:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3093,"nodeType":"Block","src":"7660:434:17","statements":[{"condition":{"id":3069,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3060,"src":"7674:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3091,"nodeType":"Block","src":"8030:58:17","statements":[{"expression":{"arguments":[{"id":3087,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3062,"src":"8052:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3088,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3064,"src":"8064:12:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3086,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3138,"src":"8044:7:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":3089,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8044:33:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3090,"nodeType":"ExpressionStatement","src":"8044:33:17"}]},"id":3092,"nodeType":"IfStatement","src":"7670:418:17","trueBody":{"id":3085,"nodeType":"Block","src":"7683:341:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3070,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3062,"src":"7701:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"7701:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7722:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7701:22:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3082,"nodeType":"IfStatement","src":"7697:286:17","trueBody":{"id":3081,"nodeType":"Block","src":"7725:258:17","statements":[{"expression":{"arguments":[{"arguments":[{"id":3076,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3058,"src":"7927:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3075,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"7916:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3077,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7916:18:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":3078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7936:31:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":3074,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7908:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3079,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7908:60:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3080,"nodeType":"ExpressionStatement","src":"7908:60:17"}]}},{"expression":{"id":3083,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3062,"src":"8003:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3068,"id":3084,"nodeType":"Return","src":"7996:17:17"}]}}]},"documentation":{"id":3056,"nodeType":"StructuredDocumentation","src":"7184:277:17","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":3094,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7475:26:17","nodeType":"FunctionDefinition","parameters":{"id":3065,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3058,"mutability":"mutable","name":"target","nameLocation":"7519:6:17","nodeType":"VariableDeclaration","scope":3094,"src":"7511:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3057,"name":"address","nodeType":"ElementaryTypeName","src":"7511:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3060,"mutability":"mutable","name":"success","nameLocation":"7540:7:17","nodeType":"VariableDeclaration","scope":3094,"src":"7535:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3059,"name":"bool","nodeType":"ElementaryTypeName","src":"7535:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3062,"mutability":"mutable","name":"returndata","nameLocation":"7570:10:17","nodeType":"VariableDeclaration","scope":3094,"src":"7557:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3061,"name":"bytes","nodeType":"ElementaryTypeName","src":"7557:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3064,"mutability":"mutable","name":"errorMessage","nameLocation":"7604:12:17","nodeType":"VariableDeclaration","scope":3094,"src":"7590:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3063,"name":"string","nodeType":"ElementaryTypeName","src":"7590:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7501:121:17"},"returnParameters":{"id":3068,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3067,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3094,"src":"7646:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3066,"name":"bytes","nodeType":"ElementaryTypeName","src":"7646:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7645:14:17"},"scope":3139,"src":"7466:628:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3117,"nodeType":"Block","src":"8475:135:17","statements":[{"condition":{"id":3106,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3097,"src":"8489:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3115,"nodeType":"Block","src":"8546:58:17","statements":[{"expression":{"arguments":[{"id":3111,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3099,"src":"8568:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3112,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3101,"src":"8580:12:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3110,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3138,"src":"8560:7:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":3113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8560:33:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3114,"nodeType":"ExpressionStatement","src":"8560:33:17"}]},"id":3116,"nodeType":"IfStatement","src":"8485:119:17","trueBody":{"id":3109,"nodeType":"Block","src":"8498:42:17","statements":[{"expression":{"id":3107,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3099,"src":"8519:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3105,"id":3108,"nodeType":"Return","src":"8512:17:17"}]}}]},"documentation":{"id":3095,"nodeType":"StructuredDocumentation","src":"8100:210:17","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":3118,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8324:16:17","nodeType":"FunctionDefinition","parameters":{"id":3102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3097,"mutability":"mutable","name":"success","nameLocation":"8355:7:17","nodeType":"VariableDeclaration","scope":3118,"src":"8350:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3096,"name":"bool","nodeType":"ElementaryTypeName","src":"8350:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3099,"mutability":"mutable","name":"returndata","nameLocation":"8385:10:17","nodeType":"VariableDeclaration","scope":3118,"src":"8372:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3098,"name":"bytes","nodeType":"ElementaryTypeName","src":"8372:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3101,"mutability":"mutable","name":"errorMessage","nameLocation":"8419:12:17","nodeType":"VariableDeclaration","scope":3118,"src":"8405:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3100,"name":"string","nodeType":"ElementaryTypeName","src":"8405:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8340:97:17"},"returnParameters":{"id":3105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3104,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3118,"src":"8461:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3103,"name":"bytes","nodeType":"ElementaryTypeName","src":"8461:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8460:14:17"},"scope":3139,"src":"8315:295:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3137,"nodeType":"Block","src":"8699:457:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3125,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3120,"src":"8775:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"8775:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8795:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8775:21:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3135,"nodeType":"Block","src":"9105:45:17","statements":[{"expression":{"arguments":[{"id":3132,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3122,"src":"9126:12:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3131,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9119:6:17","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3133,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9119:20:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3134,"nodeType":"ExpressionStatement","src":"9119:20:17"}]},"id":3136,"nodeType":"IfStatement","src":"8771:379:17","trueBody":{"id":3130,"nodeType":"Block","src":"8798:301:17","statements":[{"AST":{"nodeType":"YulBlock","src":"8956:133:17","statements":[{"nodeType":"YulVariableDeclaration","src":"8974:40:17","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9003:10:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8997:5:17"},"nodeType":"YulFunctionCall","src":"8997:17:17"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"8978:15:17","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9042:2:17","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9046:10:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9038:3:17"},"nodeType":"YulFunctionCall","src":"9038:19:17"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9059:15:17"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9031:6:17"},"nodeType":"YulFunctionCall","src":"9031:44:17"},"nodeType":"YulExpressionStatement","src":"9031:44:17"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"istanbul","externalReferences":[{"declaration":3120,"isOffset":false,"isSlot":false,"src":"9003:10:17","valueSize":1},{"declaration":3120,"isOffset":false,"isSlot":false,"src":"9046:10:17","valueSize":1}],"id":3129,"nodeType":"InlineAssembly","src":"8947:142:17"}]}}]},"id":3138,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8625:7:17","nodeType":"FunctionDefinition","parameters":{"id":3123,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3120,"mutability":"mutable","name":"returndata","nameLocation":"8646:10:17","nodeType":"VariableDeclaration","scope":3138,"src":"8633:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3119,"name":"bytes","nodeType":"ElementaryTypeName","src":"8633:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3122,"mutability":"mutable","name":"errorMessage","nameLocation":"8672:12:17","nodeType":"VariableDeclaration","scope":3138,"src":"8658:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3121,"name":"string","nodeType":"ElementaryTypeName","src":"8658:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8632:53:17"},"returnParameters":{"id":3124,"nodeType":"ParameterList","parameters":[],"src":"8699:0:17"},"scope":3139,"src":"8616:540:17","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":3140,"src":"194:8964:17","usedErrors":[]}],"src":"101:9058:17"},"id":17},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[3161]},"id":3162,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3141,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:18"},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":3142,"nodeType":"StructuredDocumentation","src":"111:496:18","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":3161,"linearizedBaseContracts":[3161],"name":"Context","nameLocation":"626:7:18","nodeType":"ContractDefinition","nodes":[{"body":{"id":3150,"nodeType":"Block","src":"702:34:18","statements":[{"expression":{"expression":{"id":3147,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"719:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3146,"id":3149,"nodeType":"Return","src":"712:17:18"}]},"id":3151,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:18","nodeType":"FunctionDefinition","parameters":{"id":3143,"nodeType":"ParameterList","parameters":[],"src":"659:2:18"},"returnParameters":{"id":3146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3145,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3151,"src":"693:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3144,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:18"},"scope":3161,"src":"640:96:18","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3159,"nodeType":"Block","src":"809:32:18","statements":[{"expression":{"expression":{"id":3156,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"data","nodeType":"MemberAccess","src":"826:8:18","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":3155,"id":3158,"nodeType":"Return","src":"819:15:18"}]},"id":3160,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:18","nodeType":"FunctionDefinition","parameters":{"id":3152,"nodeType":"ParameterList","parameters":[],"src":"759:2:18"},"returnParameters":{"id":3155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3154,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3160,"src":"793:14:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3153,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:18"},"scope":3161,"src":"742:99:18","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":3162,"src":"608:235:18","usedErrors":[]}],"src":"86:758:18"},"id":18},"@openzeppelin/contracts/utils/Counters.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Counters.sol","exportedSymbols":{"Counters":[3235]},"id":3236,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3163,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"87:23:19"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":3164,"nodeType":"StructuredDocumentation","src":"112:311:19","text":" @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`"},"fullyImplemented":true,"id":3235,"linearizedBaseContracts":[3235],"name":"Counters","nameLocation":"432:8:19","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Counters.Counter","id":3167,"members":[{"constant":false,"id":3166,"mutability":"mutable","name":"_value","nameLocation":"794:6:19","nodeType":"VariableDeclaration","scope":3167,"src":"786:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3165,"name":"uint256","nodeType":"ElementaryTypeName","src":"786:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Counter","nameLocation":"454:7:19","nodeType":"StructDefinition","scope":3235,"src":"447:374:19","visibility":"public"},{"body":{"id":3178,"nodeType":"Block","src":"901:38:19","statements":[{"expression":{"expression":{"id":3175,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3170,"src":"918:7:19","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":3176,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":3166,"src":"918:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3174,"id":3177,"nodeType":"Return","src":"911:21:19"}]},"id":3179,"implemented":true,"kind":"function","modifiers":[],"name":"current","nameLocation":"836:7:19","nodeType":"FunctionDefinition","parameters":{"id":3171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3170,"mutability":"mutable","name":"counter","nameLocation":"860:7:19","nodeType":"VariableDeclaration","scope":3179,"src":"844:23:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":3169,"nodeType":"UserDefinedTypeName","pathNode":{"id":3168,"name":"Counter","nodeType":"IdentifierPath","referencedDeclaration":3167,"src":"844:7:19"},"referencedDeclaration":3167,"src":"844:7:19","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"843:25:19"},"returnParameters":{"id":3174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3173,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3179,"src":"892:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3172,"name":"uint256","nodeType":"ElementaryTypeName","src":"892:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"891:9:19"},"scope":3235,"src":"827:112:19","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3192,"nodeType":"Block","src":"998:70:19","statements":[{"id":3191,"nodeType":"UncheckedBlock","src":"1008:54:19","statements":[{"expression":{"id":3189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3185,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3182,"src":"1032:7:19","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":3187,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":3166,"src":"1032:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3188,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1050:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1032:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3190,"nodeType":"ExpressionStatement","src":"1032:19:19"}]}]},"id":3193,"implemented":true,"kind":"function","modifiers":[],"name":"increment","nameLocation":"954:9:19","nodeType":"FunctionDefinition","parameters":{"id":3183,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3182,"mutability":"mutable","name":"counter","nameLocation":"980:7:19","nodeType":"VariableDeclaration","scope":3193,"src":"964:23:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":3181,"nodeType":"UserDefinedTypeName","pathNode":{"id":3180,"name":"Counter","nodeType":"IdentifierPath","referencedDeclaration":3167,"src":"964:7:19"},"referencedDeclaration":3167,"src":"964:7:19","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"963:25:19"},"returnParameters":{"id":3184,"nodeType":"ParameterList","parameters":[],"src":"998:0:19"},"scope":3235,"src":"945:123:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3220,"nodeType":"Block","src":"1127:176:19","statements":[{"assignments":[3200],"declarations":[{"constant":false,"id":3200,"mutability":"mutable","name":"value","nameLocation":"1145:5:19","nodeType":"VariableDeclaration","scope":3220,"src":"1137:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3199,"name":"uint256","nodeType":"ElementaryTypeName","src":"1137:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3203,"initialValue":{"expression":{"id":3201,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3196,"src":"1153:7:19","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":3202,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":3166,"src":"1153:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1137:30:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3205,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3200,"src":"1185:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1193:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1185:9:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"436f756e7465723a2064656372656d656e74206f766572666c6f77","id":3208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1196:29:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""},"value":"Counter: decrement overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""}],"id":3204,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1177:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3209,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1177:49:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3210,"nodeType":"ExpressionStatement","src":"1177:49:19"},{"id":3219,"nodeType":"UncheckedBlock","src":"1236:61:19","statements":[{"expression":{"id":3217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3211,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3196,"src":"1260:7:19","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":3213,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":3166,"src":"1260:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3214,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3200,"src":"1277:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1285:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1277:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1260:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3218,"nodeType":"ExpressionStatement","src":"1260:26:19"}]}]},"id":3221,"implemented":true,"kind":"function","modifiers":[],"name":"decrement","nameLocation":"1083:9:19","nodeType":"FunctionDefinition","parameters":{"id":3197,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3196,"mutability":"mutable","name":"counter","nameLocation":"1109:7:19","nodeType":"VariableDeclaration","scope":3221,"src":"1093:23:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":3195,"nodeType":"UserDefinedTypeName","pathNode":{"id":3194,"name":"Counter","nodeType":"IdentifierPath","referencedDeclaration":3167,"src":"1093:7:19"},"referencedDeclaration":3167,"src":"1093:7:19","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"1092:25:19"},"returnParameters":{"id":3198,"nodeType":"ParameterList","parameters":[],"src":"1127:0:19"},"scope":3235,"src":"1074:229:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3233,"nodeType":"Block","src":"1358:35:19","statements":[{"expression":{"id":3231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3227,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3224,"src":"1368:7:19","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":3229,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":3166,"src":"1368:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1385:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1368:18:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3232,"nodeType":"ExpressionStatement","src":"1368:18:19"}]},"id":3234,"implemented":true,"kind":"function","modifiers":[],"name":"reset","nameLocation":"1318:5:19","nodeType":"FunctionDefinition","parameters":{"id":3225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3224,"mutability":"mutable","name":"counter","nameLocation":"1340:7:19","nodeType":"VariableDeclaration","scope":3234,"src":"1324:23:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":3223,"nodeType":"UserDefinedTypeName","pathNode":{"id":3222,"name":"Counter","nodeType":"IdentifierPath","referencedDeclaration":3167,"src":"1324:7:19"},"referencedDeclaration":3167,"src":"1324:7:19","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"1323:25:19"},"returnParameters":{"id":3226,"nodeType":"ParameterList","parameters":[],"src":"1358:0:19"},"scope":3235,"src":"1309:84:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":3236,"src":"424:971:19","usedErrors":[]}],"src":"87:1309:19"},"id":19},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[4311],"Strings":[3410]},"id":3411,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3237,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:20"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":3238,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3411,"sourceUnit":4312,"src":"126:25:20","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":3239,"nodeType":"StructuredDocumentation","src":"153:34:20","text":" @dev String operations."},"fullyImplemented":true,"id":3410,"linearizedBaseContracts":[3410],"name":"Strings","nameLocation":"196:7:20","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":3242,"mutability":"constant","name":"_SYMBOLS","nameLocation":"235:8:20","nodeType":"VariableDeclaration","scope":3410,"src":"210:54:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":3240,"name":"bytes16","nodeType":"ElementaryTypeName","src":"210:7:20","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":3241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"246:18:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":3245,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"293:15:20","nodeType":"VariableDeclaration","scope":3410,"src":"270:43:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3243,"name":"uint8","nodeType":"ElementaryTypeName","src":"270:5:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":3244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"311:2:20","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":3292,"nodeType":"Block","src":"486:625:20","statements":[{"id":3291,"nodeType":"UncheckedBlock","src":"496:609:20","statements":[{"assignments":[3254],"declarations":[{"constant":false,"id":3254,"mutability":"mutable","name":"length","nameLocation":"528:6:20","nodeType":"VariableDeclaration","scope":3291,"src":"520:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3253,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3261,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3257,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"548:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3255,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4311,"src":"537:4:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$4311_$","typeString":"type(library Math)"}},"id":3256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":4148,"src":"537:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3258,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"537:17:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"557:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"537:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"520:38:20"},{"assignments":[3263],"declarations":[{"constant":false,"id":3263,"mutability":"mutable","name":"buffer","nameLocation":"586:6:20","nodeType":"VariableDeclaration","scope":3291,"src":"572:20:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3262,"name":"string","nodeType":"ElementaryTypeName","src":"572:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":3268,"initialValue":{"arguments":[{"id":3266,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3254,"src":"606:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3265,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"595:10:20","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":3264,"name":"string","nodeType":"ElementaryTypeName","src":"599:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":3267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"595:18:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"572:41:20"},{"assignments":[3270],"declarations":[{"constant":false,"id":3270,"mutability":"mutable","name":"ptr","nameLocation":"635:3:20","nodeType":"VariableDeclaration","scope":3291,"src":"627:11:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3269,"name":"uint256","nodeType":"ElementaryTypeName","src":"627:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3271,"nodeType":"VariableDeclarationStatement","src":"627:11:20"},{"AST":{"nodeType":"YulBlock","src":"708:67:20","statements":[{"nodeType":"YulAssignment","src":"726:35:20","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"737:6:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"749:2:20","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"753:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"745:3:20"},"nodeType":"YulFunctionCall","src":"745:15:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"733:3:20"},"nodeType":"YulFunctionCall","src":"733:28:20"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"726:3:20"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"istanbul","externalReferences":[{"declaration":3263,"isOffset":false,"isSlot":false,"src":"737:6:20","valueSize":1},{"declaration":3254,"isOffset":false,"isSlot":false,"src":"753:6:20","valueSize":1},{"declaration":3270,"isOffset":false,"isSlot":false,"src":"726:3:20","valueSize":1}],"id":3272,"nodeType":"InlineAssembly","src":"699:76:20"},{"body":{"id":3287,"nodeType":"Block","src":"801:267:20","statements":[{"expression":{"id":3275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"819:5:20","subExpression":{"id":3274,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3270,"src":"819:3:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3276,"nodeType":"ExpressionStatement","src":"819:5:20"},{"AST":{"nodeType":"YulBlock","src":"902:84:20","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"932:3:20"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"946:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"953:2:20","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"942:3:20"},"nodeType":"YulFunctionCall","src":"942:14:20"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"958:8:20"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"937:4:20"},"nodeType":"YulFunctionCall","src":"937:30:20"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"924:7:20"},"nodeType":"YulFunctionCall","src":"924:44:20"},"nodeType":"YulExpressionStatement","src":"924:44:20"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"istanbul","externalReferences":[{"declaration":3242,"isOffset":false,"isSlot":false,"src":"958:8:20","valueSize":1},{"declaration":3270,"isOffset":false,"isSlot":false,"src":"932:3:20","valueSize":1},{"declaration":3248,"isOffset":false,"isSlot":false,"src":"946:5:20","valueSize":1}],"id":3277,"nodeType":"InlineAssembly","src":"893:93:20"},{"expression":{"id":3280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3278,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"1003:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":3279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1012:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1003:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3281,"nodeType":"ExpressionStatement","src":"1003:11:20"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3282,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"1036:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1045:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1036:10:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3286,"nodeType":"IfStatement","src":"1032:21:20","trueBody":{"id":3285,"nodeType":"Break","src":"1048:5:20"}}]},"condition":{"hexValue":"74727565","id":3273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"795:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":3288,"nodeType":"WhileStatement","src":"788:280:20"},{"expression":{"id":3289,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3263,"src":"1088:6:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3252,"id":3290,"nodeType":"Return","src":"1081:13:20"}]}]},"documentation":{"id":3246,"nodeType":"StructuredDocumentation","src":"320:90:20","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":3293,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"424:8:20","nodeType":"FunctionDefinition","parameters":{"id":3249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3248,"mutability":"mutable","name":"value","nameLocation":"441:5:20","nodeType":"VariableDeclaration","scope":3293,"src":"433:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3247,"name":"uint256","nodeType":"ElementaryTypeName","src":"433:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"432:15:20"},"returnParameters":{"id":3252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3251,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3293,"src":"471:13:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3250,"name":"string","nodeType":"ElementaryTypeName","src":"471:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"470:15:20"},"scope":3410,"src":"415:696:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3312,"nodeType":"Block","src":"1290:100:20","statements":[{"id":3311,"nodeType":"UncheckedBlock","src":"1300:84:20","statements":[{"expression":{"arguments":[{"id":3302,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3296,"src":"1343:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3305,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3296,"src":"1362:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3303,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4311,"src":"1350:4:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$4311_$","typeString":"type(library Math)"}},"id":3304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":4271,"src":"1350:11:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3306,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1350:18:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1371:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1350:22:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3301,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[3313,3389,3409],"referencedDeclaration":3389,"src":"1331:11:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":3309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1331:42:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3300,"id":3310,"nodeType":"Return","src":"1324:49:20"}]}]},"documentation":{"id":3294,"nodeType":"StructuredDocumentation","src":"1117:94:20","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":3313,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1225:11:20","nodeType":"FunctionDefinition","parameters":{"id":3297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3296,"mutability":"mutable","name":"value","nameLocation":"1245:5:20","nodeType":"VariableDeclaration","scope":3313,"src":"1237:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3295,"name":"uint256","nodeType":"ElementaryTypeName","src":"1237:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1236:15:20"},"returnParameters":{"id":3300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3299,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3313,"src":"1275:13:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3298,"name":"string","nodeType":"ElementaryTypeName","src":"1275:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1274:15:20"},"scope":3410,"src":"1216:174:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3388,"nodeType":"Block","src":"1603:347:20","statements":[{"assignments":[3324],"declarations":[{"constant":false,"id":3324,"mutability":"mutable","name":"buffer","nameLocation":"1626:6:20","nodeType":"VariableDeclaration","scope":3388,"src":"1613:19:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3323,"name":"bytes","nodeType":"ElementaryTypeName","src":"1613:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3333,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1645:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3328,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3318,"src":"1649:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1645:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":3330,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1658:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1645:14:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3326,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1635:9:20","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":3325,"name":"bytes","nodeType":"ElementaryTypeName","src":"1639:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":3332,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1635:25:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1613:47:20"},{"expression":{"id":3338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3334,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3324,"src":"1670:6:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3336,"indexExpression":{"hexValue":"30","id":3335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1677:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1670:9:20","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3337,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1682:3:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1670:15:20","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3339,"nodeType":"ExpressionStatement","src":"1670:15:20"},{"expression":{"id":3344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3340,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3324,"src":"1695:6:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3342,"indexExpression":{"hexValue":"31","id":3341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1702:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1695:9:20","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":3343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1707:3:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"1695:15:20","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3345,"nodeType":"ExpressionStatement","src":"1695:15:20"},{"body":{"id":3374,"nodeType":"Block","src":"1765:83:20","statements":[{"expression":{"id":3368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3360,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3324,"src":"1779:6:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3362,"indexExpression":{"id":3361,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3347,"src":"1786:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1779:9:20","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":3363,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3242,"src":"1791:8:20","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":3367,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3364,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3316,"src":"1800:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":3365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1808:3:20","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"1800:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1791:21:20","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1779:33:20","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3369,"nodeType":"ExpressionStatement","src":"1779:33:20"},{"expression":{"id":3372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3370,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3316,"src":"1826:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1836:1:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1826:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3373,"nodeType":"ExpressionStatement","src":"1826:11:20"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3354,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3347,"src":"1753:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":3355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1757:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1753:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3375,"initializationExpression":{"assignments":[3347],"declarations":[{"constant":false,"id":3347,"mutability":"mutable","name":"i","nameLocation":"1733:1:20","nodeType":"VariableDeclaration","scope":3375,"src":"1725:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3346,"name":"uint256","nodeType":"ElementaryTypeName","src":"1725:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3353,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1737:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3349,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3318,"src":"1741:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1737:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1750:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1737:14:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1725:26:20"},"loopExpression":{"expression":{"id":3358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"1760:3:20","subExpression":{"id":3357,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3347,"src":"1762:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3359,"nodeType":"ExpressionStatement","src":"1760:3:20"},"nodeType":"ForStatement","src":"1720:128:20"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3377,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3316,"src":"1865:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1874:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1865:10:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":3380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1877:34:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":3376,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1857:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3381,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1857:55:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3382,"nodeType":"ExpressionStatement","src":"1857:55:20"},{"expression":{"arguments":[{"id":3385,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3324,"src":"1936:6:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3384,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1929:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3383,"name":"string","nodeType":"ElementaryTypeName","src":"1929:6:20","typeDescriptions":{}}},"id":3386,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1929:14:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3322,"id":3387,"nodeType":"Return","src":"1922:21:20"}]},"documentation":{"id":3314,"nodeType":"StructuredDocumentation","src":"1396:112:20","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":3389,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1522:11:20","nodeType":"FunctionDefinition","parameters":{"id":3319,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3316,"mutability":"mutable","name":"value","nameLocation":"1542:5:20","nodeType":"VariableDeclaration","scope":3389,"src":"1534:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3315,"name":"uint256","nodeType":"ElementaryTypeName","src":"1534:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3318,"mutability":"mutable","name":"length","nameLocation":"1557:6:20","nodeType":"VariableDeclaration","scope":3389,"src":"1549:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3317,"name":"uint256","nodeType":"ElementaryTypeName","src":"1549:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1533:31:20"},"returnParameters":{"id":3322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3321,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3389,"src":"1588:13:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3320,"name":"string","nodeType":"ElementaryTypeName","src":"1588:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1587:15:20"},"scope":3410,"src":"1513:437:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3408,"nodeType":"Block","src":"2175:76:20","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":3402,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3392,"src":"2220:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3401,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2212:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3400,"name":"uint160","nodeType":"ElementaryTypeName","src":"2212:7:20","typeDescriptions":{}}},"id":3403,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2212:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3399,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2204:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3398,"name":"uint256","nodeType":"ElementaryTypeName","src":"2204:7:20","typeDescriptions":{}}},"id":3404,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2204:22:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3405,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3245,"src":"2228:15:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":3397,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[3313,3389,3409],"referencedDeclaration":3389,"src":"2192:11:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":3406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2192:52:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3396,"id":3407,"nodeType":"Return","src":"2185:59:20"}]},"documentation":{"id":3390,"nodeType":"StructuredDocumentation","src":"1956:141:20","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":3409,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2111:11:20","nodeType":"FunctionDefinition","parameters":{"id":3393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3392,"mutability":"mutable","name":"addr","nameLocation":"2131:4:20","nodeType":"VariableDeclaration","scope":3409,"src":"2123:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3391,"name":"address","nodeType":"ElementaryTypeName","src":"2123:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2122:14:20"},"returnParameters":{"id":3396,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3395,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3409,"src":"2160:13:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3394,"name":"string","nodeType":"ElementaryTypeName","src":"2160:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2159:15:20"},"scope":3410,"src":"2102:149:20","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3411,"src":"188:2065:20","usedErrors":[]}],"src":"101:2153:20"},"id":20},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[3434],"IERC165":[3446]},"id":3435,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3412,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:21"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":3413,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3435,"sourceUnit":3447,"src":"124:23:21","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3415,"name":"IERC165","nodeType":"IdentifierPath","referencedDeclaration":3446,"src":"754:7:21"},"id":3416,"nodeType":"InheritanceSpecifier","src":"754:7:21"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":3414,"nodeType":"StructuredDocumentation","src":"149:576:21","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":3434,"linearizedBaseContracts":[3434,3446],"name":"ERC165","nameLocation":"744:6:21","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[3445],"body":{"id":3432,"nodeType":"Block","src":"920:64:21","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3425,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"937:11:21","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":3427,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3446,"src":"957:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$3446_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$3446_$","typeString":"type(contract IERC165)"}],"id":3426,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"952:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"952:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$3446","typeString":"type(contract IERC165)"}},"id":3429,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"952:25:21","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"937:40:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3424,"id":3431,"nodeType":"Return","src":"930:47:21"}]},"documentation":{"id":3417,"nodeType":"StructuredDocumentation","src":"768:56:21","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":3433,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"838:17:21","nodeType":"FunctionDefinition","overrides":{"id":3421,"nodeType":"OverrideSpecifier","overrides":[],"src":"896:8:21"},"parameters":{"id":3420,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3419,"mutability":"mutable","name":"interfaceId","nameLocation":"863:11:21","nodeType":"VariableDeclaration","scope":3433,"src":"856:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3418,"name":"bytes4","nodeType":"ElementaryTypeName","src":"856:6:21","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"855:20:21"},"returnParameters":{"id":3424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3423,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3433,"src":"914:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3422,"name":"bool","nodeType":"ElementaryTypeName","src":"914:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"913:6:21"},"scope":3434,"src":"829:155:21","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":3435,"src":"726:260:21","usedErrors":[]}],"src":"99:888:21"},"id":21},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[3446]},"id":3447,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3436,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:22"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":3437,"nodeType":"StructuredDocumentation","src":"125:279:22","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":3446,"linearizedBaseContracts":[3446],"name":"IERC165","nameLocation":"415:7:22","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3438,"nodeType":"StructuredDocumentation","src":"429:340:22","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":3445,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"783:17:22","nodeType":"FunctionDefinition","parameters":{"id":3441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3440,"mutability":"mutable","name":"interfaceId","nameLocation":"808:11:22","nodeType":"VariableDeclaration","scope":3445,"src":"801:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3439,"name":"bytes4","nodeType":"ElementaryTypeName","src":"801:6:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"800:20:22"},"returnParameters":{"id":3444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3443,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3445,"src":"844:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3442,"name":"bool","nodeType":"ElementaryTypeName","src":"844:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"843:6:22"},"scope":3446,"src":"774:76:22","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3447,"src":"405:447:22","usedErrors":[]}],"src":"100:753:22"},"id":22},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[4311]},"id":4312,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3448,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:23"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":3449,"nodeType":"StructuredDocumentation","src":"128:73:23","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":4311,"linearizedBaseContracts":[4311],"name":"Math","nameLocation":"210:4:23","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":3453,"members":[{"id":3450,"name":"Down","nameLocation":"245:4:23","nodeType":"EnumValue","src":"245:4:23"},{"id":3451,"name":"Up","nameLocation":"287:2:23","nodeType":"EnumValue","src":"287:2:23"},{"id":3452,"name":"Zero","nameLocation":"318:4:23","nodeType":"EnumValue","src":"318:4:23"}],"name":"Rounding","nameLocation":"226:8:23","nodeType":"EnumDefinition","src":"221:122:23"},{"body":{"id":3470,"nodeType":"Block","src":"480:37:23","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3463,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3456,"src":"497:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3464,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3458,"src":"501:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3467,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3458,"src":"509:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:23","trueExpression":{"id":3466,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3456,"src":"505:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3462,"id":3469,"nodeType":"Return","src":"490:20:23"}]},"documentation":{"id":3454,"nodeType":"StructuredDocumentation","src":"349:59:23","text":" @dev Returns the largest of two numbers."},"id":3471,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:23","nodeType":"FunctionDefinition","parameters":{"id":3459,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3456,"mutability":"mutable","name":"a","nameLocation":"434:1:23","nodeType":"VariableDeclaration","scope":3471,"src":"426:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3455,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3458,"mutability":"mutable","name":"b","nameLocation":"445:1:23","nodeType":"VariableDeclaration","scope":3471,"src":"437:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3457,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:23"},"returnParameters":{"id":3462,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3461,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3471,"src":"471:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3460,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:23"},"scope":4311,"src":"413:104:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3488,"nodeType":"Block","src":"655:37:23","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3481,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3474,"src":"672:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3482,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3476,"src":"676:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3485,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3476,"src":"684:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:23","trueExpression":{"id":3484,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3474,"src":"680:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3480,"id":3487,"nodeType":"Return","src":"665:20:23"}]},"documentation":{"id":3472,"nodeType":"StructuredDocumentation","src":"523:60:23","text":" @dev Returns the smallest of two numbers."},"id":3489,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:23","nodeType":"FunctionDefinition","parameters":{"id":3477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3474,"mutability":"mutable","name":"a","nameLocation":"609:1:23","nodeType":"VariableDeclaration","scope":3489,"src":"601:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3473,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3476,"mutability":"mutable","name":"b","nameLocation":"620:1:23","nodeType":"VariableDeclaration","scope":3489,"src":"612:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3475,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:23"},"returnParameters":{"id":3480,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3479,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3489,"src":"646:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3478,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:23"},"scope":4311,"src":"588:104:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3511,"nodeType":"Block","src":"876:82:23","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3499,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3492,"src":"931:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3500,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3494,"src":"935:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3502,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3503,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3492,"src":"941:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3504,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3494,"src":"945:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3506,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":3507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:23","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3498,"id":3510,"nodeType":"Return","src":"923:28:23"}]},"documentation":{"id":3490,"nodeType":"StructuredDocumentation","src":"698:102:23","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":3512,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:23","nodeType":"FunctionDefinition","parameters":{"id":3495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3492,"mutability":"mutable","name":"a","nameLocation":"830:1:23","nodeType":"VariableDeclaration","scope":3512,"src":"822:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3491,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3494,"mutability":"mutable","name":"b","nameLocation":"841:1:23","nodeType":"VariableDeclaration","scope":3512,"src":"833:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3493,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:23"},"returnParameters":{"id":3498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3497,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3512,"src":"867:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3496,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:23"},"scope":4311,"src":"805:153:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3536,"nodeType":"Block","src":"1228:123:23","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3522,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3515,"src":"1316:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3526,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3515,"src":"1330:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3527,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3529,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3530,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3517,"src":"1339:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3532,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:23","trueExpression":{"hexValue":"30","id":3525,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3521,"id":3535,"nodeType":"Return","src":"1309:35:23"}]},"documentation":{"id":3513,"nodeType":"StructuredDocumentation","src":"964:188:23","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":3537,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:23","nodeType":"FunctionDefinition","parameters":{"id":3518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3515,"mutability":"mutable","name":"a","nameLocation":"1182:1:23","nodeType":"VariableDeclaration","scope":3537,"src":"1174:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3514,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3517,"mutability":"mutable","name":"b","nameLocation":"1193:1:23","nodeType":"VariableDeclaration","scope":3537,"src":"1185:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3516,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:23"},"returnParameters":{"id":3521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3520,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3537,"src":"1219:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3519,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:23"},"scope":4311,"src":"1157:194:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3658,"nodeType":"Block","src":"1795:3797:23","statements":[{"id":3657,"nodeType":"UncheckedBlock","src":"1805:3781:23","statements":[{"assignments":[3550],"declarations":[{"constant":false,"id":3550,"mutability":"mutable","name":"prod0","nameLocation":"2134:5:23","nodeType":"VariableDeclaration","scope":3657,"src":"2126:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3549,"name":"uint256","nodeType":"ElementaryTypeName","src":"2126:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3551,"nodeType":"VariableDeclarationStatement","src":"2126:13:23"},{"assignments":[3553],"declarations":[{"constant":false,"id":3553,"mutability":"mutable","name":"prod1","nameLocation":"2206:5:23","nodeType":"VariableDeclaration","scope":3657,"src":"2198:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3552,"name":"uint256","nodeType":"ElementaryTypeName","src":"2198:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3554,"nodeType":"VariableDeclarationStatement","src":"2198:13:23"},{"AST":{"nodeType":"YulBlock","src":"2278:157:23","statements":[{"nodeType":"YulVariableDeclaration","src":"2296:30:23","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2313:1:23"},{"name":"y","nodeType":"YulIdentifier","src":"2316:1:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2323:1:23","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2319:3:23"},"nodeType":"YulFunctionCall","src":"2319:6:23"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2306:6:23"},"nodeType":"YulFunctionCall","src":"2306:20:23"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2300:2:23","type":""}]},{"nodeType":"YulAssignment","src":"2343:18:23","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2356:1:23"},{"name":"y","nodeType":"YulIdentifier","src":"2359:1:23"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2352:3:23"},"nodeType":"YulFunctionCall","src":"2352:9:23"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2343:5:23"}]},{"nodeType":"YulAssignment","src":"2378:43:23","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2395:2:23"},{"name":"prod0","nodeType":"YulIdentifier","src":"2399:5:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2391:3:23"},"nodeType":"YulFunctionCall","src":"2391:14:23"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2410:2:23"},{"name":"prod0","nodeType":"YulIdentifier","src":"2414:5:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2407:2:23"},"nodeType":"YulFunctionCall","src":"2407:13:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2387:3:23"},"nodeType":"YulFunctionCall","src":"2387:34:23"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2378:5:23"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":3550,"isOffset":false,"isSlot":false,"src":"2343:5:23","valueSize":1},{"declaration":3550,"isOffset":false,"isSlot":false,"src":"2399:5:23","valueSize":1},{"declaration":3550,"isOffset":false,"isSlot":false,"src":"2414:5:23","valueSize":1},{"declaration":3553,"isOffset":false,"isSlot":false,"src":"2378:5:23","valueSize":1},{"declaration":3540,"isOffset":false,"isSlot":false,"src":"2313:1:23","valueSize":1},{"declaration":3540,"isOffset":false,"isSlot":false,"src":"2356:1:23","valueSize":1},{"declaration":3542,"isOffset":false,"isSlot":false,"src":"2316:1:23","valueSize":1},{"declaration":3542,"isOffset":false,"isSlot":false,"src":"2359:1:23","valueSize":1}],"id":3555,"nodeType":"InlineAssembly","src":"2269:166:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3556,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3553,"src":"2516:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3557,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2525:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2516:10:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3564,"nodeType":"IfStatement","src":"2512:75:23","trueBody":{"id":3563,"nodeType":"Block","src":"2528:59:23","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3559,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3550,"src":"2553:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3560,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3544,"src":"2561:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2553:19:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3548,"id":3562,"nodeType":"Return","src":"2546:26:23"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3566,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3544,"src":"2697:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3567,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3553,"src":"2711:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2697:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3565,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2689:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":3569,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2689:28:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3570,"nodeType":"ExpressionStatement","src":"2689:28:23"},{"assignments":[3572],"declarations":[{"constant":false,"id":3572,"mutability":"mutable","name":"remainder","nameLocation":"2981:9:23","nodeType":"VariableDeclaration","scope":3657,"src":"2973:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3571,"name":"uint256","nodeType":"ElementaryTypeName","src":"2973:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3573,"nodeType":"VariableDeclarationStatement","src":"2973:17:23"},{"AST":{"nodeType":"YulBlock","src":"3013:291:23","statements":[{"nodeType":"YulAssignment","src":"3082:38:23","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3102:1:23"},{"name":"y","nodeType":"YulIdentifier","src":"3105:1:23"},{"name":"denominator","nodeType":"YulIdentifier","src":"3108:11:23"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3095:6:23"},"nodeType":"YulFunctionCall","src":"3095:25:23"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3082:9:23"}]},{"nodeType":"YulAssignment","src":"3202:41:23","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3215:5:23"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3225:9:23"},{"name":"prod0","nodeType":"YulIdentifier","src":"3236:5:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3222:2:23"},"nodeType":"YulFunctionCall","src":"3222:20:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3211:3:23"},"nodeType":"YulFunctionCall","src":"3211:32:23"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3202:5:23"}]},{"nodeType":"YulAssignment","src":"3260:30:23","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3273:5:23"},{"name":"remainder","nodeType":"YulIdentifier","src":"3280:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3269:3:23"},"nodeType":"YulFunctionCall","src":"3269:21:23"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3260:5:23"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":3544,"isOffset":false,"isSlot":false,"src":"3108:11:23","valueSize":1},{"declaration":3550,"isOffset":false,"isSlot":false,"src":"3236:5:23","valueSize":1},{"declaration":3550,"isOffset":false,"isSlot":false,"src":"3260:5:23","valueSize":1},{"declaration":3550,"isOffset":false,"isSlot":false,"src":"3273:5:23","valueSize":1},{"declaration":3553,"isOffset":false,"isSlot":false,"src":"3202:5:23","valueSize":1},{"declaration":3553,"isOffset":false,"isSlot":false,"src":"3215:5:23","valueSize":1},{"declaration":3572,"isOffset":false,"isSlot":false,"src":"3082:9:23","valueSize":1},{"declaration":3572,"isOffset":false,"isSlot":false,"src":"3225:9:23","valueSize":1},{"declaration":3572,"isOffset":false,"isSlot":false,"src":"3280:9:23","valueSize":1},{"declaration":3540,"isOffset":false,"isSlot":false,"src":"3102:1:23","valueSize":1},{"declaration":3542,"isOffset":false,"isSlot":false,"src":"3105:1:23","valueSize":1}],"id":3574,"nodeType":"InlineAssembly","src":"3004:300:23"},{"assignments":[3576],"declarations":[{"constant":false,"id":3576,"mutability":"mutable","name":"twos","nameLocation":"3619:4:23","nodeType":"VariableDeclaration","scope":3657,"src":"3611:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3575,"name":"uint256","nodeType":"ElementaryTypeName","src":"3611:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3584,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3577,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3544,"src":"3626:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3641:12:23","subExpression":{"id":3578,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3544,"src":"3642:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3580,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3656:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3641:16:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3582,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3640:18:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3626:32:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3611:47:23"},{"AST":{"nodeType":"YulBlock","src":"3681:362:23","statements":[{"nodeType":"YulAssignment","src":"3746:37:23","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"3765:11:23"},{"name":"twos","nodeType":"YulIdentifier","src":"3778:4:23"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3761:3:23"},"nodeType":"YulFunctionCall","src":"3761:22:23"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"3746:11:23"}]},{"nodeType":"YulAssignment","src":"3850:25:23","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3863:5:23"},{"name":"twos","nodeType":"YulIdentifier","src":"3870:4:23"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3859:3:23"},"nodeType":"YulFunctionCall","src":"3859:16:23"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3850:5:23"}]},{"nodeType":"YulAssignment","src":"3990:39:23","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4010:1:23","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4013:4:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4006:3:23"},"nodeType":"YulFunctionCall","src":"4006:12:23"},{"name":"twos","nodeType":"YulIdentifier","src":"4020:4:23"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4002:3:23"},"nodeType":"YulFunctionCall","src":"4002:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"4027:1:23","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3998:3:23"},"nodeType":"YulFunctionCall","src":"3998:31:23"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"3990:4:23"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":3544,"isOffset":false,"isSlot":false,"src":"3746:11:23","valueSize":1},{"declaration":3544,"isOffset":false,"isSlot":false,"src":"3765:11:23","valueSize":1},{"declaration":3550,"isOffset":false,"isSlot":false,"src":"3850:5:23","valueSize":1},{"declaration":3550,"isOffset":false,"isSlot":false,"src":"3863:5:23","valueSize":1},{"declaration":3576,"isOffset":false,"isSlot":false,"src":"3778:4:23","valueSize":1},{"declaration":3576,"isOffset":false,"isSlot":false,"src":"3870:4:23","valueSize":1},{"declaration":3576,"isOffset":false,"isSlot":false,"src":"3990:4:23","valueSize":1},{"declaration":3576,"isOffset":false,"isSlot":false,"src":"4013:4:23","valueSize":1},{"declaration":3576,"isOffset":false,"isSlot":false,"src":"4020:4:23","valueSize":1}],"id":3585,"nodeType":"InlineAssembly","src":"3672:371:23"},{"expression":{"id":3590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3586,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3550,"src":"4109:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3587,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3553,"src":"4118:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3588,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3576,"src":"4126:4:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4118:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4109:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3591,"nodeType":"ExpressionStatement","src":"4109:21:23"},{"assignments":[3593],"declarations":[{"constant":false,"id":3593,"mutability":"mutable","name":"inverse","nameLocation":"4456:7:23","nodeType":"VariableDeclaration","scope":3657,"src":"4448:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3592,"name":"uint256","nodeType":"ElementaryTypeName","src":"4448:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3600,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":3594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4467:1:23","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3595,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3544,"src":"4471:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4467:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3597,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4466:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":3598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4486:1:23","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4466:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4448:39:23"},{"expression":{"id":3607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3601,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"4704:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4715:1:23","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3603,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3544,"src":"4719:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3604,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"4733:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4719:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4715:25:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4704:36:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3608,"nodeType":"ExpressionStatement","src":"4704:36:23"},{"expression":{"id":3615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3609,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"4773:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4784:1:23","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3611,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3544,"src":"4788:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3612,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"4802:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4788:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4784:25:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4773:36:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3616,"nodeType":"ExpressionStatement","src":"4773:36:23"},{"expression":{"id":3623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3617,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"4843:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4854:1:23","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3619,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3544,"src":"4858:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3620,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"4872:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4858:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4854:25:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4843:36:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3624,"nodeType":"ExpressionStatement","src":"4843:36:23"},{"expression":{"id":3631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3625,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"4913:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4924:1:23","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3627,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3544,"src":"4928:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3628,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"4942:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4928:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4924:25:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4913:36:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3632,"nodeType":"ExpressionStatement","src":"4913:36:23"},{"expression":{"id":3639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3633,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"4983:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4994:1:23","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3635,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3544,"src":"4998:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3636,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"5012:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4998:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4994:25:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4983:36:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3640,"nodeType":"ExpressionStatement","src":"4983:36:23"},{"expression":{"id":3647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3641,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"5054:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3642,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5065:1:23","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3643,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3544,"src":"5069:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3644,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"5083:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5069:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:25:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5054:36:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3648,"nodeType":"ExpressionStatement","src":"5054:36:23"},{"expression":{"id":3653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3649,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3547,"src":"5524:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3650,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3550,"src":"5533:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3651,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"5541:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5533:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5524:24:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3654,"nodeType":"ExpressionStatement","src":"5524:24:23"},{"expression":{"id":3655,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3547,"src":"5569:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3548,"id":3656,"nodeType":"Return","src":"5562:13:23"}]}]},"documentation":{"id":3538,"nodeType":"StructuredDocumentation","src":"1357:305:23","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":3659,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:23","nodeType":"FunctionDefinition","parameters":{"id":3545,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3540,"mutability":"mutable","name":"x","nameLocation":"1700:1:23","nodeType":"VariableDeclaration","scope":3659,"src":"1692:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3539,"name":"uint256","nodeType":"ElementaryTypeName","src":"1692:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3542,"mutability":"mutable","name":"y","nameLocation":"1719:1:23","nodeType":"VariableDeclaration","scope":3659,"src":"1711:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3541,"name":"uint256","nodeType":"ElementaryTypeName","src":"1711:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3544,"mutability":"mutable","name":"denominator","nameLocation":"1738:11:23","nodeType":"VariableDeclaration","scope":3659,"src":"1730:19:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3543,"name":"uint256","nodeType":"ElementaryTypeName","src":"1730:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:73:23"},"returnParameters":{"id":3548,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3547,"mutability":"mutable","name":"result","nameLocation":"1787:6:23","nodeType":"VariableDeclaration","scope":3659,"src":"1779:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3546,"name":"uint256","nodeType":"ElementaryTypeName","src":"1779:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1778:16:23"},"scope":4311,"src":"1667:3925:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3702,"nodeType":"Block","src":"5872:189:23","statements":[{"assignments":[3675],"declarations":[{"constant":false,"id":3675,"mutability":"mutable","name":"result","nameLocation":"5890:6:23","nodeType":"VariableDeclaration","scope":3702,"src":"5882:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3674,"name":"uint256","nodeType":"ElementaryTypeName","src":"5882:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3681,"initialValue":{"arguments":[{"id":3677,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3662,"src":"5906:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3678,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3664,"src":"5909:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3679,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3666,"src":"5912:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3676,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[3659,3703],"referencedDeclaration":3659,"src":"5899:6:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5899:25:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5882:42:23"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3453","typeString":"enum Math.Rounding"},"id":3685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3682,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3669,"src":"5938:8:23","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3453","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3683,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3453,"src":"5950:8:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3453_$","typeString":"type(enum Math.Rounding)"}},"id":3684,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3451,"src":"5950:11:23","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3453","typeString":"enum Math.Rounding"}},"src":"5938:23:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3687,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3662,"src":"5972:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3688,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3664,"src":"5975:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3689,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3666,"src":"5978:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3686,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5965:6:23","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3690,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5965:25:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5993:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5965:29:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5938:56:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3699,"nodeType":"IfStatement","src":"5934:98:23","trueBody":{"id":3698,"nodeType":"Block","src":"5996:36:23","statements":[{"expression":{"id":3696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3694,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3675,"src":"6010:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6020:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6010:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3697,"nodeType":"ExpressionStatement","src":"6010:11:23"}]}},{"expression":{"id":3700,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3675,"src":"6048:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3673,"id":3701,"nodeType":"Return","src":"6041:13:23"}]},"documentation":{"id":3660,"nodeType":"StructuredDocumentation","src":"5598:121:23","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":3703,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"5733:6:23","nodeType":"FunctionDefinition","parameters":{"id":3670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3662,"mutability":"mutable","name":"x","nameLocation":"5757:1:23","nodeType":"VariableDeclaration","scope":3703,"src":"5749:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3661,"name":"uint256","nodeType":"ElementaryTypeName","src":"5749:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3664,"mutability":"mutable","name":"y","nameLocation":"5776:1:23","nodeType":"VariableDeclaration","scope":3703,"src":"5768:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3663,"name":"uint256","nodeType":"ElementaryTypeName","src":"5768:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3666,"mutability":"mutable","name":"denominator","nameLocation":"5795:11:23","nodeType":"VariableDeclaration","scope":3703,"src":"5787:19:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3665,"name":"uint256","nodeType":"ElementaryTypeName","src":"5787:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3669,"mutability":"mutable","name":"rounding","nameLocation":"5825:8:23","nodeType":"VariableDeclaration","scope":3703,"src":"5816:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3453","typeString":"enum Math.Rounding"},"typeName":{"id":3668,"nodeType":"UserDefinedTypeName","pathNode":{"id":3667,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":3453,"src":"5816:8:23"},"referencedDeclaration":3453,"src":"5816:8:23","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3453","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"5739:100:23"},"returnParameters":{"id":3673,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3672,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3703,"src":"5863:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3671,"name":"uint256","nodeType":"ElementaryTypeName","src":"5863:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5862:9:23"},"scope":4311,"src":"5724:337:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3814,"nodeType":"Block","src":"6337:1585:23","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3711,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"6351:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6356:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6351:6:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3717,"nodeType":"IfStatement","src":"6347:45:23","trueBody":{"id":3716,"nodeType":"Block","src":"6359:33:23","statements":[{"expression":{"hexValue":"30","id":3714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6380:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3710,"id":3715,"nodeType":"Return","src":"6373:8:23"}]}},{"assignments":[3719],"declarations":[{"constant":false,"id":3719,"mutability":"mutable","name":"result","nameLocation":"7079:6:23","nodeType":"VariableDeclaration","scope":3814,"src":"7071:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3718,"name":"uint256","nodeType":"ElementaryTypeName","src":"7071:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3728,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3720,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7088:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3722,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"7099:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3721,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3983,4019],"referencedDeclaration":3983,"src":"7094:4:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7094:7:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3724,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7105:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7094:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3726,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7093:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7088:19:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7071:36:23"},{"id":3813,"nodeType":"UncheckedBlock","src":"7508:408:23","statements":[{"expression":{"id":3738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3729,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"7532:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3730,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"7542:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3731,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"7551:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3732,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"7555:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7551:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7542:19:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3735,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7541:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3736,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7566:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7541:26:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7532:35:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3739,"nodeType":"ExpressionStatement","src":"7532:35:23"},{"expression":{"id":3749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3740,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"7581:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3741,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"7591:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3742,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"7600:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3743,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"7604:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7600:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7591:19:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3746,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7590:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7615:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7590:26:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7581:35:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3750,"nodeType":"ExpressionStatement","src":"7581:35:23"},{"expression":{"id":3760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3751,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"7630:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3752,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"7640:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3753,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"7649:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3754,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"7653:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7649:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7640:19:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3757,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7639:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3758,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7664:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7639:26:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7630:35:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3761,"nodeType":"ExpressionStatement","src":"7630:35:23"},{"expression":{"id":3771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3762,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"7679:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3763,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"7689:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3764,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"7698:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3765,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"7702:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7698:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7689:19:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3768,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7688:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3769,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7713:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7688:26:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7679:35:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3772,"nodeType":"ExpressionStatement","src":"7679:35:23"},{"expression":{"id":3782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3773,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"7728:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3774,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"7738:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3775,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"7747:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3776,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"7751:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7747:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7738:19:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3779,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7737:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3780,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7762:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7737:26:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7728:35:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3783,"nodeType":"ExpressionStatement","src":"7728:35:23"},{"expression":{"id":3793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3784,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"7777:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3785,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"7787:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3786,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"7796:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3787,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"7800:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7796:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7787:19:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3790,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7786:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7811:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7786:26:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7777:35:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3794,"nodeType":"ExpressionStatement","src":"7777:35:23"},{"expression":{"id":3804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3795,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"7826:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3796,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"7836:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3797,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"7845:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3798,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"7849:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7845:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7836:19:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3801,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7835:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3802,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7860:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7835:26:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7826:35:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3805,"nodeType":"ExpressionStatement","src":"7826:35:23"},{"expression":{"arguments":[{"id":3807,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"7886:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3808,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"7894:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3809,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"7898:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7894:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3806,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3489,"src":"7882:3:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3811,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7882:23:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3710,"id":3812,"nodeType":"Return","src":"7875:30:23"}]}]},"documentation":{"id":3704,"nodeType":"StructuredDocumentation","src":"6067:208:23","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":3815,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6289:4:23","nodeType":"FunctionDefinition","parameters":{"id":3707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3706,"mutability":"mutable","name":"a","nameLocation":"6302:1:23","nodeType":"VariableDeclaration","scope":3815,"src":"6294:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3705,"name":"uint256","nodeType":"ElementaryTypeName","src":"6294:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6293:11:23"},"returnParameters":{"id":3710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3709,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3815,"src":"6328:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3708,"name":"uint256","nodeType":"ElementaryTypeName","src":"6328:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6327:9:23"},"scope":4311,"src":"6280:1642:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3850,"nodeType":"Block","src":"8098:161:23","statements":[{"id":3849,"nodeType":"UncheckedBlock","src":"8108:145:23","statements":[{"assignments":[3827],"declarations":[{"constant":false,"id":3827,"mutability":"mutable","name":"result","nameLocation":"8140:6:23","nodeType":"VariableDeclaration","scope":3849,"src":"8132:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3826,"name":"uint256","nodeType":"ElementaryTypeName","src":"8132:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3831,"initialValue":{"arguments":[{"id":3829,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3818,"src":"8154:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3828,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[3815,3851],"referencedDeclaration":3815,"src":"8149:4:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3830,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8149:7:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8132:24:23"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3832,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3827,"src":"8177:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3453","typeString":"enum Math.Rounding"},"id":3836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3833,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3821,"src":"8187:8:23","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3453","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3834,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3453,"src":"8199:8:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3453_$","typeString":"type(enum Math.Rounding)"}},"id":3835,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3451,"src":"8199:11:23","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3453","typeString":"enum Math.Rounding"}},"src":"8187:23:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3837,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3827,"src":"8214:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3838,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3827,"src":"8223:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3840,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3818,"src":"8232:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8187:46:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8240:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8187:54:23","trueExpression":{"hexValue":"31","id":3843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8236:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3846,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8186:56:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8177:65:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3825,"id":3848,"nodeType":"Return","src":"8170:72:23"}]}]},"documentation":{"id":3816,"nodeType":"StructuredDocumentation","src":"7928:89:23","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":3851,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8031:4:23","nodeType":"FunctionDefinition","parameters":{"id":3822,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3818,"mutability":"mutable","name":"a","nameLocation":"8044:1:23","nodeType":"VariableDeclaration","scope":3851,"src":"8036:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3817,"name":"uint256","nodeType":"ElementaryTypeName","src":"8036:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3821,"mutability":"mutable","name":"rounding","nameLocation":"8056:8:23","nodeType":"VariableDeclaration","scope":3851,"src":"8047:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3453","typeString":"enum Math.Rounding"},"typeName":{"id":3820,"nodeType":"UserDefinedTypeName","pathNode":{"id":3819,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":3453,"src":"8047:8:23"},"referencedDeclaration":3453,"src":"8047:8:23","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3453","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8035:30:23"},"returnParameters":{"id":3825,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3824,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3851,"src":"8089:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3823,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8088:9:23"},"scope":4311,"src":"8022:237:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3982,"nodeType":"Block","src":"8444:922:23","statements":[{"assignments":[3860],"declarations":[{"constant":false,"id":3860,"mutability":"mutable","name":"result","nameLocation":"8462:6:23","nodeType":"VariableDeclaration","scope":3982,"src":"8454:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3859,"name":"uint256","nodeType":"ElementaryTypeName","src":"8454:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3862,"initialValue":{"hexValue":"30","id":3861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8471:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8454:18:23"},{"id":3979,"nodeType":"UncheckedBlock","src":"8482:855:23","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3863,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3854,"src":"8510:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3864,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8519:3:23","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8510:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8525:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8510:16:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3877,"nodeType":"IfStatement","src":"8506:99:23","trueBody":{"id":3876,"nodeType":"Block","src":"8528:77:23","statements":[{"expression":{"id":3870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3868,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3854,"src":"8546:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8556:3:23","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8546:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3871,"nodeType":"ExpressionStatement","src":"8546:13:23"},{"expression":{"id":3874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3872,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3860,"src":"8577:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":3873,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8587:3:23","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8577:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3875,"nodeType":"ExpressionStatement","src":"8577:13:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3878,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3854,"src":"8622:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3879,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8631:2:23","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8622:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3881,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8636:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8622:15:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3892,"nodeType":"IfStatement","src":"8618:96:23","trueBody":{"id":3891,"nodeType":"Block","src":"8639:75:23","statements":[{"expression":{"id":3885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3883,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3854,"src":"8657:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8667:2:23","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8657:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3886,"nodeType":"ExpressionStatement","src":"8657:12:23"},{"expression":{"id":3889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3887,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3860,"src":"8687:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8697:2:23","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8687:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3890,"nodeType":"ExpressionStatement","src":"8687:12:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3893,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3854,"src":"8731:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8740:2:23","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8731:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8745:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8731:15:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3907,"nodeType":"IfStatement","src":"8727:96:23","trueBody":{"id":3906,"nodeType":"Block","src":"8748:75:23","statements":[{"expression":{"id":3900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3898,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3854,"src":"8766:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8776:2:23","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8766:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3901,"nodeType":"ExpressionStatement","src":"8766:12:23"},{"expression":{"id":3904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3902,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3860,"src":"8796:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:2:23","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8796:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3905,"nodeType":"ExpressionStatement","src":"8796:12:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3908,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3854,"src":"8840:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8849:2:23","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8840:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3911,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8854:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8840:15:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3922,"nodeType":"IfStatement","src":"8836:96:23","trueBody":{"id":3921,"nodeType":"Block","src":"8857:75:23","statements":[{"expression":{"id":3915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3913,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3854,"src":"8875:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3914,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8885:2:23","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8875:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3916,"nodeType":"ExpressionStatement","src":"8875:12:23"},{"expression":{"id":3919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3917,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3860,"src":"8905:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3918,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8915:2:23","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8905:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3920,"nodeType":"ExpressionStatement","src":"8905:12:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3923,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3854,"src":"8949:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3924,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8958:1:23","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8949:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3926,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8962:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8949:14:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3937,"nodeType":"IfStatement","src":"8945:93:23","trueBody":{"id":3936,"nodeType":"Block","src":"8965:73:23","statements":[{"expression":{"id":3930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3928,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3854,"src":"8983:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":3929,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8993:1:23","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8983:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3931,"nodeType":"ExpressionStatement","src":"8983:11:23"},{"expression":{"id":3934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3932,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3860,"src":"9012:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9022:1:23","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9012:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3935,"nodeType":"ExpressionStatement","src":"9012:11:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3938,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3854,"src":"9055:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":3939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9064:1:23","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9055:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3941,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9068:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9055:14:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3952,"nodeType":"IfStatement","src":"9051:93:23","trueBody":{"id":3951,"nodeType":"Block","src":"9071:73:23","statements":[{"expression":{"id":3945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3943,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3854,"src":"9089:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:1:23","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9089:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3946,"nodeType":"ExpressionStatement","src":"9089:11:23"},{"expression":{"id":3949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3947,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3860,"src":"9118:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3948,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9128:1:23","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9118:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3950,"nodeType":"ExpressionStatement","src":"9118:11:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3953,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3854,"src":"9161:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":3954,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9170:1:23","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9161:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9174:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9161:14:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3967,"nodeType":"IfStatement","src":"9157:93:23","trueBody":{"id":3966,"nodeType":"Block","src":"9177:73:23","statements":[{"expression":{"id":3960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3958,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3854,"src":"9195:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":3959,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9205:1:23","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9195:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3961,"nodeType":"ExpressionStatement","src":"9195:11:23"},{"expression":{"id":3964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3962,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3860,"src":"9224:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3963,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9234:1:23","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9224:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3965,"nodeType":"ExpressionStatement","src":"9224:11:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3968,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3854,"src":"9267:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3969,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9276:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9267:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9280:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9267:14:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3978,"nodeType":"IfStatement","src":"9263:64:23","trueBody":{"id":3977,"nodeType":"Block","src":"9283:44:23","statements":[{"expression":{"id":3975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3973,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3860,"src":"9301:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3974,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9311:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9301:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3976,"nodeType":"ExpressionStatement","src":"9301:11:23"}]}}]},{"expression":{"id":3980,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3860,"src":"9353:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3858,"id":3981,"nodeType":"Return","src":"9346:13:23"}]},"documentation":{"id":3852,"nodeType":"StructuredDocumentation","src":"8265:113:23","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":3983,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8392:4:23","nodeType":"FunctionDefinition","parameters":{"id":3855,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3854,"mutability":"mutable","name":"value","nameLocation":"8405:5:23","nodeType":"VariableDeclaration","scope":3983,"src":"8397:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3853,"name":"uint256","nodeType":"ElementaryTypeName","src":"8397:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8396:15:23"},"returnParameters":{"id":3858,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3857,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3983,"src":"8435:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3856,"name":"uint256","nodeType":"ElementaryTypeName","src":"8435:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8434:9:23"},"scope":4311,"src":"8383:983:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4018,"nodeType":"Block","src":"9599:165:23","statements":[{"id":4017,"nodeType":"UncheckedBlock","src":"9609:149:23","statements":[{"assignments":[3995],"declarations":[{"constant":false,"id":3995,"mutability":"mutable","name":"result","nameLocation":"9641:6:23","nodeType":"VariableDeclaration","scope":4017,"src":"9633:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3994,"name":"uint256","nodeType":"ElementaryTypeName","src":"9633:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3999,"initialValue":{"arguments":[{"id":3997,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3986,"src":"9655:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3996,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3983,4019],"referencedDeclaration":3983,"src":"9650:4:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3998,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9650:11:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9633:28:23"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4000,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3995,"src":"9682:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3453","typeString":"enum Math.Rounding"},"id":4004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4001,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3989,"src":"9692:8:23","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3453","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4002,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3453,"src":"9704:8:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3453_$","typeString":"type(enum Math.Rounding)"}},"id":4003,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3451,"src":"9704:11:23","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3453","typeString":"enum Math.Rounding"}},"src":"9692:23:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4005,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9719:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":4006,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3995,"src":"9724:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4008,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3986,"src":"9733:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9692:46:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9745:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9692:54:23","trueExpression":{"hexValue":"31","id":4011,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9741:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4014,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9691:56:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9682:65:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3993,"id":4016,"nodeType":"Return","src":"9675:72:23"}]}]},"documentation":{"id":3984,"nodeType":"StructuredDocumentation","src":"9372:142:23","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4019,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9528:4:23","nodeType":"FunctionDefinition","parameters":{"id":3990,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3986,"mutability":"mutable","name":"value","nameLocation":"9541:5:23","nodeType":"VariableDeclaration","scope":4019,"src":"9533:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3985,"name":"uint256","nodeType":"ElementaryTypeName","src":"9533:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3989,"mutability":"mutable","name":"rounding","nameLocation":"9557:8:23","nodeType":"VariableDeclaration","scope":4019,"src":"9548:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3453","typeString":"enum Math.Rounding"},"typeName":{"id":3988,"nodeType":"UserDefinedTypeName","pathNode":{"id":3987,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":3453,"src":"9548:8:23"},"referencedDeclaration":3453,"src":"9548:8:23","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3453","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9532:34:23"},"returnParameters":{"id":3993,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3992,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4019,"src":"9590:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3991,"name":"uint256","nodeType":"ElementaryTypeName","src":"9590:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9589:9:23"},"scope":4311,"src":"9519:245:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4147,"nodeType":"Block","src":"9951:828:23","statements":[{"assignments":[4028],"declarations":[{"constant":false,"id":4028,"mutability":"mutable","name":"result","nameLocation":"9969:6:23","nodeType":"VariableDeclaration","scope":4147,"src":"9961:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4027,"name":"uint256","nodeType":"ElementaryTypeName","src":"9961:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4030,"initialValue":{"hexValue":"30","id":4029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9978:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9961:18:23"},{"id":4144,"nodeType":"UncheckedBlock","src":"9989:761:23","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4031,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4022,"src":"10017:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":4034,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4032,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10026:2:23","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":4033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10030:2:23","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10026:6:23","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10017:15:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4047,"nodeType":"IfStatement","src":"10013:99:23","trueBody":{"id":4046,"nodeType":"Block","src":"10034:78:23","statements":[{"expression":{"id":4040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4036,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4022,"src":"10052:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":4039,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10061:2:23","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":4038,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10065:2:23","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10061:6:23","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10052:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4041,"nodeType":"ExpressionStatement","src":"10052:15:23"},{"expression":{"id":4044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4042,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4028,"src":"10085:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":4043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10095:2:23","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10085:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4045,"nodeType":"ExpressionStatement","src":"10085:12:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4048,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4022,"src":"10129:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":4051,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4049,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10138:2:23","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":4050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10142:2:23","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10138:6:23","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10129:15:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4064,"nodeType":"IfStatement","src":"10125:99:23","trueBody":{"id":4063,"nodeType":"Block","src":"10146:78:23","statements":[{"expression":{"id":4057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4053,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4022,"src":"10164:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":4056,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4054,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10173:2:23","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":4055,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10177:2:23","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10173:6:23","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10164:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4058,"nodeType":"ExpressionStatement","src":"10164:15:23"},{"expression":{"id":4061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4059,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4028,"src":"10197:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":4060,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10207:2:23","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10197:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4062,"nodeType":"ExpressionStatement","src":"10197:12:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4065,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4022,"src":"10241:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":4068,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4066,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10250:2:23","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":4067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10254:2:23","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10250:6:23","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10241:15:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4081,"nodeType":"IfStatement","src":"10237:99:23","trueBody":{"id":4080,"nodeType":"Block","src":"10258:78:23","statements":[{"expression":{"id":4074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4070,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4022,"src":"10276:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":4073,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10285:2:23","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":4072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10289:2:23","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10285:6:23","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10276:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4075,"nodeType":"ExpressionStatement","src":"10276:15:23"},{"expression":{"id":4078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4076,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4028,"src":"10309:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4077,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:23","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10309:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4079,"nodeType":"ExpressionStatement","src":"10309:12:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4082,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4022,"src":"10353:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":4085,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4083,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10362:2:23","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":4084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10366:1:23","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10362:5:23","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10353:14:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4098,"nodeType":"IfStatement","src":"10349:96:23","trueBody":{"id":4097,"nodeType":"Block","src":"10369:76:23","statements":[{"expression":{"id":4091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4087,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4022,"src":"10387:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":4090,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10396:2:23","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":4089,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10400:1:23","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10396:5:23","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10387:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4092,"nodeType":"ExpressionStatement","src":"10387:14:23"},{"expression":{"id":4095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4093,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4028,"src":"10419:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4094,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:1:23","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10419:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4096,"nodeType":"ExpressionStatement","src":"10419:11:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4099,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4022,"src":"10462:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":4102,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4100,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10471:2:23","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":4101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10475:1:23","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10471:5:23","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10462:14:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4115,"nodeType":"IfStatement","src":"10458:96:23","trueBody":{"id":4114,"nodeType":"Block","src":"10478:76:23","statements":[{"expression":{"id":4108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4104,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4022,"src":"10496:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":4107,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4105,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10505:2:23","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":4106,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10509:1:23","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10505:5:23","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10496:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4109,"nodeType":"ExpressionStatement","src":"10496:14:23"},{"expression":{"id":4112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4110,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4028,"src":"10528:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4111,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10538:1:23","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10528:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4113,"nodeType":"ExpressionStatement","src":"10528:11:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4116,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4022,"src":"10571:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":4119,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10580:2:23","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":4118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10584:1:23","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10580:5:23","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10571:14:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4132,"nodeType":"IfStatement","src":"10567:96:23","trueBody":{"id":4131,"nodeType":"Block","src":"10587:76:23","statements":[{"expression":{"id":4125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4121,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4022,"src":"10605:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":4124,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10614:2:23","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":4123,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10618:1:23","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10614:5:23","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10605:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4126,"nodeType":"ExpressionStatement","src":"10605:14:23"},{"expression":{"id":4129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4127,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4028,"src":"10637:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10647:1:23","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10637:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4130,"nodeType":"ExpressionStatement","src":"10637:11:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4133,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4022,"src":"10680:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":4136,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10689:2:23","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":4135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10693:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10689:5:23","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10680:14:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4143,"nodeType":"IfStatement","src":"10676:64:23","trueBody":{"id":4142,"nodeType":"Block","src":"10696:44:23","statements":[{"expression":{"id":4140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4138,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4028,"src":"10714:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4139,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10724:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10714:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4141,"nodeType":"ExpressionStatement","src":"10714:11:23"}]}}]},{"expression":{"id":4145,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4028,"src":"10766:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4026,"id":4146,"nodeType":"Return","src":"10759:13:23"}]},"documentation":{"id":4020,"nodeType":"StructuredDocumentation","src":"9770:114:23","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":4148,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"9898:5:23","nodeType":"FunctionDefinition","parameters":{"id":4023,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4022,"mutability":"mutable","name":"value","nameLocation":"9912:5:23","nodeType":"VariableDeclaration","scope":4148,"src":"9904:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4021,"name":"uint256","nodeType":"ElementaryTypeName","src":"9904:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9903:15:23"},"returnParameters":{"id":4026,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4025,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4148,"src":"9942:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4024,"name":"uint256","nodeType":"ElementaryTypeName","src":"9942:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9941:9:23"},"scope":4311,"src":"9889:890:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4183,"nodeType":"Block","src":"11014:165:23","statements":[{"id":4182,"nodeType":"UncheckedBlock","src":"11024:149:23","statements":[{"assignments":[4160],"declarations":[{"constant":false,"id":4160,"mutability":"mutable","name":"result","nameLocation":"11056:6:23","nodeType":"VariableDeclaration","scope":4182,"src":"11048:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4159,"name":"uint256","nodeType":"ElementaryTypeName","src":"11048:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4164,"initialValue":{"arguments":[{"id":4162,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4151,"src":"11071:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4161,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[4148,4184],"referencedDeclaration":4148,"src":"11065:5:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11065:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11048:29:23"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4165,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4160,"src":"11098:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3453","typeString":"enum Math.Rounding"},"id":4169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4166,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4154,"src":"11108:8:23","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3453","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4167,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3453,"src":"11120:8:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3453_$","typeString":"type(enum Math.Rounding)"}},"id":4168,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3451,"src":"11120:11:23","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3453","typeString":"enum Math.Rounding"}},"src":"11108:23:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11135:2:23","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":4171,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4160,"src":"11139:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4173,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4151,"src":"11148:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:18:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11108:45:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11160:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11108:53:23","trueExpression":{"hexValue":"31","id":4176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11156:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4179,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11107:55:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11098:64:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4158,"id":4181,"nodeType":"Return","src":"11091:71:23"}]}]},"documentation":{"id":4149,"nodeType":"StructuredDocumentation","src":"10785:143:23","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4184,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10942:5:23","nodeType":"FunctionDefinition","parameters":{"id":4155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4151,"mutability":"mutable","name":"value","nameLocation":"10956:5:23","nodeType":"VariableDeclaration","scope":4184,"src":"10948:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4150,"name":"uint256","nodeType":"ElementaryTypeName","src":"10948:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4154,"mutability":"mutable","name":"rounding","nameLocation":"10972:8:23","nodeType":"VariableDeclaration","scope":4184,"src":"10963:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3453","typeString":"enum Math.Rounding"},"typeName":{"id":4153,"nodeType":"UserDefinedTypeName","pathNode":{"id":4152,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":3453,"src":"10963:8:23"},"referencedDeclaration":3453,"src":"10963:8:23","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3453","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10947:34:23"},"returnParameters":{"id":4158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4157,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4184,"src":"11005:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4156,"name":"uint256","nodeType":"ElementaryTypeName","src":"11005:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11004:9:23"},"scope":4311,"src":"10933:246:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4270,"nodeType":"Block","src":"11493:600:23","statements":[{"assignments":[4193],"declarations":[{"constant":false,"id":4193,"mutability":"mutable","name":"result","nameLocation":"11511:6:23","nodeType":"VariableDeclaration","scope":4270,"src":"11503:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4192,"name":"uint256","nodeType":"ElementaryTypeName","src":"11503:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4195,"initialValue":{"hexValue":"30","id":4194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11520:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11503:18:23"},{"id":4267,"nodeType":"UncheckedBlock","src":"11531:533:23","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4196,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4187,"src":"11559:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":4197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11568:3:23","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11559:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11574:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11559:16:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4210,"nodeType":"IfStatement","src":"11555:98:23","trueBody":{"id":4209,"nodeType":"Block","src":"11577:76:23","statements":[{"expression":{"id":4203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4201,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4187,"src":"11595:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":4202,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11605:3:23","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11595:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4204,"nodeType":"ExpressionStatement","src":"11595:13:23"},{"expression":{"id":4207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4205,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4193,"src":"11626:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11636:2:23","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11626:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4208,"nodeType":"ExpressionStatement","src":"11626:12:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4211,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4187,"src":"11670:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":4212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11679:2:23","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11670:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11684:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11670:15:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4225,"nodeType":"IfStatement","src":"11666:95:23","trueBody":{"id":4224,"nodeType":"Block","src":"11687:74:23","statements":[{"expression":{"id":4218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4216,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4187,"src":"11705:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":4217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11715:2:23","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11705:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4219,"nodeType":"ExpressionStatement","src":"11705:12:23"},{"expression":{"id":4222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4220,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4193,"src":"11735:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11745:1:23","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11735:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4223,"nodeType":"ExpressionStatement","src":"11735:11:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4226,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4187,"src":"11778:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":4227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11787:2:23","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11778:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11792:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11778:15:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4240,"nodeType":"IfStatement","src":"11774:95:23","trueBody":{"id":4239,"nodeType":"Block","src":"11795:74:23","statements":[{"expression":{"id":4233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4231,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4187,"src":"11813:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":4232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11823:2:23","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11813:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4234,"nodeType":"ExpressionStatement","src":"11813:12:23"},{"expression":{"id":4237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4235,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4193,"src":"11843:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11853:1:23","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11843:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4238,"nodeType":"ExpressionStatement","src":"11843:11:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4241,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4187,"src":"11886:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":4242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11895:2:23","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11886:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11900:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11886:15:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4255,"nodeType":"IfStatement","src":"11882:95:23","trueBody":{"id":4254,"nodeType":"Block","src":"11903:74:23","statements":[{"expression":{"id":4248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4246,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4187,"src":"11921:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":4247,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11931:2:23","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11921:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4249,"nodeType":"ExpressionStatement","src":"11921:12:23"},{"expression":{"id":4252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4250,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4193,"src":"11951:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11961:1:23","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11951:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4253,"nodeType":"ExpressionStatement","src":"11951:11:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4256,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4187,"src":"11994:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":4257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12003:1:23","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11994:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12007:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11994:14:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4266,"nodeType":"IfStatement","src":"11990:64:23","trueBody":{"id":4265,"nodeType":"Block","src":"12010:44:23","statements":[{"expression":{"id":4263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4261,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4193,"src":"12028:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4262,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12028:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4264,"nodeType":"ExpressionStatement","src":"12028:11:23"}]}}]},{"expression":{"id":4268,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4193,"src":"12080:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4191,"id":4269,"nodeType":"Return","src":"12073:13:23"}]},"documentation":{"id":4185,"nodeType":"StructuredDocumentation","src":"11185:240:23","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":4271,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11439:6:23","nodeType":"FunctionDefinition","parameters":{"id":4188,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4187,"mutability":"mutable","name":"value","nameLocation":"11454:5:23","nodeType":"VariableDeclaration","scope":4271,"src":"11446:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4186,"name":"uint256","nodeType":"ElementaryTypeName","src":"11446:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11445:15:23"},"returnParameters":{"id":4191,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4190,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4271,"src":"11484:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4189,"name":"uint256","nodeType":"ElementaryTypeName","src":"11484:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11483:9:23"},"scope":4311,"src":"11430:663:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4309,"nodeType":"Block","src":"12329:173:23","statements":[{"id":4308,"nodeType":"UncheckedBlock","src":"12339:157:23","statements":[{"assignments":[4283],"declarations":[{"constant":false,"id":4283,"mutability":"mutable","name":"result","nameLocation":"12371:6:23","nodeType":"VariableDeclaration","scope":4308,"src":"12363:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4282,"name":"uint256","nodeType":"ElementaryTypeName","src":"12363:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4287,"initialValue":{"arguments":[{"id":4285,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4274,"src":"12387:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4284,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[4271,4310],"referencedDeclaration":4271,"src":"12380:6:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12380:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12363:30:23"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4288,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4283,"src":"12414:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3453","typeString":"enum Math.Rounding"},"id":4292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4289,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4277,"src":"12424:8:23","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3453","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4290,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3453,"src":"12436:8:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3453_$","typeString":"type(enum Math.Rounding)"}},"id":4291,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3451,"src":"12436:11:23","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3453","typeString":"enum Math.Rounding"}},"src":"12424:23:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12451:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4294,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4283,"src":"12457:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"38","id":4295,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12466:1:23","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12457:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4297,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12456:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4299,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4274,"src":"12471:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:25:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12424:52:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4303,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12483:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12424:60:23","trueExpression":{"hexValue":"31","id":4302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12479:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4305,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12423:62:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12414:71:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4281,"id":4307,"nodeType":"Return","src":"12407:78:23"}]}]},"documentation":{"id":4272,"nodeType":"StructuredDocumentation","src":"12099:143:23","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4310,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12256:6:23","nodeType":"FunctionDefinition","parameters":{"id":4278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4274,"mutability":"mutable","name":"value","nameLocation":"12271:5:23","nodeType":"VariableDeclaration","scope":4310,"src":"12263:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4273,"name":"uint256","nodeType":"ElementaryTypeName","src":"12263:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4277,"mutability":"mutable","name":"rounding","nameLocation":"12287:8:23","nodeType":"VariableDeclaration","scope":4310,"src":"12278:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3453","typeString":"enum Math.Rounding"},"typeName":{"id":4276,"nodeType":"UserDefinedTypeName","pathNode":{"id":4275,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":3453,"src":"12278:8:23"},"referencedDeclaration":3453,"src":"12278:8:23","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3453","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12262:34:23"},"returnParameters":{"id":4281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4280,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4310,"src":"12320:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4279,"name":"uint256","nodeType":"ElementaryTypeName","src":"12320:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12319:9:23"},"scope":4311,"src":"12247:255:23","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4312,"src":"202:12302:23","usedErrors":[]}],"src":"103:12402:23"},"id":23},"contracts/Trustified-NonTransferable.sol":{"ast":{"absolutePath":"contracts/Trustified-NonTransferable.sol","exportedSymbols":{"Address":[3139],"Context":[3161],"Counters":[3235],"ERC165":[3434],"ERC721":[2648],"ERC721URIStorage":[5224],"IERC165":[3446],"IERC721":[2764],"IERC721Metadata":[2809],"IERC721Receiver":[2782],"Math":[4311],"ReentrancyGuard":[1703],"Strings":[3410],"TrustifiedNonTransferable":[4625]},"id":4626,"license":"MIT OR Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":4313,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"46:23:24"},{"absolutePath":"@openzeppelin/contracts/utils/Counters.sol","file":"@openzeppelin/contracts/utils/Counters.sol","id":4314,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4626,"sourceUnit":3236,"src":"71:52:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/security/ReentrancyGuard.sol","file":"@openzeppelin/contracts/security/ReentrancyGuard.sol","id":4315,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4626,"sourceUnit":1704,"src":"124:62:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"@openzeppelin/contracts/token/ERC721/ERC721.sol","id":4316,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4626,"sourceUnit":2649,"src":"187:57:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/comman/FERC721URIStorage.sol","file":"./comman/FERC721URIStorage.sol","id":4317,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4626,"sourceUnit":5225,"src":"246:40:24","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4318,"name":"ERC721URIStorage","nodeType":"IdentifierPath","referencedDeclaration":5224,"src":"326:16:24"},"id":4319,"nodeType":"InheritanceSpecifier","src":"326:16:24"}],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4625,"linearizedBaseContracts":[4625,5224,2648,2809,2764,3434,3446,3161],"name":"TrustifiedNonTransferable","nameLocation":"297:25:24","nodeType":"ContractDefinition","nodes":[{"id":4323,"libraryName":{"id":4320,"name":"Counters","nodeType":"IdentifierPath","referencedDeclaration":3235,"src":"355:8:24"},"nodeType":"UsingForDirective","src":"349:36:24","typeName":{"id":4322,"nodeType":"UserDefinedTypeName","pathNode":{"id":4321,"name":"Counters.Counter","nodeType":"IdentifierPath","referencedDeclaration":3167,"src":"368:16:24"},"referencedDeclaration":3167,"src":"368:16:24","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage_ptr","typeString":"struct Counters.Counter"}}},{"constant":false,"id":4326,"mutability":"mutable","name":"_tokenIdCounter","nameLocation":"415:15:24","nodeType":"VariableDeclaration","scope":4625,"src":"390:40:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage","typeString":"struct Counters.Counter"},"typeName":{"id":4325,"nodeType":"UserDefinedTypeName","pathNode":{"id":4324,"name":"Counters.Counter","nodeType":"IdentifierPath","referencedDeclaration":3167,"src":"390:16:24"},"referencedDeclaration":3167,"src":"390:16:24","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"private"},{"constant":false,"id":4329,"mutability":"mutable","name":"_eventIdCounter","nameLocation":"461:15:24","nodeType":"VariableDeclaration","scope":4625,"src":"436:40:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage","typeString":"struct Counters.Counter"},"typeName":{"id":4328,"nodeType":"UserDefinedTypeName","pathNode":{"id":4327,"name":"Counters.Counter","nodeType":"IdentifierPath","referencedDeclaration":3167,"src":"436:16:24"},"referencedDeclaration":3167,"src":"436:16:24","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"private"},{"constant":false,"functionSelector":"eed8cc35","id":4334,"mutability":"mutable","name":"tokenIds","nameLocation":"520:8:24","nodeType":"VariableDeclaration","scope":4625,"src":"483:45:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(uint256 => uint256[])"},"typeName":{"id":4333,"keyType":{"id":4330,"name":"uint256","nodeType":"ElementaryTypeName","src":"491:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"483:29:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(uint256 => uint256[])"},"valueType":{"baseType":{"id":4331,"name":"uint256","nodeType":"ElementaryTypeName","src":"502:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4332,"nodeType":"ArrayTypeName","src":"502:9:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"visibility":"public"},{"constant":false,"id":4338,"mutability":"mutable","name":"transferStatus","nameLocation":"568:14:24","nodeType":"VariableDeclaration","scope":4625,"src":"535:47:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"},"typeName":{"id":4337,"keyType":{"id":4335,"name":"uint256","nodeType":"ElementaryTypeName","src":"543:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"535:24:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"},"valueType":{"id":4336,"name":"bool","nodeType":"ElementaryTypeName","src":"554:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"private"},{"anonymous":false,"id":4344,"name":"TokenMinted","nameLocation":"595:11:24","nodeType":"EventDefinition","parameters":{"id":4343,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4340,"indexed":false,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4344,"src":"607:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4339,"name":"address","nodeType":"ElementaryTypeName","src":"607:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4342,"indexed":false,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4344,"src":"616:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4341,"name":"uint256","nodeType":"ElementaryTypeName","src":"616:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"606:18:24"},"src":"589:36:24"},{"anonymous":false,"id":4352,"name":"TokenTransfered","nameLocation":"636:15:24","nodeType":"EventDefinition","parameters":{"id":4351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4346,"indexed":false,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4352,"src":"652:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4345,"name":"address","nodeType":"ElementaryTypeName","src":"652:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4348,"indexed":false,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4352,"src":"661:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4347,"name":"address","nodeType":"ElementaryTypeName","src":"661:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4350,"indexed":false,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4352,"src":"670:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4349,"name":"uint256","nodeType":"ElementaryTypeName","src":"670:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"651:27:24"},"src":"630:49:24"},{"body":{"id":4359,"nodeType":"Block","src":"727:2:24","statements":[]},"id":4360,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"hexValue":"54727573746966696564","id":4355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"706:12:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_8fedae799be8d11a50e541a094ed7c48822c27fbfd37d7cfebb29172b2bbb0ec","typeString":"literal_string \"Trustified\""},"value":"Trustified"},{"hexValue":"54464e","id":4356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"720:5:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_a0a72108331f47f1c1cb3ccd5d608590a45068caa5e52b7efa91a409433f8fb4","typeString":"literal_string \"TFN\""},"value":"TFN"}],"id":4357,"kind":"baseConstructorSpecifier","modifierName":{"id":4354,"name":"ERC721","nodeType":"IdentifierPath","referencedDeclaration":2648,"src":"699:6:24"},"nodeType":"ModifierInvocation","src":"699:27:24"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4353,"nodeType":"ParameterList","parameters":[],"src":"696:2:24"},"returnParameters":{"id":4358,"nodeType":"ParameterList","parameters":[],"src":"727:0:24"},"scope":4625,"src":"685:44:24","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4386,"nodeType":"Block","src":"780:160:24","statements":[{"assignments":[4366],"declarations":[{"constant":false,"id":4366,"mutability":"mutable","name":"tokenId","nameLocation":"798:7:24","nodeType":"VariableDeclaration","scope":4386,"src":"790:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4365,"name":"uint256","nodeType":"ElementaryTypeName","src":"790:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4370,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4367,"name":"_tokenIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4326,"src":"808:15:24","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage","typeString":"struct Counters.Counter storage ref"}},"id":4368,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"current","nodeType":"MemberAccess","referencedDeclaration":3179,"src":"808:23:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$3167_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$3167_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer) view returns (uint256)"}},"id":4369,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"808:25:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"790:43:24"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4371,"name":"_tokenIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4326,"src":"843:15:24","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage","typeString":"struct Counters.Counter storage ref"}},"id":4373,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"increment","nodeType":"MemberAccess","referencedDeclaration":3193,"src":"843:25:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Counter_$3167_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$3167_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer)"}},"id":4374,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"843:27:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4375,"nodeType":"ExpressionStatement","src":"843:27:24"},{"expression":{"arguments":[{"arguments":[{"id":4379,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"894:4:24","typeDescriptions":{"typeIdentifier":"t_contract$_TrustifiedNonTransferable_$4625","typeString":"contract TrustifiedNonTransferable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TrustifiedNonTransferable_$4625","typeString":"contract TrustifiedNonTransferable"}],"id":4378,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"886:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4377,"name":"address","nodeType":"ElementaryTypeName","src":"886:7:24","typeDescriptions":{}}},"id":4380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"886:13:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4381,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4366,"src":"901:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4376,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2304,"src":"880:5:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4382,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"880:29:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4383,"nodeType":"ExpressionStatement","src":"880:29:24"},{"expression":{"id":4384,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4366,"src":"926:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4364,"id":4385,"nodeType":"Return","src":"919:14:24"}]},"functionSelector":"6871ee40","id":4387,"implemented":true,"kind":"function","modifiers":[],"name":"safeMint","nameLocation":"744:8:24","nodeType":"FunctionDefinition","parameters":{"id":4361,"nodeType":"ParameterList","parameters":[],"src":"752:2:24"},"returnParameters":{"id":4364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4363,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4387,"src":"771:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4362,"name":"uint256","nodeType":"ElementaryTypeName","src":"771:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"770:9:24"},"scope":4625,"src":"735:205:24","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4420,"nodeType":"Block","src":"1019:201:24","statements":[{"assignments":[4395],"declarations":[{"constant":false,"id":4395,"mutability":"mutable","name":"tokenId","nameLocation":"1037:7:24","nodeType":"VariableDeclaration","scope":4420,"src":"1029:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4394,"name":"uint256","nodeType":"ElementaryTypeName","src":"1029:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4399,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4396,"name":"_tokenIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4326,"src":"1047:15:24","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage","typeString":"struct Counters.Counter storage ref"}},"id":4397,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"current","nodeType":"MemberAccess","referencedDeclaration":3179,"src":"1047:23:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$3167_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$3167_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer) view returns (uint256)"}},"id":4398,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1047:25:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1029:43:24"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4400,"name":"_tokenIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4326,"src":"1082:15:24","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage","typeString":"struct Counters.Counter storage ref"}},"id":4402,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"increment","nodeType":"MemberAccess","referencedDeclaration":3193,"src":"1082:25:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Counter_$3167_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$3167_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer)"}},"id":4403,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1082:27:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4404,"nodeType":"ExpressionStatement","src":"1082:27:24"},{"expression":{"arguments":[{"arguments":[{"id":4408,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1133:4:24","typeDescriptions":{"typeIdentifier":"t_contract$_TrustifiedNonTransferable_$4625","typeString":"contract TrustifiedNonTransferable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TrustifiedNonTransferable_$4625","typeString":"contract TrustifiedNonTransferable"}],"id":4407,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1125:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4406,"name":"address","nodeType":"ElementaryTypeName","src":"1125:7:24","typeDescriptions":{}}},"id":4409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1125:13:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4410,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4395,"src":"1140:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4405,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2304,"src":"1119:5:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4411,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1119:29:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4412,"nodeType":"ExpressionStatement","src":"1119:29:24"},{"expression":{"arguments":[{"id":4414,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4395,"src":"1171:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4415,"name":"tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4389,"src":"1180:8:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4413,"name":"_setTokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5193,"src":"1158:12:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":4416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1158:31:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4417,"nodeType":"ExpressionStatement","src":"1158:31:24"},{"expression":{"id":4418,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4395,"src":"1206:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4393,"id":4419,"nodeType":"Return","src":"1199:14:24"}]},"functionSelector":"265d9a6c","id":4421,"implemented":true,"kind":"function","modifiers":[],"name":"safeMintBadge","nameLocation":"956:13:24","nodeType":"FunctionDefinition","parameters":{"id":4390,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4389,"mutability":"mutable","name":"tokenURI","nameLocation":"984:8:24","nodeType":"VariableDeclaration","scope":4421,"src":"970:22:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4388,"name":"string","nodeType":"ElementaryTypeName","src":"970:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"969:24:24"},"returnParameters":{"id":4393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4392,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4421,"src":"1010:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4391,"name":"uint256","nodeType":"ElementaryTypeName","src":"1010:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1009:9:24"},"scope":4625,"src":"947:273:24","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4467,"nodeType":"Block","src":"1275:290:24","statements":[{"assignments":[4427],"declarations":[{"constant":false,"id":4427,"mutability":"mutable","name":"eventId","nameLocation":"1293:7:24","nodeType":"VariableDeclaration","scope":4467,"src":"1285:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4426,"name":"uint256","nodeType":"ElementaryTypeName","src":"1285:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4431,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4428,"name":"_eventIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4329,"src":"1303:15:24","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage","typeString":"struct Counters.Counter storage ref"}},"id":4429,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"current","nodeType":"MemberAccess","referencedDeclaration":3179,"src":"1303:23:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$3167_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$3167_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer) view returns (uint256)"}},"id":4430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1303:25:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1285:43:24"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4432,"name":"_eventIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4329,"src":"1338:15:24","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage","typeString":"struct Counters.Counter storage ref"}},"id":4434,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"increment","nodeType":"MemberAccess","referencedDeclaration":3193,"src":"1338:25:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Counter_$3167_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$3167_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer)"}},"id":4435,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1338:27:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4436,"nodeType":"ExpressionStatement","src":"1338:27:24"},{"body":{"id":4459,"nodeType":"Block","src":"1414:98:24","statements":[{"assignments":[4448],"declarations":[{"constant":false,"id":4448,"mutability":"mutable","name":"tokenId","nameLocation":"1436:7:24","nodeType":"VariableDeclaration","scope":4459,"src":"1428:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4447,"name":"uint256","nodeType":"ElementaryTypeName","src":"1428:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4451,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":4449,"name":"safeMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4387,"src":"1446:8:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$_t_uint256_$","typeString":"function () returns (uint256)"}},"id":4450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1446:10:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1428:28:24"},{"expression":{"arguments":[{"id":4456,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4448,"src":"1493:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":4452,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4334,"src":"1470:8:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(uint256 => uint256[] storage ref)"}},"id":4454,"indexExpression":{"id":4453,"name":"eventId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4427,"src":"1479:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1470:17:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":4455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"push","nodeType":"MemberAccess","src":"1470:22:24","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$bound_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":4457,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1470:31:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4458,"nodeType":"ExpressionStatement","src":"1470:31:24"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4441,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4438,"src":"1395:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4442,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4423,"src":"1399:8:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1395:12:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4460,"initializationExpression":{"assignments":[4438],"declarations":[{"constant":false,"id":4438,"mutability":"mutable","name":"i","nameLocation":"1388:1:24","nodeType":"VariableDeclaration","scope":4460,"src":"1380:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4437,"name":"uint256","nodeType":"ElementaryTypeName","src":"1380:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4440,"initialValue":{"hexValue":"30","id":4439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1392:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1380:13:24"},"loopExpression":{"expression":{"id":4445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1409:3:24","subExpression":{"id":4444,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4438,"src":"1409:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4446,"nodeType":"ExpressionStatement","src":"1409:3:24"},"nodeType":"ForStatement","src":"1375:137:24"},{"eventCall":{"arguments":[{"expression":{"id":4462,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1538:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1538:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4464,"name":"eventId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4427,"src":"1550:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4461,"name":"TokenMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4344,"src":"1526:11:24","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4465,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1526:32:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4466,"nodeType":"EmitStatement","src":"1521:37:24"}]},"functionSelector":"2743dfd0","id":4468,"implemented":true,"kind":"function","modifiers":[],"name":"bulkMintERC721","nameLocation":"1235:14:24","nodeType":"FunctionDefinition","parameters":{"id":4424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4423,"mutability":"mutable","name":"quantity","nameLocation":"1258:8:24","nodeType":"VariableDeclaration","scope":4468,"src":"1250:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4422,"name":"uint256","nodeType":"ElementaryTypeName","src":"1250:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1249:18:24"},"returnParameters":{"id":4425,"nodeType":"ParameterList","parameters":[],"src":"1275:0:24"},"scope":4625,"src":"1226:339:24","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4517,"nodeType":"Block","src":"1651:303:24","statements":[{"assignments":[4476],"declarations":[{"constant":false,"id":4476,"mutability":"mutable","name":"eventId","nameLocation":"1669:7:24","nodeType":"VariableDeclaration","scope":4517,"src":"1661:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4475,"name":"uint256","nodeType":"ElementaryTypeName","src":"1661:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4480,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4477,"name":"_eventIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4329,"src":"1679:15:24","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage","typeString":"struct Counters.Counter storage ref"}},"id":4478,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"current","nodeType":"MemberAccess","referencedDeclaration":3179,"src":"1679:23:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$3167_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$3167_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer) view returns (uint256)"}},"id":4479,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1679:25:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1661:43:24"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4481,"name":"_eventIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4329,"src":"1714:15:24","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage","typeString":"struct Counters.Counter storage ref"}},"id":4483,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"increment","nodeType":"MemberAccess","referencedDeclaration":3193,"src":"1714:25:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Counter_$3167_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$3167_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer)"}},"id":4484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1714:27:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4485,"nodeType":"ExpressionStatement","src":"1714:27:24"},{"body":{"id":4509,"nodeType":"Block","src":"1790:111:24","statements":[{"assignments":[4497],"declarations":[{"constant":false,"id":4497,"mutability":"mutable","name":"tokenId","nameLocation":"1812:7:24","nodeType":"VariableDeclaration","scope":4509,"src":"1804:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4496,"name":"uint256","nodeType":"ElementaryTypeName","src":"1804:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4501,"initialValue":{"arguments":[{"id":4499,"name":"tokenUri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4470,"src":"1836:8:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4498,"name":"safeMintBadge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4421,"src":"1822:13:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$returns$_t_uint256_$","typeString":"function (string memory) returns (uint256)"}},"id":4500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1822:23:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1804:41:24"},{"expression":{"arguments":[{"id":4506,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4497,"src":"1882:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":4502,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4334,"src":"1859:8:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(uint256 => uint256[] storage ref)"}},"id":4504,"indexExpression":{"id":4503,"name":"eventId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4476,"src":"1868:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1859:17:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":4505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"push","nodeType":"MemberAccess","src":"1859:22:24","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$bound_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":4507,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1859:31:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4508,"nodeType":"ExpressionStatement","src":"1859:31:24"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4490,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4487,"src":"1771:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4491,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4472,"src":"1775:8:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1771:12:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4510,"initializationExpression":{"assignments":[4487],"declarations":[{"constant":false,"id":4487,"mutability":"mutable","name":"i","nameLocation":"1764:1:24","nodeType":"VariableDeclaration","scope":4510,"src":"1756:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4486,"name":"uint256","nodeType":"ElementaryTypeName","src":"1756:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4489,"initialValue":{"hexValue":"30","id":4488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1768:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1756:13:24"},"loopExpression":{"expression":{"id":4494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1785:3:24","subExpression":{"id":4493,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4487,"src":"1785:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4495,"nodeType":"ExpressionStatement","src":"1785:3:24"},"nodeType":"ForStatement","src":"1751:150:24"},{"eventCall":{"arguments":[{"expression":{"id":4512,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1927:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1927:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4514,"name":"eventId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4476,"src":"1939:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4511,"name":"TokenMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4344,"src":"1915:11:24","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4515,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1915:32:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4516,"nodeType":"EmitStatement","src":"1910:37:24"}]},"functionSelector":"d4d94b05","id":4518,"implemented":true,"kind":"function","modifiers":[],"name":"bulkMintBadgesERC721","nameLocation":"1581:20:24","nodeType":"FunctionDefinition","parameters":{"id":4473,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4470,"mutability":"mutable","name":"tokenUri","nameLocation":"1616:8:24","nodeType":"VariableDeclaration","scope":4518,"src":"1602:22:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4469,"name":"string","nodeType":"ElementaryTypeName","src":"1602:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4472,"mutability":"mutable","name":"quantity","nameLocation":"1634:8:24","nodeType":"VariableDeclaration","scope":4518,"src":"1626:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4471,"name":"uint256","nodeType":"ElementaryTypeName","src":"1626:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1601:42:24"},"returnParameters":{"id":4474,"nodeType":"ParameterList","parameters":[],"src":"1651:0:24"},"scope":4625,"src":"1572:382:24","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4530,"nodeType":"Block","src":"2065:41:24","statements":[{"expression":{"baseExpression":{"id":4526,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4334,"src":"2082:8:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(uint256 => uint256[] storage ref)"}},"id":4528,"indexExpression":{"id":4527,"name":"eventId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4520,"src":"2091:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2082:17:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"functionReturnParameters":4525,"id":4529,"nodeType":"Return","src":"2075:24:24"}]},"functionSelector":"57991d30","id":4531,"implemented":true,"kind":"function","modifiers":[],"name":"getTokenIds","nameLocation":"1969:11:24","nodeType":"FunctionDefinition","parameters":{"id":4521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4520,"mutability":"mutable","name":"eventId","nameLocation":"1989:7:24","nodeType":"VariableDeclaration","scope":4531,"src":"1981:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4519,"name":"uint256","nodeType":"ElementaryTypeName","src":"1981:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1980:17:24"},"returnParameters":{"id":4525,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4524,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4531,"src":"2043:16:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4522,"name":"uint256","nodeType":"ElementaryTypeName","src":"2043:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4523,"nodeType":"ArrayTypeName","src":"2043:9:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2042:18:24"},"scope":4625,"src":"1960:146:24","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4580,"nodeType":"Block","src":"2247:323:24","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":4543,"name":"transferStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4338,"src":"2278:14:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":4545,"indexExpression":{"id":4544,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4537,"src":"2293:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2278:23:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"74727565","id":4546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2305:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2278:31:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5468697320746f6b656e2063616e206e6f74206265207472616e7366657272656421","id":4548,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2323:36:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_d5a66e7313a9aec57702e7cec57da779ab04b86d2407767a8ac34c46f27c720d","typeString":"literal_string \"This token can not be transferred!\""},"value":"This token can not be transferred!"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d5a66e7313a9aec57702e7cec57da779ab04b86d2407767a8ac34c46f27c720d","typeString":"literal_string \"This token can not be transferred!\""}],"id":4542,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2257:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4549,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2257:112:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4550,"nodeType":"ExpressionStatement","src":"2257:112:24"},{"expression":{"arguments":[{"id":4552,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4537,"src":"2392:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4553,"name":"tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4539,"src":"2401:8:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4551,"name":"_setTokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5193,"src":"2379:12:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":4554,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2379:31:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4555,"nodeType":"ExpressionStatement","src":"2379:31:24"},{"expression":{"arguments":[{"id":4563,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4533,"src":"2456:4:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4564,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4535,"src":"2462:2:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4565,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4537,"src":"2466:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"arguments":[{"id":4559,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2436:4:24","typeDescriptions":{"typeIdentifier":"t_contract$_TrustifiedNonTransferable_$4625","typeString":"contract TrustifiedNonTransferable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TrustifiedNonTransferable_$4625","typeString":"contract TrustifiedNonTransferable"}],"id":4558,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2428:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4557,"name":"address","nodeType":"ElementaryTypeName","src":"2428:7:24","typeDescriptions":{}}},"id":4560,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2428:13:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4556,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2764,"src":"2420:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$2764_$","typeString":"type(contract IERC721)"}},"id":4561,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2420:22:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$2764","typeString":"contract IERC721"}},"id":4562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":2729,"src":"2420:35:24","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) external"}},"id":4566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2420:54:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4567,"nodeType":"ExpressionStatement","src":"2420:54:24"},{"eventCall":{"arguments":[{"id":4569,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4533,"src":"2505:4:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4570,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4535,"src":"2511:2:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4571,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4537,"src":"2515:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4568,"name":"TokenTransfered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4352,"src":"2489:15:24","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2489:34:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4573,"nodeType":"EmitStatement","src":"2484:39:24"},{"expression":{"id":4578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4574,"name":"transferStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4338,"src":"2533:14:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":4576,"indexExpression":{"id":4575,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4537,"src":"2548:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2533:23:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":4577,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2559:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2533:30:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4579,"nodeType":"ExpressionStatement","src":"2533:30:24"}]},"functionSelector":"7b2eb35c","id":4581,"implemented":true,"kind":"function","modifiers":[],"name":"transferToken","nameLocation":"2121:13:24","nodeType":"FunctionDefinition","parameters":{"id":4540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4533,"mutability":"mutable","name":"from","nameLocation":"2152:4:24","nodeType":"VariableDeclaration","scope":4581,"src":"2144:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4532,"name":"address","nodeType":"ElementaryTypeName","src":"2144:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4535,"mutability":"mutable","name":"to","nameLocation":"2174:2:24","nodeType":"VariableDeclaration","scope":4581,"src":"2166:10:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4534,"name":"address","nodeType":"ElementaryTypeName","src":"2166:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4537,"mutability":"mutable","name":"tokenId","nameLocation":"2194:7:24","nodeType":"VariableDeclaration","scope":4581,"src":"2186:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4536,"name":"uint256","nodeType":"ElementaryTypeName","src":"2186:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4539,"mutability":"mutable","name":"tokenURI","nameLocation":"2225:8:24","nodeType":"VariableDeclaration","scope":4581,"src":"2211:22:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4538,"name":"string","nodeType":"ElementaryTypeName","src":"2211:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2134:105:24"},"returnParameters":{"id":4541,"nodeType":"ParameterList","parameters":[],"src":"2247:0:24"},"scope":4625,"src":"2112:458:24","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4623,"nodeType":"Block","src":"2657:282:24","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":4591,"name":"transferStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4338,"src":"2688:14:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":4593,"indexExpression":{"id":4592,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4587,"src":"2703:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2688:23:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"74727565","id":4594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2715:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2688:31:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5468697320746f6b656e2063616e206e6f74206265207472616e7366657272656421","id":4596,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2733:36:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_d5a66e7313a9aec57702e7cec57da779ab04b86d2407767a8ac34c46f27c720d","typeString":"literal_string \"This token can not be transferred!\""},"value":"This token can not be transferred!"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d5a66e7313a9aec57702e7cec57da779ab04b86d2407767a8ac34c46f27c720d","typeString":"literal_string \"This token can not be transferred!\""}],"id":4590,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2667:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2667:112:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4598,"nodeType":"ExpressionStatement","src":"2667:112:24"},{"expression":{"arguments":[{"id":4606,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4583,"src":"2825:4:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4607,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4585,"src":"2831:2:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4608,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4587,"src":"2835:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"arguments":[{"id":4602,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2805:4:24","typeDescriptions":{"typeIdentifier":"t_contract$_TrustifiedNonTransferable_$4625","typeString":"contract TrustifiedNonTransferable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TrustifiedNonTransferable_$4625","typeString":"contract TrustifiedNonTransferable"}],"id":4601,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2797:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4600,"name":"address","nodeType":"ElementaryTypeName","src":"2797:7:24","typeDescriptions":{}}},"id":4603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2797:13:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4599,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2764,"src":"2789:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$2764_$","typeString":"type(contract IERC721)"}},"id":4604,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2789:22:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$2764","typeString":"contract IERC721"}},"id":4605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":2729,"src":"2789:35:24","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) external"}},"id":4609,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2789:54:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4610,"nodeType":"ExpressionStatement","src":"2789:54:24"},{"eventCall":{"arguments":[{"id":4612,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4583,"src":"2874:4:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4613,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4585,"src":"2880:2:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4614,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4587,"src":"2884:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4611,"name":"TokenTransfered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4352,"src":"2858:15:24","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2858:34:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4616,"nodeType":"EmitStatement","src":"2853:39:24"},{"expression":{"id":4621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4617,"name":"transferStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4338,"src":"2902:14:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":4619,"indexExpression":{"id":4618,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4587,"src":"2917:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2902:23:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":4620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2928:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2902:30:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4622,"nodeType":"ExpressionStatement","src":"2902:30:24"}]},"functionSelector":"deeb9a3f","id":4624,"implemented":true,"kind":"function","modifiers":[],"name":"transferBadgesToken","nameLocation":"2587:19:24","nodeType":"FunctionDefinition","parameters":{"id":4588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4583,"mutability":"mutable","name":"from","nameLocation":"2615:4:24","nodeType":"VariableDeclaration","scope":4624,"src":"2607:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4582,"name":"address","nodeType":"ElementaryTypeName","src":"2607:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4585,"mutability":"mutable","name":"to","nameLocation":"2629:2:24","nodeType":"VariableDeclaration","scope":4624,"src":"2621:10:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4584,"name":"address","nodeType":"ElementaryTypeName","src":"2621:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4587,"mutability":"mutable","name":"tokenId","nameLocation":"2641:7:24","nodeType":"VariableDeclaration","scope":4624,"src":"2633:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4586,"name":"uint256","nodeType":"ElementaryTypeName","src":"2633:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2606:43:24"},"returnParameters":{"id":4589,"nodeType":"ParameterList","parameters":[],"src":"2657:0:24"},"scope":4625,"src":"2578:361:24","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":4626,"src":"288:2653:24","usedErrors":[]}],"src":"46:2896:24"},"id":24},"contracts/Trustified.sol":{"ast":{"absolutePath":"contracts/Trustified.sol","exportedSymbols":{"Address":[3139],"Context":[3161],"Counters":[3235],"ERC165":[3434],"ERC721":[2648],"ERC721URIStorage":[5224],"IERC165":[3446],"IERC721":[2764],"IERC721Metadata":[2809],"IERC721Receiver":[2782],"Math":[4311],"ReentrancyGuard":[1703],"Strings":[3410],"Trustified":[4905]},"id":4906,"license":"MIT OR Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":4627,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"46:23:25"},{"absolutePath":"@openzeppelin/contracts/utils/Counters.sol","file":"@openzeppelin/contracts/utils/Counters.sol","id":4628,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4906,"sourceUnit":3236,"src":"71:52:25","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/security/ReentrancyGuard.sol","file":"@openzeppelin/contracts/security/ReentrancyGuard.sol","id":4629,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4906,"sourceUnit":1704,"src":"124:62:25","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"@openzeppelin/contracts/token/ERC721/ERC721.sol","id":4630,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4906,"sourceUnit":2649,"src":"187:57:25","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/comman/FERC721URIStorage.sol","file":"./comman/FERC721URIStorage.sol","id":4631,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4906,"sourceUnit":5225,"src":"246:40:25","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4632,"name":"ERC721URIStorage","nodeType":"IdentifierPath","referencedDeclaration":5224,"src":"311:16:25"},"id":4633,"nodeType":"InheritanceSpecifier","src":"311:16:25"}],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4905,"linearizedBaseContracts":[4905,5224,2648,2809,2764,3434,3446,3161],"name":"Trustified","nameLocation":"297:10:25","nodeType":"ContractDefinition","nodes":[{"id":4637,"libraryName":{"id":4634,"name":"Counters","nodeType":"IdentifierPath","referencedDeclaration":3235,"src":"340:8:25"},"nodeType":"UsingForDirective","src":"334:36:25","typeName":{"id":4636,"nodeType":"UserDefinedTypeName","pathNode":{"id":4635,"name":"Counters.Counter","nodeType":"IdentifierPath","referencedDeclaration":3167,"src":"353:16:25"},"referencedDeclaration":3167,"src":"353:16:25","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage_ptr","typeString":"struct Counters.Counter"}}},{"constant":false,"id":4640,"mutability":"mutable","name":"_tokenIdCounter","nameLocation":"400:15:25","nodeType":"VariableDeclaration","scope":4905,"src":"375:40:25","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage","typeString":"struct Counters.Counter"},"typeName":{"id":4639,"nodeType":"UserDefinedTypeName","pathNode":{"id":4638,"name":"Counters.Counter","nodeType":"IdentifierPath","referencedDeclaration":3167,"src":"375:16:25"},"referencedDeclaration":3167,"src":"375:16:25","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"private"},{"constant":false,"id":4643,"mutability":"mutable","name":"_eventIdCounter","nameLocation":"446:15:25","nodeType":"VariableDeclaration","scope":4905,"src":"421:40:25","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage","typeString":"struct Counters.Counter"},"typeName":{"id":4642,"nodeType":"UserDefinedTypeName","pathNode":{"id":4641,"name":"Counters.Counter","nodeType":"IdentifierPath","referencedDeclaration":3167,"src":"421:16:25"},"referencedDeclaration":3167,"src":"421:16:25","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"private"},{"constant":false,"functionSelector":"eed8cc35","id":4648,"mutability":"mutable","name":"tokenIds","nameLocation":"505:8:25","nodeType":"VariableDeclaration","scope":4905,"src":"468:45:25","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(uint256 => uint256[])"},"typeName":{"id":4647,"keyType":{"id":4644,"name":"uint256","nodeType":"ElementaryTypeName","src":"476:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"468:29:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(uint256 => uint256[])"},"valueType":{"baseType":{"id":4645,"name":"uint256","nodeType":"ElementaryTypeName","src":"487:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4646,"nodeType":"ArrayTypeName","src":"487:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"visibility":"public"},{"anonymous":false,"id":4654,"name":"TokenMinted","nameLocation":"526:11:25","nodeType":"EventDefinition","parameters":{"id":4653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4650,"indexed":false,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4654,"src":"538:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4649,"name":"address","nodeType":"ElementaryTypeName","src":"538:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4652,"indexed":false,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4654,"src":"547:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4651,"name":"uint256","nodeType":"ElementaryTypeName","src":"547:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"537:18:25"},"src":"520:36:25"},{"anonymous":false,"id":4662,"name":"TokenTransfered","nameLocation":"567:15:25","nodeType":"EventDefinition","parameters":{"id":4661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4656,"indexed":false,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4662,"src":"583:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4655,"name":"address","nodeType":"ElementaryTypeName","src":"583:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4658,"indexed":false,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4662,"src":"592:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4657,"name":"address","nodeType":"ElementaryTypeName","src":"592:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4660,"indexed":false,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4662,"src":"601:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4659,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"582:27:25"},"src":"561:49:25"},{"body":{"id":4669,"nodeType":"Block","src":"658:2:25","statements":[]},"id":4670,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"hexValue":"54727573746966696564","id":4665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"637:12:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_8fedae799be8d11a50e541a094ed7c48822c27fbfd37d7cfebb29172b2bbb0ec","typeString":"literal_string \"Trustified\""},"value":"Trustified"},{"hexValue":"54464e","id":4666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"651:5:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_a0a72108331f47f1c1cb3ccd5d608590a45068caa5e52b7efa91a409433f8fb4","typeString":"literal_string \"TFN\""},"value":"TFN"}],"id":4667,"kind":"baseConstructorSpecifier","modifierName":{"id":4664,"name":"ERC721","nodeType":"IdentifierPath","referencedDeclaration":2648,"src":"630:6:25"},"nodeType":"ModifierInvocation","src":"630:27:25"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4663,"nodeType":"ParameterList","parameters":[],"src":"627:2:25"},"returnParameters":{"id":4668,"nodeType":"ParameterList","parameters":[],"src":"658:0:25"},"scope":4905,"src":"616:44:25","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4696,"nodeType":"Block","src":"711:161:25","statements":[{"assignments":[4676],"declarations":[{"constant":false,"id":4676,"mutability":"mutable","name":"tokenId","nameLocation":"729:7:25","nodeType":"VariableDeclaration","scope":4696,"src":"721:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4675,"name":"uint256","nodeType":"ElementaryTypeName","src":"721:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4680,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4677,"name":"_tokenIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4640,"src":"739:15:25","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage","typeString":"struct Counters.Counter storage ref"}},"id":4678,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"current","nodeType":"MemberAccess","referencedDeclaration":3179,"src":"739:23:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$3167_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$3167_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer) view returns (uint256)"}},"id":4679,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"739:25:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"721:43:25"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4681,"name":"_tokenIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4640,"src":"774:15:25","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage","typeString":"struct Counters.Counter storage ref"}},"id":4683,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"increment","nodeType":"MemberAccess","referencedDeclaration":3193,"src":"774:25:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Counter_$3167_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$3167_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer)"}},"id":4684,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"774:27:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4685,"nodeType":"ExpressionStatement","src":"774:27:25"},{"expression":{"arguments":[{"arguments":[{"id":4689,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"825:4:25","typeDescriptions":{"typeIdentifier":"t_contract$_Trustified_$4905","typeString":"contract Trustified"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Trustified_$4905","typeString":"contract Trustified"}],"id":4688,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"817:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4687,"name":"address","nodeType":"ElementaryTypeName","src":"817:7:25","typeDescriptions":{}}},"id":4690,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"817:13:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4691,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4676,"src":"832:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4686,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2304,"src":"811:5:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"811:29:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4693,"nodeType":"ExpressionStatement","src":"811:29:25"},{"expression":{"id":4694,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4676,"src":"858:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4674,"id":4695,"nodeType":"Return","src":"851:14:25"}]},"functionSelector":"6871ee40","id":4697,"implemented":true,"kind":"function","modifiers":[],"name":"safeMint","nameLocation":"675:8:25","nodeType":"FunctionDefinition","parameters":{"id":4671,"nodeType":"ParameterList","parameters":[],"src":"683:2:25"},"returnParameters":{"id":4674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4673,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4697,"src":"702:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4672,"name":"uint256","nodeType":"ElementaryTypeName","src":"702:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"701:9:25"},"scope":4905,"src":"666:206:25","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4730,"nodeType":"Block","src":"951:201:25","statements":[{"assignments":[4705],"declarations":[{"constant":false,"id":4705,"mutability":"mutable","name":"tokenId","nameLocation":"969:7:25","nodeType":"VariableDeclaration","scope":4730,"src":"961:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4704,"name":"uint256","nodeType":"ElementaryTypeName","src":"961:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4709,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4706,"name":"_tokenIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4640,"src":"979:15:25","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage","typeString":"struct Counters.Counter storage ref"}},"id":4707,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"current","nodeType":"MemberAccess","referencedDeclaration":3179,"src":"979:23:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$3167_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$3167_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer) view returns (uint256)"}},"id":4708,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"979:25:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"961:43:25"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4710,"name":"_tokenIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4640,"src":"1014:15:25","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage","typeString":"struct Counters.Counter storage ref"}},"id":4712,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"increment","nodeType":"MemberAccess","referencedDeclaration":3193,"src":"1014:25:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Counter_$3167_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$3167_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer)"}},"id":4713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1014:27:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4714,"nodeType":"ExpressionStatement","src":"1014:27:25"},{"expression":{"arguments":[{"arguments":[{"id":4718,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1065:4:25","typeDescriptions":{"typeIdentifier":"t_contract$_Trustified_$4905","typeString":"contract Trustified"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Trustified_$4905","typeString":"contract Trustified"}],"id":4717,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1057:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4716,"name":"address","nodeType":"ElementaryTypeName","src":"1057:7:25","typeDescriptions":{}}},"id":4719,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1057:13:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4720,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4705,"src":"1072:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4715,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2304,"src":"1051:5:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1051:29:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4722,"nodeType":"ExpressionStatement","src":"1051:29:25"},{"expression":{"arguments":[{"id":4724,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4705,"src":"1103:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4725,"name":"tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4699,"src":"1112:8:25","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4723,"name":"_setTokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5193,"src":"1090:12:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":4726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1090:31:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4727,"nodeType":"ExpressionStatement","src":"1090:31:25"},{"expression":{"id":4728,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4705,"src":"1138:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4703,"id":4729,"nodeType":"Return","src":"1131:14:25"}]},"functionSelector":"265d9a6c","id":4731,"implemented":true,"kind":"function","modifiers":[],"name":"safeMintBadge","nameLocation":"888:13:25","nodeType":"FunctionDefinition","parameters":{"id":4700,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4699,"mutability":"mutable","name":"tokenURI","nameLocation":"916:8:25","nodeType":"VariableDeclaration","scope":4731,"src":"902:22:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4698,"name":"string","nodeType":"ElementaryTypeName","src":"902:6:25","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"901:24:25"},"returnParameters":{"id":4703,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4702,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4731,"src":"942:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4701,"name":"uint256","nodeType":"ElementaryTypeName","src":"942:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"941:9:25"},"scope":4905,"src":"879:273:25","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4777,"nodeType":"Block","src":"1208:290:25","statements":[{"assignments":[4737],"declarations":[{"constant":false,"id":4737,"mutability":"mutable","name":"eventId","nameLocation":"1226:7:25","nodeType":"VariableDeclaration","scope":4777,"src":"1218:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4736,"name":"uint256","nodeType":"ElementaryTypeName","src":"1218:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4741,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4738,"name":"_eventIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4643,"src":"1236:15:25","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage","typeString":"struct Counters.Counter storage ref"}},"id":4739,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"current","nodeType":"MemberAccess","referencedDeclaration":3179,"src":"1236:23:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$3167_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$3167_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer) view returns (uint256)"}},"id":4740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1236:25:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1218:43:25"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4742,"name":"_eventIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4643,"src":"1271:15:25","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage","typeString":"struct Counters.Counter storage ref"}},"id":4744,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"increment","nodeType":"MemberAccess","referencedDeclaration":3193,"src":"1271:25:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Counter_$3167_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$3167_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer)"}},"id":4745,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1271:27:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4746,"nodeType":"ExpressionStatement","src":"1271:27:25"},{"body":{"id":4769,"nodeType":"Block","src":"1347:98:25","statements":[{"assignments":[4758],"declarations":[{"constant":false,"id":4758,"mutability":"mutable","name":"tokenId","nameLocation":"1369:7:25","nodeType":"VariableDeclaration","scope":4769,"src":"1361:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4757,"name":"uint256","nodeType":"ElementaryTypeName","src":"1361:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4761,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":4759,"name":"safeMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4697,"src":"1379:8:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$_t_uint256_$","typeString":"function () returns (uint256)"}},"id":4760,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1379:10:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1361:28:25"},{"expression":{"arguments":[{"id":4766,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4758,"src":"1426:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":4762,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4648,"src":"1403:8:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(uint256 => uint256[] storage ref)"}},"id":4764,"indexExpression":{"id":4763,"name":"eventId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4737,"src":"1412:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1403:17:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":4765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"push","nodeType":"MemberAccess","src":"1403:22:25","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$bound_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":4767,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1403:31:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4768,"nodeType":"ExpressionStatement","src":"1403:31:25"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4751,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4748,"src":"1328:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4752,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4733,"src":"1332:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1328:12:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4770,"initializationExpression":{"assignments":[4748],"declarations":[{"constant":false,"id":4748,"mutability":"mutable","name":"i","nameLocation":"1321:1:25","nodeType":"VariableDeclaration","scope":4770,"src":"1313:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4747,"name":"uint256","nodeType":"ElementaryTypeName","src":"1313:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4750,"initialValue":{"hexValue":"30","id":4749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1313:13:25"},"loopExpression":{"expression":{"id":4755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1342:3:25","subExpression":{"id":4754,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4748,"src":"1342:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4756,"nodeType":"ExpressionStatement","src":"1342:3:25"},"nodeType":"ForStatement","src":"1308:137:25"},{"eventCall":{"arguments":[{"expression":{"id":4772,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1471:3:25","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1471:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4774,"name":"eventId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4737,"src":"1483:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4771,"name":"TokenMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4654,"src":"1459:11:25","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4775,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1459:32:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4776,"nodeType":"EmitStatement","src":"1454:37:25"}]},"functionSelector":"2743dfd0","id":4778,"implemented":true,"kind":"function","modifiers":[],"name":"bulkMintERC721","nameLocation":"1168:14:25","nodeType":"FunctionDefinition","parameters":{"id":4734,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4733,"mutability":"mutable","name":"quantity","nameLocation":"1191:8:25","nodeType":"VariableDeclaration","scope":4778,"src":"1183:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4732,"name":"uint256","nodeType":"ElementaryTypeName","src":"1183:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1182:18:25"},"returnParameters":{"id":4735,"nodeType":"ParameterList","parameters":[],"src":"1208:0:25"},"scope":4905,"src":"1159:339:25","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4827,"nodeType":"Block","src":"1585:303:25","statements":[{"assignments":[4786],"declarations":[{"constant":false,"id":4786,"mutability":"mutable","name":"eventId","nameLocation":"1603:7:25","nodeType":"VariableDeclaration","scope":4827,"src":"1595:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4785,"name":"uint256","nodeType":"ElementaryTypeName","src":"1595:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4790,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4787,"name":"_eventIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4643,"src":"1613:15:25","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage","typeString":"struct Counters.Counter storage ref"}},"id":4788,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"current","nodeType":"MemberAccess","referencedDeclaration":3179,"src":"1613:23:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$3167_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$3167_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer) view returns (uint256)"}},"id":4789,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1613:25:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1595:43:25"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4791,"name":"_eventIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4643,"src":"1648:15:25","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage","typeString":"struct Counters.Counter storage ref"}},"id":4793,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"increment","nodeType":"MemberAccess","referencedDeclaration":3193,"src":"1648:25:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Counter_$3167_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$3167_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer)"}},"id":4794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1648:27:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4795,"nodeType":"ExpressionStatement","src":"1648:27:25"},{"body":{"id":4819,"nodeType":"Block","src":"1724:111:25","statements":[{"assignments":[4807],"declarations":[{"constant":false,"id":4807,"mutability":"mutable","name":"tokenId","nameLocation":"1746:7:25","nodeType":"VariableDeclaration","scope":4819,"src":"1738:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4806,"name":"uint256","nodeType":"ElementaryTypeName","src":"1738:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4811,"initialValue":{"arguments":[{"id":4809,"name":"tokenUri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4780,"src":"1770:8:25","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4808,"name":"safeMintBadge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"1756:13:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$returns$_t_uint256_$","typeString":"function (string memory) returns (uint256)"}},"id":4810,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1756:23:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1738:41:25"},{"expression":{"arguments":[{"id":4816,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4807,"src":"1816:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":4812,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4648,"src":"1793:8:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(uint256 => uint256[] storage ref)"}},"id":4814,"indexExpression":{"id":4813,"name":"eventId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4786,"src":"1802:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1793:17:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":4815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"push","nodeType":"MemberAccess","src":"1793:22:25","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$bound_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":4817,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1793:31:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4818,"nodeType":"ExpressionStatement","src":"1793:31:25"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4800,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"1705:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4801,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4782,"src":"1709:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1705:12:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4820,"initializationExpression":{"assignments":[4797],"declarations":[{"constant":false,"id":4797,"mutability":"mutable","name":"i","nameLocation":"1698:1:25","nodeType":"VariableDeclaration","scope":4820,"src":"1690:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4796,"name":"uint256","nodeType":"ElementaryTypeName","src":"1690:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4799,"initialValue":{"hexValue":"30","id":4798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1702:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1690:13:25"},"loopExpression":{"expression":{"id":4804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1719:3:25","subExpression":{"id":4803,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"1719:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4805,"nodeType":"ExpressionStatement","src":"1719:3:25"},"nodeType":"ForStatement","src":"1685:150:25"},{"eventCall":{"arguments":[{"expression":{"id":4822,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1861:3:25","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1861:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4824,"name":"eventId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4786,"src":"1873:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4821,"name":"TokenMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4654,"src":"1849:11:25","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1849:32:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4826,"nodeType":"EmitStatement","src":"1844:37:25"}]},"functionSelector":"d4d94b05","id":4828,"implemented":true,"kind":"function","modifiers":[],"name":"bulkMintBadgesERC721","nameLocation":"1515:20:25","nodeType":"FunctionDefinition","parameters":{"id":4783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4780,"mutability":"mutable","name":"tokenUri","nameLocation":"1550:8:25","nodeType":"VariableDeclaration","scope":4828,"src":"1536:22:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4779,"name":"string","nodeType":"ElementaryTypeName","src":"1536:6:25","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4782,"mutability":"mutable","name":"quantity","nameLocation":"1568:8:25","nodeType":"VariableDeclaration","scope":4828,"src":"1560:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4781,"name":"uint256","nodeType":"ElementaryTypeName","src":"1560:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1535:42:25"},"returnParameters":{"id":4784,"nodeType":"ParameterList","parameters":[],"src":"1585:0:25"},"scope":4905,"src":"1506:382:25","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4840,"nodeType":"Block","src":"1999:41:25","statements":[{"expression":{"baseExpression":{"id":4836,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4648,"src":"2016:8:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(uint256 => uint256[] storage ref)"}},"id":4838,"indexExpression":{"id":4837,"name":"eventId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4830,"src":"2025:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2016:17:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"functionReturnParameters":4835,"id":4839,"nodeType":"Return","src":"2009:24:25"}]},"functionSelector":"57991d30","id":4841,"implemented":true,"kind":"function","modifiers":[],"name":"getTokenIds","nameLocation":"1903:11:25","nodeType":"FunctionDefinition","parameters":{"id":4831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4830,"mutability":"mutable","name":"eventId","nameLocation":"1923:7:25","nodeType":"VariableDeclaration","scope":4841,"src":"1915:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4829,"name":"uint256","nodeType":"ElementaryTypeName","src":"1915:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1914:17:25"},"returnParameters":{"id":4835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4834,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4841,"src":"1977:16:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4832,"name":"uint256","nodeType":"ElementaryTypeName","src":"1977:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4833,"nodeType":"ArrayTypeName","src":"1977:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1976:18:25"},"scope":4905,"src":"1894:146:25","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4875,"nodeType":"Block","src":"2181:168:25","statements":[{"expression":{"arguments":[{"id":4853,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4847,"src":"2204:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4854,"name":"tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4849,"src":"2213:8:25","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4852,"name":"_setTokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5193,"src":"2191:12:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":4855,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2191:31:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4856,"nodeType":"ExpressionStatement","src":"2191:31:25"},{"expression":{"arguments":[{"id":4864,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4843,"src":"2268:4:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4865,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"2274:2:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4866,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4847,"src":"2278:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"arguments":[{"id":4860,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2248:4:25","typeDescriptions":{"typeIdentifier":"t_contract$_Trustified_$4905","typeString":"contract Trustified"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Trustified_$4905","typeString":"contract Trustified"}],"id":4859,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2240:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4858,"name":"address","nodeType":"ElementaryTypeName","src":"2240:7:25","typeDescriptions":{}}},"id":4861,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2240:13:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4857,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2764,"src":"2232:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$2764_$","typeString":"type(contract IERC721)"}},"id":4862,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2232:22:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$2764","typeString":"contract IERC721"}},"id":4863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":2729,"src":"2232:35:25","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) external"}},"id":4867,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2232:54:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4868,"nodeType":"ExpressionStatement","src":"2232:54:25"},{"eventCall":{"arguments":[{"id":4870,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4843,"src":"2324:4:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4871,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"2330:2:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4872,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4847,"src":"2334:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4869,"name":"TokenTransfered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4662,"src":"2308:15:25","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4873,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2308:34:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4874,"nodeType":"EmitStatement","src":"2303:39:25"}]},"functionSelector":"7b2eb35c","id":4876,"implemented":true,"kind":"function","modifiers":[],"name":"transferToken","nameLocation":"2055:13:25","nodeType":"FunctionDefinition","parameters":{"id":4850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4843,"mutability":"mutable","name":"from","nameLocation":"2086:4:25","nodeType":"VariableDeclaration","scope":4876,"src":"2078:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4842,"name":"address","nodeType":"ElementaryTypeName","src":"2078:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4845,"mutability":"mutable","name":"to","nameLocation":"2108:2:25","nodeType":"VariableDeclaration","scope":4876,"src":"2100:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4844,"name":"address","nodeType":"ElementaryTypeName","src":"2100:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4847,"mutability":"mutable","name":"tokenId","nameLocation":"2128:7:25","nodeType":"VariableDeclaration","scope":4876,"src":"2120:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4846,"name":"uint256","nodeType":"ElementaryTypeName","src":"2120:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4849,"mutability":"mutable","name":"tokenURI","nameLocation":"2159:8:25","nodeType":"VariableDeclaration","scope":4876,"src":"2145:22:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4848,"name":"string","nodeType":"ElementaryTypeName","src":"2145:6:25","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2068:105:25"},"returnParameters":{"id":4851,"nodeType":"ParameterList","parameters":[],"src":"2181:0:25"},"scope":4905,"src":"2046:303:25","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4903,"nodeType":"Block","src":"2466:120:25","statements":[{"expression":{"arguments":[{"id":4892,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4878,"src":"2512:4:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4893,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4880,"src":"2518:2:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4894,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4882,"src":"2522:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"arguments":[{"id":4888,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2492:4:25","typeDescriptions":{"typeIdentifier":"t_contract$_Trustified_$4905","typeString":"contract Trustified"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Trustified_$4905","typeString":"contract Trustified"}],"id":4887,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2484:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4886,"name":"address","nodeType":"ElementaryTypeName","src":"2484:7:25","typeDescriptions":{}}},"id":4889,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2484:13:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4885,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2764,"src":"2476:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$2764_$","typeString":"type(contract IERC721)"}},"id":4890,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2476:22:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$2764","typeString":"contract IERC721"}},"id":4891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":2729,"src":"2476:35:25","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) external"}},"id":4895,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2476:54:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4896,"nodeType":"ExpressionStatement","src":"2476:54:25"},{"eventCall":{"arguments":[{"id":4898,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4878,"src":"2561:4:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4899,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4880,"src":"2567:2:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4900,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4882,"src":"2571:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4897,"name":"TokenTransfered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4662,"src":"2545:15:25","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2545:34:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4902,"nodeType":"EmitStatement","src":"2540:39:25"}]},"functionSelector":"deeb9a3f","id":4904,"implemented":true,"kind":"function","modifiers":[],"name":"transferBadgesToken","nameLocation":"2366:19:25","nodeType":"FunctionDefinition","parameters":{"id":4883,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4878,"mutability":"mutable","name":"from","nameLocation":"2403:4:25","nodeType":"VariableDeclaration","scope":4904,"src":"2395:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4877,"name":"address","nodeType":"ElementaryTypeName","src":"2395:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4880,"mutability":"mutable","name":"to","nameLocation":"2425:2:25","nodeType":"VariableDeclaration","scope":4904,"src":"2417:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4879,"name":"address","nodeType":"ElementaryTypeName","src":"2417:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4882,"mutability":"mutable","name":"tokenId","nameLocation":"2445:7:25","nodeType":"VariableDeclaration","scope":4904,"src":"2437:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4881,"name":"uint256","nodeType":"ElementaryTypeName","src":"2437:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2385:73:25"},"returnParameters":{"id":4884,"nodeType":"ParameterList","parameters":[],"src":"2466:0:25"},"scope":4905,"src":"2357:229:25","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":4906,"src":"288:2300:25","usedErrors":[]}],"src":"46:2543:25"},"id":25},"contracts/TrustifiedCred.sol":{"ast":{"absolutePath":"contracts/TrustifiedCred.sol","exportedSymbols":{"Context":[1152],"Counters":[3235],"CredentialCore":[593],"CredentialCreds":[927],"CredsIssuer":[494],"CredsProtocolRegistry":[960],"ICredential":[1016],"ICredentialCore":[1025],"ICredentialCreds":[1105],"IVerifier":[1130],"IncrementalBinaryTree":[1649],"IncrementalTreeData":[1197],"PoseidonT3":[1165],"SNARK_SCALAR_FIELD":[499],"TrustifiedCred":[5013]},"id":5014,"license":"MIT OR Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":4907,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"46:23:26"},{"absolutePath":"@openzeppelin/contracts/utils/Counters.sol","file":"@openzeppelin/contracts/utils/Counters.sol","id":4908,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5014,"sourceUnit":3236,"src":"71:52:26","symbolAliases":[],"unitAlias":""},{"absolutePath":"@creds-protocol/contracts/CredsIssuer.sol","file":"@creds-protocol/contracts/CredsIssuer.sol","id":4909,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5014,"sourceUnit":495,"src":"124:51:26","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4910,"name":"CredsIssuer","nodeType":"IdentifierPath","referencedDeclaration":494,"src":"204:11:26"},"id":4911,"nodeType":"InheritanceSpecifier","src":"204:11:26"}],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5013,"linearizedBaseContracts":[5013,494,927,1105,1152,593,1025,1016],"name":"TrustifiedCred","nameLocation":"186:14:26","nodeType":"ContractDefinition","nodes":[{"id":4915,"libraryName":{"id":4912,"name":"Counters","nodeType":"IdentifierPath","referencedDeclaration":3235,"src":"228:8:26"},"nodeType":"UsingForDirective","src":"222:36:26","typeName":{"id":4914,"nodeType":"UserDefinedTypeName","pathNode":{"id":4913,"name":"Counters.Counter","nodeType":"IdentifierPath","referencedDeclaration":3167,"src":"241:16:26"},"referencedDeclaration":3167,"src":"241:16:26","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage_ptr","typeString":"struct Counters.Counter"}}},{"constant":false,"id":4918,"mutability":"mutable","name":"_credIds","nameLocation":"288:8:26","nodeType":"VariableDeclaration","scope":5013,"src":"263:33:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage","typeString":"struct Counters.Counter"},"typeName":{"id":4917,"nodeType":"UserDefinedTypeName","pathNode":{"id":4916,"name":"Counters.Counter","nodeType":"IdentifierPath","referencedDeclaration":3167,"src":"263:16:26"},"referencedDeclaration":3167,"src":"263:16:26","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"private"},{"constant":false,"functionSelector":"8da5cb5b","id":4920,"mutability":"mutable","name":"owner","nameLocation":"318:5:26","nodeType":"VariableDeclaration","scope":5013,"src":"303:20:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4919,"name":"address","nodeType":"ElementaryTypeName","src":"303:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"anonymous":false,"id":4932,"name":"CredCreated","nameLocation":"336:11:26","nodeType":"EventDefinition","parameters":{"id":4931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4922,"indexed":false,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4932,"src":"348:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4921,"name":"address","nodeType":"ElementaryTypeName","src":"348:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4924,"indexed":false,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4932,"src":"357:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4923,"name":"uint256","nodeType":"ElementaryTypeName","src":"357:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4926,"indexed":false,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4932,"src":"366:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4925,"name":"uint256","nodeType":"ElementaryTypeName","src":"366:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4928,"indexed":false,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4932,"src":"375:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4927,"name":"uint256","nodeType":"ElementaryTypeName","src":"375:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4930,"indexed":false,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4932,"src":"384:6:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4929,"name":"string","nodeType":"ElementaryTypeName","src":"384:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"347:44:26"},"src":"330:62:26"},{"anonymous":false,"id":4940,"name":"IssueCred","nameLocation":"403:9:26","nodeType":"EventDefinition","parameters":{"id":4939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4934,"indexed":false,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4940,"src":"413:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4933,"name":"address","nodeType":"ElementaryTypeName","src":"413:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4936,"indexed":false,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4940,"src":"422:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4935,"name":"uint256","nodeType":"ElementaryTypeName","src":"422:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4938,"indexed":false,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4940,"src":"431:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4937,"name":"uint256","nodeType":"ElementaryTypeName","src":"431:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"412:27:26"},"src":"397:43:26"},{"body":{"id":4959,"nodeType":"Block","src":"660:2:26","statements":[]},"id":4960,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":4953,"name":"_verifiers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4944,"src":"611:10:26","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr","typeString":"struct ICredential.Verifier memory[] memory"}},{"id":4954,"name":"_issuer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4946,"src":"623:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4955,"name":"_issuerName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4948,"src":"632:11:26","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":4956,"name":"_issuerSymbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4950,"src":"645:13:26","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"id":4957,"kind":"baseConstructorSpecifier","modifierName":{"id":4952,"name":"CredsIssuer","nodeType":"IdentifierPath","referencedDeclaration":494,"src":"599:11:26"},"nodeType":"ModifierInvocation","src":"599:60:26"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4944,"mutability":"mutable","name":"_verifiers","nameLocation":"485:10:26","nodeType":"VariableDeclaration","scope":4960,"src":"467:28:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr","typeString":"struct ICredential.Verifier[]"},"typeName":{"baseType":{"id":4942,"nodeType":"UserDefinedTypeName","pathNode":{"id":4941,"name":"Verifier","nodeType":"IdentifierPath","referencedDeclaration":993,"src":"467:8:26"},"referencedDeclaration":993,"src":"467:8:26","typeDescriptions":{"typeIdentifier":"t_struct$_Verifier_$993_storage_ptr","typeString":"struct ICredential.Verifier"}},"id":4943,"nodeType":"ArrayTypeName","src":"467:10:26","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Verifier_$993_storage_$dyn_storage_ptr","typeString":"struct ICredential.Verifier[]"}},"visibility":"internal"},{"constant":false,"id":4946,"mutability":"mutable","name":"_issuer","nameLocation":"513:7:26","nodeType":"VariableDeclaration","scope":4960,"src":"505:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4945,"name":"address","nodeType":"ElementaryTypeName","src":"505:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4948,"mutability":"mutable","name":"_issuerName","nameLocation":"544:11:26","nodeType":"VariableDeclaration","scope":4960,"src":"530:25:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4947,"name":"string","nodeType":"ElementaryTypeName","src":"530:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4950,"mutability":"mutable","name":"_issuerSymbol","nameLocation":"579:13:26","nodeType":"VariableDeclaration","scope":4960,"src":"565:27:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4949,"name":"string","nodeType":"ElementaryTypeName","src":"565:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"457:141:26"},"returnParameters":{"id":4958,"nodeType":"ParameterList","parameters":[],"src":"660:0:26"},"scope":5013,"src":"446:216:26","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4998,"nodeType":"Block","src":"791:315:26","statements":[{"assignments":[4970],"declarations":[{"constant":false,"id":4970,"mutability":"mutable","name":"_credId","nameLocation":"809:7:26","nodeType":"VariableDeclaration","scope":4998,"src":"801:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4969,"name":"uint256","nodeType":"ElementaryTypeName","src":"801:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4974,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4971,"name":"_credIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4918,"src":"819:8:26","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage","typeString":"struct Counters.Counter storage ref"}},"id":4972,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"current","nodeType":"MemberAccess","referencedDeclaration":3179,"src":"819:16:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$3167_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$3167_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer) view returns (uint256)"}},"id":4973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"819:18:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"801:36:26"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4975,"name":"_credIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4918,"src":"847:8:26","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3167_storage","typeString":"struct Counters.Counter storage ref"}},"id":4977,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"increment","nodeType":"MemberAccess","referencedDeclaration":3193,"src":"847:18:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Counter_$3167_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$3167_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer)"}},"id":4978,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"847:20:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4979,"nodeType":"ExpressionStatement","src":"847:20:26"},{"expression":{"arguments":[{"id":4981,"name":"_credId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4970,"src":"888:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4982,"name":"merkleTreeDepth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4962,"src":"897:15:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4983,"name":"zeroValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4964,"src":"914:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":4984,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"925:3:26","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"925:10:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4986,"name":"credURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4966,"src":"937:7:26","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4980,"name":"createCred","nodeType":"Identifier","overloadedDeclarations":[197,251],"referencedDeclaration":197,"src":"877:10:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_address_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,uint256,uint256,address,string memory)"}},"id":4987,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"877:68:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4988,"nodeType":"ExpressionStatement","src":"877:68:26"},{"eventCall":{"arguments":[{"expression":{"id":4990,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"985:3:26","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"985:10:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4992,"name":"_credId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4970,"src":"1009:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4993,"name":"merkleTreeDepth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4962,"src":"1030:15:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4994,"name":"zeroValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4964,"src":"1059:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4995,"name":"credURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4966,"src":"1082:7:26","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4989,"name":"CredCreated","nodeType":"Identifier","overloadedDeclarations":[4932,1045],"referencedDeclaration":4932,"src":"960:11:26","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (address,uint256,uint256,uint256,string memory)"}},"id":4996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"960:139:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4997,"nodeType":"EmitStatement","src":"955:144:26"}]},"functionSelector":"909d9ef7","id":4999,"implemented":true,"kind":"function","modifiers":[],"name":"issueCred","nameLocation":"677:9:26","nodeType":"FunctionDefinition","parameters":{"id":4967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4962,"mutability":"mutable","name":"merkleTreeDepth","nameLocation":"704:15:26","nodeType":"VariableDeclaration","scope":4999,"src":"696:23:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4961,"name":"uint256","nodeType":"ElementaryTypeName","src":"696:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4964,"mutability":"mutable","name":"zeroValue","nameLocation":"737:9:26","nodeType":"VariableDeclaration","scope":4999,"src":"729:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4963,"name":"uint256","nodeType":"ElementaryTypeName","src":"729:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4966,"mutability":"mutable","name":"credURI","nameLocation":"770:7:26","nodeType":"VariableDeclaration","scope":4999,"src":"756:21:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4965,"name":"string","nodeType":"ElementaryTypeName","src":"756:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"686:97:26"},"returnParameters":{"id":4968,"nodeType":"ParameterList","parameters":[],"src":"791:0:26"},"scope":5013,"src":"668:438:26","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5011,"nodeType":"Block","src":"1222:56:26","statements":[{"expression":{"arguments":[{"id":5007,"name":"credId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5001,"src":"1244:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5008,"name":"identityCommitment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5003,"src":"1252:18:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5006,"name":"addIdentity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":280,"src":"1232:11:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":5009,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1232:39:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5010,"nodeType":"ExpressionStatement","src":"1232:39:26"}]},"functionSelector":"e69743cd","id":5012,"implemented":true,"kind":"function","modifiers":[],"name":"claimCredToTrustifiedIssuer","nameLocation":"1121:27:26","nodeType":"FunctionDefinition","parameters":{"id":5004,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5001,"mutability":"mutable","name":"credId","nameLocation":"1166:6:26","nodeType":"VariableDeclaration","scope":5012,"src":"1158:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5000,"name":"uint256","nodeType":"ElementaryTypeName","src":"1158:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5003,"mutability":"mutable","name":"identityCommitment","nameLocation":"1190:18:26","nodeType":"VariableDeclaration","scope":5012,"src":"1182:26:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5002,"name":"uint256","nodeType":"ElementaryTypeName","src":"1182:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1148:66:26"},"returnParameters":{"id":5005,"nodeType":"ParameterList","parameters":[],"src":"1222:0:26"},"scope":5013,"src":"1112:166:26","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":5014,"src":"177:1103:26","usedErrors":[965,967,969,971,973,1030,1032,1034]}],"src":"46:1235:26"},"id":26},"contracts/TrustifiedCreds.sol":{"ast":{"absolutePath":"contracts/TrustifiedCreds.sol","exportedSymbols":{"Context":[1152],"Counters":[3235],"CredentialCore":[593],"CredentialCreds":[927],"CredsIssuer":[494],"CredsProtocolRegistry":[960],"ICredential":[1016],"ICredentialCore":[1025],"ICredentialCreds":[1105],"IVerifier":[1130],"IncrementalBinaryTree":[1649],"IncrementalTreeData":[1197],"PoseidonT3":[1165],"SNARK_SCALAR_FIELD":[499],"TrustifiedCred":[5013],"TrustifiedCreds":[5073]},"id":5074,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5015,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:27"},{"absolutePath":"contracts/TrustifiedCred.sol","file":"./TrustifiedCred.sol","id":5016,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5074,"sourceUnit":5014,"src":"57:30:27","symbolAliases":[],"unitAlias":""},{"absolutePath":"@creds-protocol/contracts/interfaces/ICredential.sol","file":"@creds-protocol/contracts/interfaces/ICredential.sol","id":5017,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5074,"sourceUnit":1017,"src":"88:62:27","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5018,"name":"ICredential","nodeType":"IdentifierPath","referencedDeclaration":1016,"src":"181:11:27"},"id":5019,"nodeType":"InheritanceSpecifier","src":"181:11:27"}],"contractDependencies":[5013],"contractKind":"contract","fullyImplemented":true,"id":5073,"linearizedBaseContracts":[5073,1016],"name":"TrustifiedCreds","nameLocation":"162:15:27","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":5024,"mutability":"mutable","name":"credIssuers","nameLocation":"237:11:27","nodeType":"VariableDeclaration","scope":5073,"src":"199:49:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(address => address[])"},"typeName":{"id":5023,"keyType":{"id":5020,"name":"address","nodeType":"ElementaryTypeName","src":"207:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"199:29:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(address => address[])"},"valueType":{"baseType":{"id":5021,"name":"address","nodeType":"ElementaryTypeName","src":"218:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5022,"nodeType":"ArrayTypeName","src":"218:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}}},"visibility":"private"},{"anonymous":false,"id":5030,"name":"createIssuer","nameLocation":"261:12:27","nodeType":"EventDefinition","parameters":{"id":5029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5026,"indexed":false,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5030,"src":"274:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5025,"name":"address","nodeType":"ElementaryTypeName","src":"274:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5028,"indexed":false,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5030,"src":"283:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5027,"name":"address","nodeType":"ElementaryTypeName","src":"283:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"273:18:27"},"src":"255:37:27"},{"body":{"id":5071,"nodeType":"Block","src":"472:233:27","statements":[{"assignments":[5044],"declarations":[{"constant":false,"id":5044,"mutability":"mutable","name":"_address","nameLocation":"490:8:27","nodeType":"VariableDeclaration","scope":5071,"src":"482:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5043,"name":"address","nodeType":"ElementaryTypeName","src":"482:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5056,"initialValue":{"arguments":[{"arguments":[{"id":5050,"name":"_verifiers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5034,"src":"541:10:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr","typeString":"struct ICredential.Verifier memory[] memory"}},{"id":5051,"name":"_issuer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5036,"src":"553:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5052,"name":"_issuerName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5038,"src":"562:11:27","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":5053,"name":"_issuerSymbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5040,"src":"575:13:27","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr","typeString":"struct ICredential.Verifier memory[] memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"NewExpression","src":"522:18:27","typeDescriptions":{"typeIdentifier":"t_function_creation_nonpayable$_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr_$_t_address_$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_contract$_TrustifiedCred_$5013_$","typeString":"function (struct ICredential.Verifier memory[] memory,address,string memory,string memory) returns (contract TrustifiedCred)"},"typeName":{"id":5048,"nodeType":"UserDefinedTypeName","pathNode":{"id":5047,"name":"TrustifiedCred","nodeType":"IdentifierPath","referencedDeclaration":5013,"src":"526:14:27"},"referencedDeclaration":5013,"src":"526:14:27","typeDescriptions":{"typeIdentifier":"t_contract$_TrustifiedCred_$5013","typeString":"contract TrustifiedCred"}}},"id":5054,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"522:67:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_TrustifiedCred_$5013","typeString":"contract TrustifiedCred"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TrustifiedCred_$5013","typeString":"contract TrustifiedCred"}],"id":5046,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"501:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5045,"name":"address","nodeType":"ElementaryTypeName","src":"501:7:27","typeDescriptions":{}}},"id":5055,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"501:98:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"482:117:27"},{"expression":{"arguments":[{"id":5062,"name":"_address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5044,"src":"640:8:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"id":5057,"name":"credIssuers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5024,"src":"611:11:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(address => address[] storage ref)"}},"id":5060,"indexExpression":{"expression":{"id":5058,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"623:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"623:10:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"611:23:27","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":5061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"push","nodeType":"MemberAccess","src":"611:28:27","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$bound_to$_t_array$_t_address_$dyn_storage_ptr_$","typeString":"function (address[] storage pointer,address)"}},"id":5063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"611:38:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5064,"nodeType":"ExpressionStatement","src":"611:38:27"},{"eventCall":{"arguments":[{"expression":{"id":5066,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"677:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"677:10:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5068,"name":"_address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5044,"src":"689:8:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5065,"name":"createIssuer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5030,"src":"664:12:27","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":5069,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"664:34:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5070,"nodeType":"EmitStatement","src":"659:39:27"}]},"functionSelector":"2779aae8","id":5072,"implemented":true,"kind":"function","modifiers":[],"name":"createCredIssuer","nameLocation":"307:16:27","nodeType":"FunctionDefinition","parameters":{"id":5041,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5034,"mutability":"mutable","name":"_verifiers","nameLocation":"351:10:27","nodeType":"VariableDeclaration","scope":5072,"src":"333:28:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr","typeString":"struct ICredential.Verifier[]"},"typeName":{"baseType":{"id":5032,"nodeType":"UserDefinedTypeName","pathNode":{"id":5031,"name":"Verifier","nodeType":"IdentifierPath","referencedDeclaration":993,"src":"333:8:27"},"referencedDeclaration":993,"src":"333:8:27","typeDescriptions":{"typeIdentifier":"t_struct$_Verifier_$993_storage_ptr","typeString":"struct ICredential.Verifier"}},"id":5033,"nodeType":"ArrayTypeName","src":"333:10:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Verifier_$993_storage_$dyn_storage_ptr","typeString":"struct ICredential.Verifier[]"}},"visibility":"internal"},{"constant":false,"id":5036,"mutability":"mutable","name":"_issuer","nameLocation":"379:7:27","nodeType":"VariableDeclaration","scope":5072,"src":"371:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5035,"name":"address","nodeType":"ElementaryTypeName","src":"371:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5038,"mutability":"mutable","name":"_issuerName","nameLocation":"410:11:27","nodeType":"VariableDeclaration","scope":5072,"src":"396:25:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5037,"name":"string","nodeType":"ElementaryTypeName","src":"396:6:27","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5040,"mutability":"mutable","name":"_issuerSymbol","nameLocation":"445:13:27","nodeType":"VariableDeclaration","scope":5072,"src":"431:27:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5039,"name":"string","nodeType":"ElementaryTypeName","src":"431:6:27","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"323:141:27"},"returnParameters":{"id":5042,"nodeType":"ParameterList","parameters":[],"src":"472:0:27"},"scope":5073,"src":"298:407:27","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":5074,"src":"153:554:27","usedErrors":[965,967,969,971,973]}],"src":"32:676:27"},"id":27},"contracts/comman/FERC721URIStorage.sol":{"ast":{"absolutePath":"contracts/comman/FERC721URIStorage.sol","exportedSymbols":{"Address":[3139],"Context":[3161],"ERC165":[3434],"ERC721":[2648],"ERC721URIStorage":[5224],"IERC165":[3446],"IERC721":[2764],"IERC721Metadata":[2809],"IERC721Receiver":[2782],"Math":[4311],"Strings":[3410]},"id":5225,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5075,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"128:23:28"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"@openzeppelin/contracts/token/ERC721/ERC721.sol","id":5076,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5225,"sourceUnit":2649,"src":"153:57:28","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5078,"name":"ERC721","nodeType":"IdentifierPath","referencedDeclaration":2648,"src":"320:6:28"},"id":5079,"nodeType":"InheritanceSpecifier","src":"320:6:28"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":5077,"nodeType":"StructuredDocumentation","src":"212:69:28","text":" @dev ERC721 token with storage based token URI management."},"fullyImplemented":false,"id":5224,"linearizedBaseContracts":[5224,2648,2809,2764,3434,3446,3161],"name":"ERC721URIStorage","nameLocation":"300:16:28","nodeType":"ContractDefinition","nodes":[{"id":5082,"libraryName":{"id":5080,"name":"Strings","nodeType":"IdentifierPath","referencedDeclaration":3410,"src":"339:7:28"},"nodeType":"UsingForDirective","src":"333:26:28","typeName":{"id":5081,"name":"uint256","nodeType":"ElementaryTypeName","src":"351:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":5086,"mutability":"mutable","name":"_tokenURIs","nameLocation":"439:10:28","nodeType":"VariableDeclaration","scope":5224,"src":"404:45:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"typeName":{"id":5085,"keyType":{"id":5083,"name":"uint256","nodeType":"ElementaryTypeName","src":"412:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"404:26:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"valueType":{"id":5084,"name":"string","nodeType":"ElementaryTypeName","src":"423:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"visibility":"private"},{"baseFunctions":[2040],"body":{"id":5111,"nodeType":"Block","src":"632:237:28","statements":[{"expression":{"arguments":[{"arguments":[{"id":5099,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5089,"src":"734:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5100,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5093,"src":"740:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5098,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2183,"src":"715:18:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":5101,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"715:33:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564","id":5102,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"762:51:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2","typeString":"literal_string \"ERC721: transfer caller is not owner nor approved\""},"value":"ERC721: transfer caller is not owner nor approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2","typeString":"literal_string \"ERC721: transfer caller is not owner nor approved\""}],"id":5097,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"694:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"694:129:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5104,"nodeType":"ExpressionStatement","src":"694:129:28"},{"expression":{"arguments":[{"id":5106,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5089,"src":"844:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5107,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5091,"src":"850:2:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5108,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5093,"src":"854:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5105,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2456,"src":"834:9:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":5109,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"834:28:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5110,"nodeType":"ExpressionStatement","src":"834:28:28"}]},"documentation":{"id":5087,"nodeType":"StructuredDocumentation","src":"457:51:28","text":" @dev See {IERC721-transferFrom}."},"functionSelector":"23b872dd","id":5112,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"522:12:28","nodeType":"FunctionDefinition","overrides":{"id":5095,"nodeType":"OverrideSpecifier","overrides":[],"src":"623:8:28"},"parameters":{"id":5094,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5089,"mutability":"mutable","name":"from","nameLocation":"552:4:28","nodeType":"VariableDeclaration","scope":5112,"src":"544:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5088,"name":"address","nodeType":"ElementaryTypeName","src":"544:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5091,"mutability":"mutable","name":"to","nameLocation":"574:2:28","nodeType":"VariableDeclaration","scope":5112,"src":"566:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5090,"name":"address","nodeType":"ElementaryTypeName","src":"566:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5093,"mutability":"mutable","name":"tokenId","nameLocation":"594:7:28","nodeType":"VariableDeclaration","scope":5112,"src":"586:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5092,"name":"uint256","nodeType":"ElementaryTypeName","src":"586:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"534:73:28"},"returnParameters":{"id":5096,"nodeType":"ParameterList","parameters":[],"src":"632:0:28"},"scope":5224,"src":"513:356:28","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1908],"body":{"id":5170,"nodeType":"Block","src":"1023:520:28","statements":[{"expression":{"arguments":[{"id":5122,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5115,"src":"1048:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5121,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2526,"src":"1033:14:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":5123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1033:23:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5124,"nodeType":"ExpressionStatement","src":"1033:23:28"},{"assignments":[5126],"declarations":[{"constant":false,"id":5126,"mutability":"mutable","name":"_tokenURI","nameLocation":"1081:9:28","nodeType":"VariableDeclaration","scope":5170,"src":"1067:23:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5125,"name":"string","nodeType":"ElementaryTypeName","src":"1067:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":5130,"initialValue":{"baseExpression":{"id":5127,"name":"_tokenURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5086,"src":"1093:10:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":5129,"indexExpression":{"id":5128,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5115,"src":"1104:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1093:19:28","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"VariableDeclarationStatement","src":"1067:45:28"},{"assignments":[5132],"declarations":[{"constant":false,"id":5132,"mutability":"mutable","name":"base","nameLocation":"1136:4:28","nodeType":"VariableDeclaration","scope":5170,"src":"1122:18:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5131,"name":"string","nodeType":"ElementaryTypeName","src":"1122:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":5135,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":5133,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1917,"src":"1143:8:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":5134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1143:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"1122:31:28"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":5138,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5132,"src":"1232:4:28","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5137,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1226:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":5136,"name":"bytes","nodeType":"ElementaryTypeName","src":"1226:5:28","typeDescriptions":{}}},"id":5139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1226:11:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1226:18:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1248:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1226:23:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5146,"nodeType":"IfStatement","src":"1222:70:28","trueBody":{"id":5145,"nodeType":"Block","src":"1251:41:28","statements":[{"expression":{"id":5143,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5126,"src":"1272:9:28","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":5120,"id":5144,"nodeType":"Return","src":"1265:16:28"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":5149,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5126,"src":"1400:9:28","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5148,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1394:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":5147,"name":"bytes","nodeType":"ElementaryTypeName","src":"1394:5:28","typeDescriptions":{}}},"id":5150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1394:16:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1394:23:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1420:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1394:27:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5164,"nodeType":"IfStatement","src":"1390:106:28","trueBody":{"id":5163,"nodeType":"Block","src":"1423:73:28","statements":[{"expression":{"arguments":[{"arguments":[{"id":5158,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5132,"src":"1468:4:28","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":5159,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5126,"src":"1474:9:28","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":5156,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1451:3:28","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5157,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"1451:16:28","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1451:33:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5155,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1444:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":5154,"name":"string","nodeType":"ElementaryTypeName","src":"1444:6:28","typeDescriptions":{}}},"id":5161,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1444:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":5120,"id":5162,"nodeType":"Return","src":"1437:48:28"}]}},{"expression":{"arguments":[{"id":5167,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5115,"src":"1528:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5165,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1513:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721URIStorage_$5224_$","typeString":"type(contract super ERC721URIStorage)"}},"id":5166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"tokenURI","nodeType":"MemberAccess","referencedDeclaration":1908,"src":"1513:14:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) view returns (string memory)"}},"id":5168,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1513:23:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":5120,"id":5169,"nodeType":"Return","src":"1506:30:28"}]},"documentation":{"id":5113,"nodeType":"StructuredDocumentation","src":"875:55:28","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":5171,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"944:8:28","nodeType":"FunctionDefinition","overrides":{"id":5117,"nodeType":"OverrideSpecifier","overrides":[],"src":"990:8:28"},"parameters":{"id":5116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5115,"mutability":"mutable","name":"tokenId","nameLocation":"961:7:28","nodeType":"VariableDeclaration","scope":5171,"src":"953:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5114,"name":"uint256","nodeType":"ElementaryTypeName","src":"953:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"952:17:28"},"returnParameters":{"id":5120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5119,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5171,"src":"1008:13:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5118,"name":"string","nodeType":"ElementaryTypeName","src":"1008:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1007:15:28"},"scope":5224,"src":"935:608:28","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":5192,"nodeType":"Block","src":"1771:133:28","statements":[{"expression":{"arguments":[{"arguments":[{"id":5181,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5174,"src":"1797:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5180,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2149,"src":"1789:7:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":5182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1789:16:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524337323155524953746f726167653a2055524920736574206f66206e6f6e6578697374656e7420746f6b656e","id":5183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1807:48:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4","typeString":"literal_string \"ERC721URIStorage: URI set of nonexistent token\""},"value":"ERC721URIStorage: URI set of nonexistent token"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4","typeString":"literal_string \"ERC721URIStorage: URI set of nonexistent token\""}],"id":5179,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1781:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1781:75:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5185,"nodeType":"ExpressionStatement","src":"1781:75:28"},{"expression":{"id":5190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5186,"name":"_tokenURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5086,"src":"1866:10:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":5188,"indexExpression":{"id":5187,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5174,"src":"1877:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1866:19:28","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5189,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5176,"src":"1888:9:28","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1866:31:28","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":5191,"nodeType":"ExpressionStatement","src":"1866:31:28"}]},"documentation":{"id":5172,"nodeType":"StructuredDocumentation","src":"1549:136:28","text":" @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n Requirements:\n - `tokenId` must exist."},"id":5193,"implemented":true,"kind":"function","modifiers":[],"name":"_setTokenURI","nameLocation":"1699:12:28","nodeType":"FunctionDefinition","parameters":{"id":5177,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5174,"mutability":"mutable","name":"tokenId","nameLocation":"1720:7:28","nodeType":"VariableDeclaration","scope":5193,"src":"1712:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5173,"name":"uint256","nodeType":"ElementaryTypeName","src":"1712:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5176,"mutability":"mutable","name":"_tokenURI","nameLocation":"1743:9:28","nodeType":"VariableDeclaration","scope":5193,"src":"1729:23:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5175,"name":"string","nodeType":"ElementaryTypeName","src":"1729:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1711:42:28"},"returnParameters":{"id":5178,"nodeType":"ParameterList","parameters":[],"src":"1771:0:28"},"scope":5224,"src":"1690:214:28","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[2371],"body":{"id":5222,"nodeType":"Block","src":"2180:142:28","statements":[{"expression":{"arguments":[{"id":5203,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5196,"src":"2202:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5200,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2190:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721URIStorage_$5224_$","typeString":"type(contract super ERC721URIStorage)"}},"id":5202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"_burn","nodeType":"MemberAccess","referencedDeclaration":2371,"src":"2190:11:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":5204,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2190:20:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5205,"nodeType":"ExpressionStatement","src":"2190:20:28"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"baseExpression":{"id":5208,"name":"_tokenURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5086,"src":"2231:10:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":5210,"indexExpression":{"id":5209,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5196,"src":"2242:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2231:19:28","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":5207,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2225:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":5206,"name":"bytes","nodeType":"ElementaryTypeName","src":"2225:5:28","typeDescriptions":{}}},"id":5211,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2225:26:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes storage pointer"}},"id":5212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2225:33:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":5213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2262:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2225:38:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5221,"nodeType":"IfStatement","src":"2221:95:28","trueBody":{"id":5220,"nodeType":"Block","src":"2265:51:28","statements":[{"expression":{"id":5218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"2279:26:28","subExpression":{"baseExpression":{"id":5215,"name":"_tokenURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5086,"src":"2286:10:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":5217,"indexExpression":{"id":5216,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5196,"src":"2297:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2286:19:28","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5219,"nodeType":"ExpressionStatement","src":"2279:26:28"}]}}]},"documentation":{"id":5194,"nodeType":"StructuredDocumentation","src":"1910:207:28","text":" @dev See {ERC721-_burn}. This override additionally checks to see if a\n token-specific URI was set for the token, and if so, it deletes the token URI from\n the storage mapping."},"id":5223,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"2131:5:28","nodeType":"FunctionDefinition","overrides":{"id":5198,"nodeType":"OverrideSpecifier","overrides":[],"src":"2171:8:28"},"parameters":{"id":5197,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5196,"mutability":"mutable","name":"tokenId","nameLocation":"2145:7:28","nodeType":"VariableDeclaration","scope":5223,"src":"2137:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5195,"name":"uint256","nodeType":"ElementaryTypeName","src":"2137:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2136:17:28"},"returnParameters":{"id":5199,"nodeType":"ParameterList","parameters":[],"src":"2180:0:28"},"scope":5224,"src":"2122:200:28","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":5225,"src":"282:2042:28","usedErrors":[]}],"src":"128:2197:28"},"id":28}},"contracts":{"@creds-protocol/contracts/CredsIssuer.sol":{"CredsIssuer":{"abi":[{"inputs":[{"components":[{"internalType":"address","name":"contractAddress","type":"address"},{"internalType":"uint256","name":"merkleTreeDepth","type":"uint256"}],"internalType":"struct ICredential.Verifier[]","name":"_verifiers","type":"tuple[]"},{"internalType":"address","name":"_issuer","type":"address"},{"internalType":"string","name":"_issuerName","type":"string"},{"internalType":"string","name":"_issuerSymbol","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"Credential__CallerIsNotTheCredIssuer","type":"error"},{"inputs":[],"name":"Credential__CredAlreadyExists","type":"error"},{"inputs":[],"name":"Credential__CredDoesNotExist","type":"error"},{"inputs":[],"name":"Credential__CredIdIsNotLessThanSnarkScalarField","type":"error"},{"inputs":[],"name":"Credential__MerkleTreeDepthIsNotSupported","type":"error"},{"inputs":[],"name":"Credential__MerkleTreeRootIsExpired","type":"error"},{"inputs":[],"name":"Credential__MerkleTreeRootIsNotPartOfTheCred","type":"error"},{"inputs":[],"name":"Credential__YouAreUsingTheSameNillifierTwice","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"issuer","type":"address"},{"indexed":true,"internalType":"uint256","name":"credId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"merkleTreeDepth","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"zeroValue","type":"uint256"}],"name":"CredCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"credId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"index","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"identityCommitment","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"merkleTreeRoot","type":"uint256"}],"name":"IdentityAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"credId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"index","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"identityCommitment","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"merkleTreeRoot","type":"uint256"}],"name":"IdentityRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"credId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"index","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"identityCommitment","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newIdentityCommitment","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"merkleTreeRoot","type":"uint256"}],"name":"IdentityUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"nullifierHash","type":"uint256"}],"name":"NullifierHashAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"credId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"merkleTreeRoot","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"externalNullifier","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"nullifierHash","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"signal","type":"bytes32"}],"name":"ProofVerified","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"issuerAddress","type":"address"},{"indexed":true,"internalType":"string","name":"issuerName","type":"string"},{"indexed":true,"internalType":"string","name":"issuerSymbol","type":"string"}],"name":"issuerRegistered","type":"event"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"creds","outputs":[{"internalType":"address","name":"admin","type":"address"},{"internalType":"string","name":"credURI","type":"string"},{"internalType":"uint256","name":"merkleRootDuration","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"credsIssuedCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"credsIssuer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"credsProtocolRegistry","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"credID","type":"uint256"}],"name":"getMerkleTreeDepth","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"credID","type":"uint256"}],"name":"getMerkleTreeRoot","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"credID","type":"uint256"}],"name":"getNumberOfMerkleTreeLeaves","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"issuerName","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"issuerSymbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"verifiers","outputs":[{"internalType":"contract IVerifier","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"constructor":{"details":"Initializes the Credential verifiers used to verify the user's ZK proofs.","params":{"_verifiers":": List of Credential verifiers (address and related Merkle tree depth)."}},"getMerkleTreeDepth(uint256)":{"details":"See {ICredentialCreds-getMerkleTreeDepth}."},"getMerkleTreeRoot(uint256)":{"details":"See {ICredentialCreds-getMerkleTreeRoot}."},"getNumberOfMerkleTreeLeaves(uint256)":{"details":"See {ICredentialCreds-getNumberOfMerkleTreeLeaves}."}},"stateVariables":{"creds":{"details":"Gets a cred id and returns the cred parameters."},"verifiers":{"details":"Gets a tree depth and returns its verifier address."}},"title":"CredsIssuer","version":1},"evm":{"bytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:8172:29","statements":[{"body":{"nodeType":"YulBlock","src":"182:614:29","statements":[{"nodeType":"YulAssignment","src":"192:115:29","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"299:6:29"}],"functionName":{"name":"array_allocation_size_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"217:81:29"},"nodeType":"YulFunctionCall","src":"217:89:29"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"201:15:29"},"nodeType":"YulFunctionCall","src":"201:106:29"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"192:5:29"}]},{"nodeType":"YulVariableDeclaration","src":"316:16:29","value":{"name":"array","nodeType":"YulIdentifier","src":"327:5:29"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"320:3:29","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"349:5:29"},{"name":"length","nodeType":"YulIdentifier","src":"356:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"342:6:29"},"nodeType":"YulFunctionCall","src":"342:21:29"},"nodeType":"YulExpressionStatement","src":"342:21:29"},{"nodeType":"YulAssignment","src":"372:23:29","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"383:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"390:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"379:3:29"},"nodeType":"YulFunctionCall","src":"379:16:29"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"372:3:29"}]},{"nodeType":"YulVariableDeclaration","src":"405:17:29","value":{"name":"offset","nodeType":"YulIdentifier","src":"416:6:29"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"409:3:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"471:36:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"492:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"495:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"485:6:29"},"nodeType":"YulFunctionCall","src":"485:12:29"},"nodeType":"YulExpressionStatement","src":"485:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"441:3:29"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"450:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"458:4:29","type":"","value":"0x40"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"446:3:29"},"nodeType":"YulFunctionCall","src":"446:17:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"437:3:29"},"nodeType":"YulFunctionCall","src":"437:27:29"},{"name":"end","nodeType":"YulIdentifier","src":"466:3:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"434:2:29"},"nodeType":"YulFunctionCall","src":"434:36:29"},"nodeType":"YulIf","src":"431:2:29"},{"body":{"nodeType":"YulBlock","src":"576:214:29","statements":[{"nodeType":"YulVariableDeclaration","src":"591:21:29","value":{"name":"src","nodeType":"YulIdentifier","src":"609:3:29"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"595:10:29","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"633:3:29"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"695:10:29"},{"name":"end","nodeType":"YulIdentifier","src":"707:3:29"}],"functionName":{"name":"abi_decode_t_struct$_Verifier_$993_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"638:56:29"},"nodeType":"YulFunctionCall","src":"638:73:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"626:6:29"},"nodeType":"YulFunctionCall","src":"626:86:29"},"nodeType":"YulExpressionStatement","src":"626:86:29"},{"nodeType":"YulAssignment","src":"725:21:29","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"736:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"741:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"732:3:29"},"nodeType":"YulFunctionCall","src":"732:14:29"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"725:3:29"}]},{"nodeType":"YulAssignment","src":"759:21:29","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"770:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"775:4:29","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"766:3:29"},"nodeType":"YulFunctionCall","src":"766:14:29"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"759:3:29"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"538:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"541:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"535:2:29"},"nodeType":"YulFunctionCall","src":"535:13:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"549:18:29","statements":[{"nodeType":"YulAssignment","src":"551:14:29","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"560:1:29"},{"kind":"number","nodeType":"YulLiteral","src":"563:1:29","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"556:3:29"},"nodeType":"YulFunctionCall","src":"556:9:29"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"551:1:29"}]}]},"pre":{"nodeType":"YulBlock","src":"520:14:29","statements":[{"nodeType":"YulVariableDeclaration","src":"522:10:29","value":{"kind":"number","nodeType":"YulLiteral","src":"531:1:29","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"526:1:29","type":""}]}]},"src":"516:274:29"}]},"name":"abi_decode_available_length_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"152:6:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"160:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"168:3:29","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"176:5:29","type":""}],"src":"44:752:29"},{"body":{"nodeType":"YulBlock","src":"897:259:29","statements":[{"nodeType":"YulAssignment","src":"907:75:29","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"974:6:29"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"932:41:29"},"nodeType":"YulFunctionCall","src":"932:49:29"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"916:15:29"},"nodeType":"YulFunctionCall","src":"916:66:29"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"907:5:29"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"998:5:29"},{"name":"length","nodeType":"YulIdentifier","src":"1005:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"991:6:29"},"nodeType":"YulFunctionCall","src":"991:21:29"},"nodeType":"YulExpressionStatement","src":"991:21:29"},{"nodeType":"YulVariableDeclaration","src":"1021:27:29","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"1036:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"1043:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1032:3:29"},"nodeType":"YulFunctionCall","src":"1032:16:29"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"1025:3:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"1086:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1095:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1098:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1088:6:29"},"nodeType":"YulFunctionCall","src":"1088:12:29"},"nodeType":"YulExpressionStatement","src":"1088:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1067:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"1072:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1063:3:29"},"nodeType":"YulFunctionCall","src":"1063:16:29"},{"name":"end","nodeType":"YulIdentifier","src":"1081:3:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1060:2:29"},"nodeType":"YulFunctionCall","src":"1060:25:29"},"nodeType":"YulIf","src":"1057:2:29"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1133:3:29"},{"name":"dst","nodeType":"YulIdentifier","src":"1138:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"1143:6:29"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"1111:21:29"},"nodeType":"YulFunctionCall","src":"1111:39:29"},"nodeType":"YulExpressionStatement","src":"1111:39:29"}]},"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"870:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"875:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"883:3:29","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"891:5:29","type":""}],"src":"802:354:29"},{"body":{"nodeType":"YulBlock","src":"1225:80:29","statements":[{"nodeType":"YulAssignment","src":"1235:22:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1250:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1244:5:29"},"nodeType":"YulFunctionCall","src":"1244:13:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1235:5:29"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1293:5:29"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1266:26:29"},"nodeType":"YulFunctionCall","src":"1266:33:29"},"nodeType":"YulExpressionStatement","src":"1266:33:29"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1203:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"1211:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1219:5:29","type":""}],"src":"1162:143:29"},{"body":{"nodeType":"YulBlock","src":"1461:255:29","statements":[{"body":{"nodeType":"YulBlock","src":"1510:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1519:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1522:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1512:6:29"},"nodeType":"YulFunctionCall","src":"1512:12:29"},"nodeType":"YulExpressionStatement","src":"1512:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1489:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"1497:4:29","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1485:3:29"},"nodeType":"YulFunctionCall","src":"1485:17:29"},{"name":"end","nodeType":"YulIdentifier","src":"1504:3:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1481:3:29"},"nodeType":"YulFunctionCall","src":"1481:27:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1474:6:29"},"nodeType":"YulFunctionCall","src":"1474:35:29"},"nodeType":"YulIf","src":"1471:2:29"},{"nodeType":"YulVariableDeclaration","src":"1535:27:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1555:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1549:5:29"},"nodeType":"YulFunctionCall","src":"1549:13:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1539:6:29","type":""}]},{"nodeType":"YulAssignment","src":"1571:139:29","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1683:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"1691:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1679:3:29"},"nodeType":"YulFunctionCall","src":"1679:17:29"},{"name":"length","nodeType":"YulIdentifier","src":"1698:6:29"},{"name":"end","nodeType":"YulIdentifier","src":"1706:3:29"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"1580:98:29"},"nodeType":"YulFunctionCall","src":"1580:130:29"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1571:5:29"}]}]},"name":"abi_decode_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1439:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"1447:3:29","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1455:5:29","type":""}],"src":"1348:368:29"},{"body":{"nodeType":"YulBlock","src":"1809:215:29","statements":[{"body":{"nodeType":"YulBlock","src":"1858:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1867:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1870:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1860:6:29"},"nodeType":"YulFunctionCall","src":"1860:12:29"},"nodeType":"YulExpressionStatement","src":"1860:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1837:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"1845:4:29","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1833:3:29"},"nodeType":"YulFunctionCall","src":"1833:17:29"},{"name":"end","nodeType":"YulIdentifier","src":"1852:3:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1829:3:29"},"nodeType":"YulFunctionCall","src":"1829:27:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1822:6:29"},"nodeType":"YulFunctionCall","src":"1822:35:29"},"nodeType":"YulIf","src":"1819:2:29"},{"nodeType":"YulVariableDeclaration","src":"1883:27:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1903:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1897:5:29"},"nodeType":"YulFunctionCall","src":"1897:13:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1887:6:29","type":""}]},{"nodeType":"YulAssignment","src":"1919:99:29","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1991:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"1999:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1987:3:29"},"nodeType":"YulFunctionCall","src":"1987:17:29"},{"name":"length","nodeType":"YulIdentifier","src":"2006:6:29"},{"name":"end","nodeType":"YulIdentifier","src":"2014:3:29"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"1928:58:29"},"nodeType":"YulFunctionCall","src":"1928:90:29"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1919:5:29"}]}]},"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1787:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"1795:3:29","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1803:5:29","type":""}],"src":"1736:288:29"},{"body":{"nodeType":"YulBlock","src":"2156:471:29","statements":[{"body":{"nodeType":"YulBlock","src":"2200:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2209:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2212:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2202:6:29"},"nodeType":"YulFunctionCall","src":"2202:12:29"},"nodeType":"YulExpressionStatement","src":"2202:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"2177:3:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"2182:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2173:3:29"},"nodeType":"YulFunctionCall","src":"2173:19:29"},{"kind":"number","nodeType":"YulLiteral","src":"2194:4:29","type":"","value":"0x40"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2169:3:29"},"nodeType":"YulFunctionCall","src":"2169:30:29"},"nodeType":"YulIf","src":"2166:2:29"},{"nodeType":"YulAssignment","src":"2225:30:29","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2250:4:29","type":"","value":"0x40"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2234:15:29"},"nodeType":"YulFunctionCall","src":"2234:21:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2225:5:29"}]},{"nodeType":"YulBlock","src":"2265:172:29","statements":[{"nodeType":"YulVariableDeclaration","src":"2311:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"2325:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2315:6:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2351:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"2358:4:29","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2347:3:29"},"nodeType":"YulFunctionCall","src":"2347:16:29"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2401:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"2412:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2397:3:29"},"nodeType":"YulFunctionCall","src":"2397:22:29"},{"name":"end","nodeType":"YulIdentifier","src":"2421:3:29"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"2365:31:29"},"nodeType":"YulFunctionCall","src":"2365:60:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2340:6:29"},"nodeType":"YulFunctionCall","src":"2340:86:29"},"nodeType":"YulExpressionStatement","src":"2340:86:29"}]},{"nodeType":"YulBlock","src":"2447:173:29","statements":[{"nodeType":"YulVariableDeclaration","src":"2493:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"2507:2:29","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2497:6:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2534:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"2541:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2530:3:29"},"nodeType":"YulFunctionCall","src":"2530:16:29"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2584:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"2595:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2580:3:29"},"nodeType":"YulFunctionCall","src":"2580:22:29"},{"name":"end","nodeType":"YulIdentifier","src":"2604:3:29"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"2548:31:29"},"nodeType":"YulFunctionCall","src":"2548:60:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2523:6:29"},"nodeType":"YulFunctionCall","src":"2523:86:29"},"nodeType":"YulExpressionStatement","src":"2523:86:29"}]}]},"name":"abi_decode_t_struct$_Verifier_$993_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2131:9:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"2142:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2150:5:29","type":""}],"src":"2065:562:29"},{"body":{"nodeType":"YulBlock","src":"2696:80:29","statements":[{"nodeType":"YulAssignment","src":"2706:22:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2721:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2715:5:29"},"nodeType":"YulFunctionCall","src":"2715:13:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2706:5:29"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2764:5:29"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"2737:26:29"},"nodeType":"YulFunctionCall","src":"2737:33:29"},"nodeType":"YulExpressionStatement","src":"2737:33:29"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2674:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"2682:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2690:5:29","type":""}],"src":"2633:143:29"},{"body":{"nodeType":"YulBlock","src":"2980:953:29","statements":[{"body":{"nodeType":"YulBlock","src":"3027:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3036:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3039:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3029:6:29"},"nodeType":"YulFunctionCall","src":"3029:12:29"},"nodeType":"YulExpressionStatement","src":"3029:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3001:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"3010:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2997:3:29"},"nodeType":"YulFunctionCall","src":"2997:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"3022:3:29","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2993:3:29"},"nodeType":"YulFunctionCall","src":"2993:33:29"},"nodeType":"YulIf","src":"2990:2:29"},{"nodeType":"YulBlock","src":"3053:264:29","statements":[{"nodeType":"YulVariableDeclaration","src":"3068:38:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3092:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"3103:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3088:3:29"},"nodeType":"YulFunctionCall","src":"3088:17:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3082:5:29"},"nodeType":"YulFunctionCall","src":"3082:24:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3072:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"3153:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3162:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3165:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3155:6:29"},"nodeType":"YulFunctionCall","src":"3155:12:29"},"nodeType":"YulExpressionStatement","src":"3155:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3125:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"3133:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3122:2:29"},"nodeType":"YulFunctionCall","src":"3122:30:29"},"nodeType":"YulIf","src":"3119:2:29"},{"nodeType":"YulAssignment","src":"3183:124:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3279:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"3290:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3275:3:29"},"nodeType":"YulFunctionCall","src":"3275:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3299:7:29"}],"functionName":{"name":"abi_decode_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3193:81:29"},"nodeType":"YulFunctionCall","src":"3193:114:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3183:6:29"}]}]},{"nodeType":"YulBlock","src":"3327:129:29","statements":[{"nodeType":"YulVariableDeclaration","src":"3342:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"3356:2:29","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3346:6:29","type":""}]},{"nodeType":"YulAssignment","src":"3372:74:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3418:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"3429:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3414:3:29"},"nodeType":"YulFunctionCall","src":"3414:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3438:7:29"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"3382:31:29"},"nodeType":"YulFunctionCall","src":"3382:64:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3372:6:29"}]}]},{"nodeType":"YulBlock","src":"3466:225:29","statements":[{"nodeType":"YulVariableDeclaration","src":"3481:39:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3505:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"3516:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3501:3:29"},"nodeType":"YulFunctionCall","src":"3501:18:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3495:5:29"},"nodeType":"YulFunctionCall","src":"3495:25:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3485:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"3567:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3576:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3579:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3569:6:29"},"nodeType":"YulFunctionCall","src":"3569:12:29"},"nodeType":"YulExpressionStatement","src":"3569:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3539:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"3547:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3536:2:29"},"nodeType":"YulFunctionCall","src":"3536:30:29"},"nodeType":"YulIf","src":"3533:2:29"},{"nodeType":"YulAssignment","src":"3597:84:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3653:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"3664:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3649:3:29"},"nodeType":"YulFunctionCall","src":"3649:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3673:7:29"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3607:41:29"},"nodeType":"YulFunctionCall","src":"3607:74:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3597:6:29"}]}]},{"nodeType":"YulBlock","src":"3701:225:29","statements":[{"nodeType":"YulVariableDeclaration","src":"3716:39:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3740:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"3751:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3736:3:29"},"nodeType":"YulFunctionCall","src":"3736:18:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3730:5:29"},"nodeType":"YulFunctionCall","src":"3730:25:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3720:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"3802:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3811:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3814:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3804:6:29"},"nodeType":"YulFunctionCall","src":"3804:12:29"},"nodeType":"YulExpressionStatement","src":"3804:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3774:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"3782:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3771:2:29"},"nodeType":"YulFunctionCall","src":"3771:30:29"},"nodeType":"YulIf","src":"3768:2:29"},{"nodeType":"YulAssignment","src":"3832:84:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3888:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"3899:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3884:3:29"},"nodeType":"YulFunctionCall","src":"3884:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3908:7:29"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3842:41:29"},"nodeType":"YulFunctionCall","src":"3842:74:29"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"3832:6:29"}]}]}]},"name":"abi_decode_tuple_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptrt_addresst_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2926:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2937:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2949:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2957:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2965:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2973:6:29","type":""}],"src":"2782:1151:29"},{"body":{"nodeType":"YulBlock","src":"4004:53:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4021:3:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4044:5:29"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"4026:17:29"},"nodeType":"YulFunctionCall","src":"4026:24:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4014:6:29"},"nodeType":"YulFunctionCall","src":"4014:37:29"},"nodeType":"YulExpressionStatement","src":"4014:37:29"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3992:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3999:3:29","type":""}],"src":"3939:118:29"},{"body":{"nodeType":"YulBlock","src":"4173:267:29","statements":[{"nodeType":"YulVariableDeclaration","src":"4183:53:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4230:5:29"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"4197:32:29"},"nodeType":"YulFunctionCall","src":"4197:39:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"4187:6:29","type":""}]},{"nodeType":"YulAssignment","src":"4245:96:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4329:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"4334:6:29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"4252:76:29"},"nodeType":"YulFunctionCall","src":"4252:89:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"4245:3:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4376:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"4383:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4372:3:29"},"nodeType":"YulFunctionCall","src":"4372:16:29"},{"name":"pos","nodeType":"YulIdentifier","src":"4390:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"4395:6:29"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"4350:21:29"},"nodeType":"YulFunctionCall","src":"4350:52:29"},"nodeType":"YulExpressionStatement","src":"4350:52:29"},{"nodeType":"YulAssignment","src":"4411:23:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4422:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"4427:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4418:3:29"},"nodeType":"YulFunctionCall","src":"4418:16:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4411:3:29"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4154:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4161:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4169:3:29","type":""}],"src":"4063:377:29"},{"body":{"nodeType":"YulBlock","src":"4582:139:29","statements":[{"nodeType":"YulAssignment","src":"4593:102:29","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4682:6:29"},{"name":"pos","nodeType":"YulIdentifier","src":"4691:3:29"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"4600:81:29"},"nodeType":"YulFunctionCall","src":"4600:95:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"4593:3:29"}]},{"nodeType":"YulAssignment","src":"4705:10:29","value":{"name":"pos","nodeType":"YulIdentifier","src":"4712:3:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4705:3:29"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"4561:3:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4567:6:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4578:3:29","type":""}],"src":"4446:275:29"},{"body":{"nodeType":"YulBlock","src":"4853:206:29","statements":[{"nodeType":"YulAssignment","src":"4863:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4875:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"4886:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4871:3:29"},"nodeType":"YulFunctionCall","src":"4871:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4863:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4943:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4956:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"4967:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4952:3:29"},"nodeType":"YulFunctionCall","src":"4952:17:29"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"4899:43:29"},"nodeType":"YulFunctionCall","src":"4899:71:29"},"nodeType":"YulExpressionStatement","src":"4899:71:29"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5024:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5037:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"5048:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5033:3:29"},"nodeType":"YulFunctionCall","src":"5033:18:29"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"4980:43:29"},"nodeType":"YulFunctionCall","src":"4980:72:29"},"nodeType":"YulExpressionStatement","src":"4980:72:29"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4817:9:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4829:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4837:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4848:4:29","type":""}],"src":"4727:332:29"},{"body":{"nodeType":"YulBlock","src":"5106:88:29","statements":[{"nodeType":"YulAssignment","src":"5116:30:29","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"5126:18:29"},"nodeType":"YulFunctionCall","src":"5126:20:29"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5116:6:29"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5175:6:29"},{"name":"size","nodeType":"YulIdentifier","src":"5183:4:29"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"5155:19:29"},"nodeType":"YulFunctionCall","src":"5155:33:29"},"nodeType":"YulExpressionStatement","src":"5155:33:29"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"5090:4:29","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"5099:6:29","type":""}],"src":"5065:129:29"},{"body":{"nodeType":"YulBlock","src":"5240:35:29","statements":[{"nodeType":"YulAssignment","src":"5250:19:29","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5266:2:29","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5260:5:29"},"nodeType":"YulFunctionCall","src":"5260:9:29"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5250:6:29"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"5233:6:29","type":""}],"src":"5200:75:29"},{"body":{"nodeType":"YulBlock","src":"5388:229:29","statements":[{"body":{"nodeType":"YulBlock","src":"5493:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"5495:16:29"},"nodeType":"YulFunctionCall","src":"5495:18:29"},"nodeType":"YulExpressionStatement","src":"5495:18:29"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5465:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"5473:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5462:2:29"},"nodeType":"YulFunctionCall","src":"5462:30:29"},"nodeType":"YulIf","src":"5459:2:29"},{"nodeType":"YulAssignment","src":"5525:25:29","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5537:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"5545:4:29","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"5533:3:29"},"nodeType":"YulFunctionCall","src":"5533:17:29"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"5525:4:29"}]},{"nodeType":"YulAssignment","src":"5587:23:29","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"5599:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"5605:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5595:3:29"},"nodeType":"YulFunctionCall","src":"5595:15:29"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"5587:4:29"}]}]},"name":"array_allocation_size_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"5372:6:29","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"5383:4:29","type":""}],"src":"5281:336:29"},{"body":{"nodeType":"YulBlock","src":"5690:241:29","statements":[{"body":{"nodeType":"YulBlock","src":"5795:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"5797:16:29"},"nodeType":"YulFunctionCall","src":"5797:18:29"},"nodeType":"YulExpressionStatement","src":"5797:18:29"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5767:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"5775:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5764:2:29"},"nodeType":"YulFunctionCall","src":"5764:30:29"},"nodeType":"YulIf","src":"5761:2:29"},{"nodeType":"YulAssignment","src":"5827:37:29","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5857:6:29"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"5835:21:29"},"nodeType":"YulFunctionCall","src":"5835:29:29"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"5827:4:29"}]},{"nodeType":"YulAssignment","src":"5901:23:29","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"5913:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"5919:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5909:3:29"},"nodeType":"YulFunctionCall","src":"5909:15:29"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"5901:4:29"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"5674:6:29","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"5685:4:29","type":""}],"src":"5623:308:29"},{"body":{"nodeType":"YulBlock","src":"5996:40:29","statements":[{"nodeType":"YulAssignment","src":"6007:22:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6023:5:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6017:5:29"},"nodeType":"YulFunctionCall","src":"6017:12:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6007:6:29"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5979:5:29","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"5989:6:29","type":""}],"src":"5937:99:29"},{"body":{"nodeType":"YulBlock","src":"6156:34:29","statements":[{"nodeType":"YulAssignment","src":"6166:18:29","value":{"name":"pos","nodeType":"YulIdentifier","src":"6181:3:29"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"6166:11:29"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6128:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"6133:6:29","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"6144:11:29","type":""}],"src":"6042:148:29"},{"body":{"nodeType":"YulBlock","src":"6241:51:29","statements":[{"nodeType":"YulAssignment","src":"6251:35:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6280:5:29"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"6262:17:29"},"nodeType":"YulFunctionCall","src":"6262:24:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"6251:7:29"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6223:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"6233:7:29","type":""}],"src":"6196:96:29"},{"body":{"nodeType":"YulBlock","src":"6343:81:29","statements":[{"nodeType":"YulAssignment","src":"6353:65:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6368:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"6375:42:29","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6364:3:29"},"nodeType":"YulFunctionCall","src":"6364:54:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"6353:7:29"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6325:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"6335:7:29","type":""}],"src":"6298:126:29"},{"body":{"nodeType":"YulBlock","src":"6475:32:29","statements":[{"nodeType":"YulAssignment","src":"6485:16:29","value":{"name":"value","nodeType":"YulIdentifier","src":"6496:5:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"6485:7:29"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6457:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"6467:7:29","type":""}],"src":"6430:77:29"},{"body":{"nodeType":"YulBlock","src":"6562:258:29","statements":[{"nodeType":"YulVariableDeclaration","src":"6572:10:29","value":{"kind":"number","nodeType":"YulLiteral","src":"6581:1:29","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"6576:1:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"6641:63:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6666:3:29"},{"name":"i","nodeType":"YulIdentifier","src":"6671:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6662:3:29"},"nodeType":"YulFunctionCall","src":"6662:11:29"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6685:3:29"},{"name":"i","nodeType":"YulIdentifier","src":"6690:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6681:3:29"},"nodeType":"YulFunctionCall","src":"6681:11:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6675:5:29"},"nodeType":"YulFunctionCall","src":"6675:18:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6655:6:29"},"nodeType":"YulFunctionCall","src":"6655:39:29"},"nodeType":"YulExpressionStatement","src":"6655:39:29"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6602:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"6605:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6599:2:29"},"nodeType":"YulFunctionCall","src":"6599:13:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"6613:19:29","statements":[{"nodeType":"YulAssignment","src":"6615:15:29","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6624:1:29"},{"kind":"number","nodeType":"YulLiteral","src":"6627:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6620:3:29"},"nodeType":"YulFunctionCall","src":"6620:10:29"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"6615:1:29"}]}]},"pre":{"nodeType":"YulBlock","src":"6595:3:29","statements":[]},"src":"6591:113:29"},{"body":{"nodeType":"YulBlock","src":"6738:76:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6788:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"6793:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6784:3:29"},"nodeType":"YulFunctionCall","src":"6784:16:29"},{"kind":"number","nodeType":"YulLiteral","src":"6802:1:29","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6777:6:29"},"nodeType":"YulFunctionCall","src":"6777:27:29"},"nodeType":"YulExpressionStatement","src":"6777:27:29"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6719:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"6722:6:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6716:2:29"},"nodeType":"YulFunctionCall","src":"6716:13:29"},"nodeType":"YulIf","src":"6713:2:29"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"6544:3:29","type":""},{"name":"dst","nodeType":"YulTypedName","src":"6549:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"6554:6:29","type":""}],"src":"6513:307:29"},{"body":{"nodeType":"YulBlock","src":"6877:269:29","statements":[{"nodeType":"YulAssignment","src":"6887:22:29","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"6901:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"6907:1:29","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6897:3:29"},"nodeType":"YulFunctionCall","src":"6897:12:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6887:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"6918:38:29","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"6948:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"6954:1:29","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6944:3:29"},"nodeType":"YulFunctionCall","src":"6944:12:29"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"6922:18:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"6995:51:29","statements":[{"nodeType":"YulAssignment","src":"7009:27:29","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7023:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"7031:4:29","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7019:3:29"},"nodeType":"YulFunctionCall","src":"7019:17:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"7009:6:29"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"6975:18:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6968:6:29"},"nodeType":"YulFunctionCall","src":"6968:26:29"},"nodeType":"YulIf","src":"6965:2:29"},{"body":{"nodeType":"YulBlock","src":"7098:42:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"7112:16:29"},"nodeType":"YulFunctionCall","src":"7112:18:29"},"nodeType":"YulExpressionStatement","src":"7112:18:29"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"7062:18:29"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7085:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"7093:2:29","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7082:2:29"},"nodeType":"YulFunctionCall","src":"7082:14:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7059:2:29"},"nodeType":"YulFunctionCall","src":"7059:38:29"},"nodeType":"YulIf","src":"7056:2:29"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"6861:4:29","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"6870:6:29","type":""}],"src":"6826:320:29"},{"body":{"nodeType":"YulBlock","src":"7195:238:29","statements":[{"nodeType":"YulVariableDeclaration","src":"7205:58:29","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7227:6:29"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"7257:4:29"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"7235:21:29"},"nodeType":"YulFunctionCall","src":"7235:27:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7223:3:29"},"nodeType":"YulFunctionCall","src":"7223:40:29"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"7209:10:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"7374:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7376:16:29"},"nodeType":"YulFunctionCall","src":"7376:18:29"},"nodeType":"YulExpressionStatement","src":"7376:18:29"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7317:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"7329:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7314:2:29"},"nodeType":"YulFunctionCall","src":"7314:34:29"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7353:10:29"},{"name":"memPtr","nodeType":"YulIdentifier","src":"7365:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7350:2:29"},"nodeType":"YulFunctionCall","src":"7350:22:29"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7311:2:29"},"nodeType":"YulFunctionCall","src":"7311:62:29"},"nodeType":"YulIf","src":"7308:2:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7412:2:29","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7416:10:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7405:6:29"},"nodeType":"YulFunctionCall","src":"7405:22:29"},"nodeType":"YulExpressionStatement","src":"7405:22:29"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7181:6:29","type":""},{"name":"size","nodeType":"YulTypedName","src":"7189:4:29","type":""}],"src":"7152:281:29"},{"body":{"nodeType":"YulBlock","src":"7467:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7484:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7487:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7477:6:29"},"nodeType":"YulFunctionCall","src":"7477:88:29"},"nodeType":"YulExpressionStatement","src":"7477:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7581:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"7584:4:29","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7574:6:29"},"nodeType":"YulFunctionCall","src":"7574:15:29"},"nodeType":"YulExpressionStatement","src":"7574:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7605:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7608:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7598:6:29"},"nodeType":"YulFunctionCall","src":"7598:15:29"},"nodeType":"YulExpressionStatement","src":"7598:15:29"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"7439:180:29"},{"body":{"nodeType":"YulBlock","src":"7653:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7670:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7673:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7663:6:29"},"nodeType":"YulFunctionCall","src":"7663:88:29"},"nodeType":"YulExpressionStatement","src":"7663:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7767:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"7770:4:29","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7760:6:29"},"nodeType":"YulFunctionCall","src":"7760:15:29"},"nodeType":"YulExpressionStatement","src":"7760:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7791:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7794:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7784:6:29"},"nodeType":"YulFunctionCall","src":"7784:15:29"},"nodeType":"YulExpressionStatement","src":"7784:15:29"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"7625:180:29"},{"body":{"nodeType":"YulBlock","src":"7859:54:29","statements":[{"nodeType":"YulAssignment","src":"7869:38:29","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7887:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"7894:2:29","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7883:3:29"},"nodeType":"YulFunctionCall","src":"7883:14:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7903:2:29","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"7899:3:29"},"nodeType":"YulFunctionCall","src":"7899:7:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7879:3:29"},"nodeType":"YulFunctionCall","src":"7879:28:29"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"7869:6:29"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7842:5:29","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"7852:6:29","type":""}],"src":"7811:102:29"},{"body":{"nodeType":"YulBlock","src":"7962:79:29","statements":[{"body":{"nodeType":"YulBlock","src":"8019:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8028:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8031:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8021:6:29"},"nodeType":"YulFunctionCall","src":"8021:12:29"},"nodeType":"YulExpressionStatement","src":"8021:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7985:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8010:5:29"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"7992:17:29"},"nodeType":"YulFunctionCall","src":"7992:24:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7982:2:29"},"nodeType":"YulFunctionCall","src":"7982:35:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7975:6:29"},"nodeType":"YulFunctionCall","src":"7975:43:29"},"nodeType":"YulIf","src":"7972:2:29"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7955:5:29","type":""}],"src":"7919:122:29"},{"body":{"nodeType":"YulBlock","src":"8090:79:29","statements":[{"body":{"nodeType":"YulBlock","src":"8147:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8156:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8159:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8149:6:29"},"nodeType":"YulFunctionCall","src":"8149:12:29"},"nodeType":"YulExpressionStatement","src":"8149:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8113:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8138:5:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"8120:17:29"},"nodeType":"YulFunctionCall","src":"8120:24:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"8110:2:29"},"nodeType":"YulFunctionCall","src":"8110:35:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8103:6:29"},"nodeType":"YulFunctionCall","src":"8103:43:29"},"nodeType":"YulIf","src":"8100:2:29"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8083:5:29","type":""}],"src":"8047:122:29"}]},"contents":"{\n\n    // struct ICredential.Verifier[]\n    function abi_decode_available_length_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr_fromMemory(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let src := offset\n        if gt(add(src, mul(length, 0x40)), end) {\n            revert(0, 0)\n        }\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_struct$_Verifier_$993_memory_ptr_fromMemory(elementPos, end))\n            dst := add(dst, 0x20)\n            src := add(src, 0x40)\n        }\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert(0, 0) }\n        copy_memory_to_memory(src, dst, length)\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    // struct ICredential.Verifier[]\n    function abi_decode_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    // struct ICredential.Verifier\n    function abi_decode_t_struct$_Verifier_$993_memory_ptr_fromMemory(headStart, end) -> value {\n        if slt(sub(end, headStart), 0x40) { revert(0, 0) }\n        value := allocate_memory(0x40)\n\n        {\n            // contractAddress\n\n            let offset := 0\n\n            mstore(add(value, 0x00), abi_decode_t_address_fromMemory(add(headStart, offset), end))\n\n        }\n\n        {\n            // merkleTreeDepth\n\n            let offset := 32\n\n            mstore(add(value, 0x20), abi_decode_t_uint256_fromMemory(add(headStart, offset), end))\n\n        }\n\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptrt_addresst_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n\n        {\n\n            let offset := mload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value0 := abi_decode_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value2 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value3 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n","id":29,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405273414b893562f46f5180971c3389784a447581b2d3600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200006657600080fd5b506040516200108d3803806200108d83398181016040528101906200008c919062000553565b60005b84518160ff1610156200018a57848160ff1681518110620000d9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000015160066000878460ff168151811062000126577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160200151815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060010190506200008f565b5082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160029080519060200190620001e49291906200030e565b508060039080519060200190620001fd9291906200030e565b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c2551c8284306040518363ffffffff1660e01b81526004016200025d9291906200066b565b600060405180830381600087803b1580156200027857600080fd5b505af11580156200028d573d6000803e3d6000fd5b5050505080604051620002a1919062000652565b604051809103902082604051620002b9919062000652565b60405180910390208473ffffffffffffffffffffffffffffffffffffffff167ff51d47712d8574bf3715cf1db64ebb5a5c264fe57ff450433484f786f742ecec60405160405180910390a450505050620008bf565b8280546200031c90620007b0565b90600052602060002090601f0160209004810192826200034057600085556200038c565b82601f106200035b57805160ff19168380011785556200038c565b828001600101855582156200038c579182015b828111156200038b5782518255916020019190600101906200036e565b5b5090506200039b91906200039f565b5090565b5b80821115620003ba576000816000905550600101620003a0565b5090565b6000620003d5620003cf84620006c1565b62000698565b90508083825260208201905082856040860282011115620003f557600080fd5b60005b858110156200042957816200040e8882620004e9565b845260208401935060408301925050600181019050620003f8565b5050509392505050565b60006200044a6200044484620006f0565b62000698565b9050828152602081018484840111156200046357600080fd5b620004708482856200077a565b509392505050565b60008151905062000489816200088b565b92915050565b600082601f830112620004a157600080fd5b8151620004b3848260208601620003be565b91505092915050565b600082601f830112620004ce57600080fd5b8151620004e084826020860162000433565b91505092915050565b600060408284031215620004fc57600080fd5b62000508604062000698565b905060006200051a8482850162000478565b600083015250602062000530848285016200053c565b60208301525092915050565b6000815190506200054d81620008a5565b92915050565b600080600080608085870312156200056a57600080fd5b600085015167ffffffffffffffff8111156200058557600080fd5b62000593878288016200048f565b9450506020620005a68782880162000478565b935050604085015167ffffffffffffffff811115620005c457600080fd5b620005d287828801620004bc565b925050606085015167ffffffffffffffff811115620005f057600080fd5b620005fe87828801620004bc565b91505092959194509250565b62000615816200073c565b82525050565b6000620006288262000726565b62000634818562000731565b9350620006468185602086016200077a565b80840191505092915050565b60006200066082846200061b565b915081905092915050565b60006040820190506200068260008301856200060a565b6200069160208301846200060a565b9392505050565b6000620006a4620006b7565b9050620006b28282620007e6565b919050565b6000604051905090565b600067ffffffffffffffff821115620006df57620006de6200084b565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156200070e576200070d6200084b565b5b62000719826200087a565b9050602081019050919050565b600081519050919050565b600081905092915050565b6000620007498262000750565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156200079a5780820151818401526020810190506200077d565b83811115620007aa576000848401525b50505050565b60006002820490506001821680620007c957607f821691505b60208210811415620007e057620007df6200081c565b5b50919050565b620007f1826200087a565b810181811067ffffffffffffffff821117156200081357620008126200084b565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b62000896816200073c565b8114620008a257600080fd5b50565b620008b08162000770565b8114620008bc57600080fd5b50565b6107be80620008cf6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806381cc7a451161006657806381cc7a451461015d578063ac1eff681461018f578063c308dd5b146101bf578063dabc4d51146101dd578063eb4961061461020d5761009e565b80632e9868f8146100a3578063439d7275146100c15780634ce39ead146100df578063638480be146100fd5780636389e1071461012d575b600080fd5b6100ab61022b565b6040516100b89190610613565b60405180910390f35b6100c96102b9565b6040516100d69190610613565b60405180910390f35b6100e7610347565b6040516100f4919061059f565b60405180910390f35b61011760048036038101906101129190610510565b61036d565b6040516101249190610635565b60405180910390f35b61014760048036038101906101429190610510565b61038c565b6040516101549190610635565b60405180910390f35b61017760048036038101906101729190610510565b6103ab565b604051610186939291906105ba565b60405180910390f35b6101a960048036038101906101a49190610510565b61047d565b6040516101b691906105f8565b60405180910390f35b6101c76104b0565b6040516101d4919061059f565b60405180910390f35b6101f760048036038101906101f29190610510565b6104d6565b6040516102049190610635565b60405180910390f35b6102156104f5565b6040516102229190610635565b60405180910390f35b60028054610238906106ff565b80601f0160208091040260200160405190810160405280929190818152602001828054610264906106ff565b80156102b15780601f10610286576101008083540402835291602001916102b1565b820191906000526020600020905b81548152906001019060200180831161029457829003601f168201915b505050505081565b600380546102c6906106ff565b80601f01602080910402602001604051908101604052809291908181526020018280546102f2906106ff565b801561033f5780601f106103145761010080835404028352916020019161033f565b820191906000526020600020905b81548152906001019060200180831161032257829003601f168201915b505050505081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000838152602001908152602001600020600201549050919050565b6000806000838152602001908152602001600020600001549050919050565b60076020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010180546103f4906106ff565b80601f0160208091040260200160405190810160405280929190818152602001828054610420906106ff565b801561046d5780601f106104425761010080835404028352916020019161046d565b820191906000526020600020905b81548152906001019060200180831161045057829003601f168201915b5050505050908060020154905083565b60066020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000838152602001908152602001600020600101549050919050565b60045481565b60008135905061050a81610771565b92915050565b60006020828403121561052257600080fd5b6000610530848285016104fb565b91505092915050565b6105428161066c565b82525050565b610551816106a8565b82525050565b600061056282610650565b61056c818561065b565b935061057c8185602086016106cc565b61058581610760565b840191505092915050565b6105998161069e565b82525050565b60006020820190506105b46000830184610539565b92915050565b60006060820190506105cf6000830186610539565b81810360208301526105e18185610557565b90506105f06040830184610590565b949350505050565b600060208201905061060d6000830184610548565b92915050565b6000602082019050818103600083015261062d8184610557565b905092915050565b600060208201905061064a6000830184610590565b92915050565b600081519050919050565b600082825260208201905092915050565b60006106778261067e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006106b3826106ba565b9050919050565b60006106c58261067e565b9050919050565b60005b838110156106ea5780820151818401526020810190506106cf565b838111156106f9576000848401525b50505050565b6000600282049050600182168061071757607f821691505b6020821081141561072b5761072a610731565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b61077a8161069e565b811461078557600080fd5b5056fea2646970667358221220228c69a32122cdde17feca1d3cf63991a34186848c1b8d81563138fe185179aa64736f6c63430008040033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH20 0x414B893562F46F5180971C3389784A447581B2D3 PUSH1 0x5 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLVALUE DUP1 ISZERO PUSH3 0x66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x108D CODESIZE SUB DUP1 PUSH3 0x108D DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x8C SWAP2 SWAP1 PUSH3 0x553 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 PUSH1 0xFF AND LT ISZERO PUSH3 0x18A JUMPI DUP5 DUP2 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH3 0xD9 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x6 PUSH1 0x0 DUP8 DUP5 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH3 0x126 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH3 0x8F JUMP JUMPDEST POP DUP3 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0x2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x1E4 SWAP3 SWAP2 SWAP1 PUSH3 0x30E JUMP JUMPDEST POP DUP1 PUSH1 0x3 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x1FD SWAP3 SWAP2 SWAP1 PUSH3 0x30E JUMP JUMPDEST POP PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xC2551C82 DUP5 ADDRESS PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x25D SWAP3 SWAP2 SWAP1 PUSH3 0x66B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x278 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x28D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH1 0x40 MLOAD PUSH3 0x2A1 SWAP2 SWAP1 PUSH3 0x652 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP3 PUSH1 0x40 MLOAD PUSH3 0x2B9 SWAP2 SWAP1 PUSH3 0x652 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF51D47712D8574BF3715CF1DB64EBB5A5C264FE57FF450433484F786F742ECEC PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP PUSH3 0x8BF JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x31C SWAP1 PUSH3 0x7B0 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x340 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x38C JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x35B JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x38C JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x38C JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x38B JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x36E JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0x39B SWAP2 SWAP1 PUSH3 0x39F JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x3BA JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x3A0 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x3D5 PUSH3 0x3CF DUP5 PUSH3 0x6C1 JUMP JUMPDEST PUSH3 0x698 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP DUP3 DUP6 PUSH1 0x40 DUP7 MUL DUP3 ADD GT ISZERO PUSH3 0x3F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH3 0x429 JUMPI DUP2 PUSH3 0x40E DUP9 DUP3 PUSH3 0x4E9 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x40 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x3F8 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x44A PUSH3 0x444 DUP5 PUSH3 0x6F0 JUMP JUMPDEST PUSH3 0x698 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x463 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x470 DUP5 DUP3 DUP6 PUSH3 0x77A JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x489 DUP2 PUSH3 0x88B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x4A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x4B3 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x3BE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x4CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x4E0 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x433 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x4FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x508 PUSH1 0x40 PUSH3 0x698 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH3 0x51A DUP5 DUP3 DUP6 ADD PUSH3 0x478 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH3 0x530 DUP5 DUP3 DUP6 ADD PUSH3 0x53C JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x54D DUP2 PUSH3 0x8A5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x56A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP6 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x585 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x593 DUP8 DUP3 DUP9 ADD PUSH3 0x48F JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH3 0x5A6 DUP8 DUP3 DUP9 ADD PUSH3 0x478 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x5C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x5D2 DUP8 DUP3 DUP9 ADD PUSH3 0x4BC JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x5F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x5FE DUP8 DUP3 DUP9 ADD PUSH3 0x4BC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH3 0x615 DUP2 PUSH3 0x73C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x628 DUP3 PUSH3 0x726 JUMP JUMPDEST PUSH3 0x634 DUP2 DUP6 PUSH3 0x731 JUMP JUMPDEST SWAP4 POP PUSH3 0x646 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH3 0x77A JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x660 DUP3 DUP5 PUSH3 0x61B JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH3 0x682 PUSH1 0x0 DUP4 ADD DUP6 PUSH3 0x60A JUMP JUMPDEST PUSH3 0x691 PUSH1 0x20 DUP4 ADD DUP5 PUSH3 0x60A JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x6A4 PUSH3 0x6B7 JUMP JUMPDEST SWAP1 POP PUSH3 0x6B2 DUP3 DUP3 PUSH3 0x7E6 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x6DF JUMPI PUSH3 0x6DE PUSH3 0x84B JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x70E JUMPI PUSH3 0x70D PUSH3 0x84B JUMP JUMPDEST JUMPDEST PUSH3 0x719 DUP3 PUSH3 0x87A JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x749 DUP3 PUSH3 0x750 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x79A JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x77D JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x7AA JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x7C9 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x7E0 JUMPI PUSH3 0x7DF PUSH3 0x81C JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x7F1 DUP3 PUSH3 0x87A JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x813 JUMPI PUSH3 0x812 PUSH3 0x84B JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x896 DUP2 PUSH3 0x73C JUMP JUMPDEST DUP2 EQ PUSH3 0x8A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0x8B0 DUP2 PUSH3 0x770 JUMP JUMPDEST DUP2 EQ PUSH3 0x8BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x7BE DUP1 PUSH3 0x8CF PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x81CC7A45 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x81CC7A45 EQ PUSH2 0x15D JUMPI DUP1 PUSH4 0xAC1EFF68 EQ PUSH2 0x18F JUMPI DUP1 PUSH4 0xC308DD5B EQ PUSH2 0x1BF JUMPI DUP1 PUSH4 0xDABC4D51 EQ PUSH2 0x1DD JUMPI DUP1 PUSH4 0xEB496106 EQ PUSH2 0x20D JUMPI PUSH2 0x9E JUMP JUMPDEST DUP1 PUSH4 0x2E9868F8 EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x439D7275 EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0x4CE39EAD EQ PUSH2 0xDF JUMPI DUP1 PUSH4 0x638480BE EQ PUSH2 0xFD JUMPI DUP1 PUSH4 0x6389E107 EQ PUSH2 0x12D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAB PUSH2 0x22B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x613 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC9 PUSH2 0x2B9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD6 SWAP2 SWAP1 PUSH2 0x613 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE7 PUSH2 0x347 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF4 SWAP2 SWAP1 PUSH2 0x59F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x117 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x112 SWAP2 SWAP1 PUSH2 0x510 JUMP JUMPDEST PUSH2 0x36D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x124 SWAP2 SWAP1 PUSH2 0x635 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x147 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x142 SWAP2 SWAP1 PUSH2 0x510 JUMP JUMPDEST PUSH2 0x38C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x154 SWAP2 SWAP1 PUSH2 0x635 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x177 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x172 SWAP2 SWAP1 PUSH2 0x510 JUMP JUMPDEST PUSH2 0x3AB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x186 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5BA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1A4 SWAP2 SWAP1 PUSH2 0x510 JUMP JUMPDEST PUSH2 0x47D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B6 SWAP2 SWAP1 PUSH2 0x5F8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C7 PUSH2 0x4B0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D4 SWAP2 SWAP1 PUSH2 0x59F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F2 SWAP2 SWAP1 PUSH2 0x510 JUMP JUMPDEST PUSH2 0x4D6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x204 SWAP2 SWAP1 PUSH2 0x635 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x215 PUSH2 0x4F5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x222 SWAP2 SWAP1 PUSH2 0x635 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH2 0x238 SWAP1 PUSH2 0x6FF JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x264 SWAP1 PUSH2 0x6FF JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2B1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x286 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2B1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x294 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH2 0x2C6 SWAP1 PUSH2 0x6FF JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2F2 SWAP1 PUSH2 0x6FF JUMP JUMPDEST DUP1 ISZERO PUSH2 0x33F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x314 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x33F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x322 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x3F4 SWAP1 PUSH2 0x6FF JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x420 SWAP1 PUSH2 0x6FF JUMP JUMPDEST DUP1 ISZERO PUSH2 0x46D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x442 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x46D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x450 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 POP DUP4 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x50A DUP2 PUSH2 0x771 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x522 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x530 DUP5 DUP3 DUP6 ADD PUSH2 0x4FB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x542 DUP2 PUSH2 0x66C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x551 DUP2 PUSH2 0x6A8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x562 DUP3 PUSH2 0x650 JUMP JUMPDEST PUSH2 0x56C DUP2 DUP6 PUSH2 0x65B JUMP JUMPDEST SWAP4 POP PUSH2 0x57C DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x6CC JUMP JUMPDEST PUSH2 0x585 DUP2 PUSH2 0x760 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x599 DUP2 PUSH2 0x69E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x5B4 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x539 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x5CF PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x539 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x5E1 DUP2 DUP6 PUSH2 0x557 JUMP JUMPDEST SWAP1 POP PUSH2 0x5F0 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x590 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x60D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x548 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x62D DUP2 DUP5 PUSH2 0x557 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x64A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x590 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x677 DUP3 PUSH2 0x67E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6B3 DUP3 PUSH2 0x6BA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6C5 DUP3 PUSH2 0x67E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x6EA JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x6CF JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x6F9 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x717 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x72B JUMPI PUSH2 0x72A PUSH2 0x731 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x77A DUP2 PUSH2 0x69E JUMP JUMPDEST DUP2 EQ PUSH2 0x785 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x22 DUP13 PUSH10 0xA32122CDDE17FECA1D3C 0xF6 CODECOPY SWAP2 LOG3 COINBASE DUP7 DUP5 DUP13 SHL DUP14 DUP2 JUMP BALANCE CODESIZE INVALID XOR MLOAD PUSH26 0xAA64736F6C634300080400330000000000000000000000000000 ","sourceMap":"272:5749:0:-:0;;;523:42;484:81;;;;;;;;;;;;;;;;;;;;1558:643;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1726:7;1721:211;1743:10;:17;1739:1;:21;;;1721:211;;;1831:10;1842:1;1831:13;;;;;;;;;;;;;;;;;;;;;;;;:29;;;1778:9;:40;1788:10;1799:1;1788:13;;;;;;;;;;;;;;;;;;;;;;;;:29;;;1778:40;;;;;;;;;;;;:83;;;;;;;;;;;;;;;;;;1904:3;;;;;1721:211;;;;1955:7;1941:11;;:21;;;;;;;;;;;;;;;;;;1984:11;1972:10;:23;;;;;;;;;;;;:::i;:::-;;2019:13;2005:12;:27;;;;;;;;;;;;:::i;:::-;;2065:21;;;;;;;;;;;2043:59;;;2103:7;2120:4;2043:83;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2180:13;2141:53;;;;;;:::i;:::-;;;;;;;;2167:11;2141:53;;;;;;:::i;:::-;;;;;;;;2158:7;2141:53;;;;;;;;;;;;1558:643;;;;272:5749;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;44:752:29:-;176:5;201:106;217:89;299:6;217:89;:::i;:::-;201:106;:::i;:::-;192:115;;327:5;356:6;349:5;342:21;390:4;383:5;379:16;372:23;;416:6;466:3;458:4;450:6;446:17;441:3;437:27;434:36;431:2;;;495:1;492;485:12;431:2;531:1;516:274;541:6;538:1;535:13;516:274;;;609:3;638:73;707:3;695:10;638:73;:::i;:::-;633:3;626:86;741:4;736:3;732:14;725:21;;775:4;770:3;766:14;759:21;;576:214;563:1;560;556:9;551:14;;516:274;;;520:14;182:614;;;;;;;:::o;802:354::-;891:5;916:66;932:49;974:6;932:49;:::i;:::-;916:66;:::i;:::-;907:75;;1005:6;998:5;991:21;1043:4;1036:5;1032:16;1081:3;1072:6;1067:3;1063:16;1060:25;1057:2;;;1098:1;1095;1088:12;1057:2;1111:39;1143:6;1138:3;1133;1111:39;:::i;:::-;897:259;;;;;;:::o;1162:143::-;1219:5;1250:6;1244:13;1235:22;;1266:33;1293:5;1266:33;:::i;:::-;1225:80;;;;:::o;1348:368::-;1455:5;1504:3;1497:4;1489:6;1485:17;1481:27;1471:2;;1522:1;1519;1512:12;1471:2;1555:6;1549:13;1580:130;1706:3;1698:6;1691:4;1683:6;1679:17;1580:130;:::i;:::-;1571:139;;1461:255;;;;;:::o;1736:288::-;1803:5;1852:3;1845:4;1837:6;1833:17;1829:27;1819:2;;1870:1;1867;1860:12;1819:2;1903:6;1897:13;1928:90;2014:3;2006:6;1999:4;1991:6;1987:17;1928:90;:::i;:::-;1919:99;;1809:215;;;;;:::o;2065:562::-;2150:5;2194:4;2182:9;2177:3;2173:19;2169:30;2166:2;;;2212:1;2209;2202:12;2166:2;2234:21;2250:4;2234:21;:::i;:::-;2225:30;;2325:1;2365:60;2421:3;2412:6;2401:9;2397:22;2365:60;:::i;:::-;2358:4;2351:5;2347:16;2340:86;2265:172;2507:2;2548:60;2604:3;2595:6;2584:9;2580:22;2548:60;:::i;:::-;2541:4;2534:5;2530:16;2523:86;2447:173;2156:471;;;;:::o;2633:143::-;2690:5;2721:6;2715:13;2706:22;;2737:33;2764:5;2737:33;:::i;:::-;2696:80;;;;:::o;2782:1151::-;2949:6;2957;2965;2973;3022:3;3010:9;3001:7;2997:23;2993:33;2990:2;;;3039:1;3036;3029:12;2990:2;3103:1;3092:9;3088:17;3082:24;3133:18;3125:6;3122:30;3119:2;;;3165:1;3162;3155:12;3119:2;3193:114;3299:7;3290:6;3279:9;3275:22;3193:114;:::i;:::-;3183:124;;3053:264;3356:2;3382:64;3438:7;3429:6;3418:9;3414:22;3382:64;:::i;:::-;3372:74;;3327:129;3516:2;3505:9;3501:18;3495:25;3547:18;3539:6;3536:30;3533:2;;;3579:1;3576;3569:12;3533:2;3607:74;3673:7;3664:6;3653:9;3649:22;3607:74;:::i;:::-;3597:84;;3466:225;3751:2;3740:9;3736:18;3730:25;3782:18;3774:6;3771:30;3768:2;;;3814:1;3811;3804:12;3768:2;3842:74;3908:7;3899:6;3888:9;3884:22;3842:74;:::i;:::-;3832:84;;3701:225;2980:953;;;;;;;:::o;3939:118::-;4026:24;4044:5;4026:24;:::i;:::-;4021:3;4014:37;4004:53;;:::o;4063:377::-;4169:3;4197:39;4230:5;4197:39;:::i;:::-;4252:89;4334:6;4329:3;4252:89;:::i;:::-;4245:96;;4350:52;4395:6;4390:3;4383:4;4376:5;4372:16;4350:52;:::i;:::-;4427:6;4422:3;4418:16;4411:23;;4173:267;;;;;:::o;4446:275::-;4578:3;4600:95;4691:3;4682:6;4600:95;:::i;:::-;4593:102;;4712:3;4705:10;;4582:139;;;;:::o;4727:332::-;4848:4;4886:2;4875:9;4871:18;4863:26;;4899:71;4967:1;4956:9;4952:17;4943:6;4899:71;:::i;:::-;4980:72;5048:2;5037:9;5033:18;5024:6;4980:72;:::i;:::-;4853:206;;;;;:::o;5065:129::-;5099:6;5126:20;;:::i;:::-;5116:30;;5155:33;5183:4;5175:6;5155:33;:::i;:::-;5106:88;;;:::o;5200:75::-;5233:6;5266:2;5260:9;5250:19;;5240:35;:::o;5281:336::-;5383:4;5473:18;5465:6;5462:30;5459:2;;;5495:18;;:::i;:::-;5459:2;5545:4;5537:6;5533:17;5525:25;;5605:4;5599;5595:15;5587:23;;5388:229;;;:::o;5623:308::-;5685:4;5775:18;5767:6;5764:30;5761:2;;;5797:18;;:::i;:::-;5761:2;5835:29;5857:6;5835:29;:::i;:::-;5827:37;;5919:4;5913;5909:15;5901:23;;5690:241;;;:::o;5937:99::-;5989:6;6023:5;6017:12;6007:22;;5996:40;;;:::o;6042:148::-;6144:11;6181:3;6166:18;;6156:34;;;;:::o;6196:96::-;6233:7;6262:24;6280:5;6262:24;:::i;:::-;6251:35;;6241:51;;;:::o;6298:126::-;6335:7;6375:42;6368:5;6364:54;6353:65;;6343:81;;;:::o;6430:77::-;6467:7;6496:5;6485:16;;6475:32;;;:::o;6513:307::-;6581:1;6591:113;6605:6;6602:1;6599:13;6591:113;;;6690:1;6685:3;6681:11;6675:18;6671:1;6666:3;6662:11;6655:39;6627:2;6624:1;6620:10;6615:15;;6591:113;;;6722:6;6719:1;6716:13;6713:2;;;6802:1;6793:6;6788:3;6784:16;6777:27;6713:2;6562:258;;;;:::o;6826:320::-;6870:6;6907:1;6901:4;6897:12;6887:22;;6954:1;6948:4;6944:12;6975:18;6965:2;;7031:4;7023:6;7019:17;7009:27;;6965:2;7093;7085:6;7082:14;7062:18;7059:38;7056:2;;;7112:18;;:::i;:::-;7056:2;6877:269;;;;:::o;7152:281::-;7235:27;7257:4;7235:27;:::i;:::-;7227:6;7223:40;7365:6;7353:10;7350:22;7329:18;7317:10;7314:34;7311:62;7308:2;;;7376:18;;:::i;:::-;7308:2;7416:10;7412:2;7405:22;7195:238;;;:::o;7439:180::-;7487:77;7484:1;7477:88;7584:4;7581:1;7574:15;7608:4;7605:1;7598:15;7625:180;7673:77;7670:1;7663:88;7770:4;7767:1;7760:15;7794:4;7791:1;7784:15;7811:102;7852:6;7903:2;7899:7;7894:2;7887:5;7883:14;7879:28;7869:38;;7859:54;;;:::o;7919:122::-;7992:24;8010:5;7992:24;:::i;:::-;7985:5;7982:35;7972:2;;8031:1;8028;8021:12;7972:2;7962:79;:::o;8047:122::-;8120:24;8138:5;8120:24;:::i;:::-;8113:5;8110:35;8100:2;;8159:1;8156;8149:12;8100:2;8090:79;:::o;272:5749:0:-;;;;;;;"},"deployedBytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4749:29","statements":[{"body":{"nodeType":"YulBlock","src":"59:87:29","statements":[{"nodeType":"YulAssignment","src":"69:29:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"91:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"78:12:29"},"nodeType":"YulFunctionCall","src":"78:20:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"69:5:29"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"134:5:29"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"107:26:29"},"nodeType":"YulFunctionCall","src":"107:33:29"},"nodeType":"YulExpressionStatement","src":"107:33:29"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"37:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"45:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"53:5:29","type":""}],"src":"7:139:29"},{"body":{"nodeType":"YulBlock","src":"218:196:29","statements":[{"body":{"nodeType":"YulBlock","src":"264:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"273:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"276:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"266:6:29"},"nodeType":"YulFunctionCall","src":"266:12:29"},"nodeType":"YulExpressionStatement","src":"266:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"239:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"248:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"235:3:29"},"nodeType":"YulFunctionCall","src":"235:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"260:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"231:3:29"},"nodeType":"YulFunctionCall","src":"231:32:29"},"nodeType":"YulIf","src":"228:2:29"},{"nodeType":"YulBlock","src":"290:117:29","statements":[{"nodeType":"YulVariableDeclaration","src":"305:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"319:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"309:6:29","type":""}]},{"nodeType":"YulAssignment","src":"334:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"369:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"380:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"365:3:29"},"nodeType":"YulFunctionCall","src":"365:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"389:7:29"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"344:20:29"},"nodeType":"YulFunctionCall","src":"344:53:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"334:6:29"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"188:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"199:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"211:6:29","type":""}],"src":"152:262:29"},{"body":{"nodeType":"YulBlock","src":"485:53:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"502:3:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"525:5:29"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"507:17:29"},"nodeType":"YulFunctionCall","src":"507:24:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"495:6:29"},"nodeType":"YulFunctionCall","src":"495:37:29"},"nodeType":"YulExpressionStatement","src":"495:37:29"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"473:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"480:3:29","type":""}],"src":"420:118:29"},{"body":{"nodeType":"YulBlock","src":"627:84:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"644:3:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"698:5:29"}],"functionName":{"name":"convert_t_contract$_IVerifier_$1130_to_t_address","nodeType":"YulIdentifier","src":"649:48:29"},"nodeType":"YulFunctionCall","src":"649:55:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"637:6:29"},"nodeType":"YulFunctionCall","src":"637:68:29"},"nodeType":"YulExpressionStatement","src":"637:68:29"}]},"name":"abi_encode_t_contract$_IVerifier_$1130_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"615:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"622:3:29","type":""}],"src":"544:167:29"},{"body":{"nodeType":"YulBlock","src":"809:272:29","statements":[{"nodeType":"YulVariableDeclaration","src":"819:53:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"866:5:29"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"833:32:29"},"nodeType":"YulFunctionCall","src":"833:39:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"823:6:29","type":""}]},{"nodeType":"YulAssignment","src":"881:78:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"947:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"952:6:29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"888:58:29"},"nodeType":"YulFunctionCall","src":"888:71:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"881:3:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"994:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"1001:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"990:3:29"},"nodeType":"YulFunctionCall","src":"990:16:29"},{"name":"pos","nodeType":"YulIdentifier","src":"1008:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"1013:6:29"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"968:21:29"},"nodeType":"YulFunctionCall","src":"968:52:29"},"nodeType":"YulExpressionStatement","src":"968:52:29"},{"nodeType":"YulAssignment","src":"1029:46:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1040:3:29"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1067:6:29"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"1045:21:29"},"nodeType":"YulFunctionCall","src":"1045:29:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1036:3:29"},"nodeType":"YulFunctionCall","src":"1036:39:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1029:3:29"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"790:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"797:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"805:3:29","type":""}],"src":"717:364:29"},{"body":{"nodeType":"YulBlock","src":"1152:53:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1169:3:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1192:5:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1174:17:29"},"nodeType":"YulFunctionCall","src":"1174:24:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1162:6:29"},"nodeType":"YulFunctionCall","src":"1162:37:29"},"nodeType":"YulExpressionStatement","src":"1162:37:29"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1140:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1147:3:29","type":""}],"src":"1087:118:29"},{"body":{"nodeType":"YulBlock","src":"1309:124:29","statements":[{"nodeType":"YulAssignment","src":"1319:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1331:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1342:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1327:3:29"},"nodeType":"YulFunctionCall","src":"1327:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1319:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1399:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1412:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1423:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1408:3:29"},"nodeType":"YulFunctionCall","src":"1408:17:29"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"1355:43:29"},"nodeType":"YulFunctionCall","src":"1355:71:29"},"nodeType":"YulExpressionStatement","src":"1355:71:29"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1281:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1293:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1304:4:29","type":""}],"src":"1211:222:29"},{"body":{"nodeType":"YulBlock","src":"1613:359:29","statements":[{"nodeType":"YulAssignment","src":"1623:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1635:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1646:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1631:3:29"},"nodeType":"YulFunctionCall","src":"1631:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1623:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1703:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1716:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1727:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1712:3:29"},"nodeType":"YulFunctionCall","src":"1712:17:29"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"1659:43:29"},"nodeType":"YulFunctionCall","src":"1659:71:29"},"nodeType":"YulExpressionStatement","src":"1659:71:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1751:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1762:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1747:3:29"},"nodeType":"YulFunctionCall","src":"1747:18:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"1771:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"1777:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1767:3:29"},"nodeType":"YulFunctionCall","src":"1767:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1740:6:29"},"nodeType":"YulFunctionCall","src":"1740:48:29"},"nodeType":"YulExpressionStatement","src":"1740:48:29"},{"nodeType":"YulAssignment","src":"1797:86:29","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"1869:6:29"},{"name":"tail","nodeType":"YulIdentifier","src":"1878:4:29"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"1805:63:29"},"nodeType":"YulFunctionCall","src":"1805:78:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1797:4:29"}]},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"1937:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1950:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1961:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1946:3:29"},"nodeType":"YulFunctionCall","src":"1946:18:29"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"1893:43:29"},"nodeType":"YulFunctionCall","src":"1893:72:29"},"nodeType":"YulExpressionStatement","src":"1893:72:29"}]},"name":"abi_encode_tuple_t_address_t_string_memory_ptr_t_uint256__to_t_address_t_string_memory_ptr_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1569:9:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1581:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1589:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1597:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1608:4:29","type":""}],"src":"1439:533:29"},{"body":{"nodeType":"YulBlock","src":"2094:142:29","statements":[{"nodeType":"YulAssignment","src":"2104:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2116:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"2127:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2112:3:29"},"nodeType":"YulFunctionCall","src":"2112:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2104:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2202:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2215:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"2226:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2211:3:29"},"nodeType":"YulFunctionCall","src":"2211:17:29"}],"functionName":{"name":"abi_encode_t_contract$_IVerifier_$1130_to_t_address_fromStack","nodeType":"YulIdentifier","src":"2140:61:29"},"nodeType":"YulFunctionCall","src":"2140:89:29"},"nodeType":"YulExpressionStatement","src":"2140:89:29"}]},"name":"abi_encode_tuple_t_contract$_IVerifier_$1130__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2066:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2078:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2089:4:29","type":""}],"src":"1978:258:29"},{"body":{"nodeType":"YulBlock","src":"2360:195:29","statements":[{"nodeType":"YulAssignment","src":"2370:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2382:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"2393:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2378:3:29"},"nodeType":"YulFunctionCall","src":"2378:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2370:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2417:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"2428:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2413:3:29"},"nodeType":"YulFunctionCall","src":"2413:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"2436:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"2442:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2432:3:29"},"nodeType":"YulFunctionCall","src":"2432:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2406:6:29"},"nodeType":"YulFunctionCall","src":"2406:47:29"},"nodeType":"YulExpressionStatement","src":"2406:47:29"},{"nodeType":"YulAssignment","src":"2462:86:29","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2534:6:29"},{"name":"tail","nodeType":"YulIdentifier","src":"2543:4:29"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2470:63:29"},"nodeType":"YulFunctionCall","src":"2470:78:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2462:4:29"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2332:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2344:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2355:4:29","type":""}],"src":"2242:313:29"},{"body":{"nodeType":"YulBlock","src":"2659:124:29","statements":[{"nodeType":"YulAssignment","src":"2669:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2681:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"2692:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2677:3:29"},"nodeType":"YulFunctionCall","src":"2677:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2669:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2749:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2762:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"2773:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2758:3:29"},"nodeType":"YulFunctionCall","src":"2758:17:29"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"2705:43:29"},"nodeType":"YulFunctionCall","src":"2705:71:29"},"nodeType":"YulExpressionStatement","src":"2705:71:29"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2631:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2643:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2654:4:29","type":""}],"src":"2561:222:29"},{"body":{"nodeType":"YulBlock","src":"2848:40:29","statements":[{"nodeType":"YulAssignment","src":"2859:22:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2875:5:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2869:5:29"},"nodeType":"YulFunctionCall","src":"2869:12:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2859:6:29"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2831:5:29","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"2841:6:29","type":""}],"src":"2789:99:29"},{"body":{"nodeType":"YulBlock","src":"2990:73:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3007:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"3012:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3000:6:29"},"nodeType":"YulFunctionCall","src":"3000:19:29"},"nodeType":"YulExpressionStatement","src":"3000:19:29"},{"nodeType":"YulAssignment","src":"3028:29:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3047:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"3052:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3043:3:29"},"nodeType":"YulFunctionCall","src":"3043:14:29"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"3028:11:29"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"2962:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"2967:6:29","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"2978:11:29","type":""}],"src":"2894:169:29"},{"body":{"nodeType":"YulBlock","src":"3114:51:29","statements":[{"nodeType":"YulAssignment","src":"3124:35:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3153:5:29"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"3135:17:29"},"nodeType":"YulFunctionCall","src":"3135:24:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3124:7:29"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3096:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3106:7:29","type":""}],"src":"3069:96:29"},{"body":{"nodeType":"YulBlock","src":"3216:81:29","statements":[{"nodeType":"YulAssignment","src":"3226:65:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3241:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"3248:42:29","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3237:3:29"},"nodeType":"YulFunctionCall","src":"3237:54:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3226:7:29"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3198:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3208:7:29","type":""}],"src":"3171:126:29"},{"body":{"nodeType":"YulBlock","src":"3348:32:29","statements":[{"nodeType":"YulAssignment","src":"3358:16:29","value":{"name":"value","nodeType":"YulIdentifier","src":"3369:5:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3358:7:29"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3330:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3340:7:29","type":""}],"src":"3303:77:29"},{"body":{"nodeType":"YulBlock","src":"3464:84:29","statements":[{"nodeType":"YulAssignment","src":"3474:68:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3536:5:29"}],"functionName":{"name":"convert_t_contract$_IVerifier_$1130_to_t_uint160","nodeType":"YulIdentifier","src":"3487:48:29"},"nodeType":"YulFunctionCall","src":"3487:55:29"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"3474:9:29"}]}]},"name":"convert_t_contract$_IVerifier_$1130_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3444:5:29","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"3454:9:29","type":""}],"src":"3386:162:29"},{"body":{"nodeType":"YulBlock","src":"3632:53:29","statements":[{"nodeType":"YulAssignment","src":"3642:37:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3673:5:29"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"3655:17:29"},"nodeType":"YulFunctionCall","src":"3655:24:29"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"3642:9:29"}]}]},"name":"convert_t_contract$_IVerifier_$1130_to_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3612:5:29","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"3622:9:29","type":""}],"src":"3554:131:29"},{"body":{"nodeType":"YulBlock","src":"3740:258:29","statements":[{"nodeType":"YulVariableDeclaration","src":"3750:10:29","value":{"kind":"number","nodeType":"YulLiteral","src":"3759:1:29","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"3754:1:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"3819:63:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3844:3:29"},{"name":"i","nodeType":"YulIdentifier","src":"3849:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3840:3:29"},"nodeType":"YulFunctionCall","src":"3840:11:29"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3863:3:29"},{"name":"i","nodeType":"YulIdentifier","src":"3868:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3859:3:29"},"nodeType":"YulFunctionCall","src":"3859:11:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3853:5:29"},"nodeType":"YulFunctionCall","src":"3853:18:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3833:6:29"},"nodeType":"YulFunctionCall","src":"3833:39:29"},"nodeType":"YulExpressionStatement","src":"3833:39:29"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3780:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"3783:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3777:2:29"},"nodeType":"YulFunctionCall","src":"3777:13:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3791:19:29","statements":[{"nodeType":"YulAssignment","src":"3793:15:29","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3802:1:29"},{"kind":"number","nodeType":"YulLiteral","src":"3805:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3798:3:29"},"nodeType":"YulFunctionCall","src":"3798:10:29"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3793:1:29"}]}]},"pre":{"nodeType":"YulBlock","src":"3773:3:29","statements":[]},"src":"3769:113:29"},{"body":{"nodeType":"YulBlock","src":"3916:76:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3966:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"3971:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3962:3:29"},"nodeType":"YulFunctionCall","src":"3962:16:29"},{"kind":"number","nodeType":"YulLiteral","src":"3980:1:29","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3955:6:29"},"nodeType":"YulFunctionCall","src":"3955:27:29"},"nodeType":"YulExpressionStatement","src":"3955:27:29"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3897:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"3900:6:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3894:2:29"},"nodeType":"YulFunctionCall","src":"3894:13:29"},"nodeType":"YulIf","src":"3891:2:29"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"3722:3:29","type":""},{"name":"dst","nodeType":"YulTypedName","src":"3727:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"3732:6:29","type":""}],"src":"3691:307:29"},{"body":{"nodeType":"YulBlock","src":"4055:269:29","statements":[{"nodeType":"YulAssignment","src":"4065:22:29","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"4079:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"4085:1:29","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4075:3:29"},"nodeType":"YulFunctionCall","src":"4075:12:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4065:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"4096:38:29","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"4126:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"4132:1:29","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4122:3:29"},"nodeType":"YulFunctionCall","src":"4122:12:29"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"4100:18:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"4173:51:29","statements":[{"nodeType":"YulAssignment","src":"4187:27:29","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4201:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"4209:4:29","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4197:3:29"},"nodeType":"YulFunctionCall","src":"4197:17:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4187:6:29"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4153:18:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4146:6:29"},"nodeType":"YulFunctionCall","src":"4146:26:29"},"nodeType":"YulIf","src":"4143:2:29"},{"body":{"nodeType":"YulBlock","src":"4276:42:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"4290:16:29"},"nodeType":"YulFunctionCall","src":"4290:18:29"},"nodeType":"YulExpressionStatement","src":"4290:18:29"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4240:18:29"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4263:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"4271:2:29","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4260:2:29"},"nodeType":"YulFunctionCall","src":"4260:14:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4237:2:29"},"nodeType":"YulFunctionCall","src":"4237:38:29"},"nodeType":"YulIf","src":"4234:2:29"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"4039:4:29","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"4048:6:29","type":""}],"src":"4004:320:29"},{"body":{"nodeType":"YulBlock","src":"4358:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4375:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4378:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4368:6:29"},"nodeType":"YulFunctionCall","src":"4368:88:29"},"nodeType":"YulExpressionStatement","src":"4368:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4472:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4475:4:29","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4465:6:29"},"nodeType":"YulFunctionCall","src":"4465:15:29"},"nodeType":"YulExpressionStatement","src":"4465:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4496:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4499:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4489:6:29"},"nodeType":"YulFunctionCall","src":"4489:15:29"},"nodeType":"YulExpressionStatement","src":"4489:15:29"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"4330:180:29"},{"body":{"nodeType":"YulBlock","src":"4564:54:29","statements":[{"nodeType":"YulAssignment","src":"4574:38:29","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4592:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"4599:2:29","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4588:3:29"},"nodeType":"YulFunctionCall","src":"4588:14:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4608:2:29","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4604:3:29"},"nodeType":"YulFunctionCall","src":"4604:7:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4584:3:29"},"nodeType":"YulFunctionCall","src":"4584:28:29"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"4574:6:29"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4547:5:29","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"4557:6:29","type":""}],"src":"4516:102:29"},{"body":{"nodeType":"YulBlock","src":"4667:79:29","statements":[{"body":{"nodeType":"YulBlock","src":"4724:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4733:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4736:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4726:6:29"},"nodeType":"YulFunctionCall","src":"4726:12:29"},"nodeType":"YulExpressionStatement","src":"4726:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4690:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4715:5:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"4697:17:29"},"nodeType":"YulFunctionCall","src":"4697:24:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4687:2:29"},"nodeType":"YulFunctionCall","src":"4687:35:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4680:6:29"},"nodeType":"YulFunctionCall","src":"4680:43:29"},"nodeType":"YulIf","src":"4677:2:29"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4660:5:29","type":""}],"src":"4624:122:29"}]},"contents":"{\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_contract$_IVerifier_$1130_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_IVerifier_$1130_to_t_address(value))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address_t_string_memory_ptr_t_uint256__to_t_address_t_string_memory_ptr_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value1,  tail)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_contract$_IVerifier_$1130__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_IVerifier_$1130_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function convert_t_contract$_IVerifier_$1130_to_t_address(value) -> converted {\n        converted := convert_t_contract$_IVerifier_$1130_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_IVerifier_$1130_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(value)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n","id":29,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061009e5760003560e01c806381cc7a451161006657806381cc7a451461015d578063ac1eff681461018f578063c308dd5b146101bf578063dabc4d51146101dd578063eb4961061461020d5761009e565b80632e9868f8146100a3578063439d7275146100c15780634ce39ead146100df578063638480be146100fd5780636389e1071461012d575b600080fd5b6100ab61022b565b6040516100b89190610613565b60405180910390f35b6100c96102b9565b6040516100d69190610613565b60405180910390f35b6100e7610347565b6040516100f4919061059f565b60405180910390f35b61011760048036038101906101129190610510565b61036d565b6040516101249190610635565b60405180910390f35b61014760048036038101906101429190610510565b61038c565b6040516101549190610635565b60405180910390f35b61017760048036038101906101729190610510565b6103ab565b604051610186939291906105ba565b60405180910390f35b6101a960048036038101906101a49190610510565b61047d565b6040516101b691906105f8565b60405180910390f35b6101c76104b0565b6040516101d4919061059f565b60405180910390f35b6101f760048036038101906101f29190610510565b6104d6565b6040516102049190610635565b60405180910390f35b6102156104f5565b6040516102229190610635565b60405180910390f35b60028054610238906106ff565b80601f0160208091040260200160405190810160405280929190818152602001828054610264906106ff565b80156102b15780601f10610286576101008083540402835291602001916102b1565b820191906000526020600020905b81548152906001019060200180831161029457829003601f168201915b505050505081565b600380546102c6906106ff565b80601f01602080910402602001604051908101604052809291908181526020018280546102f2906106ff565b801561033f5780601f106103145761010080835404028352916020019161033f565b820191906000526020600020905b81548152906001019060200180831161032257829003601f168201915b505050505081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000838152602001908152602001600020600201549050919050565b6000806000838152602001908152602001600020600001549050919050565b60076020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010180546103f4906106ff565b80601f0160208091040260200160405190810160405280929190818152602001828054610420906106ff565b801561046d5780601f106104425761010080835404028352916020019161046d565b820191906000526020600020905b81548152906001019060200180831161045057829003601f168201915b5050505050908060020154905083565b60066020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000838152602001908152602001600020600101549050919050565b60045481565b60008135905061050a81610771565b92915050565b60006020828403121561052257600080fd5b6000610530848285016104fb565b91505092915050565b6105428161066c565b82525050565b610551816106a8565b82525050565b600061056282610650565b61056c818561065b565b935061057c8185602086016106cc565b61058581610760565b840191505092915050565b6105998161069e565b82525050565b60006020820190506105b46000830184610539565b92915050565b60006060820190506105cf6000830186610539565b81810360208301526105e18185610557565b90506105f06040830184610590565b949350505050565b600060208201905061060d6000830184610548565b92915050565b6000602082019050818103600083015261062d8184610557565b905092915050565b600060208201905061064a6000830184610590565b92915050565b600081519050919050565b600082825260208201905092915050565b60006106778261067e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006106b3826106ba565b9050919050565b60006106c58261067e565b9050919050565b60005b838110156106ea5780820151818401526020810190506106cf565b838111156106f9576000848401525b50505050565b6000600282049050600182168061071757607f821691505b6020821081141561072b5761072a610731565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b61077a8161069e565b811461078557600080fd5b5056fea2646970667358221220228c69a32122cdde17feca1d3cf63991a34186848c1b8d81563138fe185179aa64736f6c63430008040033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x81CC7A45 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x81CC7A45 EQ PUSH2 0x15D JUMPI DUP1 PUSH4 0xAC1EFF68 EQ PUSH2 0x18F JUMPI DUP1 PUSH4 0xC308DD5B EQ PUSH2 0x1BF JUMPI DUP1 PUSH4 0xDABC4D51 EQ PUSH2 0x1DD JUMPI DUP1 PUSH4 0xEB496106 EQ PUSH2 0x20D JUMPI PUSH2 0x9E JUMP JUMPDEST DUP1 PUSH4 0x2E9868F8 EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x439D7275 EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0x4CE39EAD EQ PUSH2 0xDF JUMPI DUP1 PUSH4 0x638480BE EQ PUSH2 0xFD JUMPI DUP1 PUSH4 0x6389E107 EQ PUSH2 0x12D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAB PUSH2 0x22B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x613 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC9 PUSH2 0x2B9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD6 SWAP2 SWAP1 PUSH2 0x613 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE7 PUSH2 0x347 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF4 SWAP2 SWAP1 PUSH2 0x59F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x117 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x112 SWAP2 SWAP1 PUSH2 0x510 JUMP JUMPDEST PUSH2 0x36D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x124 SWAP2 SWAP1 PUSH2 0x635 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x147 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x142 SWAP2 SWAP1 PUSH2 0x510 JUMP JUMPDEST PUSH2 0x38C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x154 SWAP2 SWAP1 PUSH2 0x635 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x177 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x172 SWAP2 SWAP1 PUSH2 0x510 JUMP JUMPDEST PUSH2 0x3AB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x186 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5BA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1A4 SWAP2 SWAP1 PUSH2 0x510 JUMP JUMPDEST PUSH2 0x47D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B6 SWAP2 SWAP1 PUSH2 0x5F8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C7 PUSH2 0x4B0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D4 SWAP2 SWAP1 PUSH2 0x59F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F2 SWAP2 SWAP1 PUSH2 0x510 JUMP JUMPDEST PUSH2 0x4D6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x204 SWAP2 SWAP1 PUSH2 0x635 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x215 PUSH2 0x4F5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x222 SWAP2 SWAP1 PUSH2 0x635 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH2 0x238 SWAP1 PUSH2 0x6FF JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x264 SWAP1 PUSH2 0x6FF JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2B1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x286 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2B1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x294 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH2 0x2C6 SWAP1 PUSH2 0x6FF JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2F2 SWAP1 PUSH2 0x6FF JUMP JUMPDEST DUP1 ISZERO PUSH2 0x33F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x314 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x33F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x322 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x3F4 SWAP1 PUSH2 0x6FF JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x420 SWAP1 PUSH2 0x6FF JUMP JUMPDEST DUP1 ISZERO PUSH2 0x46D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x442 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x46D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x450 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 POP DUP4 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x50A DUP2 PUSH2 0x771 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x522 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x530 DUP5 DUP3 DUP6 ADD PUSH2 0x4FB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x542 DUP2 PUSH2 0x66C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x551 DUP2 PUSH2 0x6A8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x562 DUP3 PUSH2 0x650 JUMP JUMPDEST PUSH2 0x56C DUP2 DUP6 PUSH2 0x65B JUMP JUMPDEST SWAP4 POP PUSH2 0x57C DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x6CC JUMP JUMPDEST PUSH2 0x585 DUP2 PUSH2 0x760 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x599 DUP2 PUSH2 0x69E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x5B4 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x539 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x5CF PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x539 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x5E1 DUP2 DUP6 PUSH2 0x557 JUMP JUMPDEST SWAP1 POP PUSH2 0x5F0 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x590 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x60D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x548 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x62D DUP2 DUP5 PUSH2 0x557 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x64A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x590 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x677 DUP3 PUSH2 0x67E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6B3 DUP3 PUSH2 0x6BA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6C5 DUP3 PUSH2 0x67E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x6EA JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x6CF JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x6F9 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x717 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x72B JUMPI PUSH2 0x72A PUSH2 0x731 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x77A DUP2 PUSH2 0x69E JUMP JUMPDEST DUP2 EQ PUSH2 0x785 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x22 DUP13 PUSH10 0xA32122CDDE17FECA1D3C 0xF6 CODECOPY SWAP2 LOG3 COINBASE DUP7 DUP5 DUP13 SHL DUP14 DUP2 JUMP BALANCE CODESIZE INVALID XOR MLOAD PUSH26 0xAA64736F6C634300080400330000000000000000000000000000 ","sourceMap":"272:5749:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;384:24;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;414:26;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;352;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4827:157:3;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4617:139;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;751:37:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;637:46;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;484:81;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4418:137:3;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;446:31:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;384:24;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;414:26::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;352:::-;;;;;;;;;;;;;:::o;4827:157:3:-;4918:7;4944:10;:18;4955:6;4944:18;;;;;;;;;;;:33;;;4937:40;;4827:157;;;:::o;4617:139::-;4699:7;4725:10;:18;4736:6;4725:18;;;;;;;;;;;:24;;;4718:31;;4617:139;;;:::o;751:37:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;637:46::-;;;;;;;;;;;;;;;;;;;;;;:::o;484:81::-;;;;;;;;;;;;;:::o;4418:137:3:-;4499:7;4525:10;:18;4536:6;4525:18;;;;;;;;;;;:23;;;4518:30;;4418:137;;;:::o;446:31:0:-;;;;:::o;7:139:29:-;53:5;91:6;78:20;69:29;;107:33;134:5;107:33;:::i;:::-;59:87;;;;:::o;152:262::-;211:6;260:2;248:9;239:7;235:23;231:32;228:2;;;276:1;273;266:12;228:2;319:1;344:53;389:7;380:6;369:9;365:22;344:53;:::i;:::-;334:63;;290:117;218:196;;;;:::o;420:118::-;507:24;525:5;507:24;:::i;:::-;502:3;495:37;485:53;;:::o;544:167::-;649:55;698:5;649:55;:::i;:::-;644:3;637:68;627:84;;:::o;717:364::-;805:3;833:39;866:5;833:39;:::i;:::-;888:71;952:6;947:3;888:71;:::i;:::-;881:78;;968:52;1013:6;1008:3;1001:4;994:5;990:16;968:52;:::i;:::-;1045:29;1067:6;1045:29;:::i;:::-;1040:3;1036:39;1029:46;;809:272;;;;;:::o;1087:118::-;1174:24;1192:5;1174:24;:::i;:::-;1169:3;1162:37;1152:53;;:::o;1211:222::-;1304:4;1342:2;1331:9;1327:18;1319:26;;1355:71;1423:1;1412:9;1408:17;1399:6;1355:71;:::i;:::-;1309:124;;;;:::o;1439:533::-;1608:4;1646:2;1635:9;1631:18;1623:26;;1659:71;1727:1;1716:9;1712:17;1703:6;1659:71;:::i;:::-;1777:9;1771:4;1767:20;1762:2;1751:9;1747:18;1740:48;1805:78;1878:4;1869:6;1805:78;:::i;:::-;1797:86;;1893:72;1961:2;1950:9;1946:18;1937:6;1893:72;:::i;:::-;1613:359;;;;;;:::o;1978:258::-;2089:4;2127:2;2116:9;2112:18;2104:26;;2140:89;2226:1;2215:9;2211:17;2202:6;2140:89;:::i;:::-;2094:142;;;;:::o;2242:313::-;2355:4;2393:2;2382:9;2378:18;2370:26;;2442:9;2436:4;2432:20;2428:1;2417:9;2413:17;2406:47;2470:78;2543:4;2534:6;2470:78;:::i;:::-;2462:86;;2360:195;;;;:::o;2561:222::-;2654:4;2692:2;2681:9;2677:18;2669:26;;2705:71;2773:1;2762:9;2758:17;2749:6;2705:71;:::i;:::-;2659:124;;;;:::o;2789:99::-;2841:6;2875:5;2869:12;2859:22;;2848:40;;;:::o;2894:169::-;2978:11;3012:6;3007:3;3000:19;3052:4;3047:3;3043:14;3028:29;;2990:73;;;;:::o;3069:96::-;3106:7;3135:24;3153:5;3135:24;:::i;:::-;3124:35;;3114:51;;;:::o;3171:126::-;3208:7;3248:42;3241:5;3237:54;3226:65;;3216:81;;;:::o;3303:77::-;3340:7;3369:5;3358:16;;3348:32;;;:::o;3386:162::-;3454:9;3487:55;3536:5;3487:55;:::i;:::-;3474:68;;3464:84;;;:::o;3554:131::-;3622:9;3655:24;3673:5;3655:24;:::i;:::-;3642:37;;3632:53;;;:::o;3691:307::-;3759:1;3769:113;3783:6;3780:1;3777:13;3769:113;;;3868:1;3863:3;3859:11;3853:18;3849:1;3844:3;3840:11;3833:39;3805:2;3802:1;3798:10;3793:15;;3769:113;;;3900:6;3897:1;3894:13;3891:2;;;3980:1;3971:6;3966:3;3962:16;3955:27;3891:2;3740:258;;;;:::o;4004:320::-;4048:6;4085:1;4079:4;4075:12;4065:22;;4132:1;4126:4;4122:12;4153:18;4143:2;;4209:4;4201:6;4197:17;4187:27;;4143:2;4271;4263:6;4260:14;4240:18;4237:38;4234:2;;;4290:18;;:::i;:::-;4234:2;4055:269;;;;:::o;4330:180::-;4378:77;4375:1;4368:88;4475:4;4472:1;4465:15;4499:4;4496:1;4489:15;4516:102;4557:6;4608:2;4604:7;4599:2;4592:5;4588:14;4584:28;4574:38;;4564:54;;;:::o;4624:122::-;4697:24;4715:5;4697:24;:::i;:::-;4690:5;4687:35;4677:2;;4736:1;4733;4726:12;4677:2;4667:79;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"396400","executionCost":"infinite","totalCost":"infinite"},"external":{"creds(uint256)":"infinite","credsIssuedCount()":"1217","credsIssuer()":"1259","credsProtocolRegistry()":"1258","getMerkleTreeDepth(uint256)":"infinite","getMerkleTreeRoot(uint256)":"infinite","getNumberOfMerkleTreeLeaves(uint256)":"infinite","issuerName()":"infinite","issuerSymbol()":"infinite","verifiers(uint256)":"1604"},"internal":{"addIdentities(uint256,uint256[] calldata)":"infinite","addIdentity(uint256,uint256)":"infinite","createCred(uint256,uint256,uint256,address,string memory)":"infinite","createCred(uint256,uint256,uint256,address,uint256,string memory)":"infinite","removeIdentity(uint256,uint256,uint256[] calldata,uint8[] calldata)":"infinite","updateIdentity(uint256,uint256,uint256,uint256[] calldata,uint8[] calldata)":"infinite","verifyProof(uint256,uint256,bytes32,uint256,uint256,uint256[8] calldata)":"infinite"}},"methodIdentifiers":{"creds(uint256)":"81cc7a45","credsIssuedCount()":"eb496106","credsIssuer()":"4ce39ead","credsProtocolRegistry()":"c308dd5b","getMerkleTreeDepth(uint256)":"6389e107","getMerkleTreeRoot(uint256)":"dabc4d51","getNumberOfMerkleTreeLeaves(uint256)":"638480be","issuerName()":"2e9868f8","issuerSymbol()":"439d7275","verifiers(uint256)":"ac1eff68"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"merkleTreeDepth\",\"type\":\"uint256\"}],\"internalType\":\"struct ICredential.Verifier[]\",\"name\":\"_verifiers\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_issuerName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_issuerSymbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Credential__CallerIsNotTheCredIssuer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Credential__CredAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Credential__CredDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Credential__CredIdIsNotLessThanSnarkScalarField\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Credential__MerkleTreeDepthIsNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Credential__MerkleTreeRootIsExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Credential__MerkleTreeRootIsNotPartOfTheCred\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Credential__YouAreUsingTheSameNillifierTwice\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"credId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"merkleTreeDepth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"zeroValue\",\"type\":\"uint256\"}],\"name\":\"CredCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"credId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"identityCommitment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"merkleTreeRoot\",\"type\":\"uint256\"}],\"name\":\"IdentityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"credId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"identityCommitment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"merkleTreeRoot\",\"type\":\"uint256\"}],\"name\":\"IdentityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"credId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"identityCommitment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newIdentityCommitment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"merkleTreeRoot\",\"type\":\"uint256\"}],\"name\":\"IdentityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nullifierHash\",\"type\":\"uint256\"}],\"name\":\"NullifierHashAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"credId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"merkleTreeRoot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"externalNullifier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nullifierHash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"signal\",\"type\":\"bytes32\"}],\"name\":\"ProofVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"issuerName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"issuerSymbol\",\"type\":\"string\"}],\"name\":\"issuerRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"credURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"merkleRootDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"credsIssuedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"credsIssuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"credsProtocolRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"credID\",\"type\":\"uint256\"}],\"name\":\"getMerkleTreeDepth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"credID\",\"type\":\"uint256\"}],\"name\":\"getMerkleTreeRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"credID\",\"type\":\"uint256\"}],\"name\":\"getNumberOfMerkleTreeLeaves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuerName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuerSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"verifiers\",\"outputs\":[{\"internalType\":\"contract IVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the Credential verifiers used to verify the user's ZK proofs.\",\"params\":{\"_verifiers\":\": List of Credential verifiers (address and related Merkle tree depth).\"}},\"getMerkleTreeDepth(uint256)\":{\"details\":\"See {ICredentialCreds-getMerkleTreeDepth}.\"},\"getMerkleTreeRoot(uint256)\":{\"details\":\"See {ICredentialCreds-getMerkleTreeRoot}.\"},\"getNumberOfMerkleTreeLeaves(uint256)\":{\"details\":\"See {ICredentialCreds-getNumberOfMerkleTreeLeaves}.\"}},\"stateVariables\":{\"creds\":{\"details\":\"Gets a cred id and returns the cred parameters.\"},\"verifiers\":{\"details\":\"Gets a tree depth and returns its verifier address.\"}},\"title\":\"CredsIssuer\",\"version\":1},\"userdoc\":{\"events\":{\"NullifierHashAdded(uint256)\":{\"notice\":\"Emitted when a proof is verified correctly and a new nullifier hash is added.\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@creds-protocol/contracts/CredsIssuer.sol\":\"CredsIssuer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@creds-protocol/contracts/CredsIssuer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./interfaces/ICredential.sol\\\";\\nimport \\\"./interfaces/IVerifier.sol\\\";\\nimport \\\"./base/CredentialCore.sol\\\";\\nimport \\\"./base/CredentialCreds.sol\\\";\\nimport \\\"./base/CredsProtocolRegistry.sol\\\";\\n\\n/// @title CredsIssuer\\ncontract CredsIssuer is ICredential, CredentialCore, CredentialCreds {\\n    \\n    address public credsIssuer;\\n    string public issuerName;\\n    string public issuerSymbol;\\n    uint256 public credsIssuedCount;\\n\\n    address public credsProtocolRegistry = 0x414b893562f46f5180971c3389784A447581b2d3;\\n\\n    /// @dev Gets a tree depth and returns its verifier address.\\n    mapping(uint256 => IVerifier) public verifiers;\\n\\n    /// @dev Gets a cred id and returns the cred parameters.\\n    mapping(uint256 => Cred) public creds;\\n    \\n    /// @dev Checks if the cred issuer is the transaction sender.\\n    modifier onlyCredsIssuer() {\\n        if (credsIssuer == _msgSender()) {\\n            revert Credential__CallerIsNotTheCredIssuer();\\n        }\\n        _;\\n    }\\n\\n    /// @dev Checks if there is a verifier for the given tree depth.\\n    /// @param merkleTreeDepth: Depth of the tree.\\n    modifier onlySupportedMerkleTreeDepth(uint256 merkleTreeDepth) {\\n        if (address(verifiers[merkleTreeDepth]) == address(0)) {\\n            revert Credential__MerkleTreeDepthIsNotSupported();\\n        }\\n        _;\\n    }\\n\\n    /// @dev Initializes the Credential verifiers used to verify the user's ZK proofs.\\n    /// @param _verifiers: List of Credential verifiers (address and related Merkle tree depth).\\n    constructor(\\n        Verifier[] memory _verifiers,\\n        address _issuer,\\n        string memory _issuerName,\\n        string memory _issuerSymbol) \\n    {\\n        for (uint8 i = 0; i < _verifiers.length; ) {\\n            verifiers[_verifiers[i].merkleTreeDepth] = IVerifier(_verifiers[i].contractAddress);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        credsIssuer = _issuer;\\n        issuerName =_issuerName;\\n        issuerSymbol =_issuerSymbol; \\n        CredsProtocolRegistry(credsProtocolRegistry).registerIssuer(_issuer, address(this));\\n        emit issuerRegistered(_issuer, _issuerName, _issuerSymbol);\\n    }\\n\\n    function createCred(\\n        uint256 credId,\\n        uint256 merkleTreeDepth,\\n        uint256 zeroValue,\\n        address admin,\\n        string memory credURI\\n    ) internal onlySupportedMerkleTreeDepth(merkleTreeDepth) {\\n        _createCred(msg.sender, credId, merkleTreeDepth, zeroValue);\\n\\n        creds[credId].admin = admin;\\n        creds[credId].credURI = credURI;\\n        creds[credId].merkleRootDuration = 1 hours;\\n        credsIssuedCount = credsIssuedCount + 1;\\n    }\\n\\n    function createCred(\\n        uint256 credId,\\n        uint256 merkleTreeDepth,\\n        uint256 zeroValue,\\n        address admin,\\n        uint256 merkleTreeRootDuration,\\n        string memory credURI\\n    ) internal onlySupportedMerkleTreeDepth(merkleTreeDepth) {\\n        _createCred(msg.sender, credId, merkleTreeDepth, zeroValue);\\n\\n        creds[credId].admin = admin;\\n        creds[credId].credURI = credURI;\\n        creds[credId].merkleRootDuration = merkleTreeRootDuration;\\n        credsIssuedCount = credsIssuedCount + 1;\\n    }\\n\\n    function addIdentity(uint256 credId, uint256 identityCommitment) internal {\\n        _addIdentity(credId, identityCommitment);\\n\\n        uint256 merkleTreeRoot = getMerkleTreeRoot(credId);\\n\\n        creds[credId].merkleRootCreationDates[merkleTreeRoot] = block.timestamp;\\n    }\\n\\n    function addIdentities(uint256 credId, uint256[] calldata identityCommitments)\\n        internal\\n    {\\n        for (uint8 i = 0; i < identityCommitments.length; ) {\\n            _addIdentity(credId, identityCommitments[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        uint256 merkleTreeRoot = getMerkleTreeRoot(credId);\\n\\n        creds[credId].merkleRootCreationDates[merkleTreeRoot] = block.timestamp;\\n    }\\n\\n    function updateIdentity(\\n        uint256 credId,\\n        uint256 identityCommitment,\\n        uint256 newIdentityCommitment,\\n        uint256[] calldata proofSiblings,\\n        uint8[] calldata proofPathIndices\\n    ) internal {\\n        _updateIdentity(credId, identityCommitment, newIdentityCommitment, proofSiblings, proofPathIndices);\\n    }\\n\\n    function removeIdentity(\\n        uint256 credId,\\n        uint256 identityCommitment,\\n        uint256[] calldata proofSiblings,\\n        uint8[] calldata proofPathIndices\\n    ) internal {\\n        _removeIdentity(credId, identityCommitment, proofSiblings, proofPathIndices);\\n    }\\n\\n    function verifyProof(\\n        uint256 credId,\\n        uint256 merkleTreeRoot,\\n        bytes32 signal,\\n        uint256 nullifierHash,\\n        uint256 externalNullifier,\\n        uint256[8] calldata proof\\n    ) internal {\\n        uint256 currentMerkleTreeRoot = getMerkleTreeRoot(credId);\\n\\n        if (currentMerkleTreeRoot == 0) {\\n            revert Credential__CredDoesNotExist();\\n        }\\n\\n        if (merkleTreeRoot != currentMerkleTreeRoot) {\\n            uint256 merkleRootCreationDate = creds[credId].merkleRootCreationDates[merkleTreeRoot];\\n            uint256 merkleRootDuration = creds[credId].merkleRootDuration;\\n\\n            if (merkleRootCreationDate == 0) {\\n                revert Credential__MerkleTreeRootIsNotPartOfTheCred();\\n            }\\n\\n            if (block.timestamp > merkleRootCreationDate + merkleRootDuration) {\\n                revert Credential__MerkleTreeRootIsExpired();\\n            }\\n        }\\n\\n        if (creds[credId].nullifierHashes[nullifierHash]) {\\n            revert Credential__YouAreUsingTheSameNillifierTwice();\\n        }\\n\\n        uint256 merkleTreeDepth = getMerkleTreeDepth(credId);\\n\\n        IVerifier verifier = verifiers[merkleTreeDepth];\\n\\n        _verifyProof(signal, merkleTreeRoot, nullifierHash, externalNullifier, proof, verifier);\\n\\n        creds[credId].nullifierHashes[nullifierHash] = true;\\n\\n        emit ProofVerified(credId, merkleTreeRoot, nullifierHash, externalNullifier, signal);\\n    }\\n}\\n\",\"keccak256\":\"0xfcc940cf44dc2a13655e79132a6ba80c9a1f7e8f005136a7c2a24d746425dab7\",\"license\":\"MIT\"},\"@creds-protocol/contracts/base/CredentialConstants.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nuint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\",\"keccak256\":\"0xc39b4ffdba083c6cf3287f62b663b576f7b4bd7ae2cecf1fc5cb498b56a288d2\",\"license\":\"MIT\"},\"@creds-protocol/contracts/base/CredentialCore.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"../interfaces/ICredentialCore.sol\\\";\\nimport \\\"../interfaces/IVerifier.sol\\\";\\n\\n/// @title Credential core contract.\\n/// @notice Minimal code to allow users to signal their endorsement of an arbitrary string.\\n/// @dev The following code verifies that the proof is correct and saves the hash of the\\n/// nullifier to prevent double-signaling. External nullifier and Merkle trees (i.e. creds) must be\\n/// managed externally.\\ncontract CredentialCore is ICredentialCore {\\n    /// @dev Asserts that no nullifier already exists and if the zero-knowledge proof is valid.\\n    /// Otherwise it reverts.\\n    /// @param signal: Credential signal.\\n    /// @param root: Root of the Merkle tree.\\n    /// @param nullifierHash: Nullifier hash.\\n    /// @param externalNullifier: External nullifier.\\n    /// @param proof: Zero-knowledge proof.\\n    /// @param verifier: Verifier address.\\n    function _verifyProof(\\n        bytes32 signal,\\n        uint256 root,\\n        uint256 nullifierHash,\\n        uint256 externalNullifier,\\n        uint256[8] calldata proof,\\n        IVerifier verifier\\n    ) internal view {\\n        uint256 signalHash = _hashSignal(signal);\\n\\n        verifier.verifyProof(\\n            [proof[0], proof[1]],\\n            [[proof[2], proof[3]], [proof[4], proof[5]]],\\n            [proof[6], proof[7]],\\n            [root, nullifierHash, signalHash, externalNullifier]\\n        );\\n    }\\n\\n    /// @dev Creates a keccak256 hash of the signal.\\n    /// @param signal: Credential signal.\\n    /// @return Hash of the signal.\\n    function _hashSignal(bytes32 signal) private pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(signal))) >> 8;\\n    }\\n}\\n\",\"keccak256\":\"0x6fc6de16a1c6ca1a680af9939e9bb1fa5975c0a495bef46b294094865b792ab9\",\"license\":\"MIT\"},\"@creds-protocol/contracts/base/CredentialCreds.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport {SNARK_SCALAR_FIELD} from \\\"./CredentialConstants.sol\\\";\\nimport \\\"../interfaces/ICredentialCreds.sol\\\";\\nimport \\\"../zk-kit/incremental-merkle-tree.sol/IncrementalBinaryTree.sol\\\";\\nimport \\\"../openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Credential creds contract.\\n/// @dev The following code allows you to create, issue and withdraw creds.\\n/// You can use getters to obtain informations about creds (root, depth, number of leaves).\\nabstract contract CredentialCreds is Context, ICredentialCreds {\\n    using IncrementalBinaryTree for IncrementalTreeData;\\n\\n    /// @dev Gets a cred id and returns the tree data.\\n    mapping(uint256 => IncrementalTreeData) internal merkleTree;\\n\\n    /// @dev Creates a new cred by initializing the associated tree.\\n    /// @param credID: Id of the cred.\\n    /// @param merkleTreeDepth: Depth of the tree.\\n    /// @param zeroValue: Zero value of the tree.\\n    function _createCred(\\n        address issuer,\\n        uint256 credID,\\n        uint256 merkleTreeDepth,\\n        uint256 zeroValue\\n    ) internal virtual {\\n        if (credID >= SNARK_SCALAR_FIELD) {\\n            revert Credential__CredIdIsNotLessThanSnarkScalarField();\\n        }\\n\\n        if (getMerkleTreeDepth(credID) != 0) {\\n            revert Credential__CredAlreadyExists();\\n        }\\n\\n        merkleTree[credID].init(merkleTreeDepth, zeroValue);\\n\\n        emit CredCreated(issuer, credID, merkleTreeDepth, zeroValue);\\n    }\\n\\n    /// @dev Adds an identity commitment to an existing cred.\\n    /// @param credID: Id of the cred.\\n    /// @param identityCommitment: New identity commitment.\\n    function _addIdentity(uint256 credID, uint256 identityCommitment) internal virtual {\\n        if (getMerkleTreeDepth(credID) == 0) {\\n            revert Credential__CredDoesNotExist();\\n        }\\n\\n        merkleTree[credID].insert(identityCommitment);\\n\\n        uint256 merkleTreeRoot = getMerkleTreeRoot(credID);\\n        uint256 index = getNumberOfMerkleTreeLeaves(credID) - 1;\\n\\n        emit IdentityAdded(credID, index, identityCommitment, merkleTreeRoot);\\n    }\\n\\n    /// @dev Updates an identity commitment of an existing cred. A proof of membership is\\n    /// needed to check if the node to be updated is part of the tree.\\n    /// @param credID: Id of the cred.\\n    /// @param identityCommitment: Existing identity commitment to be updated.\\n    /// @param newIdentityCommitment: New identity commitment.\\n    /// @param proofSiblings: Array of the sibling nodes of the proof of membership.\\n    /// @param proofPathIndices: Path of the proof of membership.\\n    function _updateIdentity(\\n        uint256 credID,\\n        uint256 identityCommitment,\\n        uint256 newIdentityCommitment,\\n        uint256[] calldata proofSiblings,\\n        uint8[] calldata proofPathIndices\\n    ) internal virtual {\\n        if (getMerkleTreeRoot(credID) == 0) {\\n            revert Credential__CredDoesNotExist();\\n        }\\n\\n        merkleTree[credID].update(identityCommitment, newIdentityCommitment, proofSiblings, proofPathIndices);\\n\\n        uint256 merkleTreeRoot = getMerkleTreeRoot(credID);\\n        uint256 index = proofPathIndicesToIdentityIndex(proofPathIndices);\\n\\n        emit IdentityUpdated(credID, index, identityCommitment, newIdentityCommitment, merkleTreeRoot);\\n    }\\n\\n    /// @dev Removes an identity commitment from an existing cred. A proof of membership is\\n    /// needed to check if the node to be deleted is part of the tree.\\n    /// @param credID: Id of the cred.\\n    /// @param identityCommitment: Existing identity commitment to be removed.\\n    /// @param proofSiblings: Array of the sibling nodes of the proof of membership.\\n    /// @param proofPathIndices: Path of the proof of membership.\\n    function _removeIdentity(\\n        uint256 credID,\\n        uint256 identityCommitment,\\n        uint256[] calldata proofSiblings,\\n        uint8[] calldata proofPathIndices\\n    ) internal virtual {\\n        if (getMerkleTreeRoot(credID) == 0) {\\n            revert Credential__CredDoesNotExist();\\n        }\\n\\n        merkleTree[credID].remove(identityCommitment, proofSiblings, proofPathIndices);\\n\\n        uint256 merkleTreeRoot = getMerkleTreeRoot(credID);\\n        uint256 index = proofPathIndicesToIdentityIndex(proofPathIndices);\\n\\n        emit IdentityRemoved(credID, index, identityCommitment, merkleTreeRoot);\\n    }\\n\\n    /// @dev See {ICredentialCreds-getMerkleTreeRoot}.\\n    function getMerkleTreeRoot(uint256 credID) public view virtual override returns (uint256) {\\n        return merkleTree[credID].root;\\n    }\\n\\n    /// @dev See {ICredentialCreds-getMerkleTreeDepth}.\\n    function getMerkleTreeDepth(uint256 credID) public view virtual override returns (uint256) {\\n        return merkleTree[credID].depth;\\n    }\\n\\n    /// @dev See {ICredentialCreds-getNumberOfMerkleTreeLeaves}.\\n    function getNumberOfMerkleTreeLeaves(uint256 credID) public view virtual override returns (uint256) {\\n        return merkleTree[credID].numberOfLeaves;\\n    }\\n\\n    /// @dev Converts the path indices of a Merkle proof to the identity commitment index in the tree.\\n    /// @param proofPathIndices: Path of the proof of membership.\\n    /// @return Index of a cred identity.\\n    function proofPathIndicesToIdentityIndex(uint8[] calldata proofPathIndices) private pure returns (uint256) {\\n        uint256 identityIndex = 0;\\n\\n        for (uint8 i = uint8(proofPathIndices.length); i > 0; ) {\\n            if (identityIndex > 0 || proofPathIndices[i - 1] != 0) {\\n                identityIndex *= 2;\\n\\n                if (proofPathIndices[i - 1] == 1) {\\n                    identityIndex += 1;\\n                }\\n            }\\n\\n            unchecked {\\n                --i;\\n            }\\n        }\\n\\n        return identityIndex;\\n    }\\n}\\n\",\"keccak256\":\"0xd2b07442b1b37f4da891d79e9abcfe4986e383256a87f96ccec284acb4f61a55\",\"license\":\"MIT\"},\"@creds-protocol/contracts/base/CredsProtocolRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ncontract CredsProtocolRegistry {\\n\\n    mapping(address => address[]) public issuerContractAddress;\\n    mapping(address => bool) public isRegisteredIssuer;\\n\\n    function registerIssuer(address _issuer, address _issuerContractAddress) external {\\n        issuerContractAddress[_issuer].push(_issuerContractAddress);\\n        isRegisteredIssuer[_issuer] = true;\\n    }\\n\\n}\",\"keccak256\":\"0x10a17aad1cdc2f065689e6e19f2dbbf8d3d21d477625522500111104ca01eecc\",\"license\":\"MIT\"},\"@creds-protocol/contracts/interfaces/ICredential.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/// @title Credential interface.\\n/// @dev Interface of a Credential contract.\\ninterface ICredential {\\n    error Credential__CallerIsNotTheCredIssuer();\\n    error Credential__MerkleTreeDepthIsNotSupported();\\n    error Credential__MerkleTreeRootIsExpired();\\n    error Credential__MerkleTreeRootIsNotPartOfTheCred();\\n    error Credential__YouAreUsingTheSameNillifierTwice();\\n\\n    /// It defines all the cred parameters, in addition to those in the Merkle tree.\\n    struct Cred {\\n        address admin;\\n        string credURI;\\n        uint256 merkleRootDuration;\\n        mapping(uint256 => uint256) merkleRootCreationDates;\\n        mapping(uint256 => bool) nullifierHashes;\\n    }\\n\\n    struct Verifier {\\n        address contractAddress;\\n        uint256 merkleTreeDepth;\\n    }\\n\\n    /// @dev Emitted when an admin is assigned to a cred.\\n    /// @param issuerAddress: Address of the issuer\\n    /// @param issuerName: Name of the issuer\\n    /// @param issuerSymbol: Symbol of the issuer\\n    event issuerRegistered(\\n        address indexed issuerAddress, \\n        string indexed issuerName, \\n        string indexed issuerSymbol\\n    );\\n\\n    /// @dev Emitted when a Credential proof is verified.\\n    /// @param credId: Id of the cred.\\n    /// @param merkleTreeRoot: Root of the Merkle tree.\\n    /// @param externalNullifier: External nullifier.\\n    /// @param nullifierHash: Nullifier hash.\\n    /// @param signal: Credential signal.\\n    event ProofVerified(\\n        uint256 indexed credId,\\n        uint256 merkleTreeRoot,\\n        uint256 externalNullifier,\\n        uint256 nullifierHash,\\n        bytes32 signal\\n    );\\n    \\n}\",\"keccak256\":\"0xc7792328f4945f8f0af16e28766a33dcb2ca6e2c5e5f373cd36412988bf70bb5\",\"license\":\"MIT\"},\"@creds-protocol/contracts/interfaces/ICredentialCore.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/// @title CredentialCore interface.\\n/// @dev Interface of CredentialCore contract.\\ninterface ICredentialCore {\\n    /// @notice Emitted when a proof is verified correctly and a new nullifier hash is added.\\n    /// @param nullifierHash: Hash of external and identity nullifiers.\\n    event NullifierHashAdded(uint256 nullifierHash);\\n}\\n\",\"keccak256\":\"0x1f0ec24e95ce1a7dffa4a51b427e59f27807b6ad81ff92cb36b15ed5de94fc0b\",\"license\":\"MIT\"},\"@creds-protocol/contracts/interfaces/ICredentialCreds.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/// @title CredentialCreds interface.\\n/// @dev Interface of a CredentialCreds contract.\\ninterface ICredentialCreds {\\n    \\n    error Credential__CredDoesNotExist();\\n    error Credential__CredAlreadyExists();\\n    error Credential__CredIdIsNotLessThanSnarkScalarField();\\n\\n    /// @dev Emitted when a new cred is created.\\n    /// @param issuer: Cred Issuer\\n    /// @param credId: Id of the cred.\\n    /// @param merkleTreeDepth: Depth of the tree.\\n    /// @param zeroValue: Zero value of the tree.\\n    event CredCreated(address indexed issuer, uint256 indexed credId, uint256 merkleTreeDepth, uint256 zeroValue);\\n\\n    /// @dev Emitted when a new identity commitment is added.\\n    /// @param credId: Cred id of the cred.\\n    /// @param index: Identity commitment index.\\n    /// @param identityCommitment: New identity commitment.\\n    /// @param merkleTreeRoot: New root hash of the tree.\\n    event IdentityAdded(uint256 indexed credId, uint256 index, uint256 identityCommitment, uint256 merkleTreeRoot);\\n\\n    /// @dev Emitted when an identity commitment is updated.\\n    /// @param credId: Cred id of the cred.\\n    /// @param index: Identity commitment index.\\n    /// @param identityCommitment: Existing identity commitment to be updated.\\n    /// @param newIdentityCommitment: New identity commitment.\\n    /// @param merkleTreeRoot: New root hash of the tree.\\n    event IdentityUpdated(\\n        uint256 indexed credId,\\n        uint256 index,\\n        uint256 identityCommitment,\\n        uint256 newIdentityCommitment,\\n        uint256 merkleTreeRoot\\n    );\\n\\n    /// @dev Emitted when a new identity commitment is removed.\\n    /// @param credId: Cred id of the cred.\\n    /// @param index: Identity commitment index.\\n    /// @param identityCommitment: Existing identity commitment to be removed.\\n    /// @param merkleTreeRoot: New root hash of the tree.\\n    event IdentityRemoved(uint256 indexed credId, uint256 index, uint256 identityCommitment, uint256 merkleTreeRoot);\\n\\n    /// @dev Returns the last root hash of a cred.\\n    /// @param credId: Id of the cred.\\n    /// @return Root hash of the cred.\\n    function getMerkleTreeRoot(uint256 credId) external view returns (uint256);\\n\\n    /// @dev Returns the depth of the tree of a cred.\\n    /// @param credId: Id of the cred.\\n    /// @return Depth of the cred tree.\\n    function getMerkleTreeDepth(uint256 credId) external view returns (uint256);\\n\\n    /// @dev Returns the number of tree leaves of a cred.\\n    /// @param credId: Id of the cred.\\n    /// @return Number of tree leaves.\\n    function getNumberOfMerkleTreeLeaves(uint256 credId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x508ea756edc34a06efaa9c440fc4aaa77b5aa01a8326382806b5d8f35ab9d36e\",\"license\":\"MIT\"},\"@creds-protocol/contracts/interfaces/IVerifier.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/// @title Verifier interface.\\n/// @dev Interface of Verifier contract.\\ninterface IVerifier {\\n    function verifyProof(\\n        uint256[2] memory a,\\n        uint256[2][2] memory b,\\n        uint256[2] memory c,\\n        uint256[4] memory input\\n    ) external view;\\n}\",\"keccak256\":\"0xe0c4acba6ffee755835d287d3978d10d207ebfbb25b49140416e36a609075045\",\"license\":\"MIT\"},\"@creds-protocol/contracts/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@creds-protocol/contracts/zk-kit/incremental-merkle-tree.sol/Hashes.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary PoseidonT3 {\\n    function poseidon(uint256[2] memory) public pure returns (uint256) {}\\n}\\n\\nlibrary PoseidonT6 {\\n    function poseidon(uint256[5] memory) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xc634fec0820a2faab1bc350d94c3151835e8d2c2bc0321d9a198d62712786b81\",\"license\":\"MIT\"},\"@creds-protocol/contracts/zk-kit/incremental-merkle-tree.sol/IncrementalBinaryTree.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {PoseidonT3} from \\\"./Hashes.sol\\\";\\n\\n// Each incremental tree has certain properties and data that will\\n// be used to add new leaves.\\nstruct IncrementalTreeData {\\n    uint256 depth; // Depth of the tree (levels - 1).\\n    uint256 root; // Root hash of the tree.\\n    uint256 numberOfLeaves; // Number of leaves of the tree.\\n    mapping(uint256 => uint256) zeroes; // Zero hashes used for empty nodes (level -> zero hash).\\n    // The nodes of the subtrees used in the last addition of a leaf (level -> [left node, right node]).\\n    mapping(uint256 => uint256[2]) lastSubtrees; // Caching these values is essential to efficient appends.\\n}\\n\\n/// @title Incremental binary Merkle tree.\\n/// @dev The incremental tree allows to calculate the root hash each time a leaf is added, ensuring\\n/// the integrity of the tree.\\nlibrary IncrementalBinaryTree {\\n    uint8 internal constant MAX_DEPTH = 32;\\n    uint256 internal constant SNARK_SCALAR_FIELD =\\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n    /// @dev Initializes a tree.\\n    /// @param self: Tree data.\\n    /// @param depth: Depth of the tree.\\n    /// @param zero: Zero value to be used.\\n    function init(\\n        IncrementalTreeData storage self,\\n        uint256 depth,\\n        uint256 zero\\n    ) public {\\n        require(zero < SNARK_SCALAR_FIELD, \\\"IncrementalBinaryTree: leaf must be < SNARK_SCALAR_FIELD\\\");\\n        require(depth > 0 && depth <= MAX_DEPTH, \\\"IncrementalBinaryTree: tree depth must be between 1 and 32\\\");\\n\\n        self.depth = depth;\\n\\n        for (uint8 i = 0; i < depth; ) {\\n            self.zeroes[i] = zero;\\n            zero = PoseidonT3.poseidon([zero, zero]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        self.root = zero;\\n    }\\n\\n    /// @dev Inserts a leaf in the tree.\\n    /// @param self: Tree data.\\n    /// @param leaf: Leaf to be inserted.\\n    function insert(IncrementalTreeData storage self, uint256 leaf) public {\\n        uint256 depth = self.depth;\\n\\n        require(leaf < SNARK_SCALAR_FIELD, \\\"IncrementalBinaryTree: leaf must be < SNARK_SCALAR_FIELD\\\");\\n        require(self.numberOfLeaves < 2**depth, \\\"IncrementalBinaryTree: tree is full\\\");\\n\\n        uint256 index = self.numberOfLeaves;\\n        uint256 hash = leaf;\\n\\n        for (uint8 i = 0; i < depth; ) {\\n            if (index & 1 == 0) {\\n                self.lastSubtrees[i] = [hash, self.zeroes[i]];\\n            } else {\\n                self.lastSubtrees[i][1] = hash;\\n            }\\n\\n            hash = PoseidonT3.poseidon(self.lastSubtrees[i]);\\n            index >>= 1;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        self.root = hash;\\n        self.numberOfLeaves += 1;\\n    }\\n\\n    /// @dev Updates a leaf in the tree.\\n    /// @param self: Tree data.\\n    /// @param leaf: Leaf to be updated.\\n    /// @param newLeaf: New leaf.\\n    /// @param proofSiblings: Array of the sibling nodes of the proof of membership.\\n    /// @param proofPathIndices: Path of the proof of membership.\\n    function update(\\n        IncrementalTreeData storage self,\\n        uint256 leaf,\\n        uint256 newLeaf,\\n        uint256[] calldata proofSiblings,\\n        uint8[] calldata proofPathIndices\\n    ) public {\\n        require(\\n            verify(self, leaf, proofSiblings, proofPathIndices),\\n            \\\"IncrementalBinaryTree: leaf is not part of the tree\\\"\\n        );\\n\\n        uint256 depth = self.depth;\\n        uint256 hash = newLeaf;\\n\\n        for (uint8 i = 0; i < depth; ) {\\n            if (proofPathIndices[i] == 0) {\\n                if (proofSiblings[i] == self.lastSubtrees[i][1]) {\\n                    self.lastSubtrees[i][0] = hash;\\n                }\\n\\n                hash = PoseidonT3.poseidon([hash, proofSiblings[i]]);\\n            } else {\\n                if (proofSiblings[i] == self.lastSubtrees[i][0]) {\\n                    self.lastSubtrees[i][1] = hash;\\n                }\\n\\n                hash = PoseidonT3.poseidon([proofSiblings[i], hash]);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        self.root = hash;\\n    }\\n\\n    /// @dev Removes a leaf from the tree.\\n    /// @param self: Tree data.\\n    /// @param leaf: Leaf to be removed.\\n    /// @param proofSiblings: Array of the sibling nodes of the proof of membership.\\n    /// @param proofPathIndices: Path of the proof of membership.\\n    function remove(\\n        IncrementalTreeData storage self,\\n        uint256 leaf,\\n        uint256[] calldata proofSiblings,\\n        uint8[] calldata proofPathIndices\\n    ) public {\\n        update(self, leaf, self.zeroes[0], proofSiblings, proofPathIndices);\\n    }\\n\\n    /// @dev Verify if the path is correct and the leaf is part of the tree.\\n    /// @param self: Tree data.\\n    /// @param leaf: Leaf to be removed.\\n    /// @param proofSiblings: Array of the sibling nodes of the proof of membership.\\n    /// @param proofPathIndices: Path of the proof of membership.\\n    /// @return True or false.\\n    function verify(\\n        IncrementalTreeData storage self,\\n        uint256 leaf,\\n        uint256[] calldata proofSiblings,\\n        uint8[] calldata proofPathIndices\\n    ) private view returns (bool) {\\n        require(leaf < SNARK_SCALAR_FIELD, \\\"IncrementalBinaryTree: leaf must be < SNARK_SCALAR_FIELD\\\");\\n        uint256 depth = self.depth;\\n        require(\\n            proofPathIndices.length == depth && proofSiblings.length == depth,\\n            \\\"IncrementalBinaryTree: length of path is not correct\\\"\\n        );\\n\\n        uint256 hash = leaf;\\n\\n        for (uint8 i = 0; i < depth; ) {\\n            require(\\n                proofSiblings[i] < SNARK_SCALAR_FIELD,\\n                \\\"IncrementalBinaryTree: sibling node must be < SNARK_SCALAR_FIELD\\\"\\n            );\\n\\n            if (proofPathIndices[i] == 0) {\\n                hash = PoseidonT3.poseidon([hash, proofSiblings[i]]);\\n            } else {\\n                hash = PoseidonT3.poseidon([proofSiblings[i], hash]);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return hash == self.root;\\n    }\\n}\\n\",\"keccak256\":\"0x7aad99b66b8d77364ad901580b988257596eff6cc19d92986b376685f8dbdd1e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":615,"contract":"@creds-protocol/contracts/CredsIssuer.sol:CredsIssuer","label":"merkleTree","offset":0,"slot":"0","type":"t_mapping(t_uint256,t_struct(IncrementalTreeData)1197_storage)"},{"astId":15,"contract":"@creds-protocol/contracts/CredsIssuer.sol:CredsIssuer","label":"credsIssuer","offset":0,"slot":"1","type":"t_address"},{"astId":17,"contract":"@creds-protocol/contracts/CredsIssuer.sol:CredsIssuer","label":"issuerName","offset":0,"slot":"2","type":"t_string_storage"},{"astId":19,"contract":"@creds-protocol/contracts/CredsIssuer.sol:CredsIssuer","label":"issuerSymbol","offset":0,"slot":"3","type":"t_string_storage"},{"astId":21,"contract":"@creds-protocol/contracts/CredsIssuer.sol:CredsIssuer","label":"credsIssuedCount","offset":0,"slot":"4","type":"t_uint256"},{"astId":24,"contract":"@creds-protocol/contracts/CredsIssuer.sol:CredsIssuer","label":"credsProtocolRegistry","offset":0,"slot":"5","type":"t_address"},{"astId":30,"contract":"@creds-protocol/contracts/CredsIssuer.sol:CredsIssuer","label":"verifiers","offset":0,"slot":"6","type":"t_mapping(t_uint256,t_contract(IVerifier)1130)"},{"astId":36,"contract":"@creds-protocol/contracts/CredsIssuer.sol:CredsIssuer","label":"creds","offset":0,"slot":"7","type":"t_mapping(t_uint256,t_struct(Cred)988_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)2_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[2]","numberOfBytes":"64"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(IVerifier)1130":{"encoding":"inplace","label":"contract IVerifier","numberOfBytes":"20"},"t_mapping(t_uint256,t_array(t_uint256)2_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256[2])","numberOfBytes":"32","value":"t_array(t_uint256)2_storage"},"t_mapping(t_uint256,t_bool)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint256,t_contract(IVerifier)1130)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => contract IVerifier)","numberOfBytes":"32","value":"t_contract(IVerifier)1130"},"t_mapping(t_uint256,t_struct(Cred)988_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct ICredential.Cred)","numberOfBytes":"32","value":"t_struct(Cred)988_storage"},"t_mapping(t_uint256,t_struct(IncrementalTreeData)1197_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct IncrementalTreeData)","numberOfBytes":"32","value":"t_struct(IncrementalTreeData)1197_storage"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Cred)988_storage":{"encoding":"inplace","label":"struct ICredential.Cred","members":[{"astId":975,"contract":"@creds-protocol/contracts/CredsIssuer.sol:CredsIssuer","label":"admin","offset":0,"slot":"0","type":"t_address"},{"astId":977,"contract":"@creds-protocol/contracts/CredsIssuer.sol:CredsIssuer","label":"credURI","offset":0,"slot":"1","type":"t_string_storage"},{"astId":979,"contract":"@creds-protocol/contracts/CredsIssuer.sol:CredsIssuer","label":"merkleRootDuration","offset":0,"slot":"2","type":"t_uint256"},{"astId":983,"contract":"@creds-protocol/contracts/CredsIssuer.sol:CredsIssuer","label":"merkleRootCreationDates","offset":0,"slot":"3","type":"t_mapping(t_uint256,t_uint256)"},{"astId":987,"contract":"@creds-protocol/contracts/CredsIssuer.sol:CredsIssuer","label":"nullifierHashes","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_bool)"}],"numberOfBytes":"160"},"t_struct(IncrementalTreeData)1197_storage":{"encoding":"inplace","label":"struct IncrementalTreeData","members":[{"astId":1182,"contract":"@creds-protocol/contracts/CredsIssuer.sol:CredsIssuer","label":"depth","offset":0,"slot":"0","type":"t_uint256"},{"astId":1184,"contract":"@creds-protocol/contracts/CredsIssuer.sol:CredsIssuer","label":"root","offset":0,"slot":"1","type":"t_uint256"},{"astId":1186,"contract":"@creds-protocol/contracts/CredsIssuer.sol:CredsIssuer","label":"numberOfLeaves","offset":0,"slot":"2","type":"t_uint256"},{"astId":1190,"contract":"@creds-protocol/contracts/CredsIssuer.sol:CredsIssuer","label":"zeroes","offset":0,"slot":"3","type":"t_mapping(t_uint256,t_uint256)"},{"astId":1196,"contract":"@creds-protocol/contracts/CredsIssuer.sol:CredsIssuer","label":"lastSubtrees","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_array(t_uint256)2_storage)"}],"numberOfBytes":"160"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"events":{"NullifierHashAdded(uint256)":{"notice":"Emitted when a proof is verified correctly and a new nullifier hash is added."}},"kind":"user","methods":{},"version":1}}},"@creds-protocol/contracts/base/CredentialCore.sol":{"CredentialCore":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"nullifierHash","type":"uint256"}],"name":"NullifierHashAdded","type":"event"}],"devdoc":{"details":"The following code verifies that the proof is correct and saves the hash of the nullifier to prevent double-signaling. External nullifier and Merkle trees (i.e. creds) must be managed externally.","kind":"dev","methods":{},"title":"Credential core contract.","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220f4188c69fb2afd1b87a1332594b53623fc06d28e7298727c9e0c1aac62f6a8fe64736f6c63430008040033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DELEGATECALL XOR DUP13 PUSH10 0xFB2AFD1B87A1332594B5 CALLDATASIZE 0x23 0xFC MOD 0xD2 DUP15 PUSH19 0x98727C9E0C1AAC62F6A8FE64736F6C63430008 DIV STOP CALLER ","sourceMap":"480:1237:2:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600080fdfea2646970667358221220f4188c69fb2afd1b87a1332594b53623fc06d28e7298727c9e0c1aac62f6a8fe64736f6c63430008040033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DELEGATECALL XOR DUP13 PUSH10 0xFB2AFD1B87A1332594B5 CALLDATASIZE 0x23 0xFC MOD 0xD2 DUP15 PUSH19 0x98727C9E0C1AAC62F6A8FE64736F6C63430008 DIV STOP CALLER ","sourceMap":"480:1237:2:-:0;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"12600","executionCost":"66","totalCost":"12666"},"internal":{"_hashSignal(bytes32)":"infinite","_verifyProof(bytes32,uint256,uint256,uint256,uint256[8] calldata,contract IVerifier)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nullifierHash\",\"type\":\"uint256\"}],\"name\":\"NullifierHashAdded\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"The following code verifies that the proof is correct and saves the hash of the nullifier to prevent double-signaling. External nullifier and Merkle trees (i.e. creds) must be managed externally.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Credential core contract.\",\"version\":1},\"userdoc\":{\"events\":{\"NullifierHashAdded(uint256)\":{\"notice\":\"Emitted when a proof is verified correctly and a new nullifier hash is added.\"}},\"kind\":\"user\",\"methods\":{},\"notice\":\"Minimal code to allow users to signal their endorsement of an arbitrary string.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@creds-protocol/contracts/base/CredentialCore.sol\":\"CredentialCore\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@creds-protocol/contracts/base/CredentialCore.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"../interfaces/ICredentialCore.sol\\\";\\nimport \\\"../interfaces/IVerifier.sol\\\";\\n\\n/// @title Credential core contract.\\n/// @notice Minimal code to allow users to signal their endorsement of an arbitrary string.\\n/// @dev The following code verifies that the proof is correct and saves the hash of the\\n/// nullifier to prevent double-signaling. External nullifier and Merkle trees (i.e. creds) must be\\n/// managed externally.\\ncontract CredentialCore is ICredentialCore {\\n    /// @dev Asserts that no nullifier already exists and if the zero-knowledge proof is valid.\\n    /// Otherwise it reverts.\\n    /// @param signal: Credential signal.\\n    /// @param root: Root of the Merkle tree.\\n    /// @param nullifierHash: Nullifier hash.\\n    /// @param externalNullifier: External nullifier.\\n    /// @param proof: Zero-knowledge proof.\\n    /// @param verifier: Verifier address.\\n    function _verifyProof(\\n        bytes32 signal,\\n        uint256 root,\\n        uint256 nullifierHash,\\n        uint256 externalNullifier,\\n        uint256[8] calldata proof,\\n        IVerifier verifier\\n    ) internal view {\\n        uint256 signalHash = _hashSignal(signal);\\n\\n        verifier.verifyProof(\\n            [proof[0], proof[1]],\\n            [[proof[2], proof[3]], [proof[4], proof[5]]],\\n            [proof[6], proof[7]],\\n            [root, nullifierHash, signalHash, externalNullifier]\\n        );\\n    }\\n\\n    /// @dev Creates a keccak256 hash of the signal.\\n    /// @param signal: Credential signal.\\n    /// @return Hash of the signal.\\n    function _hashSignal(bytes32 signal) private pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(signal))) >> 8;\\n    }\\n}\\n\",\"keccak256\":\"0x6fc6de16a1c6ca1a680af9939e9bb1fa5975c0a495bef46b294094865b792ab9\",\"license\":\"MIT\"},\"@creds-protocol/contracts/interfaces/ICredentialCore.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/// @title CredentialCore interface.\\n/// @dev Interface of CredentialCore contract.\\ninterface ICredentialCore {\\n    /// @notice Emitted when a proof is verified correctly and a new nullifier hash is added.\\n    /// @param nullifierHash: Hash of external and identity nullifiers.\\n    event NullifierHashAdded(uint256 nullifierHash);\\n}\\n\",\"keccak256\":\"0x1f0ec24e95ce1a7dffa4a51b427e59f27807b6ad81ff92cb36b15ed5de94fc0b\",\"license\":\"MIT\"},\"@creds-protocol/contracts/interfaces/IVerifier.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/// @title Verifier interface.\\n/// @dev Interface of Verifier contract.\\ninterface IVerifier {\\n    function verifyProof(\\n        uint256[2] memory a,\\n        uint256[2][2] memory b,\\n        uint256[2] memory c,\\n        uint256[4] memory input\\n    ) external view;\\n}\",\"keccak256\":\"0xe0c4acba6ffee755835d287d3978d10d207ebfbb25b49140416e36a609075045\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"NullifierHashAdded(uint256)":{"notice":"Emitted when a proof is verified correctly and a new nullifier hash is added."}},"kind":"user","methods":{},"notice":"Minimal code to allow users to signal their endorsement of an arbitrary string.","version":1}}},"@creds-protocol/contracts/base/CredentialCreds.sol":{"CredentialCreds":{"abi":[{"inputs":[],"name":"Credential__CredAlreadyExists","type":"error"},{"inputs":[],"name":"Credential__CredDoesNotExist","type":"error"},{"inputs":[],"name":"Credential__CredIdIsNotLessThanSnarkScalarField","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"issuer","type":"address"},{"indexed":true,"internalType":"uint256","name":"credId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"merkleTreeDepth","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"zeroValue","type":"uint256"}],"name":"CredCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"credId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"index","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"identityCommitment","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"merkleTreeRoot","type":"uint256"}],"name":"IdentityAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"credId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"index","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"identityCommitment","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"merkleTreeRoot","type":"uint256"}],"name":"IdentityRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"credId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"index","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"identityCommitment","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newIdentityCommitment","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"merkleTreeRoot","type":"uint256"}],"name":"IdentityUpdated","type":"event"},{"inputs":[{"internalType":"uint256","name":"credID","type":"uint256"}],"name":"getMerkleTreeDepth","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"credID","type":"uint256"}],"name":"getMerkleTreeRoot","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"credID","type":"uint256"}],"name":"getNumberOfMerkleTreeLeaves","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"The following code allows you to create, issue and withdraw creds. You can use getters to obtain informations about creds (root, depth, number of leaves).","kind":"dev","methods":{"getMerkleTreeDepth(uint256)":{"details":"See {ICredentialCreds-getMerkleTreeDepth}."},"getMerkleTreeRoot(uint256)":{"details":"See {ICredentialCreds-getMerkleTreeRoot}."},"getNumberOfMerkleTreeLeaves(uint256)":{"details":"See {ICredentialCreds-getNumberOfMerkleTreeLeaves}."}},"stateVariables":{"merkleTree":{"details":"Gets a cred id and returns the tree data."}},"title":"Credential creds contract.","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getMerkleTreeDepth(uint256)":"6389e107","getMerkleTreeRoot(uint256)":"dabc4d51","getNumberOfMerkleTreeLeaves(uint256)":"638480be"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Credential__CredAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Credential__CredDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Credential__CredIdIsNotLessThanSnarkScalarField\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"credId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"merkleTreeDepth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"zeroValue\",\"type\":\"uint256\"}],\"name\":\"CredCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"credId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"identityCommitment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"merkleTreeRoot\",\"type\":\"uint256\"}],\"name\":\"IdentityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"credId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"identityCommitment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"merkleTreeRoot\",\"type\":\"uint256\"}],\"name\":\"IdentityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"credId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"identityCommitment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newIdentityCommitment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"merkleTreeRoot\",\"type\":\"uint256\"}],\"name\":\"IdentityUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"credID\",\"type\":\"uint256\"}],\"name\":\"getMerkleTreeDepth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"credID\",\"type\":\"uint256\"}],\"name\":\"getMerkleTreeRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"credID\",\"type\":\"uint256\"}],\"name\":\"getNumberOfMerkleTreeLeaves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The following code allows you to create, issue and withdraw creds. You can use getters to obtain informations about creds (root, depth, number of leaves).\",\"kind\":\"dev\",\"methods\":{\"getMerkleTreeDepth(uint256)\":{\"details\":\"See {ICredentialCreds-getMerkleTreeDepth}.\"},\"getMerkleTreeRoot(uint256)\":{\"details\":\"See {ICredentialCreds-getMerkleTreeRoot}.\"},\"getNumberOfMerkleTreeLeaves(uint256)\":{\"details\":\"See {ICredentialCreds-getNumberOfMerkleTreeLeaves}.\"}},\"stateVariables\":{\"merkleTree\":{\"details\":\"Gets a cred id and returns the tree data.\"}},\"title\":\"Credential creds contract.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@creds-protocol/contracts/base/CredentialCreds.sol\":\"CredentialCreds\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@creds-protocol/contracts/base/CredentialConstants.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nuint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\",\"keccak256\":\"0xc39b4ffdba083c6cf3287f62b663b576f7b4bd7ae2cecf1fc5cb498b56a288d2\",\"license\":\"MIT\"},\"@creds-protocol/contracts/base/CredentialCreds.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport {SNARK_SCALAR_FIELD} from \\\"./CredentialConstants.sol\\\";\\nimport \\\"../interfaces/ICredentialCreds.sol\\\";\\nimport \\\"../zk-kit/incremental-merkle-tree.sol/IncrementalBinaryTree.sol\\\";\\nimport \\\"../openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Credential creds contract.\\n/// @dev The following code allows you to create, issue and withdraw creds.\\n/// You can use getters to obtain informations about creds (root, depth, number of leaves).\\nabstract contract CredentialCreds is Context, ICredentialCreds {\\n    using IncrementalBinaryTree for IncrementalTreeData;\\n\\n    /// @dev Gets a cred id and returns the tree data.\\n    mapping(uint256 => IncrementalTreeData) internal merkleTree;\\n\\n    /// @dev Creates a new cred by initializing the associated tree.\\n    /// @param credID: Id of the cred.\\n    /// @param merkleTreeDepth: Depth of the tree.\\n    /// @param zeroValue: Zero value of the tree.\\n    function _createCred(\\n        address issuer,\\n        uint256 credID,\\n        uint256 merkleTreeDepth,\\n        uint256 zeroValue\\n    ) internal virtual {\\n        if (credID >= SNARK_SCALAR_FIELD) {\\n            revert Credential__CredIdIsNotLessThanSnarkScalarField();\\n        }\\n\\n        if (getMerkleTreeDepth(credID) != 0) {\\n            revert Credential__CredAlreadyExists();\\n        }\\n\\n        merkleTree[credID].init(merkleTreeDepth, zeroValue);\\n\\n        emit CredCreated(issuer, credID, merkleTreeDepth, zeroValue);\\n    }\\n\\n    /// @dev Adds an identity commitment to an existing cred.\\n    /// @param credID: Id of the cred.\\n    /// @param identityCommitment: New identity commitment.\\n    function _addIdentity(uint256 credID, uint256 identityCommitment) internal virtual {\\n        if (getMerkleTreeDepth(credID) == 0) {\\n            revert Credential__CredDoesNotExist();\\n        }\\n\\n        merkleTree[credID].insert(identityCommitment);\\n\\n        uint256 merkleTreeRoot = getMerkleTreeRoot(credID);\\n        uint256 index = getNumberOfMerkleTreeLeaves(credID) - 1;\\n\\n        emit IdentityAdded(credID, index, identityCommitment, merkleTreeRoot);\\n    }\\n\\n    /// @dev Updates an identity commitment of an existing cred. A proof of membership is\\n    /// needed to check if the node to be updated is part of the tree.\\n    /// @param credID: Id of the cred.\\n    /// @param identityCommitment: Existing identity commitment to be updated.\\n    /// @param newIdentityCommitment: New identity commitment.\\n    /// @param proofSiblings: Array of the sibling nodes of the proof of membership.\\n    /// @param proofPathIndices: Path of the proof of membership.\\n    function _updateIdentity(\\n        uint256 credID,\\n        uint256 identityCommitment,\\n        uint256 newIdentityCommitment,\\n        uint256[] calldata proofSiblings,\\n        uint8[] calldata proofPathIndices\\n    ) internal virtual {\\n        if (getMerkleTreeRoot(credID) == 0) {\\n            revert Credential__CredDoesNotExist();\\n        }\\n\\n        merkleTree[credID].update(identityCommitment, newIdentityCommitment, proofSiblings, proofPathIndices);\\n\\n        uint256 merkleTreeRoot = getMerkleTreeRoot(credID);\\n        uint256 index = proofPathIndicesToIdentityIndex(proofPathIndices);\\n\\n        emit IdentityUpdated(credID, index, identityCommitment, newIdentityCommitment, merkleTreeRoot);\\n    }\\n\\n    /// @dev Removes an identity commitment from an existing cred. A proof of membership is\\n    /// needed to check if the node to be deleted is part of the tree.\\n    /// @param credID: Id of the cred.\\n    /// @param identityCommitment: Existing identity commitment to be removed.\\n    /// @param proofSiblings: Array of the sibling nodes of the proof of membership.\\n    /// @param proofPathIndices: Path of the proof of membership.\\n    function _removeIdentity(\\n        uint256 credID,\\n        uint256 identityCommitment,\\n        uint256[] calldata proofSiblings,\\n        uint8[] calldata proofPathIndices\\n    ) internal virtual {\\n        if (getMerkleTreeRoot(credID) == 0) {\\n            revert Credential__CredDoesNotExist();\\n        }\\n\\n        merkleTree[credID].remove(identityCommitment, proofSiblings, proofPathIndices);\\n\\n        uint256 merkleTreeRoot = getMerkleTreeRoot(credID);\\n        uint256 index = proofPathIndicesToIdentityIndex(proofPathIndices);\\n\\n        emit IdentityRemoved(credID, index, identityCommitment, merkleTreeRoot);\\n    }\\n\\n    /// @dev See {ICredentialCreds-getMerkleTreeRoot}.\\n    function getMerkleTreeRoot(uint256 credID) public view virtual override returns (uint256) {\\n        return merkleTree[credID].root;\\n    }\\n\\n    /// @dev See {ICredentialCreds-getMerkleTreeDepth}.\\n    function getMerkleTreeDepth(uint256 credID) public view virtual override returns (uint256) {\\n        return merkleTree[credID].depth;\\n    }\\n\\n    /// @dev See {ICredentialCreds-getNumberOfMerkleTreeLeaves}.\\n    function getNumberOfMerkleTreeLeaves(uint256 credID) public view virtual override returns (uint256) {\\n        return merkleTree[credID].numberOfLeaves;\\n    }\\n\\n    /// @dev Converts the path indices of a Merkle proof to the identity commitment index in the tree.\\n    /// @param proofPathIndices: Path of the proof of membership.\\n    /// @return Index of a cred identity.\\n    function proofPathIndicesToIdentityIndex(uint8[] calldata proofPathIndices) private pure returns (uint256) {\\n        uint256 identityIndex = 0;\\n\\n        for (uint8 i = uint8(proofPathIndices.length); i > 0; ) {\\n            if (identityIndex > 0 || proofPathIndices[i - 1] != 0) {\\n                identityIndex *= 2;\\n\\n                if (proofPathIndices[i - 1] == 1) {\\n                    identityIndex += 1;\\n                }\\n            }\\n\\n            unchecked {\\n                --i;\\n            }\\n        }\\n\\n        return identityIndex;\\n    }\\n}\\n\",\"keccak256\":\"0xd2b07442b1b37f4da891d79e9abcfe4986e383256a87f96ccec284acb4f61a55\",\"license\":\"MIT\"},\"@creds-protocol/contracts/interfaces/ICredentialCreds.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/// @title CredentialCreds interface.\\n/// @dev Interface of a CredentialCreds contract.\\ninterface ICredentialCreds {\\n    \\n    error Credential__CredDoesNotExist();\\n    error Credential__CredAlreadyExists();\\n    error Credential__CredIdIsNotLessThanSnarkScalarField();\\n\\n    /// @dev Emitted when a new cred is created.\\n    /// @param issuer: Cred Issuer\\n    /// @param credId: Id of the cred.\\n    /// @param merkleTreeDepth: Depth of the tree.\\n    /// @param zeroValue: Zero value of the tree.\\n    event CredCreated(address indexed issuer, uint256 indexed credId, uint256 merkleTreeDepth, uint256 zeroValue);\\n\\n    /// @dev Emitted when a new identity commitment is added.\\n    /// @param credId: Cred id of the cred.\\n    /// @param index: Identity commitment index.\\n    /// @param identityCommitment: New identity commitment.\\n    /// @param merkleTreeRoot: New root hash of the tree.\\n    event IdentityAdded(uint256 indexed credId, uint256 index, uint256 identityCommitment, uint256 merkleTreeRoot);\\n\\n    /// @dev Emitted when an identity commitment is updated.\\n    /// @param credId: Cred id of the cred.\\n    /// @param index: Identity commitment index.\\n    /// @param identityCommitment: Existing identity commitment to be updated.\\n    /// @param newIdentityCommitment: New identity commitment.\\n    /// @param merkleTreeRoot: New root hash of the tree.\\n    event IdentityUpdated(\\n        uint256 indexed credId,\\n        uint256 index,\\n        uint256 identityCommitment,\\n        uint256 newIdentityCommitment,\\n        uint256 merkleTreeRoot\\n    );\\n\\n    /// @dev Emitted when a new identity commitment is removed.\\n    /// @param credId: Cred id of the cred.\\n    /// @param index: Identity commitment index.\\n    /// @param identityCommitment: Existing identity commitment to be removed.\\n    /// @param merkleTreeRoot: New root hash of the tree.\\n    event IdentityRemoved(uint256 indexed credId, uint256 index, uint256 identityCommitment, uint256 merkleTreeRoot);\\n\\n    /// @dev Returns the last root hash of a cred.\\n    /// @param credId: Id of the cred.\\n    /// @return Root hash of the cred.\\n    function getMerkleTreeRoot(uint256 credId) external view returns (uint256);\\n\\n    /// @dev Returns the depth of the tree of a cred.\\n    /// @param credId: Id of the cred.\\n    /// @return Depth of the cred tree.\\n    function getMerkleTreeDepth(uint256 credId) external view returns (uint256);\\n\\n    /// @dev Returns the number of tree leaves of a cred.\\n    /// @param credId: Id of the cred.\\n    /// @return Number of tree leaves.\\n    function getNumberOfMerkleTreeLeaves(uint256 credId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x508ea756edc34a06efaa9c440fc4aaa77b5aa01a8326382806b5d8f35ab9d36e\",\"license\":\"MIT\"},\"@creds-protocol/contracts/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@creds-protocol/contracts/zk-kit/incremental-merkle-tree.sol/Hashes.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary PoseidonT3 {\\n    function poseidon(uint256[2] memory) public pure returns (uint256) {}\\n}\\n\\nlibrary PoseidonT6 {\\n    function poseidon(uint256[5] memory) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xc634fec0820a2faab1bc350d94c3151835e8d2c2bc0321d9a198d62712786b81\",\"license\":\"MIT\"},\"@creds-protocol/contracts/zk-kit/incremental-merkle-tree.sol/IncrementalBinaryTree.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {PoseidonT3} from \\\"./Hashes.sol\\\";\\n\\n// Each incremental tree has certain properties and data that will\\n// be used to add new leaves.\\nstruct IncrementalTreeData {\\n    uint256 depth; // Depth of the tree (levels - 1).\\n    uint256 root; // Root hash of the tree.\\n    uint256 numberOfLeaves; // Number of leaves of the tree.\\n    mapping(uint256 => uint256) zeroes; // Zero hashes used for empty nodes (level -> zero hash).\\n    // The nodes of the subtrees used in the last addition of a leaf (level -> [left node, right node]).\\n    mapping(uint256 => uint256[2]) lastSubtrees; // Caching these values is essential to efficient appends.\\n}\\n\\n/// @title Incremental binary Merkle tree.\\n/// @dev The incremental tree allows to calculate the root hash each time a leaf is added, ensuring\\n/// the integrity of the tree.\\nlibrary IncrementalBinaryTree {\\n    uint8 internal constant MAX_DEPTH = 32;\\n    uint256 internal constant SNARK_SCALAR_FIELD =\\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n    /// @dev Initializes a tree.\\n    /// @param self: Tree data.\\n    /// @param depth: Depth of the tree.\\n    /// @param zero: Zero value to be used.\\n    function init(\\n        IncrementalTreeData storage self,\\n        uint256 depth,\\n        uint256 zero\\n    ) public {\\n        require(zero < SNARK_SCALAR_FIELD, \\\"IncrementalBinaryTree: leaf must be < SNARK_SCALAR_FIELD\\\");\\n        require(depth > 0 && depth <= MAX_DEPTH, \\\"IncrementalBinaryTree: tree depth must be between 1 and 32\\\");\\n\\n        self.depth = depth;\\n\\n        for (uint8 i = 0; i < depth; ) {\\n            self.zeroes[i] = zero;\\n            zero = PoseidonT3.poseidon([zero, zero]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        self.root = zero;\\n    }\\n\\n    /// @dev Inserts a leaf in the tree.\\n    /// @param self: Tree data.\\n    /// @param leaf: Leaf to be inserted.\\n    function insert(IncrementalTreeData storage self, uint256 leaf) public {\\n        uint256 depth = self.depth;\\n\\n        require(leaf < SNARK_SCALAR_FIELD, \\\"IncrementalBinaryTree: leaf must be < SNARK_SCALAR_FIELD\\\");\\n        require(self.numberOfLeaves < 2**depth, \\\"IncrementalBinaryTree: tree is full\\\");\\n\\n        uint256 index = self.numberOfLeaves;\\n        uint256 hash = leaf;\\n\\n        for (uint8 i = 0; i < depth; ) {\\n            if (index & 1 == 0) {\\n                self.lastSubtrees[i] = [hash, self.zeroes[i]];\\n            } else {\\n                self.lastSubtrees[i][1] = hash;\\n            }\\n\\n            hash = PoseidonT3.poseidon(self.lastSubtrees[i]);\\n            index >>= 1;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        self.root = hash;\\n        self.numberOfLeaves += 1;\\n    }\\n\\n    /// @dev Updates a leaf in the tree.\\n    /// @param self: Tree data.\\n    /// @param leaf: Leaf to be updated.\\n    /// @param newLeaf: New leaf.\\n    /// @param proofSiblings: Array of the sibling nodes of the proof of membership.\\n    /// @param proofPathIndices: Path of the proof of membership.\\n    function update(\\n        IncrementalTreeData storage self,\\n        uint256 leaf,\\n        uint256 newLeaf,\\n        uint256[] calldata proofSiblings,\\n        uint8[] calldata proofPathIndices\\n    ) public {\\n        require(\\n            verify(self, leaf, proofSiblings, proofPathIndices),\\n            \\\"IncrementalBinaryTree: leaf is not part of the tree\\\"\\n        );\\n\\n        uint256 depth = self.depth;\\n        uint256 hash = newLeaf;\\n\\n        for (uint8 i = 0; i < depth; ) {\\n            if (proofPathIndices[i] == 0) {\\n                if (proofSiblings[i] == self.lastSubtrees[i][1]) {\\n                    self.lastSubtrees[i][0] = hash;\\n                }\\n\\n                hash = PoseidonT3.poseidon([hash, proofSiblings[i]]);\\n            } else {\\n                if (proofSiblings[i] == self.lastSubtrees[i][0]) {\\n                    self.lastSubtrees[i][1] = hash;\\n                }\\n\\n                hash = PoseidonT3.poseidon([proofSiblings[i], hash]);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        self.root = hash;\\n    }\\n\\n    /// @dev Removes a leaf from the tree.\\n    /// @param self: Tree data.\\n    /// @param leaf: Leaf to be removed.\\n    /// @param proofSiblings: Array of the sibling nodes of the proof of membership.\\n    /// @param proofPathIndices: Path of the proof of membership.\\n    function remove(\\n        IncrementalTreeData storage self,\\n        uint256 leaf,\\n        uint256[] calldata proofSiblings,\\n        uint8[] calldata proofPathIndices\\n    ) public {\\n        update(self, leaf, self.zeroes[0], proofSiblings, proofPathIndices);\\n    }\\n\\n    /// @dev Verify if the path is correct and the leaf is part of the tree.\\n    /// @param self: Tree data.\\n    /// @param leaf: Leaf to be removed.\\n    /// @param proofSiblings: Array of the sibling nodes of the proof of membership.\\n    /// @param proofPathIndices: Path of the proof of membership.\\n    /// @return True or false.\\n    function verify(\\n        IncrementalTreeData storage self,\\n        uint256 leaf,\\n        uint256[] calldata proofSiblings,\\n        uint8[] calldata proofPathIndices\\n    ) private view returns (bool) {\\n        require(leaf < SNARK_SCALAR_FIELD, \\\"IncrementalBinaryTree: leaf must be < SNARK_SCALAR_FIELD\\\");\\n        uint256 depth = self.depth;\\n        require(\\n            proofPathIndices.length == depth && proofSiblings.length == depth,\\n            \\\"IncrementalBinaryTree: length of path is not correct\\\"\\n        );\\n\\n        uint256 hash = leaf;\\n\\n        for (uint8 i = 0; i < depth; ) {\\n            require(\\n                proofSiblings[i] < SNARK_SCALAR_FIELD,\\n                \\\"IncrementalBinaryTree: sibling node must be < SNARK_SCALAR_FIELD\\\"\\n            );\\n\\n            if (proofPathIndices[i] == 0) {\\n                hash = PoseidonT3.poseidon([hash, proofSiblings[i]]);\\n            } else {\\n                hash = PoseidonT3.poseidon([proofSiblings[i], hash]);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return hash == self.root;\\n    }\\n}\\n\",\"keccak256\":\"0x7aad99b66b8d77364ad901580b988257596eff6cc19d92986b376685f8dbdd1e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":615,"contract":"@creds-protocol/contracts/base/CredentialCreds.sol:CredentialCreds","label":"merkleTree","offset":0,"slot":"0","type":"t_mapping(t_uint256,t_struct(IncrementalTreeData)1197_storage)"}],"types":{"t_array(t_uint256)2_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[2]","numberOfBytes":"64"},"t_mapping(t_uint256,t_array(t_uint256)2_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256[2])","numberOfBytes":"32","value":"t_array(t_uint256)2_storage"},"t_mapping(t_uint256,t_struct(IncrementalTreeData)1197_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct IncrementalTreeData)","numberOfBytes":"32","value":"t_struct(IncrementalTreeData)1197_storage"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_struct(IncrementalTreeData)1197_storage":{"encoding":"inplace","label":"struct IncrementalTreeData","members":[{"astId":1182,"contract":"@creds-protocol/contracts/base/CredentialCreds.sol:CredentialCreds","label":"depth","offset":0,"slot":"0","type":"t_uint256"},{"astId":1184,"contract":"@creds-protocol/contracts/base/CredentialCreds.sol:CredentialCreds","label":"root","offset":0,"slot":"1","type":"t_uint256"},{"astId":1186,"contract":"@creds-protocol/contracts/base/CredentialCreds.sol:CredentialCreds","label":"numberOfLeaves","offset":0,"slot":"2","type":"t_uint256"},{"astId":1190,"contract":"@creds-protocol/contracts/base/CredentialCreds.sol:CredentialCreds","label":"zeroes","offset":0,"slot":"3","type":"t_mapping(t_uint256,t_uint256)"},{"astId":1196,"contract":"@creds-protocol/contracts/base/CredentialCreds.sol:CredentialCreds","label":"lastSubtrees","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_array(t_uint256)2_storage)"}],"numberOfBytes":"160"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@creds-protocol/contracts/base/CredsProtocolRegistry.sol":{"CredsProtocolRegistry":{"abi":[{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"isRegisteredIssuer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"issuerContractAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_issuer","type":"address"},{"internalType":"address","name":"_issuerContractAddress","type":"address"}],"name":"registerIssuer","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b506103f5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632d33d7d5146100465780635a235e1314610076578063c2551c82146100a6575b600080fd5b610060600480360381019061005b9190610254565b6100c2565b60405161006d919061032e565b60405180910390f35b610090600480360381019061008b91906102b9565b6100e2565b60405161009d9190610313565b60405180910390f35b6100c060048036038101906100bb919061027d565b610130565b005b60016020528060005260406000206000915054906101000a900460ff1681565b600060205281600052604060002081815481106100fe57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008135905061023981610391565b92915050565b60008135905061024e816103a8565b92915050565b60006020828403121561026657600080fd5b60006102748482850161022a565b91505092915050565b6000806040838503121561029057600080fd5b600061029e8582860161022a565b92505060206102af8582860161022a565b9150509250929050565b600080604083850312156102cc57600080fd5b60006102da8582860161022a565b92505060206102eb8582860161023f565b9150509250929050565b6102fe81610349565b82525050565b61030d8161035b565b82525050565b600060208201905061032860008301846102f5565b92915050565b60006020820190506103436000830184610304565b92915050565b600061035482610367565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b61039a81610349565b81146103a557600080fd5b50565b6103b181610387565b81146103bc57600080fd5b5056fea2646970667358221220d59c454cacb945b2d6b8460861b76b05528647e316188e0ce418709617f2afd164736f6c63430008040033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F5 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2D33D7D5 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x5A235E13 EQ PUSH2 0x76 JUMPI DUP1 PUSH4 0xC2551C82 EQ PUSH2 0xA6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x60 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5B SWAP2 SWAP1 PUSH2 0x254 JUMP JUMPDEST PUSH2 0xC2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x6D SWAP2 SWAP1 PUSH2 0x32E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x90 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x8B SWAP2 SWAP1 PUSH2 0x2B9 JUMP JUMPDEST PUSH2 0xE2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x9D SWAP2 SWAP1 PUSH2 0x313 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xBB SWAP2 SWAP1 PUSH2 0x27D JUMP JUMPDEST PUSH2 0x130 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SWAP2 POP SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 DUP1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x239 DUP2 PUSH2 0x391 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x24E DUP2 PUSH2 0x3A8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x266 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x274 DUP5 DUP3 DUP6 ADD PUSH2 0x22A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x290 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x29E DUP6 DUP3 DUP7 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2AF DUP6 DUP3 DUP7 ADD PUSH2 0x22A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2DA DUP6 DUP3 DUP7 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2EB DUP6 DUP3 DUP7 ADD PUSH2 0x23F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x2FE DUP2 PUSH2 0x349 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x30D DUP2 PUSH2 0x35B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x328 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2F5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x343 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x304 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x354 DUP3 PUSH2 0x367 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x39A DUP2 PUSH2 0x349 JUMP JUMPDEST DUP2 EQ PUSH2 0x3A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x3B1 DUP2 PUSH2 0x387 JUMP JUMPDEST DUP2 EQ PUSH2 0x3BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD5 SWAP13 GASLIMIT 0x4C 0xAC 0xB9 GASLIMIT 0xB2 0xD6 0xB8 CHAINID ADDMOD PUSH2 0xB76B SDIV MSTORE DUP7 SELFBALANCE 0xE3 AND XOR DUP15 0xC 0xE4 XOR PUSH17 0x9617F2AFD164736F6C6343000804003300 ","sourceMap":"57:364:4:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:2740:29","statements":[{"body":{"nodeType":"YulBlock","src":"59:87:29","statements":[{"nodeType":"YulAssignment","src":"69:29:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"91:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"78:12:29"},"nodeType":"YulFunctionCall","src":"78:20:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"69:5:29"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"134:5:29"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"107:26:29"},"nodeType":"YulFunctionCall","src":"107:33:29"},"nodeType":"YulExpressionStatement","src":"107:33:29"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"37:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"45:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"53:5:29","type":""}],"src":"7:139:29"},{"body":{"nodeType":"YulBlock","src":"204:87:29","statements":[{"nodeType":"YulAssignment","src":"214:29:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"236:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"223:12:29"},"nodeType":"YulFunctionCall","src":"223:20:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"214:5:29"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"279:5:29"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"252:26:29"},"nodeType":"YulFunctionCall","src":"252:33:29"},"nodeType":"YulExpressionStatement","src":"252:33:29"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"182:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"190:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"198:5:29","type":""}],"src":"152:139:29"},{"body":{"nodeType":"YulBlock","src":"363:196:29","statements":[{"body":{"nodeType":"YulBlock","src":"409:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"418:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"421:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"411:6:29"},"nodeType":"YulFunctionCall","src":"411:12:29"},"nodeType":"YulExpressionStatement","src":"411:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"384:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"393:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"380:3:29"},"nodeType":"YulFunctionCall","src":"380:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"405:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"376:3:29"},"nodeType":"YulFunctionCall","src":"376:32:29"},"nodeType":"YulIf","src":"373:2:29"},{"nodeType":"YulBlock","src":"435:117:29","statements":[{"nodeType":"YulVariableDeclaration","src":"450:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"464:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"454:6:29","type":""}]},{"nodeType":"YulAssignment","src":"479:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"514:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"525:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"510:3:29"},"nodeType":"YulFunctionCall","src":"510:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"534:7:29"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"489:20:29"},"nodeType":"YulFunctionCall","src":"489:53:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"479:6:29"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"333:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"344:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"356:6:29","type":""}],"src":"297:262:29"},{"body":{"nodeType":"YulBlock","src":"648:324:29","statements":[{"body":{"nodeType":"YulBlock","src":"694:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"703:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"706:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"696:6:29"},"nodeType":"YulFunctionCall","src":"696:12:29"},"nodeType":"YulExpressionStatement","src":"696:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"669:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"678:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"665:3:29"},"nodeType":"YulFunctionCall","src":"665:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"690:2:29","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"661:3:29"},"nodeType":"YulFunctionCall","src":"661:32:29"},"nodeType":"YulIf","src":"658:2:29"},{"nodeType":"YulBlock","src":"720:117:29","statements":[{"nodeType":"YulVariableDeclaration","src":"735:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"749:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"739:6:29","type":""}]},{"nodeType":"YulAssignment","src":"764:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"799:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"810:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"795:3:29"},"nodeType":"YulFunctionCall","src":"795:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"819:7:29"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"774:20:29"},"nodeType":"YulFunctionCall","src":"774:53:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"764:6:29"}]}]},{"nodeType":"YulBlock","src":"847:118:29","statements":[{"nodeType":"YulVariableDeclaration","src":"862:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"876:2:29","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"866:6:29","type":""}]},{"nodeType":"YulAssignment","src":"892:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"927:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"938:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"923:3:29"},"nodeType":"YulFunctionCall","src":"923:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"947:7:29"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"902:20:29"},"nodeType":"YulFunctionCall","src":"902:53:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"892:6:29"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"610:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"621:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"633:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"641:6:29","type":""}],"src":"565:407:29"},{"body":{"nodeType":"YulBlock","src":"1061:324:29","statements":[{"body":{"nodeType":"YulBlock","src":"1107:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1116:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1119:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1109:6:29"},"nodeType":"YulFunctionCall","src":"1109:12:29"},"nodeType":"YulExpressionStatement","src":"1109:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1082:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"1091:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1078:3:29"},"nodeType":"YulFunctionCall","src":"1078:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"1103:2:29","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1074:3:29"},"nodeType":"YulFunctionCall","src":"1074:32:29"},"nodeType":"YulIf","src":"1071:2:29"},{"nodeType":"YulBlock","src":"1133:117:29","statements":[{"nodeType":"YulVariableDeclaration","src":"1148:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"1162:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1152:6:29","type":""}]},{"nodeType":"YulAssignment","src":"1177:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1212:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"1223:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1208:3:29"},"nodeType":"YulFunctionCall","src":"1208:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1232:7:29"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1187:20:29"},"nodeType":"YulFunctionCall","src":"1187:53:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1177:6:29"}]}]},{"nodeType":"YulBlock","src":"1260:118:29","statements":[{"nodeType":"YulVariableDeclaration","src":"1275:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"1289:2:29","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1279:6:29","type":""}]},{"nodeType":"YulAssignment","src":"1305:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1340:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"1351:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1336:3:29"},"nodeType":"YulFunctionCall","src":"1336:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1360:7:29"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"1315:20:29"},"nodeType":"YulFunctionCall","src":"1315:53:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1305:6:29"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1023:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1034:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1046:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1054:6:29","type":""}],"src":"978:407:29"},{"body":{"nodeType":"YulBlock","src":"1456:53:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1473:3:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1496:5:29"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"1478:17:29"},"nodeType":"YulFunctionCall","src":"1478:24:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1466:6:29"},"nodeType":"YulFunctionCall","src":"1466:37:29"},"nodeType":"YulExpressionStatement","src":"1466:37:29"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1444:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1451:3:29","type":""}],"src":"1391:118:29"},{"body":{"nodeType":"YulBlock","src":"1574:50:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1591:3:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1611:5:29"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"1596:14:29"},"nodeType":"YulFunctionCall","src":"1596:21:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1584:6:29"},"nodeType":"YulFunctionCall","src":"1584:34:29"},"nodeType":"YulExpressionStatement","src":"1584:34:29"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1562:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1569:3:29","type":""}],"src":"1515:109:29"},{"body":{"nodeType":"YulBlock","src":"1728:124:29","statements":[{"nodeType":"YulAssignment","src":"1738:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1750:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1761:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1746:3:29"},"nodeType":"YulFunctionCall","src":"1746:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1738:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1818:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1831:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1842:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1827:3:29"},"nodeType":"YulFunctionCall","src":"1827:17:29"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"1774:43:29"},"nodeType":"YulFunctionCall","src":"1774:71:29"},"nodeType":"YulExpressionStatement","src":"1774:71:29"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1700:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1712:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1723:4:29","type":""}],"src":"1630:222:29"},{"body":{"nodeType":"YulBlock","src":"1950:118:29","statements":[{"nodeType":"YulAssignment","src":"1960:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1972:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1983:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1968:3:29"},"nodeType":"YulFunctionCall","src":"1968:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1960:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2034:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2047:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"2058:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2043:3:29"},"nodeType":"YulFunctionCall","src":"2043:17:29"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"1996:37:29"},"nodeType":"YulFunctionCall","src":"1996:65:29"},"nodeType":"YulExpressionStatement","src":"1996:65:29"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1922:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1934:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1945:4:29","type":""}],"src":"1858:210:29"},{"body":{"nodeType":"YulBlock","src":"2119:51:29","statements":[{"nodeType":"YulAssignment","src":"2129:35:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2158:5:29"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"2140:17:29"},"nodeType":"YulFunctionCall","src":"2140:24:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2129:7:29"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2101:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2111:7:29","type":""}],"src":"2074:96:29"},{"body":{"nodeType":"YulBlock","src":"2218:48:29","statements":[{"nodeType":"YulAssignment","src":"2228:32:29","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2253:5:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2246:6:29"},"nodeType":"YulFunctionCall","src":"2246:13:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2239:6:29"},"nodeType":"YulFunctionCall","src":"2239:21:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2228:7:29"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2200:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2210:7:29","type":""}],"src":"2176:90:29"},{"body":{"nodeType":"YulBlock","src":"2317:81:29","statements":[{"nodeType":"YulAssignment","src":"2327:65:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2342:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"2349:42:29","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2338:3:29"},"nodeType":"YulFunctionCall","src":"2338:54:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2327:7:29"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2299:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2309:7:29","type":""}],"src":"2272:126:29"},{"body":{"nodeType":"YulBlock","src":"2449:32:29","statements":[{"nodeType":"YulAssignment","src":"2459:16:29","value":{"name":"value","nodeType":"YulIdentifier","src":"2470:5:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2459:7:29"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2431:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2441:7:29","type":""}],"src":"2404:77:29"},{"body":{"nodeType":"YulBlock","src":"2530:79:29","statements":[{"body":{"nodeType":"YulBlock","src":"2587:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2596:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2599:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2589:6:29"},"nodeType":"YulFunctionCall","src":"2589:12:29"},"nodeType":"YulExpressionStatement","src":"2589:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2553:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2578:5:29"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"2560:17:29"},"nodeType":"YulFunctionCall","src":"2560:24:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2550:2:29"},"nodeType":"YulFunctionCall","src":"2550:35:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2543:6:29"},"nodeType":"YulFunctionCall","src":"2543:43:29"},"nodeType":"YulIf","src":"2540:2:29"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2523:5:29","type":""}],"src":"2487:122:29"},{"body":{"nodeType":"YulBlock","src":"2658:79:29","statements":[{"body":{"nodeType":"YulBlock","src":"2715:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2724:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2727:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2717:6:29"},"nodeType":"YulFunctionCall","src":"2717:12:29"},"nodeType":"YulExpressionStatement","src":"2717:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2681:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2706:5:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"2688:17:29"},"nodeType":"YulFunctionCall","src":"2688:24:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2678:2:29"},"nodeType":"YulFunctionCall","src":"2678:35:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2671:6:29"},"nodeType":"YulFunctionCall","src":"2671:43:29"},"nodeType":"YulIf","src":"2668:2:29"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2651:5:29","type":""}],"src":"2615:122:29"}]},"contents":"{\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n","id":29,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100415760003560e01c80632d33d7d5146100465780635a235e1314610076578063c2551c82146100a6575b600080fd5b610060600480360381019061005b9190610254565b6100c2565b60405161006d919061032e565b60405180910390f35b610090600480360381019061008b91906102b9565b6100e2565b60405161009d9190610313565b60405180910390f35b6100c060048036038101906100bb919061027d565b610130565b005b60016020528060005260406000206000915054906101000a900460ff1681565b600060205281600052604060002081815481106100fe57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008135905061023981610391565b92915050565b60008135905061024e816103a8565b92915050565b60006020828403121561026657600080fd5b60006102748482850161022a565b91505092915050565b6000806040838503121561029057600080fd5b600061029e8582860161022a565b92505060206102af8582860161022a565b9150509250929050565b600080604083850312156102cc57600080fd5b60006102da8582860161022a565b92505060206102eb8582860161023f565b9150509250929050565b6102fe81610349565b82525050565b61030d8161035b565b82525050565b600060208201905061032860008301846102f5565b92915050565b60006020820190506103436000830184610304565b92915050565b600061035482610367565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b61039a81610349565b81146103a557600080fd5b50565b6103b181610387565b81146103bc57600080fd5b5056fea2646970667358221220d59c454cacb945b2d6b8460861b76b05528647e316188e0ce418709617f2afd164736f6c63430008040033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2D33D7D5 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x5A235E13 EQ PUSH2 0x76 JUMPI DUP1 PUSH4 0xC2551C82 EQ PUSH2 0xA6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x60 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5B SWAP2 SWAP1 PUSH2 0x254 JUMP JUMPDEST PUSH2 0xC2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x6D SWAP2 SWAP1 PUSH2 0x32E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x90 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x8B SWAP2 SWAP1 PUSH2 0x2B9 JUMP JUMPDEST PUSH2 0xE2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x9D SWAP2 SWAP1 PUSH2 0x313 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xBB SWAP2 SWAP1 PUSH2 0x27D JUMP JUMPDEST PUSH2 0x130 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SWAP2 POP SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 DUP1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x239 DUP2 PUSH2 0x391 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x24E DUP2 PUSH2 0x3A8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x266 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x274 DUP5 DUP3 DUP6 ADD PUSH2 0x22A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x290 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x29E DUP6 DUP3 DUP7 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2AF DUP6 DUP3 DUP7 ADD PUSH2 0x22A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2DA DUP6 DUP3 DUP7 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2EB DUP6 DUP3 DUP7 ADD PUSH2 0x23F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x2FE DUP2 PUSH2 0x349 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x30D DUP2 PUSH2 0x35B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x328 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2F5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x343 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x304 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x354 DUP3 PUSH2 0x367 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x39A DUP2 PUSH2 0x349 JUMP JUMPDEST DUP2 EQ PUSH2 0x3A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x3B1 DUP2 PUSH2 0x387 JUMP JUMPDEST DUP2 EQ PUSH2 0x3BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD5 SWAP13 GASLIMIT 0x4C 0xAC 0xB9 GASLIMIT 0xB2 0xD6 0xB8 CHAINID ADDMOD PUSH2 0xB76B SDIV MSTORE DUP7 SELFBALANCE 0xE3 AND XOR DUP15 0xC 0xE4 XOR PUSH17 0x9617F2AFD164736F6C6343000804003300 ","sourceMap":"57:364:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;159:50;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;95:58;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;216:202;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;159:50;;;;;;;;;;;;;;;;;;;;;;:::o;95:58::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;216:202::-;308:21;:30;330:7;308:30;;;;;;;;;;;;;;;344:22;308:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;407:4;377:18;:27;396:7;377:27;;;;;;;;;;;;;;;;:34;;;;;;;;;;;;;;;;;;216:202;;:::o;7:139:29:-;53:5;91:6;78:20;69:29;;107:33;134:5;107:33;:::i;:::-;59:87;;;;:::o;152:139::-;198:5;236:6;223:20;214:29;;252:33;279:5;252:33;:::i;:::-;204:87;;;;:::o;297:262::-;356:6;405:2;393:9;384:7;380:23;376:32;373:2;;;421:1;418;411:12;373:2;464:1;489:53;534:7;525:6;514:9;510:22;489:53;:::i;:::-;479:63;;435:117;363:196;;;;:::o;565:407::-;633:6;641;690:2;678:9;669:7;665:23;661:32;658:2;;;706:1;703;696:12;658:2;749:1;774:53;819:7;810:6;799:9;795:22;774:53;:::i;:::-;764:63;;720:117;876:2;902:53;947:7;938:6;927:9;923:22;902:53;:::i;:::-;892:63;;847:118;648:324;;;;;:::o;978:407::-;1046:6;1054;1103:2;1091:9;1082:7;1078:23;1074:32;1071:2;;;1119:1;1116;1109:12;1071:2;1162:1;1187:53;1232:7;1223:6;1212:9;1208:22;1187:53;:::i;:::-;1177:63;;1133:117;1289:2;1315:53;1360:7;1351:6;1340:9;1336:22;1315:53;:::i;:::-;1305:63;;1260:118;1061:324;;;;;:::o;1391:118::-;1478:24;1496:5;1478:24;:::i;:::-;1473:3;1466:37;1456:53;;:::o;1515:109::-;1596:21;1611:5;1596:21;:::i;:::-;1591:3;1584:34;1574:50;;:::o;1630:222::-;1723:4;1761:2;1750:9;1746:18;1738:26;;1774:71;1842:1;1831:9;1827:17;1818:6;1774:71;:::i;:::-;1728:124;;;;:::o;1858:210::-;1945:4;1983:2;1972:9;1968:18;1960:26;;1996:65;2058:1;2047:9;2043:17;2034:6;1996:65;:::i;:::-;1950:118;;;;:::o;2074:96::-;2111:7;2140:24;2158:5;2140:24;:::i;:::-;2129:35;;2119:51;;;:::o;2176:90::-;2210:7;2253:5;2246:13;2239:21;2228:32;;2218:48;;;:::o;2272:126::-;2309:7;2349:42;2342:5;2338:54;2327:65;;2317:81;;;:::o;2404:77::-;2441:7;2470:5;2459:16;;2449:32;;;:::o;2487:122::-;2560:24;2578:5;2560:24;:::i;:::-;2553:5;2550:35;2540:2;;2599:1;2596;2589:12;2540:2;2530:79;:::o;2615:122::-;2688:24;2706:5;2688:24;:::i;:::-;2681:5;2678:35;2668:2;;2727:1;2724;2717:12;2668:2;2658:79;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"202600","executionCost":"245","totalCost":"202845"},"external":{"isRegisteredIssuer(address)":"1523","issuerContractAddress(address,uint256)":"infinite","registerIssuer(address,address)":"infinite"}},"methodIdentifiers":{"isRegisteredIssuer(address)":"2d33d7d5","issuerContractAddress(address,uint256)":"5a235e13","registerIssuer(address,address)":"c2551c82"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRegisteredIssuer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"issuerContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_issuerContractAddress\",\"type\":\"address\"}],\"name\":\"registerIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@creds-protocol/contracts/base/CredsProtocolRegistry.sol\":\"CredsProtocolRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@creds-protocol/contracts/base/CredsProtocolRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ncontract CredsProtocolRegistry {\\n\\n    mapping(address => address[]) public issuerContractAddress;\\n    mapping(address => bool) public isRegisteredIssuer;\\n\\n    function registerIssuer(address _issuer, address _issuerContractAddress) external {\\n        issuerContractAddress[_issuer].push(_issuerContractAddress);\\n        isRegisteredIssuer[_issuer] = true;\\n    }\\n\\n}\",\"keccak256\":\"0x10a17aad1cdc2f065689e6e19f2dbbf8d3d21d477625522500111104ca01eecc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":934,"contract":"@creds-protocol/contracts/base/CredsProtocolRegistry.sol:CredsProtocolRegistry","label":"issuerContractAddress","offset":0,"slot":"0","type":"t_mapping(t_address,t_array(t_address)dyn_storage)"},{"astId":938,"contract":"@creds-protocol/contracts/base/CredsProtocolRegistry.sol:CredsProtocolRegistry","label":"isRegisteredIssuer","offset":0,"slot":"1","type":"t_mapping(t_address,t_bool)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"base":"t_address","encoding":"dynamic_array","label":"address[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_array(t_address)dyn_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => address[])","numberOfBytes":"32","value":"t_array(t_address)dyn_storage"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@creds-protocol/contracts/interfaces/ICredential.sol":{"ICredential":{"abi":[{"inputs":[],"name":"Credential__CallerIsNotTheCredIssuer","type":"error"},{"inputs":[],"name":"Credential__MerkleTreeDepthIsNotSupported","type":"error"},{"inputs":[],"name":"Credential__MerkleTreeRootIsExpired","type":"error"},{"inputs":[],"name":"Credential__MerkleTreeRootIsNotPartOfTheCred","type":"error"},{"inputs":[],"name":"Credential__YouAreUsingTheSameNillifierTwice","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"credId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"merkleTreeRoot","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"externalNullifier","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"nullifierHash","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"signal","type":"bytes32"}],"name":"ProofVerified","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"issuerAddress","type":"address"},{"indexed":true,"internalType":"string","name":"issuerName","type":"string"},{"indexed":true,"internalType":"string","name":"issuerSymbol","type":"string"}],"name":"issuerRegistered","type":"event"}],"devdoc":{"details":"Interface of a Credential contract.","events":{"ProofVerified(uint256,uint256,uint256,uint256,bytes32)":{"details":"Emitted when a Credential proof is verified.","params":{"credId":": Id of the cred.","externalNullifier":": External nullifier.","merkleTreeRoot":": Root of the Merkle tree.","nullifierHash":": Nullifier hash.","signal":": Credential signal."}},"issuerRegistered(address,string,string)":{"details":"Emitted when an admin is assigned to a cred.","params":{"issuerAddress":": Address of the issuer","issuerName":": Name of the issuer","issuerSymbol":": Symbol of the issuer"}}},"kind":"dev","methods":{},"title":"Credential interface.","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Credential__CallerIsNotTheCredIssuer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Credential__MerkleTreeDepthIsNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Credential__MerkleTreeRootIsExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Credential__MerkleTreeRootIsNotPartOfTheCred\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Credential__YouAreUsingTheSameNillifierTwice\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"credId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"merkleTreeRoot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"externalNullifier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nullifierHash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"signal\",\"type\":\"bytes32\"}],\"name\":\"ProofVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"issuerName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"issuerSymbol\",\"type\":\"string\"}],\"name\":\"issuerRegistered\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Interface of a Credential contract.\",\"events\":{\"ProofVerified(uint256,uint256,uint256,uint256,bytes32)\":{\"details\":\"Emitted when a Credential proof is verified.\",\"params\":{\"credId\":\": Id of the cred.\",\"externalNullifier\":\": External nullifier.\",\"merkleTreeRoot\":\": Root of the Merkle tree.\",\"nullifierHash\":\": Nullifier hash.\",\"signal\":\": Credential signal.\"}},\"issuerRegistered(address,string,string)\":{\"details\":\"Emitted when an admin is assigned to a cred.\",\"params\":{\"issuerAddress\":\": Address of the issuer\",\"issuerName\":\": Name of the issuer\",\"issuerSymbol\":\": Symbol of the issuer\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"Credential interface.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@creds-protocol/contracts/interfaces/ICredential.sol\":\"ICredential\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@creds-protocol/contracts/interfaces/ICredential.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/// @title Credential interface.\\n/// @dev Interface of a Credential contract.\\ninterface ICredential {\\n    error Credential__CallerIsNotTheCredIssuer();\\n    error Credential__MerkleTreeDepthIsNotSupported();\\n    error Credential__MerkleTreeRootIsExpired();\\n    error Credential__MerkleTreeRootIsNotPartOfTheCred();\\n    error Credential__YouAreUsingTheSameNillifierTwice();\\n\\n    /// It defines all the cred parameters, in addition to those in the Merkle tree.\\n    struct Cred {\\n        address admin;\\n        string credURI;\\n        uint256 merkleRootDuration;\\n        mapping(uint256 => uint256) merkleRootCreationDates;\\n        mapping(uint256 => bool) nullifierHashes;\\n    }\\n\\n    struct Verifier {\\n        address contractAddress;\\n        uint256 merkleTreeDepth;\\n    }\\n\\n    /// @dev Emitted when an admin is assigned to a cred.\\n    /// @param issuerAddress: Address of the issuer\\n    /// @param issuerName: Name of the issuer\\n    /// @param issuerSymbol: Symbol of the issuer\\n    event issuerRegistered(\\n        address indexed issuerAddress, \\n        string indexed issuerName, \\n        string indexed issuerSymbol\\n    );\\n\\n    /// @dev Emitted when a Credential proof is verified.\\n    /// @param credId: Id of the cred.\\n    /// @param merkleTreeRoot: Root of the Merkle tree.\\n    /// @param externalNullifier: External nullifier.\\n    /// @param nullifierHash: Nullifier hash.\\n    /// @param signal: Credential signal.\\n    event ProofVerified(\\n        uint256 indexed credId,\\n        uint256 merkleTreeRoot,\\n        uint256 externalNullifier,\\n        uint256 nullifierHash,\\n        bytes32 signal\\n    );\\n    \\n}\",\"keccak256\":\"0xc7792328f4945f8f0af16e28766a33dcb2ca6e2c5e5f373cd36412988bf70bb5\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@creds-protocol/contracts/interfaces/ICredentialCore.sol":{"ICredentialCore":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"nullifierHash","type":"uint256"}],"name":"NullifierHashAdded","type":"event"}],"devdoc":{"details":"Interface of CredentialCore contract.","events":{"NullifierHashAdded(uint256)":{"params":{"nullifierHash":": Hash of external and identity nullifiers."}}},"kind":"dev","methods":{},"title":"CredentialCore interface.","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nullifierHash\",\"type\":\"uint256\"}],\"name\":\"NullifierHashAdded\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Interface of CredentialCore contract.\",\"events\":{\"NullifierHashAdded(uint256)\":{\"params\":{\"nullifierHash\":\": Hash of external and identity nullifiers.\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"CredentialCore interface.\",\"version\":1},\"userdoc\":{\"events\":{\"NullifierHashAdded(uint256)\":{\"notice\":\"Emitted when a proof is verified correctly and a new nullifier hash is added.\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@creds-protocol/contracts/interfaces/ICredentialCore.sol\":\"ICredentialCore\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@creds-protocol/contracts/interfaces/ICredentialCore.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/// @title CredentialCore interface.\\n/// @dev Interface of CredentialCore contract.\\ninterface ICredentialCore {\\n    /// @notice Emitted when a proof is verified correctly and a new nullifier hash is added.\\n    /// @param nullifierHash: Hash of external and identity nullifiers.\\n    event NullifierHashAdded(uint256 nullifierHash);\\n}\\n\",\"keccak256\":\"0x1f0ec24e95ce1a7dffa4a51b427e59f27807b6ad81ff92cb36b15ed5de94fc0b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"NullifierHashAdded(uint256)":{"notice":"Emitted when a proof is verified correctly and a new nullifier hash is added."}},"kind":"user","methods":{},"version":1}}},"@creds-protocol/contracts/interfaces/ICredentialCreds.sol":{"ICredentialCreds":{"abi":[{"inputs":[],"name":"Credential__CredAlreadyExists","type":"error"},{"inputs":[],"name":"Credential__CredDoesNotExist","type":"error"},{"inputs":[],"name":"Credential__CredIdIsNotLessThanSnarkScalarField","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"issuer","type":"address"},{"indexed":true,"internalType":"uint256","name":"credId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"merkleTreeDepth","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"zeroValue","type":"uint256"}],"name":"CredCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"credId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"index","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"identityCommitment","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"merkleTreeRoot","type":"uint256"}],"name":"IdentityAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"credId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"index","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"identityCommitment","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"merkleTreeRoot","type":"uint256"}],"name":"IdentityRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"credId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"index","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"identityCommitment","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newIdentityCommitment","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"merkleTreeRoot","type":"uint256"}],"name":"IdentityUpdated","type":"event"},{"inputs":[{"internalType":"uint256","name":"credId","type":"uint256"}],"name":"getMerkleTreeDepth","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"credId","type":"uint256"}],"name":"getMerkleTreeRoot","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"credId","type":"uint256"}],"name":"getNumberOfMerkleTreeLeaves","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of a CredentialCreds contract.","events":{"CredCreated(address,uint256,uint256,uint256)":{"details":"Emitted when a new cred is created.","params":{"credId":": Id of the cred.","issuer":": Cred Issuer","merkleTreeDepth":": Depth of the tree.","zeroValue":": Zero value of the tree."}},"IdentityAdded(uint256,uint256,uint256,uint256)":{"details":"Emitted when a new identity commitment is added.","params":{"credId":": Cred id of the cred.","identityCommitment":": New identity commitment.","index":": Identity commitment index.","merkleTreeRoot":": New root hash of the tree."}},"IdentityRemoved(uint256,uint256,uint256,uint256)":{"details":"Emitted when a new identity commitment is removed.","params":{"credId":": Cred id of the cred.","identityCommitment":": Existing identity commitment to be removed.","index":": Identity commitment index.","merkleTreeRoot":": New root hash of the tree."}},"IdentityUpdated(uint256,uint256,uint256,uint256,uint256)":{"details":"Emitted when an identity commitment is updated.","params":{"credId":": Cred id of the cred.","identityCommitment":": Existing identity commitment to be updated.","index":": Identity commitment index.","merkleTreeRoot":": New root hash of the tree.","newIdentityCommitment":": New identity commitment."}}},"kind":"dev","methods":{"getMerkleTreeDepth(uint256)":{"details":"Returns the depth of the tree of a cred.","params":{"credId":": Id of the cred."},"returns":{"_0":"Depth of the cred tree."}},"getMerkleTreeRoot(uint256)":{"details":"Returns the last root hash of a cred.","params":{"credId":": Id of the cred."},"returns":{"_0":"Root hash of the cred."}},"getNumberOfMerkleTreeLeaves(uint256)":{"details":"Returns the number of tree leaves of a cred.","params":{"credId":": Id of the cred."},"returns":{"_0":"Number of tree leaves."}}},"title":"CredentialCreds interface.","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getMerkleTreeDepth(uint256)":"6389e107","getMerkleTreeRoot(uint256)":"dabc4d51","getNumberOfMerkleTreeLeaves(uint256)":"638480be"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Credential__CredAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Credential__CredDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Credential__CredIdIsNotLessThanSnarkScalarField\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"credId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"merkleTreeDepth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"zeroValue\",\"type\":\"uint256\"}],\"name\":\"CredCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"credId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"identityCommitment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"merkleTreeRoot\",\"type\":\"uint256\"}],\"name\":\"IdentityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"credId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"identityCommitment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"merkleTreeRoot\",\"type\":\"uint256\"}],\"name\":\"IdentityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"credId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"identityCommitment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newIdentityCommitment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"merkleTreeRoot\",\"type\":\"uint256\"}],\"name\":\"IdentityUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"credId\",\"type\":\"uint256\"}],\"name\":\"getMerkleTreeDepth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"credId\",\"type\":\"uint256\"}],\"name\":\"getMerkleTreeRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"credId\",\"type\":\"uint256\"}],\"name\":\"getNumberOfMerkleTreeLeaves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of a CredentialCreds contract.\",\"events\":{\"CredCreated(address,uint256,uint256,uint256)\":{\"details\":\"Emitted when a new cred is created.\",\"params\":{\"credId\":\": Id of the cred.\",\"issuer\":\": Cred Issuer\",\"merkleTreeDepth\":\": Depth of the tree.\",\"zeroValue\":\": Zero value of the tree.\"}},\"IdentityAdded(uint256,uint256,uint256,uint256)\":{\"details\":\"Emitted when a new identity commitment is added.\",\"params\":{\"credId\":\": Cred id of the cred.\",\"identityCommitment\":\": New identity commitment.\",\"index\":\": Identity commitment index.\",\"merkleTreeRoot\":\": New root hash of the tree.\"}},\"IdentityRemoved(uint256,uint256,uint256,uint256)\":{\"details\":\"Emitted when a new identity commitment is removed.\",\"params\":{\"credId\":\": Cred id of the cred.\",\"identityCommitment\":\": Existing identity commitment to be removed.\",\"index\":\": Identity commitment index.\",\"merkleTreeRoot\":\": New root hash of the tree.\"}},\"IdentityUpdated(uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Emitted when an identity commitment is updated.\",\"params\":{\"credId\":\": Cred id of the cred.\",\"identityCommitment\":\": Existing identity commitment to be updated.\",\"index\":\": Identity commitment index.\",\"merkleTreeRoot\":\": New root hash of the tree.\",\"newIdentityCommitment\":\": New identity commitment.\"}}},\"kind\":\"dev\",\"methods\":{\"getMerkleTreeDepth(uint256)\":{\"details\":\"Returns the depth of the tree of a cred.\",\"params\":{\"credId\":\": Id of the cred.\"},\"returns\":{\"_0\":\"Depth of the cred tree.\"}},\"getMerkleTreeRoot(uint256)\":{\"details\":\"Returns the last root hash of a cred.\",\"params\":{\"credId\":\": Id of the cred.\"},\"returns\":{\"_0\":\"Root hash of the cred.\"}},\"getNumberOfMerkleTreeLeaves(uint256)\":{\"details\":\"Returns the number of tree leaves of a cred.\",\"params\":{\"credId\":\": Id of the cred.\"},\"returns\":{\"_0\":\"Number of tree leaves.\"}}},\"title\":\"CredentialCreds interface.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@creds-protocol/contracts/interfaces/ICredentialCreds.sol\":\"ICredentialCreds\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@creds-protocol/contracts/interfaces/ICredentialCreds.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/// @title CredentialCreds interface.\\n/// @dev Interface of a CredentialCreds contract.\\ninterface ICredentialCreds {\\n    \\n    error Credential__CredDoesNotExist();\\n    error Credential__CredAlreadyExists();\\n    error Credential__CredIdIsNotLessThanSnarkScalarField();\\n\\n    /// @dev Emitted when a new cred is created.\\n    /// @param issuer: Cred Issuer\\n    /// @param credId: Id of the cred.\\n    /// @param merkleTreeDepth: Depth of the tree.\\n    /// @param zeroValue: Zero value of the tree.\\n    event CredCreated(address indexed issuer, uint256 indexed credId, uint256 merkleTreeDepth, uint256 zeroValue);\\n\\n    /// @dev Emitted when a new identity commitment is added.\\n    /// @param credId: Cred id of the cred.\\n    /// @param index: Identity commitment index.\\n    /// @param identityCommitment: New identity commitment.\\n    /// @param merkleTreeRoot: New root hash of the tree.\\n    event IdentityAdded(uint256 indexed credId, uint256 index, uint256 identityCommitment, uint256 merkleTreeRoot);\\n\\n    /// @dev Emitted when an identity commitment is updated.\\n    /// @param credId: Cred id of the cred.\\n    /// @param index: Identity commitment index.\\n    /// @param identityCommitment: Existing identity commitment to be updated.\\n    /// @param newIdentityCommitment: New identity commitment.\\n    /// @param merkleTreeRoot: New root hash of the tree.\\n    event IdentityUpdated(\\n        uint256 indexed credId,\\n        uint256 index,\\n        uint256 identityCommitment,\\n        uint256 newIdentityCommitment,\\n        uint256 merkleTreeRoot\\n    );\\n\\n    /// @dev Emitted when a new identity commitment is removed.\\n    /// @param credId: Cred id of the cred.\\n    /// @param index: Identity commitment index.\\n    /// @param identityCommitment: Existing identity commitment to be removed.\\n    /// @param merkleTreeRoot: New root hash of the tree.\\n    event IdentityRemoved(uint256 indexed credId, uint256 index, uint256 identityCommitment, uint256 merkleTreeRoot);\\n\\n    /// @dev Returns the last root hash of a cred.\\n    /// @param credId: Id of the cred.\\n    /// @return Root hash of the cred.\\n    function getMerkleTreeRoot(uint256 credId) external view returns (uint256);\\n\\n    /// @dev Returns the depth of the tree of a cred.\\n    /// @param credId: Id of the cred.\\n    /// @return Depth of the cred tree.\\n    function getMerkleTreeDepth(uint256 credId) external view returns (uint256);\\n\\n    /// @dev Returns the number of tree leaves of a cred.\\n    /// @param credId: Id of the cred.\\n    /// @return Number of tree leaves.\\n    function getNumberOfMerkleTreeLeaves(uint256 credId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x508ea756edc34a06efaa9c440fc4aaa77b5aa01a8326382806b5d8f35ab9d36e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@creds-protocol/contracts/interfaces/IVerifier.sol":{"IVerifier":{"abi":[{"inputs":[{"internalType":"uint256[2]","name":"a","type":"uint256[2]"},{"internalType":"uint256[2][2]","name":"b","type":"uint256[2][2]"},{"internalType":"uint256[2]","name":"c","type":"uint256[2]"},{"internalType":"uint256[4]","name":"input","type":"uint256[4]"}],"name":"verifyProof","outputs":[],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of Verifier contract.","kind":"dev","methods":{},"title":"Verifier interface.","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[4])":"5fe8c13b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"input\",\"type\":\"uint256[4]\"}],\"name\":\"verifyProof\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of Verifier contract.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Verifier interface.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@creds-protocol/contracts/interfaces/IVerifier.sol\":\"IVerifier\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@creds-protocol/contracts/interfaces/IVerifier.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/// @title Verifier interface.\\n/// @dev Interface of Verifier contract.\\ninterface IVerifier {\\n    function verifyProof(\\n        uint256[2] memory a,\\n        uint256[2][2] memory b,\\n        uint256[2] memory c,\\n        uint256[4] memory input\\n    ) external view;\\n}\",\"keccak256\":\"0xe0c4acba6ffee755835d287d3978d10d207ebfbb25b49140416e36a609075045\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@creds-protocol/contracts/openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@creds-protocol/contracts/openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@creds-protocol/contracts/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@creds-protocol/contracts/zk-kit/incremental-merkle-tree.sol/Hashes.sol":{"PoseidonT3":{"abi":[{"inputs":[{"internalType":"uint256[2]","name":"","type":"uint256[2]"}],"name":"poseidon","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"610276610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c806329a5f2f61461003a575b600080fd5b610054600480360381019061004f9190610110565b61006a565b6040516100619190610148565b60405180910390f35b6000919050565b600061008461007f84610188565b610163565b9050808285602086028201111561009a57600080fd5b60005b858110156100ca57816100b088826100fb565b84526020840193506020830192505060018101905061009d565b5050509392505050565b600082601f8301126100e557600080fd5b60026100f2848285610071565b91505092915050565b60008135905061010a81610229565b92915050565b60006040828403121561012257600080fd5b6000610130848285016100d4565b91505092915050565b610142816101ae565b82525050565b600060208201905061015d6000830184610139565b92915050565b600061016d61017e565b905061017982826101b8565b919050565b6000604051905090565b600067ffffffffffffffff8211156101a3576101a26101e9565b5b602082029050919050565b6000819050919050565b6101c182610218565b810181811067ffffffffffffffff821117156101e0576101df6101e9565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b610232816101ae565b811461023d57600080fd5b5056fea2646970667358221220ba575f350b88eb5b9370d52cb21e50b42693d01a00ea3d03f067deeceadb60bb64736f6c63430008040033","opcodes":"PUSH2 0x276 PUSH2 0x53 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH2 0x46 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x35 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x29A5F2F6 EQ PUSH2 0x3A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x54 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4F SWAP2 SWAP1 PUSH2 0x110 JUMP JUMPDEST PUSH2 0x6A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x61 SWAP2 SWAP1 PUSH2 0x148 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x84 PUSH2 0x7F DUP5 PUSH2 0x188 JUMP JUMPDEST PUSH2 0x163 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 DUP6 PUSH1 0x20 DUP7 MUL DUP3 ADD GT ISZERO PUSH2 0x9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0xCA JUMPI DUP2 PUSH2 0xB0 DUP9 DUP3 PUSH2 0xFB JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x9D JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x2 PUSH2 0xF2 DUP5 DUP3 DUP6 PUSH2 0x71 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x10A DUP2 PUSH2 0x229 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x122 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x130 DUP5 DUP3 DUP6 ADD PUSH2 0xD4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x142 DUP2 PUSH2 0x1AE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x15D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x139 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16D PUSH2 0x17E JUMP JUMPDEST SWAP1 POP PUSH2 0x179 DUP3 DUP3 PUSH2 0x1B8 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1A3 JUMPI PUSH2 0x1A2 PUSH2 0x1E9 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1C1 DUP3 PUSH2 0x218 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1E0 JUMPI PUSH2 0x1DF PUSH2 0x1E9 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x232 DUP2 PUSH2 0x1AE JUMP JUMPDEST DUP2 EQ PUSH2 0x23D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBA JUMPI 0x5F CALLDATALOAD SIGNEXTEND DUP9 0xEB JUMPDEST SWAP4 PUSH17 0xD52CB21E50B42693D01A00EA3D03F067DE 0xEC 0xEA 0xDB PUSH1 0xBB PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ","sourceMap":"56:96:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:3010:29","statements":[{"body":{"nodeType":"YulBlock","src":"125:488:29","statements":[{"nodeType":"YulAssignment","src":"135:88:29","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"215:6:29"}],"functionName":{"name":"array_allocation_size_t_array$_t_uint256_$2_memory_ptr","nodeType":"YulIdentifier","src":"160:54:29"},"nodeType":"YulFunctionCall","src":"160:62:29"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"144:15:29"},"nodeType":"YulFunctionCall","src":"144:79:29"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"135:5:29"}]},{"nodeType":"YulVariableDeclaration","src":"232:16:29","value":{"name":"array","nodeType":"YulIdentifier","src":"243:5:29"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"236:3:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"258:17:29","value":{"name":"offset","nodeType":"YulIdentifier","src":"269:6:29"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"262:3:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"324:36:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"345:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"348:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"338:6:29"},"nodeType":"YulFunctionCall","src":"338:12:29"},"nodeType":"YulExpressionStatement","src":"338:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"294:3:29"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"303:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"311:4:29","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"299:3:29"},"nodeType":"YulFunctionCall","src":"299:17:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"290:3:29"},"nodeType":"YulFunctionCall","src":"290:27:29"},{"name":"end","nodeType":"YulIdentifier","src":"319:3:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"287:2:29"},"nodeType":"YulFunctionCall","src":"287:36:29"},"nodeType":"YulIf","src":"284:2:29"},{"body":{"nodeType":"YulBlock","src":"429:178:29","statements":[{"nodeType":"YulVariableDeclaration","src":"444:21:29","value":{"name":"src","nodeType":"YulIdentifier","src":"462:3:29"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"448:10:29","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"486:3:29"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"512:10:29"},{"name":"end","nodeType":"YulIdentifier","src":"524:3:29"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"491:20:29"},"nodeType":"YulFunctionCall","src":"491:37:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"479:6:29"},"nodeType":"YulFunctionCall","src":"479:50:29"},"nodeType":"YulExpressionStatement","src":"479:50:29"},{"nodeType":"YulAssignment","src":"542:21:29","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"553:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"558:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"549:3:29"},"nodeType":"YulFunctionCall","src":"549:14:29"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"542:3:29"}]},{"nodeType":"YulAssignment","src":"576:21:29","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"587:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"592:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"583:3:29"},"nodeType":"YulFunctionCall","src":"583:14:29"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"576:3:29"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"391:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"394:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"388:2:29"},"nodeType":"YulFunctionCall","src":"388:13:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"402:18:29","statements":[{"nodeType":"YulAssignment","src":"404:14:29","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"413:1:29"},{"kind":"number","nodeType":"YulLiteral","src":"416:1:29","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"409:3:29"},"nodeType":"YulFunctionCall","src":"409:9:29"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"404:1:29"}]}]},"pre":{"nodeType":"YulBlock","src":"373:14:29","statements":[{"nodeType":"YulVariableDeclaration","src":"375:10:29","value":{"kind":"number","nodeType":"YulLiteral","src":"384:1:29","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"379:1:29","type":""}]}]},"src":"369:238:29"}]},"name":"abi_decode_available_length_t_array$_t_uint256_$2_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"95:6:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"103:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"111:3:29","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"119:5:29","type":""}],"src":"25:588:29"},{"body":{"nodeType":"YulBlock","src":"712:197:29","statements":[{"body":{"nodeType":"YulBlock","src":"761:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"770:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"773:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"763:6:29"},"nodeType":"YulFunctionCall","src":"763:12:29"},"nodeType":"YulExpressionStatement","src":"763:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"740:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"748:4:29","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"736:3:29"},"nodeType":"YulFunctionCall","src":"736:17:29"},{"name":"end","nodeType":"YulIdentifier","src":"755:3:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"732:3:29"},"nodeType":"YulFunctionCall","src":"732:27:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"725:6:29"},"nodeType":"YulFunctionCall","src":"725:35:29"},"nodeType":"YulIf","src":"722:2:29"},{"nodeType":"YulVariableDeclaration","src":"786:18:29","value":{"kind":"number","nodeType":"YulLiteral","src":"800:4:29","type":"","value":"0x02"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"790:6:29","type":""}]},{"nodeType":"YulAssignment","src":"813:90:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"883:6:29"},{"name":"length","nodeType":"YulIdentifier","src":"891:6:29"},{"name":"end","nodeType":"YulIdentifier","src":"899:3:29"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_uint256_$2_memory_ptr","nodeType":"YulIdentifier","src":"822:60:29"},"nodeType":"YulFunctionCall","src":"822:81:29"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"813:5:29"}]}]},"name":"abi_decode_t_array$_t_uint256_$2_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"690:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"698:3:29","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"706:5:29","type":""}],"src":"637:272:29"},{"body":{"nodeType":"YulBlock","src":"967:87:29","statements":[{"nodeType":"YulAssignment","src":"977:29:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"999:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"986:12:29"},"nodeType":"YulFunctionCall","src":"986:20:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"977:5:29"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1042:5:29"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"1015:26:29"},"nodeType":"YulFunctionCall","src":"1015:33:29"},"nodeType":"YulExpressionStatement","src":"1015:33:29"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"945:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"953:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"961:5:29","type":""}],"src":"915:139:29"},{"body":{"nodeType":"YulBlock","src":"1149:219:29","statements":[{"body":{"nodeType":"YulBlock","src":"1195:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1204:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1207:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1197:6:29"},"nodeType":"YulFunctionCall","src":"1197:12:29"},"nodeType":"YulExpressionStatement","src":"1197:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1170:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"1179:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1166:3:29"},"nodeType":"YulFunctionCall","src":"1166:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"1191:2:29","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1162:3:29"},"nodeType":"YulFunctionCall","src":"1162:32:29"},"nodeType":"YulIf","src":"1159:2:29"},{"nodeType":"YulBlock","src":"1221:140:29","statements":[{"nodeType":"YulVariableDeclaration","src":"1236:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"1250:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1240:6:29","type":""}]},{"nodeType":"YulAssignment","src":"1265:86:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1323:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"1334:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1319:3:29"},"nodeType":"YulFunctionCall","src":"1319:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1343:7:29"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$2_memory_ptr","nodeType":"YulIdentifier","src":"1275:43:29"},"nodeType":"YulFunctionCall","src":"1275:76:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1265:6:29"}]}]}]},"name":"abi_decode_tuple_t_array$_t_uint256_$2_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1119:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1130:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1142:6:29","type":""}],"src":"1060:308:29"},{"body":{"nodeType":"YulBlock","src":"1447:53:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1464:3:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1487:5:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1469:17:29"},"nodeType":"YulFunctionCall","src":"1469:24:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1457:6:29"},"nodeType":"YulFunctionCall","src":"1457:37:29"},"nodeType":"YulExpressionStatement","src":"1457:37:29"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack_library","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1435:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1442:3:29","type":""}],"src":"1374:126:29"},{"body":{"nodeType":"YulBlock","src":"1612:132:29","statements":[{"nodeType":"YulAssignment","src":"1622:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1634:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1645:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1630:3:29"},"nodeType":"YulFunctionCall","src":"1630:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1622:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1710:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1723:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1734:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1719:3:29"},"nodeType":"YulFunctionCall","src":"1719:17:29"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack_library","nodeType":"YulIdentifier","src":"1658:51:29"},"nodeType":"YulFunctionCall","src":"1658:79:29"},"nodeType":"YulExpressionStatement","src":"1658:79:29"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_library_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1584:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1596:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1607:4:29","type":""}],"src":"1506:238:29"},{"body":{"nodeType":"YulBlock","src":"1791:88:29","statements":[{"nodeType":"YulAssignment","src":"1801:30:29","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"1811:18:29"},"nodeType":"YulFunctionCall","src":"1811:20:29"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1801:6:29"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1860:6:29"},{"name":"size","nodeType":"YulIdentifier","src":"1868:4:29"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"1840:19:29"},"nodeType":"YulFunctionCall","src":"1840:33:29"},"nodeType":"YulExpressionStatement","src":"1840:33:29"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1775:4:29","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1784:6:29","type":""}],"src":"1750:129:29"},{"body":{"nodeType":"YulBlock","src":"1925:35:29","statements":[{"nodeType":"YulAssignment","src":"1935:19:29","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1951:2:29","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1945:5:29"},"nodeType":"YulFunctionCall","src":"1945:9:29"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1935:6:29"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1918:6:29","type":""}],"src":"1885:75:29"},{"body":{"nodeType":"YulBlock","src":"2046:169:29","statements":[{"body":{"nodeType":"YulBlock","src":"2151:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2153:16:29"},"nodeType":"YulFunctionCall","src":"2153:18:29"},"nodeType":"YulExpressionStatement","src":"2153:18:29"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2123:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"2131:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2120:2:29"},"nodeType":"YulFunctionCall","src":"2120:30:29"},"nodeType":"YulIf","src":"2117:2:29"},{"nodeType":"YulAssignment","src":"2183:25:29","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2195:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"2203:4:29","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2191:3:29"},"nodeType":"YulFunctionCall","src":"2191:17:29"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2183:4:29"}]}]},"name":"array_allocation_size_t_array$_t_uint256_$2_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"2030:6:29","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"2041:4:29","type":""}],"src":"1966:249:29"},{"body":{"nodeType":"YulBlock","src":"2266:32:29","statements":[{"nodeType":"YulAssignment","src":"2276:16:29","value":{"name":"value","nodeType":"YulIdentifier","src":"2287:5:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2276:7:29"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2248:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2258:7:29","type":""}],"src":"2221:77:29"},{"body":{"nodeType":"YulBlock","src":"2347:238:29","statements":[{"nodeType":"YulVariableDeclaration","src":"2357:58:29","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2379:6:29"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"2409:4:29"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2387:21:29"},"nodeType":"YulFunctionCall","src":"2387:27:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2375:3:29"},"nodeType":"YulFunctionCall","src":"2375:40:29"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"2361:10:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"2526:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2528:16:29"},"nodeType":"YulFunctionCall","src":"2528:18:29"},"nodeType":"YulExpressionStatement","src":"2528:18:29"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2469:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"2481:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2466:2:29"},"nodeType":"YulFunctionCall","src":"2466:34:29"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2505:10:29"},{"name":"memPtr","nodeType":"YulIdentifier","src":"2517:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2502:2:29"},"nodeType":"YulFunctionCall","src":"2502:22:29"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2463:2:29"},"nodeType":"YulFunctionCall","src":"2463:62:29"},"nodeType":"YulIf","src":"2460:2:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2564:2:29","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2568:10:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2557:6:29"},"nodeType":"YulFunctionCall","src":"2557:22:29"},"nodeType":"YulExpressionStatement","src":"2557:22:29"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"2333:6:29","type":""},{"name":"size","nodeType":"YulTypedName","src":"2341:4:29","type":""}],"src":"2304:281:29"},{"body":{"nodeType":"YulBlock","src":"2619:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2636:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2639:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2629:6:29"},"nodeType":"YulFunctionCall","src":"2629:88:29"},"nodeType":"YulExpressionStatement","src":"2629:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2733:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2736:4:29","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2726:6:29"},"nodeType":"YulFunctionCall","src":"2726:15:29"},"nodeType":"YulExpressionStatement","src":"2726:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2757:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2760:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2750:6:29"},"nodeType":"YulFunctionCall","src":"2750:15:29"},"nodeType":"YulExpressionStatement","src":"2750:15:29"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"2591:180:29"},{"body":{"nodeType":"YulBlock","src":"2825:54:29","statements":[{"nodeType":"YulAssignment","src":"2835:38:29","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2853:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"2860:2:29","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2849:3:29"},"nodeType":"YulFunctionCall","src":"2849:14:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2869:2:29","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2865:3:29"},"nodeType":"YulFunctionCall","src":"2865:7:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2845:3:29"},"nodeType":"YulFunctionCall","src":"2845:28:29"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"2835:6:29"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2808:5:29","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"2818:6:29","type":""}],"src":"2777:102:29"},{"body":{"nodeType":"YulBlock","src":"2928:79:29","statements":[{"body":{"nodeType":"YulBlock","src":"2985:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2994:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2997:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2987:6:29"},"nodeType":"YulFunctionCall","src":"2987:12:29"},"nodeType":"YulExpressionStatement","src":"2987:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2951:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2976:5:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"2958:17:29"},"nodeType":"YulFunctionCall","src":"2958:24:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2948:2:29"},"nodeType":"YulFunctionCall","src":"2948:35:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2941:6:29"},"nodeType":"YulFunctionCall","src":"2941:43:29"},"nodeType":"YulIf","src":"2938:2:29"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2921:5:29","type":""}],"src":"2885:122:29"}]},"contents":"{\n\n    // uint256[2]\n    function abi_decode_available_length_t_array$_t_uint256_$2_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_uint256_$2_memory_ptr(length))\n        let dst := array\n\n        let src := offset\n        if gt(add(src, mul(length, 0x20)), end) {\n            revert(0, 0)\n        }\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_uint256(elementPos, end))\n            dst := add(dst, 0x20)\n            src := add(src, 0x20)\n        }\n    }\n\n    // uint256[2]\n    function abi_decode_t_array$_t_uint256_$2_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let length := 0x02\n        array := abi_decode_available_length_t_array$_t_uint256_$2_memory_ptr(offset, length, end)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_array$_t_uint256_$2_memory_ptr(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_array$_t_uint256_$2_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack_library(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_library_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack_library(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_array$_t_uint256_$2_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n","id":29,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c806329a5f2f61461003a575b600080fd5b610054600480360381019061004f9190610110565b61006a565b6040516100619190610148565b60405180910390f35b6000919050565b600061008461007f84610188565b610163565b9050808285602086028201111561009a57600080fd5b60005b858110156100ca57816100b088826100fb565b84526020840193506020830192505060018101905061009d565b5050509392505050565b600082601f8301126100e557600080fd5b60026100f2848285610071565b91505092915050565b60008135905061010a81610229565b92915050565b60006040828403121561012257600080fd5b6000610130848285016100d4565b91505092915050565b610142816101ae565b82525050565b600060208201905061015d6000830184610139565b92915050565b600061016d61017e565b905061017982826101b8565b919050565b6000604051905090565b600067ffffffffffffffff8211156101a3576101a26101e9565b5b602082029050919050565b6000819050919050565b6101c182610218565b810181811067ffffffffffffffff821117156101e0576101df6101e9565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b610232816101ae565b811461023d57600080fd5b5056fea2646970667358221220ba575f350b88eb5b9370d52cb21e50b42693d01a00ea3d03f067deeceadb60bb64736f6c63430008040033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x35 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x29A5F2F6 EQ PUSH2 0x3A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x54 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4F SWAP2 SWAP1 PUSH2 0x110 JUMP JUMPDEST PUSH2 0x6A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x61 SWAP2 SWAP1 PUSH2 0x148 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x84 PUSH2 0x7F DUP5 PUSH2 0x188 JUMP JUMPDEST PUSH2 0x163 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 DUP6 PUSH1 0x20 DUP7 MUL DUP3 ADD GT ISZERO PUSH2 0x9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0xCA JUMPI DUP2 PUSH2 0xB0 DUP9 DUP3 PUSH2 0xFB JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x9D JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x2 PUSH2 0xF2 DUP5 DUP3 DUP6 PUSH2 0x71 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x10A DUP2 PUSH2 0x229 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x122 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x130 DUP5 DUP3 DUP6 ADD PUSH2 0xD4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x142 DUP2 PUSH2 0x1AE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x15D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x139 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16D PUSH2 0x17E JUMP JUMPDEST SWAP1 POP PUSH2 0x179 DUP3 DUP3 PUSH2 0x1B8 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1A3 JUMPI PUSH2 0x1A2 PUSH2 0x1E9 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1C1 DUP3 PUSH2 0x218 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1E0 JUMPI PUSH2 0x1DF PUSH2 0x1E9 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x232 DUP2 PUSH2 0x1AE JUMP JUMPDEST DUP2 EQ PUSH2 0x23D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBA JUMPI 0x5F CALLDATALOAD SIGNEXTEND DUP9 0xEB JUMPDEST SWAP4 PUSH17 0xD52CB21E50B42693D01A00EA3D03F067DE 0xEC 0xEA 0xDB PUSH1 0xBB PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ","sourceMap":"56:96:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;81:69;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;139:7;81:69;;;:::o;25:588:29:-;119:5;144:79;160:62;215:6;160:62;:::i;:::-;144:79;:::i;:::-;135:88;;243:5;269:6;319:3;311:4;303:6;299:17;294:3;290:27;287:36;284:2;;;348:1;345;338:12;284:2;384:1;369:238;394:6;391:1;388:13;369:238;;;462:3;491:37;524:3;512:10;491:37;:::i;:::-;486:3;479:50;558:4;553:3;549:14;542:21;;592:4;587:3;583:14;576:21;;429:178;416:1;413;409:9;404:14;;369:238;;;373:14;125:488;;;;;;;:::o;637:272::-;706:5;755:3;748:4;740:6;736:17;732:27;722:2;;773:1;770;763:12;722:2;800:4;822:81;899:3;891:6;883;822:81;:::i;:::-;813:90;;712:197;;;;;:::o;915:139::-;961:5;999:6;986:20;977:29;;1015:33;1042:5;1015:33;:::i;:::-;967:87;;;;:::o;1060:308::-;1142:6;1191:2;1179:9;1170:7;1166:23;1162:32;1159:2;;;1207:1;1204;1197:12;1159:2;1250:1;1275:76;1343:7;1334:6;1323:9;1319:22;1275:76;:::i;:::-;1265:86;;1221:140;1149:219;;;;:::o;1374:126::-;1469:24;1487:5;1469:24;:::i;:::-;1464:3;1457:37;1447:53;;:::o;1506:238::-;1607:4;1645:2;1634:9;1630:18;1622:26;;1658:79;1734:1;1723:9;1719:17;1710:6;1658:79;:::i;:::-;1612:132;;;;:::o;1750:129::-;1784:6;1811:20;;:::i;:::-;1801:30;;1840:33;1868:4;1860:6;1840:33;:::i;:::-;1791:88;;;:::o;1885:75::-;1918:6;1951:2;1945:9;1935:19;;1925:35;:::o;1966:249::-;2041:4;2131:18;2123:6;2120:30;2117:2;;;2153:18;;:::i;:::-;2117:2;2203:4;2195:6;2191:17;2183:25;;2046:169;;;:::o;2221:77::-;2258:7;2287:5;2276:16;;2266:32;;;:::o;2304:281::-;2387:27;2409:4;2387:27;:::i;:::-;2379:6;2375:40;2517:6;2505:10;2502:22;2481:18;2469:10;2466:34;2463:62;2460:2;;;2528:18;;:::i;:::-;2460:2;2568:10;2564:2;2557:22;2347:238;;;:::o;2591:180::-;2639:77;2636:1;2629:88;2736:4;2733:1;2726:15;2760:4;2757:1;2750:15;2777:102;2818:6;2869:2;2865:7;2860:2;2853:5;2849:14;2845:28;2835:38;;2825:54;;;:::o;2885:122::-;2958:24;2976:5;2958:24;:::i;:::-;2951:5;2948:35;2938:2;;2997:1;2994;2987:12;2938:2;2928:79;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"126000","executionCost":"199","totalCost":"126199"},"external":{"poseidon(uint256[2])":"infinite"}},"methodIdentifiers":{"poseidon(uint256[2])":"29a5f2f6"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"name\":\"poseidon\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@creds-protocol/contracts/zk-kit/incremental-merkle-tree.sol/Hashes.sol\":\"PoseidonT3\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@creds-protocol/contracts/zk-kit/incremental-merkle-tree.sol/Hashes.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary PoseidonT3 {\\n    function poseidon(uint256[2] memory) public pure returns (uint256) {}\\n}\\n\\nlibrary PoseidonT6 {\\n    function poseidon(uint256[5] memory) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xc634fec0820a2faab1bc350d94c3151835e8d2c2bc0321d9a198d62712786b81\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"PoseidonT6":{"abi":[{"inputs":[{"internalType":"uint256[5]","name":"","type":"uint256[5]"}],"name":"poseidon","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"610276610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c80634937a2581461003a575b600080fd5b610054600480360381019061004f9190610110565b61006a565b6040516100619190610148565b60405180910390f35b6000919050565b600061008461007f84610188565b610163565b9050808285602086028201111561009a57600080fd5b60005b858110156100ca57816100b088826100fb565b84526020840193506020830192505060018101905061009d565b5050509392505050565b600082601f8301126100e557600080fd5b60056100f2848285610071565b91505092915050565b60008135905061010a81610229565b92915050565b600060a0828403121561012257600080fd5b6000610130848285016100d4565b91505092915050565b610142816101ae565b82525050565b600060208201905061015d6000830184610139565b92915050565b600061016d61017e565b905061017982826101b8565b919050565b6000604051905090565b600067ffffffffffffffff8211156101a3576101a26101e9565b5b602082029050919050565b6000819050919050565b6101c182610218565b810181811067ffffffffffffffff821117156101e0576101df6101e9565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b610232816101ae565b811461023d57600080fd5b5056fea26469706673582212201819818430335505176830288ff69828e95a219160d35887f84a3d97212eb03764736f6c63430008040033","opcodes":"PUSH2 0x276 PUSH2 0x53 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH2 0x46 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x35 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4937A258 EQ PUSH2 0x3A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x54 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4F SWAP2 SWAP1 PUSH2 0x110 JUMP JUMPDEST PUSH2 0x6A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x61 SWAP2 SWAP1 PUSH2 0x148 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x84 PUSH2 0x7F DUP5 PUSH2 0x188 JUMP JUMPDEST PUSH2 0x163 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 DUP6 PUSH1 0x20 DUP7 MUL DUP3 ADD GT ISZERO PUSH2 0x9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0xCA JUMPI DUP2 PUSH2 0xB0 DUP9 DUP3 PUSH2 0xFB JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x9D JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x5 PUSH2 0xF2 DUP5 DUP3 DUP6 PUSH2 0x71 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x10A DUP2 PUSH2 0x229 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x122 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x130 DUP5 DUP3 DUP6 ADD PUSH2 0xD4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x142 DUP2 PUSH2 0x1AE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x15D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x139 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16D PUSH2 0x17E JUMP JUMPDEST SWAP1 POP PUSH2 0x179 DUP3 DUP3 PUSH2 0x1B8 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1A3 JUMPI PUSH2 0x1A2 PUSH2 0x1E9 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1C1 DUP3 PUSH2 0x218 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1E0 JUMPI PUSH2 0x1DF PUSH2 0x1E9 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x232 DUP2 PUSH2 0x1AE JUMP JUMPDEST DUP2 EQ PUSH2 0x23D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 XOR NOT DUP2 DUP5 ADDRESS CALLER SSTORE SDIV OR PUSH9 0x30288FF69828E95A21 SWAP2 PUSH1 0xD3 PC DUP8 0xF8 0x4A RETURNDATASIZE SWAP8 0x21 0x2E 0xB0 CALLDATACOPY PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ","sourceMap":"154:96:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:3011:29","statements":[{"body":{"nodeType":"YulBlock","src":"125:488:29","statements":[{"nodeType":"YulAssignment","src":"135:88:29","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"215:6:29"}],"functionName":{"name":"array_allocation_size_t_array$_t_uint256_$5_memory_ptr","nodeType":"YulIdentifier","src":"160:54:29"},"nodeType":"YulFunctionCall","src":"160:62:29"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"144:15:29"},"nodeType":"YulFunctionCall","src":"144:79:29"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"135:5:29"}]},{"nodeType":"YulVariableDeclaration","src":"232:16:29","value":{"name":"array","nodeType":"YulIdentifier","src":"243:5:29"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"236:3:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"258:17:29","value":{"name":"offset","nodeType":"YulIdentifier","src":"269:6:29"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"262:3:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"324:36:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"345:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"348:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"338:6:29"},"nodeType":"YulFunctionCall","src":"338:12:29"},"nodeType":"YulExpressionStatement","src":"338:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"294:3:29"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"303:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"311:4:29","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"299:3:29"},"nodeType":"YulFunctionCall","src":"299:17:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"290:3:29"},"nodeType":"YulFunctionCall","src":"290:27:29"},{"name":"end","nodeType":"YulIdentifier","src":"319:3:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"287:2:29"},"nodeType":"YulFunctionCall","src":"287:36:29"},"nodeType":"YulIf","src":"284:2:29"},{"body":{"nodeType":"YulBlock","src":"429:178:29","statements":[{"nodeType":"YulVariableDeclaration","src":"444:21:29","value":{"name":"src","nodeType":"YulIdentifier","src":"462:3:29"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"448:10:29","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"486:3:29"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"512:10:29"},{"name":"end","nodeType":"YulIdentifier","src":"524:3:29"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"491:20:29"},"nodeType":"YulFunctionCall","src":"491:37:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"479:6:29"},"nodeType":"YulFunctionCall","src":"479:50:29"},"nodeType":"YulExpressionStatement","src":"479:50:29"},{"nodeType":"YulAssignment","src":"542:21:29","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"553:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"558:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"549:3:29"},"nodeType":"YulFunctionCall","src":"549:14:29"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"542:3:29"}]},{"nodeType":"YulAssignment","src":"576:21:29","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"587:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"592:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"583:3:29"},"nodeType":"YulFunctionCall","src":"583:14:29"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"576:3:29"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"391:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"394:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"388:2:29"},"nodeType":"YulFunctionCall","src":"388:13:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"402:18:29","statements":[{"nodeType":"YulAssignment","src":"404:14:29","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"413:1:29"},{"kind":"number","nodeType":"YulLiteral","src":"416:1:29","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"409:3:29"},"nodeType":"YulFunctionCall","src":"409:9:29"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"404:1:29"}]}]},"pre":{"nodeType":"YulBlock","src":"373:14:29","statements":[{"nodeType":"YulVariableDeclaration","src":"375:10:29","value":{"kind":"number","nodeType":"YulLiteral","src":"384:1:29","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"379:1:29","type":""}]}]},"src":"369:238:29"}]},"name":"abi_decode_available_length_t_array$_t_uint256_$5_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"95:6:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"103:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"111:3:29","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"119:5:29","type":""}],"src":"25:588:29"},{"body":{"nodeType":"YulBlock","src":"712:197:29","statements":[{"body":{"nodeType":"YulBlock","src":"761:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"770:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"773:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"763:6:29"},"nodeType":"YulFunctionCall","src":"763:12:29"},"nodeType":"YulExpressionStatement","src":"763:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"740:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"748:4:29","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"736:3:29"},"nodeType":"YulFunctionCall","src":"736:17:29"},{"name":"end","nodeType":"YulIdentifier","src":"755:3:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"732:3:29"},"nodeType":"YulFunctionCall","src":"732:27:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"725:6:29"},"nodeType":"YulFunctionCall","src":"725:35:29"},"nodeType":"YulIf","src":"722:2:29"},{"nodeType":"YulVariableDeclaration","src":"786:18:29","value":{"kind":"number","nodeType":"YulLiteral","src":"800:4:29","type":"","value":"0x05"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"790:6:29","type":""}]},{"nodeType":"YulAssignment","src":"813:90:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"883:6:29"},{"name":"length","nodeType":"YulIdentifier","src":"891:6:29"},{"name":"end","nodeType":"YulIdentifier","src":"899:3:29"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_uint256_$5_memory_ptr","nodeType":"YulIdentifier","src":"822:60:29"},"nodeType":"YulFunctionCall","src":"822:81:29"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"813:5:29"}]}]},"name":"abi_decode_t_array$_t_uint256_$5_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"690:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"698:3:29","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"706:5:29","type":""}],"src":"637:272:29"},{"body":{"nodeType":"YulBlock","src":"967:87:29","statements":[{"nodeType":"YulAssignment","src":"977:29:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"999:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"986:12:29"},"nodeType":"YulFunctionCall","src":"986:20:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"977:5:29"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1042:5:29"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"1015:26:29"},"nodeType":"YulFunctionCall","src":"1015:33:29"},"nodeType":"YulExpressionStatement","src":"1015:33:29"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"945:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"953:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"961:5:29","type":""}],"src":"915:139:29"},{"body":{"nodeType":"YulBlock","src":"1149:220:29","statements":[{"body":{"nodeType":"YulBlock","src":"1196:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1205:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1208:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1198:6:29"},"nodeType":"YulFunctionCall","src":"1198:12:29"},"nodeType":"YulExpressionStatement","src":"1198:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1170:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"1179:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1166:3:29"},"nodeType":"YulFunctionCall","src":"1166:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"1191:3:29","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1162:3:29"},"nodeType":"YulFunctionCall","src":"1162:33:29"},"nodeType":"YulIf","src":"1159:2:29"},{"nodeType":"YulBlock","src":"1222:140:29","statements":[{"nodeType":"YulVariableDeclaration","src":"1237:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"1251:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1241:6:29","type":""}]},{"nodeType":"YulAssignment","src":"1266:86:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1324:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"1335:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1320:3:29"},"nodeType":"YulFunctionCall","src":"1320:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1344:7:29"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$5_memory_ptr","nodeType":"YulIdentifier","src":"1276:43:29"},"nodeType":"YulFunctionCall","src":"1276:76:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1266:6:29"}]}]}]},"name":"abi_decode_tuple_t_array$_t_uint256_$5_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1119:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1130:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1142:6:29","type":""}],"src":"1060:309:29"},{"body":{"nodeType":"YulBlock","src":"1448:53:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1465:3:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1488:5:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1470:17:29"},"nodeType":"YulFunctionCall","src":"1470:24:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1458:6:29"},"nodeType":"YulFunctionCall","src":"1458:37:29"},"nodeType":"YulExpressionStatement","src":"1458:37:29"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack_library","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1436:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1443:3:29","type":""}],"src":"1375:126:29"},{"body":{"nodeType":"YulBlock","src":"1613:132:29","statements":[{"nodeType":"YulAssignment","src":"1623:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1635:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1646:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1631:3:29"},"nodeType":"YulFunctionCall","src":"1631:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1623:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1711:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1724:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1735:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1720:3:29"},"nodeType":"YulFunctionCall","src":"1720:17:29"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack_library","nodeType":"YulIdentifier","src":"1659:51:29"},"nodeType":"YulFunctionCall","src":"1659:79:29"},"nodeType":"YulExpressionStatement","src":"1659:79:29"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_library_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1585:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1597:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1608:4:29","type":""}],"src":"1507:238:29"},{"body":{"nodeType":"YulBlock","src":"1792:88:29","statements":[{"nodeType":"YulAssignment","src":"1802:30:29","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"1812:18:29"},"nodeType":"YulFunctionCall","src":"1812:20:29"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1802:6:29"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1861:6:29"},{"name":"size","nodeType":"YulIdentifier","src":"1869:4:29"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"1841:19:29"},"nodeType":"YulFunctionCall","src":"1841:33:29"},"nodeType":"YulExpressionStatement","src":"1841:33:29"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1776:4:29","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1785:6:29","type":""}],"src":"1751:129:29"},{"body":{"nodeType":"YulBlock","src":"1926:35:29","statements":[{"nodeType":"YulAssignment","src":"1936:19:29","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1952:2:29","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1946:5:29"},"nodeType":"YulFunctionCall","src":"1946:9:29"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1936:6:29"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1919:6:29","type":""}],"src":"1886:75:29"},{"body":{"nodeType":"YulBlock","src":"2047:169:29","statements":[{"body":{"nodeType":"YulBlock","src":"2152:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2154:16:29"},"nodeType":"YulFunctionCall","src":"2154:18:29"},"nodeType":"YulExpressionStatement","src":"2154:18:29"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2124:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"2132:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2121:2:29"},"nodeType":"YulFunctionCall","src":"2121:30:29"},"nodeType":"YulIf","src":"2118:2:29"},{"nodeType":"YulAssignment","src":"2184:25:29","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2196:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"2204:4:29","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2192:3:29"},"nodeType":"YulFunctionCall","src":"2192:17:29"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2184:4:29"}]}]},"name":"array_allocation_size_t_array$_t_uint256_$5_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"2031:6:29","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"2042:4:29","type":""}],"src":"1967:249:29"},{"body":{"nodeType":"YulBlock","src":"2267:32:29","statements":[{"nodeType":"YulAssignment","src":"2277:16:29","value":{"name":"value","nodeType":"YulIdentifier","src":"2288:5:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2277:7:29"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2249:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2259:7:29","type":""}],"src":"2222:77:29"},{"body":{"nodeType":"YulBlock","src":"2348:238:29","statements":[{"nodeType":"YulVariableDeclaration","src":"2358:58:29","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2380:6:29"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"2410:4:29"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2388:21:29"},"nodeType":"YulFunctionCall","src":"2388:27:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2376:3:29"},"nodeType":"YulFunctionCall","src":"2376:40:29"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"2362:10:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"2527:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2529:16:29"},"nodeType":"YulFunctionCall","src":"2529:18:29"},"nodeType":"YulExpressionStatement","src":"2529:18:29"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2470:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"2482:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2467:2:29"},"nodeType":"YulFunctionCall","src":"2467:34:29"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2506:10:29"},{"name":"memPtr","nodeType":"YulIdentifier","src":"2518:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2503:2:29"},"nodeType":"YulFunctionCall","src":"2503:22:29"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2464:2:29"},"nodeType":"YulFunctionCall","src":"2464:62:29"},"nodeType":"YulIf","src":"2461:2:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2565:2:29","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2569:10:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2558:6:29"},"nodeType":"YulFunctionCall","src":"2558:22:29"},"nodeType":"YulExpressionStatement","src":"2558:22:29"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"2334:6:29","type":""},{"name":"size","nodeType":"YulTypedName","src":"2342:4:29","type":""}],"src":"2305:281:29"},{"body":{"nodeType":"YulBlock","src":"2620:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2637:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2640:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2630:6:29"},"nodeType":"YulFunctionCall","src":"2630:88:29"},"nodeType":"YulExpressionStatement","src":"2630:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2734:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2737:4:29","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2727:6:29"},"nodeType":"YulFunctionCall","src":"2727:15:29"},"nodeType":"YulExpressionStatement","src":"2727:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2758:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2761:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2751:6:29"},"nodeType":"YulFunctionCall","src":"2751:15:29"},"nodeType":"YulExpressionStatement","src":"2751:15:29"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"2592:180:29"},{"body":{"nodeType":"YulBlock","src":"2826:54:29","statements":[{"nodeType":"YulAssignment","src":"2836:38:29","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2854:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"2861:2:29","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2850:3:29"},"nodeType":"YulFunctionCall","src":"2850:14:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2870:2:29","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2866:3:29"},"nodeType":"YulFunctionCall","src":"2866:7:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2846:3:29"},"nodeType":"YulFunctionCall","src":"2846:28:29"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"2836:6:29"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2809:5:29","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"2819:6:29","type":""}],"src":"2778:102:29"},{"body":{"nodeType":"YulBlock","src":"2929:79:29","statements":[{"body":{"nodeType":"YulBlock","src":"2986:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2995:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2998:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2988:6:29"},"nodeType":"YulFunctionCall","src":"2988:12:29"},"nodeType":"YulExpressionStatement","src":"2988:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2952:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2977:5:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"2959:17:29"},"nodeType":"YulFunctionCall","src":"2959:24:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2949:2:29"},"nodeType":"YulFunctionCall","src":"2949:35:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2942:6:29"},"nodeType":"YulFunctionCall","src":"2942:43:29"},"nodeType":"YulIf","src":"2939:2:29"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2922:5:29","type":""}],"src":"2886:122:29"}]},"contents":"{\n\n    // uint256[5]\n    function abi_decode_available_length_t_array$_t_uint256_$5_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_uint256_$5_memory_ptr(length))\n        let dst := array\n\n        let src := offset\n        if gt(add(src, mul(length, 0x20)), end) {\n            revert(0, 0)\n        }\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_uint256(elementPos, end))\n            dst := add(dst, 0x20)\n            src := add(src, 0x20)\n        }\n    }\n\n    // uint256[5]\n    function abi_decode_t_array$_t_uint256_$5_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let length := 0x05\n        array := abi_decode_available_length_t_array$_t_uint256_$5_memory_ptr(offset, length, end)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_array$_t_uint256_$5_memory_ptr(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_array$_t_uint256_$5_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack_library(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_library_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack_library(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_array$_t_uint256_$5_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n","id":29,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c80634937a2581461003a575b600080fd5b610054600480360381019061004f9190610110565b61006a565b6040516100619190610148565b60405180910390f35b6000919050565b600061008461007f84610188565b610163565b9050808285602086028201111561009a57600080fd5b60005b858110156100ca57816100b088826100fb565b84526020840193506020830192505060018101905061009d565b5050509392505050565b600082601f8301126100e557600080fd5b60056100f2848285610071565b91505092915050565b60008135905061010a81610229565b92915050565b600060a0828403121561012257600080fd5b6000610130848285016100d4565b91505092915050565b610142816101ae565b82525050565b600060208201905061015d6000830184610139565b92915050565b600061016d61017e565b905061017982826101b8565b919050565b6000604051905090565b600067ffffffffffffffff8211156101a3576101a26101e9565b5b602082029050919050565b6000819050919050565b6101c182610218565b810181811067ffffffffffffffff821117156101e0576101df6101e9565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b610232816101ae565b811461023d57600080fd5b5056fea26469706673582212201819818430335505176830288ff69828e95a219160d35887f84a3d97212eb03764736f6c63430008040033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x35 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4937A258 EQ PUSH2 0x3A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x54 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4F SWAP2 SWAP1 PUSH2 0x110 JUMP JUMPDEST PUSH2 0x6A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x61 SWAP2 SWAP1 PUSH2 0x148 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x84 PUSH2 0x7F DUP5 PUSH2 0x188 JUMP JUMPDEST PUSH2 0x163 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 DUP6 PUSH1 0x20 DUP7 MUL DUP3 ADD GT ISZERO PUSH2 0x9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0xCA JUMPI DUP2 PUSH2 0xB0 DUP9 DUP3 PUSH2 0xFB JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x9D JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x5 PUSH2 0xF2 DUP5 DUP3 DUP6 PUSH2 0x71 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x10A DUP2 PUSH2 0x229 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x122 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x130 DUP5 DUP3 DUP6 ADD PUSH2 0xD4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x142 DUP2 PUSH2 0x1AE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x15D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x139 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16D PUSH2 0x17E JUMP JUMPDEST SWAP1 POP PUSH2 0x179 DUP3 DUP3 PUSH2 0x1B8 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1A3 JUMPI PUSH2 0x1A2 PUSH2 0x1E9 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1C1 DUP3 PUSH2 0x218 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1E0 JUMPI PUSH2 0x1DF PUSH2 0x1E9 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x232 DUP2 PUSH2 0x1AE JUMP JUMPDEST DUP2 EQ PUSH2 0x23D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 XOR NOT DUP2 DUP5 ADDRESS CALLER SSTORE SDIV OR PUSH9 0x30288FF69828E95A21 SWAP2 PUSH1 0xD3 PC DUP8 0xF8 0x4A RETURNDATASIZE SWAP8 0x21 0x2E 0xB0 CALLDATACOPY PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ","sourceMap":"154:96:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;179:69;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;237:7;179:69;;;:::o;25:588:29:-;119:5;144:79;160:62;215:6;160:62;:::i;:::-;144:79;:::i;:::-;135:88;;243:5;269:6;319:3;311:4;303:6;299:17;294:3;290:27;287:36;284:2;;;348:1;345;338:12;284:2;384:1;369:238;394:6;391:1;388:13;369:238;;;462:3;491:37;524:3;512:10;491:37;:::i;:::-;486:3;479:50;558:4;553:3;549:14;542:21;;592:4;587:3;583:14;576:21;;429:178;416:1;413;409:9;404:14;;369:238;;;373:14;125:488;;;;;;;:::o;637:272::-;706:5;755:3;748:4;740:6;736:17;732:27;722:2;;773:1;770;763:12;722:2;800:4;822:81;899:3;891:6;883;822:81;:::i;:::-;813:90;;712:197;;;;;:::o;915:139::-;961:5;999:6;986:20;977:29;;1015:33;1042:5;1015:33;:::i;:::-;967:87;;;;:::o;1060:309::-;1142:6;1191:3;1179:9;1170:7;1166:23;1162:33;1159:2;;;1208:1;1205;1198:12;1159:2;1251:1;1276:76;1344:7;1335:6;1324:9;1320:22;1276:76;:::i;:::-;1266:86;;1222:140;1149:220;;;;:::o;1375:126::-;1470:24;1488:5;1470:24;:::i;:::-;1465:3;1458:37;1448:53;;:::o;1507:238::-;1608:4;1646:2;1635:9;1631:18;1623:26;;1659:79;1735:1;1724:9;1720:17;1711:6;1659:79;:::i;:::-;1613:132;;;;:::o;1751:129::-;1785:6;1812:20;;:::i;:::-;1802:30;;1841:33;1869:4;1861:6;1841:33;:::i;:::-;1792:88;;;:::o;1886:75::-;1919:6;1952:2;1946:9;1936:19;;1926:35;:::o;1967:249::-;2042:4;2132:18;2124:6;2121:30;2118:2;;;2154:18;;:::i;:::-;2118:2;2204:4;2196:6;2192:17;2184:25;;2047:169;;;:::o;2222:77::-;2259:7;2288:5;2277:16;;2267:32;;;:::o;2305:281::-;2388:27;2410:4;2388:27;:::i;:::-;2380:6;2376:40;2518:6;2506:10;2503:22;2482:18;2470:10;2467:34;2464:62;2461:2;;;2529:18;;:::i;:::-;2461:2;2569:10;2565:2;2558:22;2348:238;;;:::o;2592:180::-;2640:77;2637:1;2630:88;2737:4;2734:1;2727:15;2761:4;2758:1;2751:15;2778:102;2819:6;2870:2;2866:7;2861:2;2854:5;2850:14;2846:28;2836:38;;2826:54;;;:::o;2886:122::-;2959:24;2977:5;2959:24;:::i;:::-;2952:5;2949:35;2939:2;;2998:1;2995;2988:12;2939:2;2929:79;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"126000","executionCost":"199","totalCost":"126199"},"external":{"poseidon(uint256[5])":"infinite"}},"methodIdentifiers":{"poseidon(uint256[5])":"4937a258"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"\",\"type\":\"uint256[5]\"}],\"name\":\"poseidon\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@creds-protocol/contracts/zk-kit/incremental-merkle-tree.sol/Hashes.sol\":\"PoseidonT6\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@creds-protocol/contracts/zk-kit/incremental-merkle-tree.sol/Hashes.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary PoseidonT3 {\\n    function poseidon(uint256[2] memory) public pure returns (uint256) {}\\n}\\n\\nlibrary PoseidonT6 {\\n    function poseidon(uint256[5] memory) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xc634fec0820a2faab1bc350d94c3151835e8d2c2bc0321d9a198d62712786b81\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@creds-protocol/contracts/zk-kit/incremental-merkle-tree.sol/IncrementalBinaryTree.sol":{"IncrementalBinaryTree":{"abi":[],"devdoc":{"details":"The incremental tree allows to calculate the root hash each time a leaf is added, ensuring the integrity of the tree.","kind":"dev","methods":{"init(IncrementalTreeData storage,uint256,uint256)":{"details":"Initializes a tree.","params":{"depth":": Depth of the tree.","self":": Tree data.","zero":": Zero value to be used."}},"insert(IncrementalTreeData storage,uint256)":{"details":"Inserts a leaf in the tree.","params":{"leaf":": Leaf to be inserted.","self":": Tree data."}},"remove(IncrementalTreeData storage,uint256,uint256[],uint8[])":{"details":"Removes a leaf from the tree.","params":{"leaf":": Leaf to be removed.","proofPathIndices":": Path of the proof of membership.","proofSiblings":": Array of the sibling nodes of the proof of membership.","self":": Tree data."}},"update(IncrementalTreeData storage,uint256,uint256,uint256[],uint8[])":{"details":"Updates a leaf in the tree.","params":{"leaf":": Leaf to be updated.","newLeaf":": New leaf.","proofPathIndices":": Path of the proof of membership.","proofSiblings":": Array of the sibling nodes of the proof of membership.","self":": Tree data."}}},"title":"Incremental binary Merkle tree.","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{"@creds-protocol/contracts/zk-kit/incremental-merkle-tree.sol/Hashes.sol":{"PoseidonT3":[{"length":20,"start":617},{"length":20,"start":1206},{"length":20,"start":1870},{"length":20,"start":2342},{"length":20,"start":3065},{"length":20,"start":3293}]}},"object":"6118b7610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c80630629596f1461005b5780631095fbb414610084578063168703fa146100ad578063a5478827146100d6575b600080fd5b81801561006757600080fd5b50610082600480360381019061007d9190610f0a565b6100ff565b005b81801561009057600080fd5b506100ab60048036038101906100a69190610fa5565b61012b565b005b8180156100b957600080fd5b506100d460048036038101906100cf9190610ece565b6102cb565b005b8180156100e257600080fd5b506100fd60048036038101906100f89190610ff4565b610540565b005b61012386868860030160008081526020019081526020016000205487878787610540565b505050505050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001811061018d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610184906112fa565b60405180910390fd5b6000821180156101a15750602060ff168211155b6101e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d79061133a565b60405180910390fd5b81836000018190555060005b828160ff1610156102bc57818460030160008360ff1681526020019081526020016000208190555073__$770c9b13768732c92daf187f48205e6acb$__6329a5f2f66040518060400160405280858152602001858152506040518263ffffffff1660e01b815260040161025f91906112a4565b60206040518083038186803b15801561027757600080fd5b505af415801561028b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102af91906110a4565b91508060010190506101ec565b50808360010181905550505050565b6000826000015490507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018210610336576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032d906112fa565b60405180910390fd5b80600261034391906114a3565b836002015410610388576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037f906112da565b60405180910390fd5b600083600201549050600083905060005b838160ff1610156105135760006001841614156104095760405180604001604052808381526020018760030160008460ff168152602001908152602001600020548152508660040160008360ff168152602001908152602001600020906002610403929190610d89565b50610461565b818660040160008360ff16815260200190815260200160002060016002811061045b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b01819055505b73__$770c9b13768732c92daf187f48205e6acb$__6329a5f2f68760040160008460ff1681526020019081526020016000206040518263ffffffff1660e01b81526004016104af91906112bf565b60206040518083038186803b1580156104c757600080fd5b505af41580156104db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ff91906110a4565b9150600183901c9250806001019050610399565b50808560010181905550600185600201600082825461053291906113fa565b925050819055505050505050565b61054e8787868686866109d1565b61058d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105849061135a565b60405180910390fd5b600087600001549050600086905060005b828160ff1610156109bc57600085858360ff168181106105e7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906105fc91906110cd565b60ff1614156107dd578960040160008260ff168152602001908152602001600020600160028110610656577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b015487878360ff16818110610694577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013514156106f957818a60040160008360ff1681526020019081526020016000206000600281106106f3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b01819055505b73__$770c9b13768732c92daf187f48205e6acb$__6329a5f2f660405180604001604052808581526020018a8a8660ff16818110610760577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358152506040518263ffffffff1660e01b815260040161078691906112a4565b60206040518083038186803b15801561079e57600080fd5b505af41580156107b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d691906110a4565b91506109b1565b8960040160008260ff16815260200190815260200160002060006002811061082e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b015487878360ff1681811061086c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013514156108d157818a60040160008360ff1681526020019081526020016000206001600281106108cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b01819055505b73__$770c9b13768732c92daf187f48205e6acb$__6329a5f2f660405180604001604052808a8a8660ff16818110610932577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358152602001858152506040518263ffffffff1660e01b815260040161095e91906112a4565b60206040518083038186803b15801561097657600080fd5b505af415801561098a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ae91906110a4565b91505b80600101905061059e565b50808960010181905550505050505050505050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018610610a35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2c906112fa565b60405180910390fd5b6000876000015490508084849050148015610a5257508086869050145b610a91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a889061137a565b60405180910390fd5b600087905060005b828160ff161015610d73577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000188888360ff16818110610b01577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013510610b48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3f9061131a565b60405180910390fd5b600086868360ff16818110610b86577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610b9b91906110cd565b60ff161415610c885773__$770c9b13768732c92daf187f48205e6acb$__6329a5f2f660405180604001604052808581526020018b8b8660ff16818110610c0b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358152506040518263ffffffff1660e01b8152600401610c3191906112a4565b60206040518083038186803b158015610c4957600080fd5b505af4158015610c5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8191906110a4565b9150610d68565b73__$770c9b13768732c92daf187f48205e6acb$__6329a5f2f660405180604001604052808b8b8660ff16818110610ce9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358152602001858152506040518263ffffffff1660e01b8152600401610d1591906112a4565b60206040518083038186803b158015610d2d57600080fd5b505af4158015610d41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6591906110a4565b91505b806001019050610a99565b5088600101548114925050509695505050505050565b8260028101928215610db8579160200282015b82811115610db7578251825591602001919060010190610d9c565b5b509050610dc59190610dc9565b5090565b5b80821115610de2576000816000905550600101610dca565b5090565b60008083601f840112610df857600080fd5b8235905067ffffffffffffffff811115610e1157600080fd5b602083019150836020820283011115610e2957600080fd5b9250929050565b60008083601f840112610e4257600080fd5b8235905067ffffffffffffffff811115610e5b57600080fd5b602083019150836020820283011115610e7357600080fd5b9250929050565b600081359050610e898161183c565b92915050565b600081359050610e9e81611853565b92915050565b600081519050610eb381611853565b92915050565b600081359050610ec88161186a565b92915050565b60008060408385031215610ee157600080fd5b6000610eef85828601610e7a565b9250506020610f0085828601610e8f565b9150509250929050565b60008060008060008060808789031215610f2357600080fd5b6000610f3189828a01610e7a565b9650506020610f4289828a01610e8f565b955050604087013567ffffffffffffffff811115610f5f57600080fd5b610f6b89828a01610de6565b9450945050606087013567ffffffffffffffff811115610f8a57600080fd5b610f9689828a01610e30565b92509250509295509295509295565b600080600060608486031215610fba57600080fd5b6000610fc886828701610e7a565b9350506020610fd986828701610e8f565b9250506040610fea86828701610e8f565b9150509250925092565b600080600080600080600060a0888a03121561100f57600080fd5b600061101d8a828b01610e7a565b975050602061102e8a828b01610e8f565b965050604061103f8a828b01610e8f565b955050606088013567ffffffffffffffff81111561105c57600080fd5b6110688a828b01610de6565b9450945050608088013567ffffffffffffffff81111561108757600080fd5b6110938a828b01610e30565b925092505092959891949750929550565b6000602082840312156110b657600080fd5b60006110c484828501610ea4565b91505092915050565b6000602082840312156110df57600080fd5b60006110ed84828501610eb9565b91505092915050565b60006111028383611295565b60208301905092915050565b611117816113ae565b61112181846113de565b925061112c8261139a565b8060005b8381101561115d57815161114487826110f6565b965061114f836113c4565b925050600181019050611130565b505050505050565b61116e816113b9565b61117881846113de565b9250611183826113a4565b8060005b838110156111bb5761119882611635565b6111a287826110f6565b96506111ad836113d1565b925050600181019050611187565b505050505050565b60006111d06023836113e9565b91506111db82611662565b604082019050919050565b60006111f36038836113e9565b91506111fe826116b1565b604082019050919050565b60006112166040836113e9565b915061122182611700565b604082019050919050565b6000611239603a836113e9565b91506112448261174f565b604082019050919050565b600061125c6033836113e9565b91506112678261179e565b604082019050919050565b600061127f6034836113e9565b915061128a826117ed565b604082019050919050565b61129e816115d5565b82525050565b60006040820190506112b9600083018461110e565b92915050565b60006040820190506112d46000830184611165565b92915050565b600060208201905081810360008301526112f3816111c3565b9050919050565b60006020820190508181036000830152611313816111e6565b9050919050565b6000602082019050818103600083015261133381611209565b9050919050565b600060208201905081810360008301526113538161122c565b9050919050565b600060208201905081810360008301526113738161124f565b9050919050565b6000602082019050818103600083015261139381611272565b9050919050565b6000819050919050565b6000819050919050565b600060029050919050565b600060029050919050565b6000602082019050919050565b6000600182019050919050565b600081905092915050565b600082825260208201905092915050565b6000611405826115d5565b9150611410836115d5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561144557611444611606565b5b828201905092915050565b6000808291508390505b600185111561149a5780860481111561147657611475611606565b5b60018516156114855780820291505b808102905061149385611655565b945061145a565b94509492505050565b60006114ae826115d5565b91506114b9836115d5565b92506114e67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846114ee565b905092915050565b6000826114fe57600190506115ba565b8161150c57600090506115ba565b8160018114611522576002811461152c5761155b565b60019150506115ba565b60ff84111561153e5761153d611606565b5b8360020a91508482111561155557611554611606565b5b506115ba565b5060208310610133831016604e8410600b84101617156115905782820a90508381111561158b5761158a611606565b5b6115ba565b61159d8484846001611450565b925090508184048111156115b4576115b3611606565b5b81810290505b9392505050565b6000819050919050565b6000819050919050565b6000819050919050565b600060ff82169050919050565b60006115ff6115fa83611648565b6115c1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061164182546115ec565b9050919050565b60008160001c9050919050565b60008160011c9050919050565b7f496e6372656d656e74616c42696e617279547265653a2074726565206973206660008201527f756c6c0000000000000000000000000000000000000000000000000000000000602082015250565b7f496e6372656d656e74616c42696e617279547265653a206c656166206d75737460008201527f206265203c20534e41524b5f5343414c41525f4649454c440000000000000000602082015250565b7f496e6372656d656e74616c42696e617279547265653a207369626c696e67206e60008201527f6f6465206d757374206265203c20534e41524b5f5343414c41525f4649454c44602082015250565b7f496e6372656d656e74616c42696e617279547265653a2074726565206465707460008201527f68206d757374206265206265747765656e203120616e64203332000000000000602082015250565b7f496e6372656d656e74616c42696e617279547265653a206c656166206973206e60008201527f6f742070617274206f6620746865207472656500000000000000000000000000602082015250565b7f496e6372656d656e74616c42696e617279547265653a206c656e677468206f6660008201527f2070617468206973206e6f7420636f7272656374000000000000000000000000602082015250565b611845816115cb565b811461185057600080fd5b50565b61185c816115d5565b811461186757600080fd5b50565b611873816115df565b811461187e57600080fd5b5056fea264697066735822122012882cb750967cc4f2d456c1a6d743ad3dc2777ccb2882f3745884dc47d1907c64736f6c63430008040033","opcodes":"PUSH2 0x18B7 PUSH2 0x53 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH2 0x46 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x56 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x629596F EQ PUSH2 0x5B JUMPI DUP1 PUSH4 0x1095FBB4 EQ PUSH2 0x84 JUMPI DUP1 PUSH4 0x168703FA EQ PUSH2 0xAD JUMPI DUP1 PUSH4 0xA5478827 EQ PUSH2 0xD6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x82 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x7D SWAP2 SWAP1 PUSH2 0xF0A JUMP JUMPDEST PUSH2 0xFF JUMP JUMPDEST STOP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xA6 SWAP2 SWAP1 PUSH2 0xFA5 JUMP JUMPDEST PUSH2 0x12B JUMP JUMPDEST STOP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0xB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xCF SWAP2 SWAP1 PUSH2 0xECE JUMP JUMPDEST PUSH2 0x2CB JUMP JUMPDEST STOP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0xE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xFD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xF8 SWAP2 SWAP1 PUSH2 0xFF4 JUMP JUMPDEST PUSH2 0x540 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x123 DUP7 DUP7 DUP9 PUSH1 0x3 ADD PUSH1 0x0 DUP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP8 DUP8 DUP8 DUP8 PUSH2 0x540 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x30644E72E131A029B85045B68181585D2833E84879B9709143E1F593F0000001 DUP2 LT PUSH2 0x18D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x184 SWAP1 PUSH2 0x12FA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 GT DUP1 ISZERO PUSH2 0x1A1 JUMPI POP PUSH1 0x20 PUSH1 0xFF AND DUP3 GT ISZERO JUMPDEST PUSH2 0x1E0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D7 SWAP1 PUSH2 0x133A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP4 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x0 JUMPDEST DUP3 DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x2BC JUMPI DUP2 DUP5 PUSH1 0x3 ADD PUSH1 0x0 DUP4 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH20 0x0 PUSH4 0x29A5F2F6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25F SWAP2 SWAP1 PUSH2 0x12A4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x277 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x28B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2AF SWAP2 SWAP1 PUSH2 0x10A4 JUMP JUMPDEST SWAP2 POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x1EC JUMP JUMPDEST POP DUP1 DUP4 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD SLOAD SWAP1 POP PUSH32 0x30644E72E131A029B85045B68181585D2833E84879B9709143E1F593F0000001 DUP3 LT PUSH2 0x336 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x32D SWAP1 PUSH2 0x12FA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x2 PUSH2 0x343 SWAP2 SWAP1 PUSH2 0x14A3 JUMP JUMPDEST DUP4 PUSH1 0x2 ADD SLOAD LT PUSH2 0x388 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x37F SWAP1 PUSH2 0x12DA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x2 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP4 SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x513 JUMPI PUSH1 0x0 PUSH1 0x1 DUP5 AND EQ ISZERO PUSH2 0x409 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x3 ADD PUSH1 0x0 DUP5 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE POP DUP7 PUSH1 0x4 ADD PUSH1 0x0 DUP4 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 PUSH2 0x403 SWAP3 SWAP2 SWAP1 PUSH2 0xD89 JUMP JUMPDEST POP PUSH2 0x461 JUMP JUMPDEST DUP2 DUP7 PUSH1 0x4 ADD PUSH1 0x0 DUP4 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 PUSH1 0x2 DUP2 LT PUSH2 0x45B JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD DUP2 SWAP1 SSTORE POP JUMPDEST PUSH20 0x0 PUSH4 0x29A5F2F6 DUP8 PUSH1 0x4 ADD PUSH1 0x0 DUP5 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AF SWAP2 SWAP1 PUSH2 0x12BF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x4DB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4FF SWAP2 SWAP1 PUSH2 0x10A4 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 DUP4 SWAP1 SHR SWAP3 POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x399 JUMP JUMPDEST POP DUP1 DUP6 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x1 DUP6 PUSH1 0x2 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x532 SWAP2 SWAP1 PUSH2 0x13FA JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x54E DUP8 DUP8 DUP7 DUP7 DUP7 DUP7 PUSH2 0x9D1 JUMP JUMPDEST PUSH2 0x58D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x584 SWAP1 PUSH2 0x135A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP8 PUSH1 0x0 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP7 SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x9BC JUMPI PUSH1 0x0 DUP6 DUP6 DUP4 PUSH1 0xFF AND DUP2 DUP2 LT PUSH2 0x5E7 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x5FC SWAP2 SWAP1 PUSH2 0x10CD JUMP JUMPDEST PUSH1 0xFF AND EQ ISZERO PUSH2 0x7DD JUMPI DUP10 PUSH1 0x4 ADD PUSH1 0x0 DUP3 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 PUSH1 0x2 DUP2 LT PUSH2 0x656 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD SLOAD DUP8 DUP8 DUP4 PUSH1 0xFF AND DUP2 DUP2 LT PUSH2 0x694 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD EQ ISZERO PUSH2 0x6F9 JUMPI DUP2 DUP11 PUSH1 0x4 ADD PUSH1 0x0 DUP4 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH2 0x6F3 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD DUP2 SWAP1 SSTORE POP JUMPDEST PUSH20 0x0 PUSH4 0x29A5F2F6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP11 DUP7 PUSH1 0xFF AND DUP2 DUP2 LT PUSH2 0x760 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x786 SWAP2 SWAP1 PUSH2 0x12A4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x79E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x7B2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7D6 SWAP2 SWAP1 PUSH2 0x10A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x9B1 JUMP JUMPDEST DUP10 PUSH1 0x4 ADD PUSH1 0x0 DUP3 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH2 0x82E JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD SLOAD DUP8 DUP8 DUP4 PUSH1 0xFF AND DUP2 DUP2 LT PUSH2 0x86C JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD EQ ISZERO PUSH2 0x8D1 JUMPI DUP2 DUP11 PUSH1 0x4 ADD PUSH1 0x0 DUP4 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 PUSH1 0x2 DUP2 LT PUSH2 0x8CB JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD DUP2 SWAP1 SSTORE POP JUMPDEST PUSH20 0x0 PUSH4 0x29A5F2F6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP11 DUP11 DUP7 PUSH1 0xFF AND DUP2 DUP2 LT PUSH2 0x932 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x95E SWAP2 SWAP1 PUSH2 0x12A4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x976 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x98A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9AE SWAP2 SWAP1 PUSH2 0x10A4 JUMP JUMPDEST SWAP2 POP JUMPDEST DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x59E JUMP JUMPDEST POP DUP1 DUP10 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x30644E72E131A029B85045B68181585D2833E84879B9709143E1F593F0000001 DUP7 LT PUSH2 0xA35 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA2C SWAP1 PUSH2 0x12FA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP8 PUSH1 0x0 ADD SLOAD SWAP1 POP DUP1 DUP5 DUP5 SWAP1 POP EQ DUP1 ISZERO PUSH2 0xA52 JUMPI POP DUP1 DUP7 DUP7 SWAP1 POP EQ JUMPDEST PUSH2 0xA91 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA88 SWAP1 PUSH2 0x137A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP8 SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0xD73 JUMPI PUSH32 0x30644E72E131A029B85045B68181585D2833E84879B9709143E1F593F0000001 DUP9 DUP9 DUP4 PUSH1 0xFF AND DUP2 DUP2 LT PUSH2 0xB01 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD LT PUSH2 0xB48 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB3F SWAP1 PUSH2 0x131A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP7 DUP7 DUP4 PUSH1 0xFF AND DUP2 DUP2 LT PUSH2 0xB86 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xB9B SWAP2 SWAP1 PUSH2 0x10CD JUMP JUMPDEST PUSH1 0xFF AND EQ ISZERO PUSH2 0xC88 JUMPI PUSH20 0x0 PUSH4 0x29A5F2F6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP12 DUP12 DUP7 PUSH1 0xFF AND DUP2 DUP2 LT PUSH2 0xC0B JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC31 SWAP2 SWAP1 PUSH2 0x12A4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xC5D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC81 SWAP2 SWAP1 PUSH2 0x10A4 JUMP JUMPDEST SWAP2 POP PUSH2 0xD68 JUMP JUMPDEST PUSH20 0x0 PUSH4 0x29A5F2F6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP12 DUP12 DUP7 PUSH1 0xFF AND DUP2 DUP2 LT PUSH2 0xCE9 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD15 SWAP2 SWAP1 PUSH2 0x12A4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xD41 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD65 SWAP2 SWAP1 PUSH2 0x10A4 JUMP JUMPDEST SWAP2 POP JUMPDEST DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0xA99 JUMP JUMPDEST POP DUP9 PUSH1 0x1 ADD SLOAD DUP2 EQ SWAP3 POP POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x2 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0xDB8 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0xDB7 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xD9C JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0xDC5 SWAP2 SWAP1 PUSH2 0xDC9 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0xDE2 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0xDCA JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xDF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xE11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0xE29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xE42 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xE5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0xE73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xE89 DUP2 PUSH2 0x183C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xE9E DUP2 PUSH2 0x1853 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xEB3 DUP2 PUSH2 0x1853 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xEC8 DUP2 PUSH2 0x186A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xEE1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xEEF DUP6 DUP3 DUP7 ADD PUSH2 0xE7A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xF00 DUP6 DUP3 DUP7 ADD PUSH2 0xE8F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xF23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xF31 DUP10 DUP3 DUP11 ADD PUSH2 0xE7A JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0xF42 DUP10 DUP3 DUP11 ADD PUSH2 0xE8F JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF5F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF6B DUP10 DUP3 DUP11 ADD PUSH2 0xDE6 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF96 DUP10 DUP3 DUP11 ADD PUSH2 0xE30 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xFBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xFC8 DUP7 DUP3 DUP8 ADD PUSH2 0xE7A JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xFD9 DUP7 DUP3 DUP8 ADD PUSH2 0xE8F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xFEA DUP7 DUP3 DUP8 ADD PUSH2 0xE8F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x100F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x101D DUP11 DUP3 DUP12 ADD PUSH2 0xE7A JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 PUSH2 0x102E DUP11 DUP3 DUP12 ADD PUSH2 0xE8F JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 PUSH2 0x103F DUP11 DUP3 DUP12 ADD PUSH2 0xE8F JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x105C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1068 DUP11 DUP3 DUP12 ADD PUSH2 0xDE6 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP PUSH1 0x80 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1087 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1093 DUP11 DUP3 DUP12 ADD PUSH2 0xE30 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x10C4 DUP5 DUP3 DUP6 ADD PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x10ED DUP5 DUP3 DUP6 ADD PUSH2 0xEB9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1102 DUP4 DUP4 PUSH2 0x1295 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1117 DUP2 PUSH2 0x13AE JUMP JUMPDEST PUSH2 0x1121 DUP2 DUP5 PUSH2 0x13DE JUMP JUMPDEST SWAP3 POP PUSH2 0x112C DUP3 PUSH2 0x139A JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x115D JUMPI DUP2 MLOAD PUSH2 0x1144 DUP8 DUP3 PUSH2 0x10F6 JUMP JUMPDEST SWAP7 POP PUSH2 0x114F DUP4 PUSH2 0x13C4 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x1130 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x116E DUP2 PUSH2 0x13B9 JUMP JUMPDEST PUSH2 0x1178 DUP2 DUP5 PUSH2 0x13DE JUMP JUMPDEST SWAP3 POP PUSH2 0x1183 DUP3 PUSH2 0x13A4 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x11BB JUMPI PUSH2 0x1198 DUP3 PUSH2 0x1635 JUMP JUMPDEST PUSH2 0x11A2 DUP8 DUP3 PUSH2 0x10F6 JUMP JUMPDEST SWAP7 POP PUSH2 0x11AD DUP4 PUSH2 0x13D1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x1187 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11D0 PUSH1 0x23 DUP4 PUSH2 0x13E9 JUMP JUMPDEST SWAP2 POP PUSH2 0x11DB DUP3 PUSH2 0x1662 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11F3 PUSH1 0x38 DUP4 PUSH2 0x13E9 JUMP JUMPDEST SWAP2 POP PUSH2 0x11FE DUP3 PUSH2 0x16B1 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1216 PUSH1 0x40 DUP4 PUSH2 0x13E9 JUMP JUMPDEST SWAP2 POP PUSH2 0x1221 DUP3 PUSH2 0x1700 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1239 PUSH1 0x3A DUP4 PUSH2 0x13E9 JUMP JUMPDEST SWAP2 POP PUSH2 0x1244 DUP3 PUSH2 0x174F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x125C PUSH1 0x33 DUP4 PUSH2 0x13E9 JUMP JUMPDEST SWAP2 POP PUSH2 0x1267 DUP3 PUSH2 0x179E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x127F PUSH1 0x34 DUP4 PUSH2 0x13E9 JUMP JUMPDEST SWAP2 POP PUSH2 0x128A DUP3 PUSH2 0x17ED JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x129E DUP2 PUSH2 0x15D5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x12B9 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x110E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x12D4 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1165 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x12F3 DUP2 PUSH2 0x11C3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1313 DUP2 PUSH2 0x11E6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1333 DUP2 PUSH2 0x1209 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1353 DUP2 PUSH2 0x122C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1373 DUP2 PUSH2 0x124F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1393 DUP2 PUSH2 0x1272 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1405 DUP3 PUSH2 0x15D5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1410 DUP4 PUSH2 0x15D5 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x1445 JUMPI PUSH2 0x1444 PUSH2 0x1606 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP2 POP DUP4 SWAP1 POP JUMPDEST PUSH1 0x1 DUP6 GT ISZERO PUSH2 0x149A JUMPI DUP1 DUP7 DIV DUP2 GT ISZERO PUSH2 0x1476 JUMPI PUSH2 0x1475 PUSH2 0x1606 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP6 AND ISZERO PUSH2 0x1485 JUMPI DUP1 DUP3 MUL SWAP2 POP JUMPDEST DUP1 DUP2 MUL SWAP1 POP PUSH2 0x1493 DUP6 PUSH2 0x1655 JUMP JUMPDEST SWAP5 POP PUSH2 0x145A JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14AE DUP3 PUSH2 0x15D5 JUMP JUMPDEST SWAP2 POP PUSH2 0x14B9 DUP4 PUSH2 0x15D5 JUMP JUMPDEST SWAP3 POP PUSH2 0x14E6 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP5 PUSH2 0x14EE JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x14FE JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x15BA JUMP JUMPDEST DUP2 PUSH2 0x150C JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x15BA JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x1522 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x152C JUMPI PUSH2 0x155B JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x15BA JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x153E JUMPI PUSH2 0x153D PUSH2 0x1606 JUMP JUMPDEST JUMPDEST DUP4 PUSH1 0x2 EXP SWAP2 POP DUP5 DUP3 GT ISZERO PUSH2 0x1555 JUMPI PUSH2 0x1554 PUSH2 0x1606 JUMP JUMPDEST JUMPDEST POP PUSH2 0x15BA JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x1590 JUMPI DUP3 DUP3 EXP SWAP1 POP DUP4 DUP2 GT ISZERO PUSH2 0x158B JUMPI PUSH2 0x158A PUSH2 0x1606 JUMP JUMPDEST JUMPDEST PUSH2 0x15BA JUMP JUMPDEST PUSH2 0x159D DUP5 DUP5 DUP5 PUSH1 0x1 PUSH2 0x1450 JUMP JUMPDEST SWAP3 POP SWAP1 POP DUP2 DUP5 DIV DUP2 GT ISZERO PUSH2 0x15B4 JUMPI PUSH2 0x15B3 PUSH2 0x1606 JUMP JUMPDEST JUMPDEST DUP2 DUP2 MUL SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15FF PUSH2 0x15FA DUP4 PUSH2 0x1648 JUMP JUMPDEST PUSH2 0x15C1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1641 DUP3 SLOAD PUSH2 0x15EC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E6372656D656E74616C42696E617279547265653A20747265652069732066 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x756C6C0000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x496E6372656D656E74616C42696E617279547265653A206C656166206D757374 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x206265203C20534E41524B5F5343414C41525F4649454C440000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x496E6372656D656E74616C42696E617279547265653A207369626C696E67206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F6465206D757374206265203C20534E41524B5F5343414C41525F4649454C44 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x496E6372656D656E74616C42696E617279547265653A20747265652064657074 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x68206D757374206265206265747765656E203120616E64203332000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x496E6372656D656E74616C42696E617279547265653A206C656166206973206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F742070617274206F6620746865207472656500000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x496E6372656D656E74616C42696E617279547265653A206C656E677468206F66 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x2070617468206973206E6F7420636F7272656374000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x1845 DUP2 PUSH2 0x15CB JUMP JUMPDEST DUP2 EQ PUSH2 0x1850 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x185C DUP2 PUSH2 0x15D5 JUMP JUMPDEST DUP2 EQ PUSH2 0x1867 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x1873 DUP2 PUSH2 0x15DF JUMP JUMPDEST DUP2 EQ PUSH2 0x187E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT DUP9 0x2C 0xB7 POP SWAP7 PUSH29 0xC4F2D456C1A6D743AD3DC2777CCB2882F3745884DC47D1907C64736F6C PUSH4 0x43000804 STOP CALLER ","sourceMap":"872:5250:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:19331:29","statements":[{"body":{"nodeType":"YulBlock","src":"114:277:29","statements":[{"body":{"nodeType":"YulBlock","src":"163:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"172:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"175:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"165:6:29"},"nodeType":"YulFunctionCall","src":"165:12:29"},"nodeType":"YulExpressionStatement","src":"165:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"142:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"150:4:29","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"138:3:29"},"nodeType":"YulFunctionCall","src":"138:17:29"},{"name":"end","nodeType":"YulIdentifier","src":"157:3:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"134:3:29"},"nodeType":"YulFunctionCall","src":"134:27:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"127:6:29"},"nodeType":"YulFunctionCall","src":"127:35:29"},"nodeType":"YulIf","src":"124:2:29"},{"nodeType":"YulAssignment","src":"188:30:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"211:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"198:12:29"},"nodeType":"YulFunctionCall","src":"198:20:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"188:6:29"}]},{"body":{"nodeType":"YulBlock","src":"261:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"270:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"273:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"263:6:29"},"nodeType":"YulFunctionCall","src":"263:12:29"},"nodeType":"YulExpressionStatement","src":"263:12:29"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"233:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"241:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"230:2:29"},"nodeType":"YulFunctionCall","src":"230:30:29"},"nodeType":"YulIf","src":"227:2:29"},{"nodeType":"YulAssignment","src":"286:29:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"302:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"310:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"298:3:29"},"nodeType":"YulFunctionCall","src":"298:17:29"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"286:8:29"}]},{"body":{"nodeType":"YulBlock","src":"369:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"378:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"381:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"371:6:29"},"nodeType":"YulFunctionCall","src":"371:12:29"},"nodeType":"YulExpressionStatement","src":"371:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"334:8:29"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"348:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"356:4:29","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"344:3:29"},"nodeType":"YulFunctionCall","src":"344:17:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"330:3:29"},"nodeType":"YulFunctionCall","src":"330:32:29"},{"name":"end","nodeType":"YulIdentifier","src":"364:3:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"327:2:29"},"nodeType":"YulFunctionCall","src":"327:41:29"},"nodeType":"YulIf","src":"324:2:29"}]},"name":"abi_decode_t_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"81:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"89:3:29","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"97:8:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"107:6:29","type":""}],"src":"24:367:29"},{"body":{"nodeType":"YulBlock","src":"500:277:29","statements":[{"body":{"nodeType":"YulBlock","src":"549:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"558:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"561:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"551:6:29"},"nodeType":"YulFunctionCall","src":"551:12:29"},"nodeType":"YulExpressionStatement","src":"551:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"528:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"536:4:29","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"524:3:29"},"nodeType":"YulFunctionCall","src":"524:17:29"},{"name":"end","nodeType":"YulIdentifier","src":"543:3:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"520:3:29"},"nodeType":"YulFunctionCall","src":"520:27:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"513:6:29"},"nodeType":"YulFunctionCall","src":"513:35:29"},"nodeType":"YulIf","src":"510:2:29"},{"nodeType":"YulAssignment","src":"574:30:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"597:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"584:12:29"},"nodeType":"YulFunctionCall","src":"584:20:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"574:6:29"}]},{"body":{"nodeType":"YulBlock","src":"647:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"656:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"659:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"649:6:29"},"nodeType":"YulFunctionCall","src":"649:12:29"},"nodeType":"YulExpressionStatement","src":"649:12:29"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"619:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"627:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"616:2:29"},"nodeType":"YulFunctionCall","src":"616:30:29"},"nodeType":"YulIf","src":"613:2:29"},{"nodeType":"YulAssignment","src":"672:29:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"688:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"696:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"684:3:29"},"nodeType":"YulFunctionCall","src":"684:17:29"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"672:8:29"}]},{"body":{"nodeType":"YulBlock","src":"755:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"764:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"767:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"757:6:29"},"nodeType":"YulFunctionCall","src":"757:12:29"},"nodeType":"YulExpressionStatement","src":"757:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"720:8:29"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"734:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"742:4:29","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"730:3:29"},"nodeType":"YulFunctionCall","src":"730:17:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"716:3:29"},"nodeType":"YulFunctionCall","src":"716:32:29"},{"name":"end","nodeType":"YulIdentifier","src":"750:3:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"713:2:29"},"nodeType":"YulFunctionCall","src":"713:41:29"},"nodeType":"YulIf","src":"710:2:29"}]},"name":"abi_decode_t_array$_t_uint8_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"467:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"475:3:29","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"483:8:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"493:6:29","type":""}],"src":"412:365:29"},{"body":{"nodeType":"YulBlock","src":"873:125:29","statements":[{"nodeType":"YulAssignment","src":"883:29:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"905:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"892:12:29"},"nodeType":"YulFunctionCall","src":"892:20:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"883:5:29"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"986:5:29"}],"functionName":{"name":"validator_revert_t_struct$_IncrementalTreeData_$1197_storage_ptr","nodeType":"YulIdentifier","src":"921:64:29"},"nodeType":"YulFunctionCall","src":"921:71:29"},"nodeType":"YulExpressionStatement","src":"921:71:29"}]},"name":"abi_decode_t_struct$_IncrementalTreeData_$1197_storage_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"851:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"859:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"867:5:29","type":""}],"src":"783:215:29"},{"body":{"nodeType":"YulBlock","src":"1056:87:29","statements":[{"nodeType":"YulAssignment","src":"1066:29:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1088:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1075:12:29"},"nodeType":"YulFunctionCall","src":"1075:20:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1066:5:29"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1131:5:29"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"1104:26:29"},"nodeType":"YulFunctionCall","src":"1104:33:29"},"nodeType":"YulExpressionStatement","src":"1104:33:29"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1034:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"1042:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1050:5:29","type":""}],"src":"1004:139:29"},{"body":{"nodeType":"YulBlock","src":"1212:80:29","statements":[{"nodeType":"YulAssignment","src":"1222:22:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1237:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1231:5:29"},"nodeType":"YulFunctionCall","src":"1231:13:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1222:5:29"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1280:5:29"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"1253:26:29"},"nodeType":"YulFunctionCall","src":"1253:33:29"},"nodeType":"YulExpressionStatement","src":"1253:33:29"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1190:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"1198:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1206:5:29","type":""}],"src":"1149:143:29"},{"body":{"nodeType":"YulBlock","src":"1348:85:29","statements":[{"nodeType":"YulAssignment","src":"1358:29:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1380:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1367:12:29"},"nodeType":"YulFunctionCall","src":"1367:20:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1358:5:29"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1421:5:29"}],"functionName":{"name":"validator_revert_t_uint8","nodeType":"YulIdentifier","src":"1396:24:29"},"nodeType":"YulFunctionCall","src":"1396:31:29"},"nodeType":"YulExpressionStatement","src":"1396:31:29"}]},"name":"abi_decode_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1326:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"1334:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1342:5:29","type":""}],"src":"1298:135:29"},{"body":{"nodeType":"YulBlock","src":"1560:362:29","statements":[{"body":{"nodeType":"YulBlock","src":"1606:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1615:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1618:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1608:6:29"},"nodeType":"YulFunctionCall","src":"1608:12:29"},"nodeType":"YulExpressionStatement","src":"1608:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1581:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"1590:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1577:3:29"},"nodeType":"YulFunctionCall","src":"1577:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"1602:2:29","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1573:3:29"},"nodeType":"YulFunctionCall","src":"1573:32:29"},"nodeType":"YulIf","src":"1570:2:29"},{"nodeType":"YulBlock","src":"1632:155:29","statements":[{"nodeType":"YulVariableDeclaration","src":"1647:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"1661:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1651:6:29","type":""}]},{"nodeType":"YulAssignment","src":"1676:101:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1749:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"1760:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1745:3:29"},"nodeType":"YulFunctionCall","src":"1745:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1769:7:29"}],"functionName":{"name":"abi_decode_t_struct$_IncrementalTreeData_$1197_storage_ptr","nodeType":"YulIdentifier","src":"1686:58:29"},"nodeType":"YulFunctionCall","src":"1686:91:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1676:6:29"}]}]},{"nodeType":"YulBlock","src":"1797:118:29","statements":[{"nodeType":"YulVariableDeclaration","src":"1812:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"1826:2:29","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1816:6:29","type":""}]},{"nodeType":"YulAssignment","src":"1842:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1877:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"1888:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1873:3:29"},"nodeType":"YulFunctionCall","src":"1873:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1897:7:29"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"1852:20:29"},"nodeType":"YulFunctionCall","src":"1852:53:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1842:6:29"}]}]}]},"name":"abi_decode_tuple_t_struct$_IncrementalTreeData_$1197_storage_ptrt_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1522:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1533:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1545:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1553:6:29","type":""}],"src":"1439:483:29"},{"body":{"nodeType":"YulBlock","src":"2151:873:29","statements":[{"body":{"nodeType":"YulBlock","src":"2198:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2207:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2210:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2200:6:29"},"nodeType":"YulFunctionCall","src":"2200:12:29"},"nodeType":"YulExpressionStatement","src":"2200:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2172:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"2181:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2168:3:29"},"nodeType":"YulFunctionCall","src":"2168:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"2193:3:29","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2164:3:29"},"nodeType":"YulFunctionCall","src":"2164:33:29"},"nodeType":"YulIf","src":"2161:2:29"},{"nodeType":"YulBlock","src":"2224:155:29","statements":[{"nodeType":"YulVariableDeclaration","src":"2239:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"2253:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2243:6:29","type":""}]},{"nodeType":"YulAssignment","src":"2268:101:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2341:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"2352:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2337:3:29"},"nodeType":"YulFunctionCall","src":"2337:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2361:7:29"}],"functionName":{"name":"abi_decode_t_struct$_IncrementalTreeData_$1197_storage_ptr","nodeType":"YulIdentifier","src":"2278:58:29"},"nodeType":"YulFunctionCall","src":"2278:91:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2268:6:29"}]}]},{"nodeType":"YulBlock","src":"2389:118:29","statements":[{"nodeType":"YulVariableDeclaration","src":"2404:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"2418:2:29","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2408:6:29","type":""}]},{"nodeType":"YulAssignment","src":"2434:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2469:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"2480:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2465:3:29"},"nodeType":"YulFunctionCall","src":"2465:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2489:7:29"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2444:20:29"},"nodeType":"YulFunctionCall","src":"2444:53:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2434:6:29"}]}]},{"nodeType":"YulBlock","src":"2517:246:29","statements":[{"nodeType":"YulVariableDeclaration","src":"2532:46:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2563:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"2574:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2559:3:29"},"nodeType":"YulFunctionCall","src":"2559:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2546:12:29"},"nodeType":"YulFunctionCall","src":"2546:32:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2536:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"2625:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2634:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2637:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2627:6:29"},"nodeType":"YulFunctionCall","src":"2627:12:29"},"nodeType":"YulExpressionStatement","src":"2627:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2597:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"2605:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2594:2:29"},"nodeType":"YulFunctionCall","src":"2594:30:29"},"nodeType":"YulIf","src":"2591:2:29"},{"nodeType":"YulAssignment","src":"2655:98:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2725:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"2736:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2721:3:29"},"nodeType":"YulFunctionCall","src":"2721:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2745:7:29"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulIdentifier","src":"2673:47:29"},"nodeType":"YulFunctionCall","src":"2673:80:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2655:6:29"},{"name":"value3","nodeType":"YulIdentifier","src":"2663:6:29"}]}]},{"nodeType":"YulBlock","src":"2773:244:29","statements":[{"nodeType":"YulVariableDeclaration","src":"2788:46:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2819:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"2830:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2815:3:29"},"nodeType":"YulFunctionCall","src":"2815:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2802:12:29"},"nodeType":"YulFunctionCall","src":"2802:32:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2792:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"2881:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2890:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2893:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2883:6:29"},"nodeType":"YulFunctionCall","src":"2883:12:29"},"nodeType":"YulExpressionStatement","src":"2883:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2853:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"2861:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2850:2:29"},"nodeType":"YulFunctionCall","src":"2850:30:29"},"nodeType":"YulIf","src":"2847:2:29"},{"nodeType":"YulAssignment","src":"2911:96:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2979:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"2990:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2975:3:29"},"nodeType":"YulFunctionCall","src":"2975:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2999:7:29"}],"functionName":{"name":"abi_decode_t_array$_t_uint8_$dyn_calldata_ptr","nodeType":"YulIdentifier","src":"2929:45:29"},"nodeType":"YulFunctionCall","src":"2929:78:29"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"2911:6:29"},{"name":"value5","nodeType":"YulIdentifier","src":"2919:6:29"}]}]}]},"name":"abi_decode_tuple_t_struct$_IncrementalTreeData_$1197_storage_ptrt_uint256t_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint8_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2081:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2092:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2104:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2112:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2120:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2128:6:29","type":""},{"name":"value4","nodeType":"YulTypedName","src":"2136:6:29","type":""},{"name":"value5","nodeType":"YulTypedName","src":"2144:6:29","type":""}],"src":"1928:1096:29"},{"body":{"nodeType":"YulBlock","src":"3168:490:29","statements":[{"body":{"nodeType":"YulBlock","src":"3214:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3223:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3226:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3216:6:29"},"nodeType":"YulFunctionCall","src":"3216:12:29"},"nodeType":"YulExpressionStatement","src":"3216:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3189:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"3198:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3185:3:29"},"nodeType":"YulFunctionCall","src":"3185:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"3210:2:29","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3181:3:29"},"nodeType":"YulFunctionCall","src":"3181:32:29"},"nodeType":"YulIf","src":"3178:2:29"},{"nodeType":"YulBlock","src":"3240:155:29","statements":[{"nodeType":"YulVariableDeclaration","src":"3255:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"3269:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3259:6:29","type":""}]},{"nodeType":"YulAssignment","src":"3284:101:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3357:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"3368:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3353:3:29"},"nodeType":"YulFunctionCall","src":"3353:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3377:7:29"}],"functionName":{"name":"abi_decode_t_struct$_IncrementalTreeData_$1197_storage_ptr","nodeType":"YulIdentifier","src":"3294:58:29"},"nodeType":"YulFunctionCall","src":"3294:91:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3284:6:29"}]}]},{"nodeType":"YulBlock","src":"3405:118:29","statements":[{"nodeType":"YulVariableDeclaration","src":"3420:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"3434:2:29","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3424:6:29","type":""}]},{"nodeType":"YulAssignment","src":"3450:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3485:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"3496:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3481:3:29"},"nodeType":"YulFunctionCall","src":"3481:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3505:7:29"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3460:20:29"},"nodeType":"YulFunctionCall","src":"3460:53:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3450:6:29"}]}]},{"nodeType":"YulBlock","src":"3533:118:29","statements":[{"nodeType":"YulVariableDeclaration","src":"3548:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"3562:2:29","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3552:6:29","type":""}]},{"nodeType":"YulAssignment","src":"3578:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3613:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"3624:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3609:3:29"},"nodeType":"YulFunctionCall","src":"3609:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3633:7:29"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3588:20:29"},"nodeType":"YulFunctionCall","src":"3588:53:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3578:6:29"}]}]}]},"name":"abi_decode_tuple_t_struct$_IncrementalTreeData_$1197_storage_ptrt_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3122:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3133:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3145:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3153:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3161:6:29","type":""}],"src":"3030:628:29"},{"body":{"nodeType":"YulBlock","src":"3904:1002:29","statements":[{"body":{"nodeType":"YulBlock","src":"3951:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3960:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3963:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3953:6:29"},"nodeType":"YulFunctionCall","src":"3953:12:29"},"nodeType":"YulExpressionStatement","src":"3953:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3925:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"3934:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3921:3:29"},"nodeType":"YulFunctionCall","src":"3921:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"3946:3:29","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3917:3:29"},"nodeType":"YulFunctionCall","src":"3917:33:29"},"nodeType":"YulIf","src":"3914:2:29"},{"nodeType":"YulBlock","src":"3977:155:29","statements":[{"nodeType":"YulVariableDeclaration","src":"3992:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"4006:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3996:6:29","type":""}]},{"nodeType":"YulAssignment","src":"4021:101:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4094:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"4105:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4090:3:29"},"nodeType":"YulFunctionCall","src":"4090:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4114:7:29"}],"functionName":{"name":"abi_decode_t_struct$_IncrementalTreeData_$1197_storage_ptr","nodeType":"YulIdentifier","src":"4031:58:29"},"nodeType":"YulFunctionCall","src":"4031:91:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4021:6:29"}]}]},{"nodeType":"YulBlock","src":"4142:118:29","statements":[{"nodeType":"YulVariableDeclaration","src":"4157:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"4171:2:29","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4161:6:29","type":""}]},{"nodeType":"YulAssignment","src":"4187:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4222:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"4233:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4218:3:29"},"nodeType":"YulFunctionCall","src":"4218:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4242:7:29"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4197:20:29"},"nodeType":"YulFunctionCall","src":"4197:53:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4187:6:29"}]}]},{"nodeType":"YulBlock","src":"4270:118:29","statements":[{"nodeType":"YulVariableDeclaration","src":"4285:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"4299:2:29","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4289:6:29","type":""}]},{"nodeType":"YulAssignment","src":"4315:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4350:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"4361:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4346:3:29"},"nodeType":"YulFunctionCall","src":"4346:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4370:7:29"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4325:20:29"},"nodeType":"YulFunctionCall","src":"4325:53:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4315:6:29"}]}]},{"nodeType":"YulBlock","src":"4398:246:29","statements":[{"nodeType":"YulVariableDeclaration","src":"4413:46:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4444:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"4455:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4440:3:29"},"nodeType":"YulFunctionCall","src":"4440:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4427:12:29"},"nodeType":"YulFunctionCall","src":"4427:32:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4417:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"4506:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4515:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4518:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4508:6:29"},"nodeType":"YulFunctionCall","src":"4508:12:29"},"nodeType":"YulExpressionStatement","src":"4508:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4478:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"4486:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4475:2:29"},"nodeType":"YulFunctionCall","src":"4475:30:29"},"nodeType":"YulIf","src":"4472:2:29"},{"nodeType":"YulAssignment","src":"4536:98:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4606:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"4617:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4602:3:29"},"nodeType":"YulFunctionCall","src":"4602:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4626:7:29"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulIdentifier","src":"4554:47:29"},"nodeType":"YulFunctionCall","src":"4554:80:29"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4536:6:29"},{"name":"value4","nodeType":"YulIdentifier","src":"4544:6:29"}]}]},{"nodeType":"YulBlock","src":"4654:245:29","statements":[{"nodeType":"YulVariableDeclaration","src":"4669:47:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4700:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"4711:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4696:3:29"},"nodeType":"YulFunctionCall","src":"4696:19:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4683:12:29"},"nodeType":"YulFunctionCall","src":"4683:33:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4673:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"4763:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4772:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4775:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4765:6:29"},"nodeType":"YulFunctionCall","src":"4765:12:29"},"nodeType":"YulExpressionStatement","src":"4765:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4735:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"4743:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4732:2:29"},"nodeType":"YulFunctionCall","src":"4732:30:29"},"nodeType":"YulIf","src":"4729:2:29"},{"nodeType":"YulAssignment","src":"4793:96:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4861:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"4872:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4857:3:29"},"nodeType":"YulFunctionCall","src":"4857:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4881:7:29"}],"functionName":{"name":"abi_decode_t_array$_t_uint8_$dyn_calldata_ptr","nodeType":"YulIdentifier","src":"4811:45:29"},"nodeType":"YulFunctionCall","src":"4811:78:29"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"4793:6:29"},{"name":"value6","nodeType":"YulIdentifier","src":"4801:6:29"}]}]}]},"name":"abi_decode_tuple_t_struct$_IncrementalTreeData_$1197_storage_ptrt_uint256t_uint256t_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint8_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3826:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3837:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3849:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3857:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3865:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3873:6:29","type":""},{"name":"value4","nodeType":"YulTypedName","src":"3881:6:29","type":""},{"name":"value5","nodeType":"YulTypedName","src":"3889:6:29","type":""},{"name":"value6","nodeType":"YulTypedName","src":"3897:6:29","type":""}],"src":"3664:1242:29"},{"body":{"nodeType":"YulBlock","src":"4989:207:29","statements":[{"body":{"nodeType":"YulBlock","src":"5035:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5044:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5047:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5037:6:29"},"nodeType":"YulFunctionCall","src":"5037:12:29"},"nodeType":"YulExpressionStatement","src":"5037:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5010:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"5019:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5006:3:29"},"nodeType":"YulFunctionCall","src":"5006:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"5031:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5002:3:29"},"nodeType":"YulFunctionCall","src":"5002:32:29"},"nodeType":"YulIf","src":"4999:2:29"},{"nodeType":"YulBlock","src":"5061:128:29","statements":[{"nodeType":"YulVariableDeclaration","src":"5076:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"5090:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5080:6:29","type":""}]},{"nodeType":"YulAssignment","src":"5105:74:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5151:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"5162:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5147:3:29"},"nodeType":"YulFunctionCall","src":"5147:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5171:7:29"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"5115:31:29"},"nodeType":"YulFunctionCall","src":"5115:64:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5105:6:29"}]}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4959:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4970:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4982:6:29","type":""}],"src":"4912:284:29"},{"body":{"nodeType":"YulBlock","src":"5266:194:29","statements":[{"body":{"nodeType":"YulBlock","src":"5312:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5321:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5324:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5314:6:29"},"nodeType":"YulFunctionCall","src":"5314:12:29"},"nodeType":"YulExpressionStatement","src":"5314:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5287:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"5296:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5283:3:29"},"nodeType":"YulFunctionCall","src":"5283:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"5308:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5279:3:29"},"nodeType":"YulFunctionCall","src":"5279:32:29"},"nodeType":"YulIf","src":"5276:2:29"},{"nodeType":"YulBlock","src":"5338:115:29","statements":[{"nodeType":"YulVariableDeclaration","src":"5353:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"5367:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5357:6:29","type":""}]},{"nodeType":"YulAssignment","src":"5382:61:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5415:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"5426:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5411:3:29"},"nodeType":"YulFunctionCall","src":"5411:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5435:7:29"}],"functionName":{"name":"abi_decode_t_uint8","nodeType":"YulIdentifier","src":"5392:18:29"},"nodeType":"YulFunctionCall","src":"5392:51:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5382:6:29"}]}]}]},"name":"abi_decode_tuple_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5236:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5247:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5259:6:29","type":""}],"src":"5202:258:29"},{"body":{"nodeType":"YulBlock","src":"5554:107:29","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5606:6:29"},{"name":"pos","nodeType":"YulIdentifier","src":"5614:3:29"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_library","nodeType":"YulIdentifier","src":"5564:41:29"},"nodeType":"YulFunctionCall","src":"5564:54:29"},"nodeType":"YulExpressionStatement","src":"5564:54:29"},{"nodeType":"YulAssignment","src":"5627:28:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5645:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"5650:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5641:3:29"},"nodeType":"YulFunctionCall","src":"5641:14:29"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"5627:10:29"}]}]},"name":"abi_encodeUpdatedPos_t_uint256_to_t_uint256_library","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"5527:6:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5535:3:29","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"5543:10:29","type":""}],"src":"5466:195:29"},{"body":{"nodeType":"YulBlock","src":"5819:598:29","statements":[{"nodeType":"YulVariableDeclaration","src":"5829:66:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5889:5:29"}],"functionName":{"name":"array_length_t_array$_t_uint256_$2_memory_ptr","nodeType":"YulIdentifier","src":"5843:45:29"},"nodeType":"YulFunctionCall","src":"5843:52:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"5833:6:29","type":""}]},{"nodeType":"YulAssignment","src":"5904:99:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5991:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"5996:6:29"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_uint256_$2_memory_ptr_fromStack_library","nodeType":"YulIdentifier","src":"5911:79:29"},"nodeType":"YulFunctionCall","src":"5911:92:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5904:3:29"}]},{"nodeType":"YulVariableDeclaration","src":"6012:69:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6075:5:29"}],"functionName":{"name":"array_dataslot_t_array$_t_uint256_$2_memory_ptr","nodeType":"YulIdentifier","src":"6027:47:29"},"nodeType":"YulFunctionCall","src":"6027:54:29"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"6016:7:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6090:21:29","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"6104:7:29"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"6094:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"6180:230:29","statements":[{"nodeType":"YulVariableDeclaration","src":"6194:34:29","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"6221:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6215:5:29"},"nodeType":"YulFunctionCall","src":"6215:13:29"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"6198:13:29","type":""}]},{"nodeType":"YulAssignment","src":"6241:78:29","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"6300:13:29"},{"name":"pos","nodeType":"YulIdentifier","src":"6315:3:29"}],"functionName":{"name":"abi_encodeUpdatedPos_t_uint256_to_t_uint256_library","nodeType":"YulIdentifier","src":"6248:51:29"},"nodeType":"YulFunctionCall","src":"6248:71:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6241:3:29"}]},{"nodeType":"YulAssignment","src":"6332:68:29","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"6393:6:29"}],"functionName":{"name":"array_nextElement_t_array$_t_uint256_$2_memory_ptr","nodeType":"YulIdentifier","src":"6342:50:29"},"nodeType":"YulFunctionCall","src":"6342:58:29"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"6332:6:29"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6142:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"6145:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6139:2:29"},"nodeType":"YulFunctionCall","src":"6139:13:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"6153:18:29","statements":[{"nodeType":"YulAssignment","src":"6155:14:29","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6164:1:29"},{"kind":"number","nodeType":"YulLiteral","src":"6167:1:29","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6160:3:29"},"nodeType":"YulFunctionCall","src":"6160:9:29"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"6155:1:29"}]}]},"pre":{"nodeType":"YulBlock","src":"6124:14:29","statements":[{"nodeType":"YulVariableDeclaration","src":"6126:10:29","value":{"kind":"number","nodeType":"YulLiteral","src":"6135:1:29","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"6130:1:29","type":""}]}]},"src":"6120:290:29"}]},"name":"abi_encode_t_array$_t_uint256_$2_memory_ptr_to_t_array$_t_uint256_$2_memory_ptr_fromStack_library","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5806:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5813:3:29","type":""}],"src":"5699:718:29"},{"body":{"nodeType":"YulBlock","src":"6572:620:29","statements":[{"nodeType":"YulVariableDeclaration","src":"6582:63:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6639:5:29"}],"functionName":{"name":"array_length_t_array$_t_uint256_$2_storage","nodeType":"YulIdentifier","src":"6596:42:29"},"nodeType":"YulFunctionCall","src":"6596:49:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6586:6:29","type":""}]},{"nodeType":"YulAssignment","src":"6654:99:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6741:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"6746:6:29"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_uint256_$2_memory_ptr_fromStack_library","nodeType":"YulIdentifier","src":"6661:79:29"},"nodeType":"YulFunctionCall","src":"6661:92:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6654:3:29"}]},{"nodeType":"YulVariableDeclaration","src":"6762:66:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6822:5:29"}],"functionName":{"name":"array_dataslot_t_array$_t_uint256_$2_storage","nodeType":"YulIdentifier","src":"6777:44:29"},"nodeType":"YulFunctionCall","src":"6777:51:29"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"6766:7:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6837:21:29","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"6851:7:29"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"6841:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"6927:258:29","statements":[{"nodeType":"YulVariableDeclaration","src":"6941:65:29","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"6999:6:29"}],"functionName":{"name":"read_from_storage_offset_0_t_uint256","nodeType":"YulIdentifier","src":"6962:36:29"},"nodeType":"YulFunctionCall","src":"6962:44:29"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"6945:13:29","type":""}]},{"nodeType":"YulAssignment","src":"7019:78:29","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"7078:13:29"},{"name":"pos","nodeType":"YulIdentifier","src":"7093:3:29"}],"functionName":{"name":"abi_encodeUpdatedPos_t_uint256_to_t_uint256_library","nodeType":"YulIdentifier","src":"7026:51:29"},"nodeType":"YulFunctionCall","src":"7026:71:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7019:3:29"}]},{"nodeType":"YulAssignment","src":"7110:65:29","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7168:6:29"}],"functionName":{"name":"array_nextElement_t_array$_t_uint256_$2_storage","nodeType":"YulIdentifier","src":"7120:47:29"},"nodeType":"YulFunctionCall","src":"7120:55:29"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7110:6:29"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6889:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"6892:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6886:2:29"},"nodeType":"YulFunctionCall","src":"6886:13:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"6900:18:29","statements":[{"nodeType":"YulAssignment","src":"6902:14:29","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6911:1:29"},{"kind":"number","nodeType":"YulLiteral","src":"6914:1:29","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6907:3:29"},"nodeType":"YulFunctionCall","src":"6907:9:29"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"6902:1:29"}]}]},"pre":{"nodeType":"YulBlock","src":"6871:14:29","statements":[{"nodeType":"YulVariableDeclaration","src":"6873:10:29","value":{"kind":"number","nodeType":"YulLiteral","src":"6882:1:29","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"6877:1:29","type":""}]}]},"src":"6867:318:29"}]},"name":"abi_encode_t_array$_t_uint256_$2_storage_to_t_array$_t_uint256_$2_memory_ptr_fromStack_library","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6559:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6566:3:29","type":""}],"src":"6455:737:29"},{"body":{"nodeType":"YulBlock","src":"7344:220:29","statements":[{"nodeType":"YulAssignment","src":"7354:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7420:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"7425:2:29","type":"","value":"35"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7361:58:29"},"nodeType":"YulFunctionCall","src":"7361:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7354:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7526:3:29"}],"functionName":{"name":"store_literal_in_memory_62c13f9e20ef6a49418227b3dc1613b161135d2222a0c493c73c44c2e361acda","nodeType":"YulIdentifier","src":"7437:88:29"},"nodeType":"YulFunctionCall","src":"7437:93:29"},"nodeType":"YulExpressionStatement","src":"7437:93:29"},{"nodeType":"YulAssignment","src":"7539:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7550:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"7555:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7546:3:29"},"nodeType":"YulFunctionCall","src":"7546:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7539:3:29"}]}]},"name":"abi_encode_t_stringliteral_62c13f9e20ef6a49418227b3dc1613b161135d2222a0c493c73c44c2e361acda_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7332:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7340:3:29","type":""}],"src":"7198:366:29"},{"body":{"nodeType":"YulBlock","src":"7716:220:29","statements":[{"nodeType":"YulAssignment","src":"7726:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7792:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"7797:2:29","type":"","value":"56"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7733:58:29"},"nodeType":"YulFunctionCall","src":"7733:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7726:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7898:3:29"}],"functionName":{"name":"store_literal_in_memory_8b8db1558a0a283e0a9442c31e94b10cc2d3fde6e01b7fd4aa819ae25430befe","nodeType":"YulIdentifier","src":"7809:88:29"},"nodeType":"YulFunctionCall","src":"7809:93:29"},"nodeType":"YulExpressionStatement","src":"7809:93:29"},{"nodeType":"YulAssignment","src":"7911:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7922:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"7927:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7918:3:29"},"nodeType":"YulFunctionCall","src":"7918:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7911:3:29"}]}]},"name":"abi_encode_t_stringliteral_8b8db1558a0a283e0a9442c31e94b10cc2d3fde6e01b7fd4aa819ae25430befe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7704:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7712:3:29","type":""}],"src":"7570:366:29"},{"body":{"nodeType":"YulBlock","src":"8088:220:29","statements":[{"nodeType":"YulAssignment","src":"8098:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8164:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"8169:2:29","type":"","value":"64"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8105:58:29"},"nodeType":"YulFunctionCall","src":"8105:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8098:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8270:3:29"}],"functionName":{"name":"store_literal_in_memory_9e725d0cb0796474eb4cece98e977fe71fb6f37d207a543c5669547a629e4806","nodeType":"YulIdentifier","src":"8181:88:29"},"nodeType":"YulFunctionCall","src":"8181:93:29"},"nodeType":"YulExpressionStatement","src":"8181:93:29"},{"nodeType":"YulAssignment","src":"8283:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8294:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"8299:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8290:3:29"},"nodeType":"YulFunctionCall","src":"8290:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8283:3:29"}]}]},"name":"abi_encode_t_stringliteral_9e725d0cb0796474eb4cece98e977fe71fb6f37d207a543c5669547a629e4806_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8076:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8084:3:29","type":""}],"src":"7942:366:29"},{"body":{"nodeType":"YulBlock","src":"8460:220:29","statements":[{"nodeType":"YulAssignment","src":"8470:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8536:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"8541:2:29","type":"","value":"58"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8477:58:29"},"nodeType":"YulFunctionCall","src":"8477:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8470:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8642:3:29"}],"functionName":{"name":"store_literal_in_memory_d1a9caf7371d7849cac8e00abf12726da9a4649405a81c36fdd95d9f9a7ca1b7","nodeType":"YulIdentifier","src":"8553:88:29"},"nodeType":"YulFunctionCall","src":"8553:93:29"},"nodeType":"YulExpressionStatement","src":"8553:93:29"},{"nodeType":"YulAssignment","src":"8655:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8666:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"8671:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8662:3:29"},"nodeType":"YulFunctionCall","src":"8662:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8655:3:29"}]}]},"name":"abi_encode_t_stringliteral_d1a9caf7371d7849cac8e00abf12726da9a4649405a81c36fdd95d9f9a7ca1b7_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8448:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8456:3:29","type":""}],"src":"8314:366:29"},{"body":{"nodeType":"YulBlock","src":"8832:220:29","statements":[{"nodeType":"YulAssignment","src":"8842:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8908:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"8913:2:29","type":"","value":"51"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8849:58:29"},"nodeType":"YulFunctionCall","src":"8849:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8842:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9014:3:29"}],"functionName":{"name":"store_literal_in_memory_dbecebe72e2da15cb1517ee278f7226b5f42240a1f2bcbb33f940af2c87579ee","nodeType":"YulIdentifier","src":"8925:88:29"},"nodeType":"YulFunctionCall","src":"8925:93:29"},"nodeType":"YulExpressionStatement","src":"8925:93:29"},{"nodeType":"YulAssignment","src":"9027:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9038:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"9043:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9034:3:29"},"nodeType":"YulFunctionCall","src":"9034:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9027:3:29"}]}]},"name":"abi_encode_t_stringliteral_dbecebe72e2da15cb1517ee278f7226b5f42240a1f2bcbb33f940af2c87579ee_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8820:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8828:3:29","type":""}],"src":"8686:366:29"},{"body":{"nodeType":"YulBlock","src":"9204:220:29","statements":[{"nodeType":"YulAssignment","src":"9214:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9280:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"9285:2:29","type":"","value":"52"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9221:58:29"},"nodeType":"YulFunctionCall","src":"9221:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9214:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9386:3:29"}],"functionName":{"name":"store_literal_in_memory_f672d3008f899b6a6167b66795e4c332b0f76a2f6917d25a6718ff9a0d7fb9d2","nodeType":"YulIdentifier","src":"9297:88:29"},"nodeType":"YulFunctionCall","src":"9297:93:29"},"nodeType":"YulExpressionStatement","src":"9297:93:29"},{"nodeType":"YulAssignment","src":"9399:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9410:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"9415:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9406:3:29"},"nodeType":"YulFunctionCall","src":"9406:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9399:3:29"}]}]},"name":"abi_encode_t_stringliteral_f672d3008f899b6a6167b66795e4c332b0f76a2f6917d25a6718ff9a0d7fb9d2_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9192:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9200:3:29","type":""}],"src":"9058:366:29"},{"body":{"nodeType":"YulBlock","src":"9493:53:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9510:3:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9533:5:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"9515:17:29"},"nodeType":"YulFunctionCall","src":"9515:24:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9503:6:29"},"nodeType":"YulFunctionCall","src":"9503:37:29"},"nodeType":"YulExpressionStatement","src":"9503:37:29"}]},"name":"abi_encode_t_uint256_to_t_uint256_library","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9481:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9488:3:29","type":""}],"src":"9430:116:29"},{"body":{"nodeType":"YulBlock","src":"9704:178:29","statements":[{"nodeType":"YulAssignment","src":"9714:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9726:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"9737:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9722:3:29"},"nodeType":"YulFunctionCall","src":"9722:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9714:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9848:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9861:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"9872:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9857:3:29"},"nodeType":"YulFunctionCall","src":"9857:17:29"}],"functionName":{"name":"abi_encode_t_array$_t_uint256_$2_memory_ptr_to_t_array$_t_uint256_$2_memory_ptr_fromStack_library","nodeType":"YulIdentifier","src":"9750:97:29"},"nodeType":"YulFunctionCall","src":"9750:125:29"},"nodeType":"YulExpressionStatement","src":"9750:125:29"}]},"name":"abi_encode_tuple_t_array$_t_uint256_$2_memory_ptr__to_t_array$_t_uint256_$2_memory_ptr__fromStack_library_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9676:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9688:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9699:4:29","type":""}],"src":"9552:330:29"},{"body":{"nodeType":"YulBlock","src":"10037:175:29","statements":[{"nodeType":"YulAssignment","src":"10047:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10059:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"10070:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10055:3:29"},"nodeType":"YulFunctionCall","src":"10055:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10047:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10178:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10191:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"10202:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10187:3:29"},"nodeType":"YulFunctionCall","src":"10187:17:29"}],"functionName":{"name":"abi_encode_t_array$_t_uint256_$2_storage_to_t_array$_t_uint256_$2_memory_ptr_fromStack_library","nodeType":"YulIdentifier","src":"10083:94:29"},"nodeType":"YulFunctionCall","src":"10083:122:29"},"nodeType":"YulExpressionStatement","src":"10083:122:29"}]},"name":"abi_encode_tuple_t_array$_t_uint256_$2_storage__to_t_array$_t_uint256_$2_memory_ptr__fromStack_library_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10009:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10021:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10032:4:29","type":""}],"src":"9888:324:29"},{"body":{"nodeType":"YulBlock","src":"10389:248:29","statements":[{"nodeType":"YulAssignment","src":"10399:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10411:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"10422:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10407:3:29"},"nodeType":"YulFunctionCall","src":"10407:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10399:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10446:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"10457:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10442:3:29"},"nodeType":"YulFunctionCall","src":"10442:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10465:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"10471:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10461:3:29"},"nodeType":"YulFunctionCall","src":"10461:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10435:6:29"},"nodeType":"YulFunctionCall","src":"10435:47:29"},"nodeType":"YulExpressionStatement","src":"10435:47:29"},{"nodeType":"YulAssignment","src":"10491:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10625:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_62c13f9e20ef6a49418227b3dc1613b161135d2222a0c493c73c44c2e361acda_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10499:124:29"},"nodeType":"YulFunctionCall","src":"10499:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10491:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_62c13f9e20ef6a49418227b3dc1613b161135d2222a0c493c73c44c2e361acda__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10369:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10384:4:29","type":""}],"src":"10218:419:29"},{"body":{"nodeType":"YulBlock","src":"10814:248:29","statements":[{"nodeType":"YulAssignment","src":"10824:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10836:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"10847:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10832:3:29"},"nodeType":"YulFunctionCall","src":"10832:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10824:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10871:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"10882:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10867:3:29"},"nodeType":"YulFunctionCall","src":"10867:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10890:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"10896:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10886:3:29"},"nodeType":"YulFunctionCall","src":"10886:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10860:6:29"},"nodeType":"YulFunctionCall","src":"10860:47:29"},"nodeType":"YulExpressionStatement","src":"10860:47:29"},{"nodeType":"YulAssignment","src":"10916:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11050:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_8b8db1558a0a283e0a9442c31e94b10cc2d3fde6e01b7fd4aa819ae25430befe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10924:124:29"},"nodeType":"YulFunctionCall","src":"10924:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10916:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_8b8db1558a0a283e0a9442c31e94b10cc2d3fde6e01b7fd4aa819ae25430befe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10794:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10809:4:29","type":""}],"src":"10643:419:29"},{"body":{"nodeType":"YulBlock","src":"11239:248:29","statements":[{"nodeType":"YulAssignment","src":"11249:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11261:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"11272:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11257:3:29"},"nodeType":"YulFunctionCall","src":"11257:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11249:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11296:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"11307:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11292:3:29"},"nodeType":"YulFunctionCall","src":"11292:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11315:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"11321:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11311:3:29"},"nodeType":"YulFunctionCall","src":"11311:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11285:6:29"},"nodeType":"YulFunctionCall","src":"11285:47:29"},"nodeType":"YulExpressionStatement","src":"11285:47:29"},{"nodeType":"YulAssignment","src":"11341:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11475:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_9e725d0cb0796474eb4cece98e977fe71fb6f37d207a543c5669547a629e4806_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11349:124:29"},"nodeType":"YulFunctionCall","src":"11349:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11341:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_9e725d0cb0796474eb4cece98e977fe71fb6f37d207a543c5669547a629e4806__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11219:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11234:4:29","type":""}],"src":"11068:419:29"},{"body":{"nodeType":"YulBlock","src":"11664:248:29","statements":[{"nodeType":"YulAssignment","src":"11674:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11686:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"11697:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11682:3:29"},"nodeType":"YulFunctionCall","src":"11682:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11674:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11721:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"11732:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11717:3:29"},"nodeType":"YulFunctionCall","src":"11717:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11740:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"11746:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11736:3:29"},"nodeType":"YulFunctionCall","src":"11736:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11710:6:29"},"nodeType":"YulFunctionCall","src":"11710:47:29"},"nodeType":"YulExpressionStatement","src":"11710:47:29"},{"nodeType":"YulAssignment","src":"11766:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11900:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_d1a9caf7371d7849cac8e00abf12726da9a4649405a81c36fdd95d9f9a7ca1b7_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11774:124:29"},"nodeType":"YulFunctionCall","src":"11774:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11766:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_d1a9caf7371d7849cac8e00abf12726da9a4649405a81c36fdd95d9f9a7ca1b7__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11644:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11659:4:29","type":""}],"src":"11493:419:29"},{"body":{"nodeType":"YulBlock","src":"12089:248:29","statements":[{"nodeType":"YulAssignment","src":"12099:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12111:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"12122:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12107:3:29"},"nodeType":"YulFunctionCall","src":"12107:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12099:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12146:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"12157:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12142:3:29"},"nodeType":"YulFunctionCall","src":"12142:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12165:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"12171:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12161:3:29"},"nodeType":"YulFunctionCall","src":"12161:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12135:6:29"},"nodeType":"YulFunctionCall","src":"12135:47:29"},"nodeType":"YulExpressionStatement","src":"12135:47:29"},{"nodeType":"YulAssignment","src":"12191:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12325:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_dbecebe72e2da15cb1517ee278f7226b5f42240a1f2bcbb33f940af2c87579ee_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12199:124:29"},"nodeType":"YulFunctionCall","src":"12199:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12191:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_dbecebe72e2da15cb1517ee278f7226b5f42240a1f2bcbb33f940af2c87579ee__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12069:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12084:4:29","type":""}],"src":"11918:419:29"},{"body":{"nodeType":"YulBlock","src":"12514:248:29","statements":[{"nodeType":"YulAssignment","src":"12524:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12536:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"12547:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12532:3:29"},"nodeType":"YulFunctionCall","src":"12532:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12524:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12571:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"12582:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12567:3:29"},"nodeType":"YulFunctionCall","src":"12567:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12590:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"12596:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12586:3:29"},"nodeType":"YulFunctionCall","src":"12586:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12560:6:29"},"nodeType":"YulFunctionCall","src":"12560:47:29"},"nodeType":"YulExpressionStatement","src":"12560:47:29"},{"nodeType":"YulAssignment","src":"12616:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12750:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_f672d3008f899b6a6167b66795e4c332b0f76a2f6917d25a6718ff9a0d7fb9d2_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12624:124:29"},"nodeType":"YulFunctionCall","src":"12624:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12616:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_f672d3008f899b6a6167b66795e4c332b0f76a2f6917d25a6718ff9a0d7fb9d2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12494:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12509:4:29","type":""}],"src":"12343:419:29"},{"body":{"nodeType":"YulBlock","src":"12838:28:29","statements":[{"nodeType":"YulAssignment","src":"12848:11:29","value":{"name":"ptr","nodeType":"YulIdentifier","src":"12856:3:29"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"12848:4:29"}]}]},"name":"array_dataslot_t_array$_t_uint256_$2_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"12825:3:29","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"12833:4:29","type":""}],"src":"12768:98:29"},{"body":{"nodeType":"YulBlock","src":"12939:28:29","statements":[{"nodeType":"YulAssignment","src":"12949:11:29","value":{"name":"ptr","nodeType":"YulIdentifier","src":"12957:3:29"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"12949:4:29"}]}]},"name":"array_dataslot_t_array$_t_uint256_$2_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"12926:3:29","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"12934:4:29","type":""}],"src":"12872:95:29"},{"body":{"nodeType":"YulBlock","src":"13045:32:29","statements":[{"nodeType":"YulAssignment","src":"13056:14:29","value":{"kind":"number","nodeType":"YulLiteral","src":"13066:4:29","type":"","value":"0x02"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"13056:6:29"}]}]},"name":"array_length_t_array$_t_uint256_$2_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13028:5:29","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"13038:6:29","type":""}],"src":"12973:104:29"},{"body":{"nodeType":"YulBlock","src":"13152:32:29","statements":[{"nodeType":"YulAssignment","src":"13163:14:29","value":{"kind":"number","nodeType":"YulLiteral","src":"13173:4:29","type":"","value":"0x02"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"13163:6:29"}]}]},"name":"array_length_t_array$_t_uint256_$2_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13135:5:29","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"13145:6:29","type":""}],"src":"13083:101:29"},{"body":{"nodeType":"YulBlock","src":"13263:38:29","statements":[{"nodeType":"YulAssignment","src":"13273:22:29","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"13285:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"13290:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13281:3:29"},"nodeType":"YulFunctionCall","src":"13281:14:29"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"13273:4:29"}]}]},"name":"array_nextElement_t_array$_t_uint256_$2_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"13250:3:29","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"13258:4:29","type":""}],"src":"13190:111:29"},{"body":{"nodeType":"YulBlock","src":"13377:38:29","statements":[{"nodeType":"YulAssignment","src":"13387:22:29","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"13399:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"13404:4:29","type":"","value":"0x01"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13395:3:29"},"nodeType":"YulFunctionCall","src":"13395:14:29"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"13387:4:29"}]}]},"name":"array_nextElement_t_array$_t_uint256_$2_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"13364:3:29","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"13372:4:29","type":""}],"src":"13307:108:29"},{"body":{"nodeType":"YulBlock","src":"13538:34:29","statements":[{"nodeType":"YulAssignment","src":"13548:18:29","value":{"name":"pos","nodeType":"YulIdentifier","src":"13563:3:29"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"13548:11:29"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_uint256_$2_memory_ptr_fromStack_library","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13510:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"13515:6:29","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"13526:11:29","type":""}],"src":"13421:151:29"},{"body":{"nodeType":"YulBlock","src":"13674:73:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13691:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"13696:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13684:6:29"},"nodeType":"YulFunctionCall","src":"13684:19:29"},"nodeType":"YulExpressionStatement","src":"13684:19:29"},{"nodeType":"YulAssignment","src":"13712:29:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13731:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"13736:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13727:3:29"},"nodeType":"YulFunctionCall","src":"13727:14:29"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"13712:11:29"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13646:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"13651:6:29","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"13662:11:29","type":""}],"src":"13578:169:29"},{"body":{"nodeType":"YulBlock","src":"13797:261:29","statements":[{"nodeType":"YulAssignment","src":"13807:25:29","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"13830:1:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"13812:17:29"},"nodeType":"YulFunctionCall","src":"13812:20:29"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"13807:1:29"}]},{"nodeType":"YulAssignment","src":"13841:25:29","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"13864:1:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"13846:17:29"},"nodeType":"YulFunctionCall","src":"13846:20:29"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"13841:1:29"}]},{"body":{"nodeType":"YulBlock","src":"14004:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"14006:16:29"},"nodeType":"YulFunctionCall","src":"14006:18:29"},"nodeType":"YulExpressionStatement","src":"14006:18:29"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"13925:1:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13932:66:29","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"y","nodeType":"YulIdentifier","src":"14000:1:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13928:3:29"},"nodeType":"YulFunctionCall","src":"13928:74:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13922:2:29"},"nodeType":"YulFunctionCall","src":"13922:81:29"},"nodeType":"YulIf","src":"13919:2:29"},{"nodeType":"YulAssignment","src":"14036:16:29","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"14047:1:29"},{"name":"y","nodeType":"YulIdentifier","src":"14050:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14043:3:29"},"nodeType":"YulFunctionCall","src":"14043:9:29"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"14036:3:29"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"13784:1:29","type":""},{"name":"y","nodeType":"YulTypedName","src":"13787:1:29","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"13793:3:29","type":""}],"src":"13753:305:29"},{"body":{"nodeType":"YulBlock","src":"14137:775:29","statements":[{"nodeType":"YulAssignment","src":"14147:15:29","value":{"name":"_power","nodeType":"YulIdentifier","src":"14156:6:29"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"14147:5:29"}]},{"nodeType":"YulAssignment","src":"14171:14:29","value":{"name":"_base","nodeType":"YulIdentifier","src":"14180:5:29"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"14171:4:29"}]},{"body":{"nodeType":"YulBlock","src":"14229:677:29","statements":[{"body":{"nodeType":"YulBlock","src":"14317:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"14319:16:29"},"nodeType":"YulFunctionCall","src":"14319:18:29"},"nodeType":"YulExpressionStatement","src":"14319:18:29"}]},"condition":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"14295:4:29"},{"arguments":[{"name":"max","nodeType":"YulIdentifier","src":"14305:3:29"},{"name":"base","nodeType":"YulIdentifier","src":"14310:4:29"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"14301:3:29"},"nodeType":"YulFunctionCall","src":"14301:14:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14292:2:29"},"nodeType":"YulFunctionCall","src":"14292:24:29"},"nodeType":"YulIf","src":"14289:2:29"},{"body":{"nodeType":"YulBlock","src":"14384:419:29","statements":[{"nodeType":"YulAssignment","src":"14764:25:29","value":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"14777:5:29"},{"name":"base","nodeType":"YulIdentifier","src":"14784:4:29"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"14773:3:29"},"nodeType":"YulFunctionCall","src":"14773:16:29"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"14764:5:29"}]}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"14359:8:29"},{"kind":"number","nodeType":"YulLiteral","src":"14369:1:29","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14355:3:29"},"nodeType":"YulFunctionCall","src":"14355:16:29"},"nodeType":"YulIf","src":"14352:2:29"},{"nodeType":"YulAssignment","src":"14816:23:29","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"14828:4:29"},{"name":"base","nodeType":"YulIdentifier","src":"14834:4:29"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"14824:3:29"},"nodeType":"YulFunctionCall","src":"14824:15:29"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"14816:4:29"}]},{"nodeType":"YulAssignment","src":"14852:44:29","value":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"14887:8:29"}],"functionName":{"name":"shift_right_1_unsigned","nodeType":"YulIdentifier","src":"14864:22:29"},"nodeType":"YulFunctionCall","src":"14864:32:29"},"variableNames":[{"name":"exponent","nodeType":"YulIdentifier","src":"14852:8:29"}]}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"14205:8:29"},{"kind":"number","nodeType":"YulLiteral","src":"14215:1:29","type":"","value":"1"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14202:2:29"},"nodeType":"YulFunctionCall","src":"14202:15:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"14218:2:29","statements":[]},"pre":{"nodeType":"YulBlock","src":"14198:3:29","statements":[]},"src":"14194:712:29"}]},"name":"checked_exp_helper","nodeType":"YulFunctionDefinition","parameters":[{"name":"_power","nodeType":"YulTypedName","src":"14092:6:29","type":""},{"name":"_base","nodeType":"YulTypedName","src":"14100:5:29","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"14107:8:29","type":""},{"name":"max","nodeType":"YulTypedName","src":"14117:3:29","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"14125:5:29","type":""},{"name":"base","nodeType":"YulTypedName","src":"14132:4:29","type":""}],"src":"14064:848:29"},{"body":{"nodeType":"YulBlock","src":"14984:219:29","statements":[{"nodeType":"YulAssignment","src":"14994:31:29","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"15020:4:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"15002:17:29"},"nodeType":"YulFunctionCall","src":"15002:23:29"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"14994:4:29"}]},{"nodeType":"YulAssignment","src":"15034:39:29","value":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"15064:8:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"15046:17:29"},"nodeType":"YulFunctionCall","src":"15046:27:29"},"variableNames":[{"name":"exponent","nodeType":"YulIdentifier","src":"15034:8:29"}]},{"nodeType":"YulAssignment","src":"15083:113:29","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"15113:4:29"},{"name":"exponent","nodeType":"YulIdentifier","src":"15119:8:29"},{"kind":"number","nodeType":"YulLiteral","src":"15129:66:29","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"checked_exp_unsigned","nodeType":"YulIdentifier","src":"15092:20:29"},"nodeType":"YulFunctionCall","src":"15092:104:29"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"15083:5:29"}]}]},"name":"checked_exp_t_uint256_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"base","nodeType":"YulTypedName","src":"14959:4:29","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"14965:8:29","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"14978:5:29","type":""}],"src":"14918:285:29"},{"body":{"nodeType":"YulBlock","src":"15269:1013:29","statements":[{"body":{"nodeType":"YulBlock","src":"15464:20:29","statements":[{"nodeType":"YulAssignment","src":"15466:10:29","value":{"kind":"number","nodeType":"YulLiteral","src":"15475:1:29","type":"","value":"1"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"15466:5:29"}]},{"nodeType":"YulLeave","src":"15477:5:29"}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"15454:8:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15447:6:29"},"nodeType":"YulFunctionCall","src":"15447:16:29"},"nodeType":"YulIf","src":"15444:2:29"},{"body":{"nodeType":"YulBlock","src":"15509:20:29","statements":[{"nodeType":"YulAssignment","src":"15511:10:29","value":{"kind":"number","nodeType":"YulLiteral","src":"15520:1:29","type":"","value":"0"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"15511:5:29"}]},{"nodeType":"YulLeave","src":"15522:5:29"}]},"condition":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"15503:4:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15496:6:29"},"nodeType":"YulFunctionCall","src":"15496:12:29"},"nodeType":"YulIf","src":"15493:2:29"},{"cases":[{"body":{"nodeType":"YulBlock","src":"15639:20:29","statements":[{"nodeType":"YulAssignment","src":"15641:10:29","value":{"kind":"number","nodeType":"YulLiteral","src":"15650:1:29","type":"","value":"1"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"15641:5:29"}]},{"nodeType":"YulLeave","src":"15652:5:29"}]},"nodeType":"YulCase","src":"15632:27:29","value":{"kind":"number","nodeType":"YulLiteral","src":"15637:1:29","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"15683:176:29","statements":[{"body":{"nodeType":"YulBlock","src":"15718:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"15720:16:29"},"nodeType":"YulFunctionCall","src":"15720:18:29"},"nodeType":"YulExpressionStatement","src":"15720:18:29"}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"15703:8:29"},{"kind":"number","nodeType":"YulLiteral","src":"15713:3:29","type":"","value":"255"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15700:2:29"},"nodeType":"YulFunctionCall","src":"15700:17:29"},"nodeType":"YulIf","src":"15697:2:29"},{"nodeType":"YulAssignment","src":"15753:25:29","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15766:1:29","type":"","value":"2"},{"name":"exponent","nodeType":"YulIdentifier","src":"15769:8:29"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"15762:3:29"},"nodeType":"YulFunctionCall","src":"15762:16:29"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"15753:5:29"}]},{"body":{"nodeType":"YulBlock","src":"15809:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"15811:16:29"},"nodeType":"YulFunctionCall","src":"15811:18:29"},"nodeType":"YulExpressionStatement","src":"15811:18:29"}]},"condition":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"15797:5:29"},{"name":"max","nodeType":"YulIdentifier","src":"15804:3:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15794:2:29"},"nodeType":"YulFunctionCall","src":"15794:14:29"},"nodeType":"YulIf","src":"15791:2:29"},{"nodeType":"YulLeave","src":"15844:5:29"}]},"nodeType":"YulCase","src":"15668:191:29","value":{"kind":"number","nodeType":"YulLiteral","src":"15673:1:29","type":"","value":"2"}}],"expression":{"name":"base","nodeType":"YulIdentifier","src":"15589:4:29"},"nodeType":"YulSwitch","src":"15582:277:29"},{"body":{"nodeType":"YulBlock","src":"15991:123:29","statements":[{"nodeType":"YulAssignment","src":"16005:28:29","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"16018:4:29"},{"name":"exponent","nodeType":"YulIdentifier","src":"16024:8:29"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"16014:3:29"},"nodeType":"YulFunctionCall","src":"16014:19:29"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"16005:5:29"}]},{"body":{"nodeType":"YulBlock","src":"16064:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"16066:16:29"},"nodeType":"YulFunctionCall","src":"16066:18:29"},"nodeType":"YulExpressionStatement","src":"16066:18:29"}]},"condition":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"16052:5:29"},{"name":"max","nodeType":"YulIdentifier","src":"16059:3:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16049:2:29"},"nodeType":"YulFunctionCall","src":"16049:14:29"},"nodeType":"YulIf","src":"16046:2:29"},{"nodeType":"YulLeave","src":"16099:5:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"15894:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"15900:2:29","type":"","value":"11"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"15891:2:29"},"nodeType":"YulFunctionCall","src":"15891:12:29"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"15908:8:29"},{"kind":"number","nodeType":"YulLiteral","src":"15918:2:29","type":"","value":"78"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"15905:2:29"},"nodeType":"YulFunctionCall","src":"15905:16:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15887:3:29"},"nodeType":"YulFunctionCall","src":"15887:35:29"},{"arguments":[{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"15943:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"15949:3:29","type":"","value":"307"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"15940:2:29"},"nodeType":"YulFunctionCall","src":"15940:13:29"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"15958:8:29"},{"kind":"number","nodeType":"YulLiteral","src":"15968:2:29","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"15955:2:29"},"nodeType":"YulFunctionCall","src":"15955:16:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15936:3:29"},"nodeType":"YulFunctionCall","src":"15936:36:29"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"15871:2:29"},"nodeType":"YulFunctionCall","src":"15871:111:29"},"nodeType":"YulIf","src":"15868:2:29"},{"nodeType":"YulAssignment","src":"16124:57:29","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16158:1:29","type":"","value":"1"},{"name":"base","nodeType":"YulIdentifier","src":"16161:4:29"},{"name":"exponent","nodeType":"YulIdentifier","src":"16167:8:29"},{"name":"max","nodeType":"YulIdentifier","src":"16177:3:29"}],"functionName":{"name":"checked_exp_helper","nodeType":"YulIdentifier","src":"16139:18:29"},"nodeType":"YulFunctionCall","src":"16139:42:29"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"16124:5:29"},{"name":"base","nodeType":"YulIdentifier","src":"16131:4:29"}]},{"body":{"nodeType":"YulBlock","src":"16220:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"16222:16:29"},"nodeType":"YulFunctionCall","src":"16222:18:29"},"nodeType":"YulExpressionStatement","src":"16222:18:29"}]},"condition":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"16197:5:29"},{"arguments":[{"name":"max","nodeType":"YulIdentifier","src":"16208:3:29"},{"name":"base","nodeType":"YulIdentifier","src":"16213:4:29"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"16204:3:29"},"nodeType":"YulFunctionCall","src":"16204:14:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16194:2:29"},"nodeType":"YulFunctionCall","src":"16194:25:29"},"nodeType":"YulIf","src":"16191:2:29"},{"nodeType":"YulAssignment","src":"16251:25:29","value":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"16264:5:29"},{"name":"base","nodeType":"YulIdentifier","src":"16271:4:29"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"16260:3:29"},"nodeType":"YulFunctionCall","src":"16260:16:29"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"16251:5:29"}]}]},"name":"checked_exp_unsigned","nodeType":"YulFunctionDefinition","parameters":[{"name":"base","nodeType":"YulTypedName","src":"15239:4:29","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"15245:8:29","type":""},{"name":"max","nodeType":"YulTypedName","src":"15255:3:29","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"15263:5:29","type":""}],"src":"15209:1073:29"},{"body":{"nodeType":"YulBlock","src":"16346:32:29","statements":[{"nodeType":"YulAssignment","src":"16356:16:29","value":{"name":"value","nodeType":"YulIdentifier","src":"16367:5:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"16356:7:29"}]}]},"name":"cleanup_from_storage_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16328:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"16338:7:29","type":""}],"src":"16288:90:29"},{"body":{"nodeType":"YulBlock","src":"16467:32:29","statements":[{"nodeType":"YulAssignment","src":"16477:16:29","value":{"name":"value","nodeType":"YulIdentifier","src":"16488:5:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"16477:7:29"}]}]},"name":"cleanup_t_struct$_IncrementalTreeData_$1197_storage_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16449:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"16459:7:29","type":""}],"src":"16384:115:29"},{"body":{"nodeType":"YulBlock","src":"16550:32:29","statements":[{"nodeType":"YulAssignment","src":"16560:16:29","value":{"name":"value","nodeType":"YulIdentifier","src":"16571:5:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"16560:7:29"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16532:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"16542:7:29","type":""}],"src":"16505:77:29"},{"body":{"nodeType":"YulBlock","src":"16631:43:29","statements":[{"nodeType":"YulAssignment","src":"16641:27:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16656:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"16663:4:29","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16652:3:29"},"nodeType":"YulFunctionCall","src":"16652:16:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"16641:7:29"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16613:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"16623:7:29","type":""}],"src":"16588:86:29"},{"body":{"nodeType":"YulBlock","src":"16755:91:29","statements":[{"nodeType":"YulAssignment","src":"16765:75:29","value":{"arguments":[{"arguments":[{"name":"slot_value","nodeType":"YulIdentifier","src":"16828:10:29"}],"functionName":{"name":"shift_right_0_unsigned","nodeType":"YulIdentifier","src":"16805:22:29"},"nodeType":"YulFunctionCall","src":"16805:34:29"}],"functionName":{"name":"cleanup_from_storage_t_uint256","nodeType":"YulIdentifier","src":"16774:30:29"},"nodeType":"YulFunctionCall","src":"16774:66:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"16765:5:29"}]}]},"name":"extract_from_storage_value_offset_0t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot_value","nodeType":"YulTypedName","src":"16734:10:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"16749:5:29","type":""}],"src":"16680:166:29"},{"body":{"nodeType":"YulBlock","src":"16880:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16897:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16900:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16890:6:29"},"nodeType":"YulFunctionCall","src":"16890:88:29"},"nodeType":"YulExpressionStatement","src":"16890:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16994:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"16997:4:29","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16987:6:29"},"nodeType":"YulFunctionCall","src":"16987:15:29"},"nodeType":"YulExpressionStatement","src":"16987:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17018:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"17021:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17011:6:29"},"nodeType":"YulFunctionCall","src":"17011:15:29"},"nodeType":"YulExpressionStatement","src":"17011:15:29"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"16852:180:29"},{"body":{"nodeType":"YulBlock","src":"17099:83:29","statements":[{"nodeType":"YulAssignment","src":"17109:66:29","value":{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"17169:4:29"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"17163:5:29"},"nodeType":"YulFunctionCall","src":"17163:11:29"}],"functionName":{"name":"extract_from_storage_value_offset_0t_uint256","nodeType":"YulIdentifier","src":"17118:44:29"},"nodeType":"YulFunctionCall","src":"17118:57:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"17109:5:29"}]}]},"name":"read_from_storage_offset_0_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"17084:4:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"17093:5:29","type":""}],"src":"17038:144:29"},{"body":{"nodeType":"YulBlock","src":"17239:51:29","statements":[{"nodeType":"YulAssignment","src":"17249:34:29","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17274:1:29","type":"","value":"0"},{"name":"value","nodeType":"YulIdentifier","src":"17277:5:29"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"17270:3:29"},"nodeType":"YulFunctionCall","src":"17270:13:29"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"17249:8:29"}]}]},"name":"shift_right_0_unsigned","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17220:5:29","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"17230:8:29","type":""}],"src":"17188:102:29"},{"body":{"nodeType":"YulBlock","src":"17347:51:29","statements":[{"nodeType":"YulAssignment","src":"17357:34:29","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17382:1:29","type":"","value":"1"},{"name":"value","nodeType":"YulIdentifier","src":"17385:5:29"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"17378:3:29"},"nodeType":"YulFunctionCall","src":"17378:13:29"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"17357:8:29"}]}]},"name":"shift_right_1_unsigned","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17328:5:29","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"17338:8:29","type":""}],"src":"17296:102:29"},{"body":{"nodeType":"YulBlock","src":"17510:116:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17532:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"17540:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17528:3:29"},"nodeType":"YulFunctionCall","src":"17528:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"17544:34:29","type":"","value":"IncrementalBinaryTree: tree is f"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17521:6:29"},"nodeType":"YulFunctionCall","src":"17521:58:29"},"nodeType":"YulExpressionStatement","src":"17521:58:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17600:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"17608:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17596:3:29"},"nodeType":"YulFunctionCall","src":"17596:15:29"},{"kind":"string","nodeType":"YulLiteral","src":"17613:5:29","type":"","value":"ull"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17589:6:29"},"nodeType":"YulFunctionCall","src":"17589:30:29"},"nodeType":"YulExpressionStatement","src":"17589:30:29"}]},"name":"store_literal_in_memory_62c13f9e20ef6a49418227b3dc1613b161135d2222a0c493c73c44c2e361acda","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"17502:6:29","type":""}],"src":"17404:222:29"},{"body":{"nodeType":"YulBlock","src":"17738:137:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17760:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"17768:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17756:3:29"},"nodeType":"YulFunctionCall","src":"17756:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"17772:34:29","type":"","value":"IncrementalBinaryTree: leaf must"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17749:6:29"},"nodeType":"YulFunctionCall","src":"17749:58:29"},"nodeType":"YulExpressionStatement","src":"17749:58:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17828:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"17836:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17824:3:29"},"nodeType":"YulFunctionCall","src":"17824:15:29"},{"kind":"string","nodeType":"YulLiteral","src":"17841:26:29","type":"","value":" be < SNARK_SCALAR_FIELD"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17817:6:29"},"nodeType":"YulFunctionCall","src":"17817:51:29"},"nodeType":"YulExpressionStatement","src":"17817:51:29"}]},"name":"store_literal_in_memory_8b8db1558a0a283e0a9442c31e94b10cc2d3fde6e01b7fd4aa819ae25430befe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"17730:6:29","type":""}],"src":"17632:243:29"},{"body":{"nodeType":"YulBlock","src":"17987:145:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18009:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"18017:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18005:3:29"},"nodeType":"YulFunctionCall","src":"18005:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"18021:34:29","type":"","value":"IncrementalBinaryTree: sibling n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17998:6:29"},"nodeType":"YulFunctionCall","src":"17998:58:29"},"nodeType":"YulExpressionStatement","src":"17998:58:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18077:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"18085:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18073:3:29"},"nodeType":"YulFunctionCall","src":"18073:15:29"},{"kind":"string","nodeType":"YulLiteral","src":"18090:34:29","type":"","value":"ode must be < SNARK_SCALAR_FIELD"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18066:6:29"},"nodeType":"YulFunctionCall","src":"18066:59:29"},"nodeType":"YulExpressionStatement","src":"18066:59:29"}]},"name":"store_literal_in_memory_9e725d0cb0796474eb4cece98e977fe71fb6f37d207a543c5669547a629e4806","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"17979:6:29","type":""}],"src":"17881:251:29"},{"body":{"nodeType":"YulBlock","src":"18244:139:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18266:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"18274:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18262:3:29"},"nodeType":"YulFunctionCall","src":"18262:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"18278:34:29","type":"","value":"IncrementalBinaryTree: tree dept"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18255:6:29"},"nodeType":"YulFunctionCall","src":"18255:58:29"},"nodeType":"YulExpressionStatement","src":"18255:58:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18334:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"18342:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18330:3:29"},"nodeType":"YulFunctionCall","src":"18330:15:29"},{"kind":"string","nodeType":"YulLiteral","src":"18347:28:29","type":"","value":"h must be between 1 and 32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18323:6:29"},"nodeType":"YulFunctionCall","src":"18323:53:29"},"nodeType":"YulExpressionStatement","src":"18323:53:29"}]},"name":"store_literal_in_memory_d1a9caf7371d7849cac8e00abf12726da9a4649405a81c36fdd95d9f9a7ca1b7","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18236:6:29","type":""}],"src":"18138:245:29"},{"body":{"nodeType":"YulBlock","src":"18495:132:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18517:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"18525:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18513:3:29"},"nodeType":"YulFunctionCall","src":"18513:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"18529:34:29","type":"","value":"IncrementalBinaryTree: leaf is n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18506:6:29"},"nodeType":"YulFunctionCall","src":"18506:58:29"},"nodeType":"YulExpressionStatement","src":"18506:58:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18585:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"18593:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18581:3:29"},"nodeType":"YulFunctionCall","src":"18581:15:29"},{"kind":"string","nodeType":"YulLiteral","src":"18598:21:29","type":"","value":"ot part of the tree"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18574:6:29"},"nodeType":"YulFunctionCall","src":"18574:46:29"},"nodeType":"YulExpressionStatement","src":"18574:46:29"}]},"name":"store_literal_in_memory_dbecebe72e2da15cb1517ee278f7226b5f42240a1f2bcbb33f940af2c87579ee","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18487:6:29","type":""}],"src":"18389:238:29"},{"body":{"nodeType":"YulBlock","src":"18739:133:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18761:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"18769:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18757:3:29"},"nodeType":"YulFunctionCall","src":"18757:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"18773:34:29","type":"","value":"IncrementalBinaryTree: length of"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18750:6:29"},"nodeType":"YulFunctionCall","src":"18750:58:29"},"nodeType":"YulExpressionStatement","src":"18750:58:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18829:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"18837:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18825:3:29"},"nodeType":"YulFunctionCall","src":"18825:15:29"},{"kind":"string","nodeType":"YulLiteral","src":"18842:22:29","type":"","value":" path is not correct"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18818:6:29"},"nodeType":"YulFunctionCall","src":"18818:47:29"},"nodeType":"YulExpressionStatement","src":"18818:47:29"}]},"name":"store_literal_in_memory_f672d3008f899b6a6167b66795e4c332b0f76a2f6917d25a6718ff9a0d7fb9d2","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18731:6:29","type":""}],"src":"18633:239:29"},{"body":{"nodeType":"YulBlock","src":"18959:117:29","statements":[{"body":{"nodeType":"YulBlock","src":"19054:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19063:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19066:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19056:6:29"},"nodeType":"YulFunctionCall","src":"19056:12:29"},"nodeType":"YulExpressionStatement","src":"19056:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18982:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19045:5:29"}],"functionName":{"name":"cleanup_t_struct$_IncrementalTreeData_$1197_storage_ptr","nodeType":"YulIdentifier","src":"18989:55:29"},"nodeType":"YulFunctionCall","src":"18989:62:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"18979:2:29"},"nodeType":"YulFunctionCall","src":"18979:73:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"18972:6:29"},"nodeType":"YulFunctionCall","src":"18972:81:29"},"nodeType":"YulIf","src":"18969:2:29"}]},"name":"validator_revert_t_struct$_IncrementalTreeData_$1197_storage_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18952:5:29","type":""}],"src":"18878:198:29"},{"body":{"nodeType":"YulBlock","src":"19125:79:29","statements":[{"body":{"nodeType":"YulBlock","src":"19182:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19191:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19194:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19184:6:29"},"nodeType":"YulFunctionCall","src":"19184:12:29"},"nodeType":"YulExpressionStatement","src":"19184:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19148:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19173:5:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"19155:17:29"},"nodeType":"YulFunctionCall","src":"19155:24:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"19145:2:29"},"nodeType":"YulFunctionCall","src":"19145:35:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"19138:6:29"},"nodeType":"YulFunctionCall","src":"19138:43:29"},"nodeType":"YulIf","src":"19135:2:29"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"19118:5:29","type":""}],"src":"19082:122:29"},{"body":{"nodeType":"YulBlock","src":"19251:77:29","statements":[{"body":{"nodeType":"YulBlock","src":"19306:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19315:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19318:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19308:6:29"},"nodeType":"YulFunctionCall","src":"19308:12:29"},"nodeType":"YulExpressionStatement","src":"19308:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19274:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19297:5:29"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"19281:15:29"},"nodeType":"YulFunctionCall","src":"19281:22:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"19271:2:29"},"nodeType":"YulFunctionCall","src":"19271:33:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"19264:6:29"},"nodeType":"YulFunctionCall","src":"19264:41:29"},"nodeType":"YulIf","src":"19261:2:29"}]},"name":"validator_revert_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"19244:5:29","type":""}],"src":"19210:118:29"}]},"contents":"{\n\n    // uint256[]\n    function abi_decode_t_array$_t_uint256_$dyn_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x20)), end) { revert(0, 0) }\n    }\n\n    // uint8[]\n    function abi_decode_t_array$_t_uint8_$dyn_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x20)), end) { revert(0, 0) }\n    }\n\n    function abi_decode_t_struct$_IncrementalTreeData_$1197_storage_ptr(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_struct$_IncrementalTreeData_$1197_storage_ptr(value)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_t_uint8(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint8(value)\n    }\n\n    function abi_decode_tuple_t_struct$_IncrementalTreeData_$1197_storage_ptrt_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_struct$_IncrementalTreeData_$1197_storage_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_struct$_IncrementalTreeData_$1197_storage_ptrt_uint256t_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint8_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5 {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_struct$_IncrementalTreeData_$1197_storage_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value2, value3 := abi_decode_t_array$_t_uint256_$dyn_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value4, value5 := abi_decode_t_array$_t_uint8_$dyn_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_struct$_IncrementalTreeData_$1197_storage_ptrt_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_struct$_IncrementalTreeData_$1197_storage_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_struct$_IncrementalTreeData_$1197_storage_ptrt_uint256t_uint256t_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint8_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6 {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_struct$_IncrementalTreeData_$1197_storage_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value3, value4 := abi_decode_t_array$_t_uint256_$dyn_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 128))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value5, value6 := abi_decode_t_array$_t_uint8_$dyn_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint8(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint8(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encodeUpdatedPos_t_uint256_to_t_uint256_library(value0, pos) -> updatedPos {\n        abi_encode_t_uint256_to_t_uint256_library(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    // uint256[2] -> uint256[2]\n    function abi_encode_t_array$_t_uint256_$2_memory_ptr_to_t_array$_t_uint256_$2_memory_ptr_fromStack_library(value, pos)  {\n        let length := array_length_t_array$_t_uint256_$2_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_uint256_$2_memory_ptr_fromStack_library(pos, length)\n        let baseRef := array_dataslot_t_array$_t_uint256_$2_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_uint256_to_t_uint256_library(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_uint256_$2_memory_ptr(srcPtr)\n        }\n\n    }\n\n    // uint256[2] -> uint256[2]\n    function abi_encode_t_array$_t_uint256_$2_storage_to_t_array$_t_uint256_$2_memory_ptr_fromStack_library(value, pos)  {\n        let length := array_length_t_array$_t_uint256_$2_storage(value)\n        pos := array_storeLengthForEncoding_t_array$_t_uint256_$2_memory_ptr_fromStack_library(pos, length)\n        let baseRef := array_dataslot_t_array$_t_uint256_$2_storage(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := read_from_storage_offset_0_t_uint256(srcPtr)\n            pos := abi_encodeUpdatedPos_t_uint256_to_t_uint256_library(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_uint256_$2_storage(srcPtr)\n        }\n\n    }\n\n    function abi_encode_t_stringliteral_62c13f9e20ef6a49418227b3dc1613b161135d2222a0c493c73c44c2e361acda_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 35)\n        store_literal_in_memory_62c13f9e20ef6a49418227b3dc1613b161135d2222a0c493c73c44c2e361acda(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_8b8db1558a0a283e0a9442c31e94b10cc2d3fde6e01b7fd4aa819ae25430befe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 56)\n        store_literal_in_memory_8b8db1558a0a283e0a9442c31e94b10cc2d3fde6e01b7fd4aa819ae25430befe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_9e725d0cb0796474eb4cece98e977fe71fb6f37d207a543c5669547a629e4806_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 64)\n        store_literal_in_memory_9e725d0cb0796474eb4cece98e977fe71fb6f37d207a543c5669547a629e4806(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_d1a9caf7371d7849cac8e00abf12726da9a4649405a81c36fdd95d9f9a7ca1b7_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 58)\n        store_literal_in_memory_d1a9caf7371d7849cac8e00abf12726da9a4649405a81c36fdd95d9f9a7ca1b7(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_dbecebe72e2da15cb1517ee278f7226b5f42240a1f2bcbb33f940af2c87579ee_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 51)\n        store_literal_in_memory_dbecebe72e2da15cb1517ee278f7226b5f42240a1f2bcbb33f940af2c87579ee(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_f672d3008f899b6a6167b66795e4c332b0f76a2f6917d25a6718ff9a0d7fb9d2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 52)\n        store_literal_in_memory_f672d3008f899b6a6167b66795e4c332b0f76a2f6917d25a6718ff9a0d7fb9d2(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_library(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_array$_t_uint256_$2_memory_ptr__to_t_array$_t_uint256_$2_memory_ptr__fromStack_library_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_array$_t_uint256_$2_memory_ptr_to_t_array$_t_uint256_$2_memory_ptr_fromStack_library(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_array$_t_uint256_$2_storage__to_t_array$_t_uint256_$2_memory_ptr__fromStack_library_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_array$_t_uint256_$2_storage_to_t_array$_t_uint256_$2_memory_ptr_fromStack_library(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_62c13f9e20ef6a49418227b3dc1613b161135d2222a0c493c73c44c2e361acda__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_62c13f9e20ef6a49418227b3dc1613b161135d2222a0c493c73c44c2e361acda_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_8b8db1558a0a283e0a9442c31e94b10cc2d3fde6e01b7fd4aa819ae25430befe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_8b8db1558a0a283e0a9442c31e94b10cc2d3fde6e01b7fd4aa819ae25430befe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_9e725d0cb0796474eb4cece98e977fe71fb6f37d207a543c5669547a629e4806__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9e725d0cb0796474eb4cece98e977fe71fb6f37d207a543c5669547a629e4806_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_d1a9caf7371d7849cac8e00abf12726da9a4649405a81c36fdd95d9f9a7ca1b7__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d1a9caf7371d7849cac8e00abf12726da9a4649405a81c36fdd95d9f9a7ca1b7_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_dbecebe72e2da15cb1517ee278f7226b5f42240a1f2bcbb33f940af2c87579ee__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_dbecebe72e2da15cb1517ee278f7226b5f42240a1f2bcbb33f940af2c87579ee_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_f672d3008f899b6a6167b66795e4c332b0f76a2f6917d25a6718ff9a0d7fb9d2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_f672d3008f899b6a6167b66795e4c332b0f76a2f6917d25a6718ff9a0d7fb9d2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_dataslot_t_array$_t_uint256_$2_memory_ptr(ptr) -> data {\n        data := ptr\n\n    }\n\n    function array_dataslot_t_array$_t_uint256_$2_storage(ptr) -> data {\n        data := ptr\n\n    }\n\n    function array_length_t_array$_t_uint256_$2_memory_ptr(value) -> length {\n\n        length := 0x02\n\n    }\n\n    function array_length_t_array$_t_uint256_$2_storage(value) -> length {\n\n        length := 0x02\n\n    }\n\n    function array_nextElement_t_array$_t_uint256_$2_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    function array_nextElement_t_array$_t_uint256_$2_storage(ptr) -> next {\n        next := add(ptr, 0x01)\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_uint256_$2_memory_ptr_fromStack_library(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function checked_exp_helper(_power, _base, exponent, max) -> power, base {\n        power := _power\n        base  := _base\n        for { } gt(exponent, 1) {}\n        {\n            // overflow check for base * base\n            if gt(base, div(max, base)) { panic_error_0x11() }\n            if and(exponent, 1)\n            {\n                // No checks for power := mul(power, base) needed, because the check\n                // for base * base above is sufficient, since:\n                // |power| <= base (proof by induction) and thus:\n                // |power * base| <= base * base <= max <= |min| (for signed)\n                // (this is equally true for signed and unsigned exp)\n                power := mul(power, base)\n            }\n            base := mul(base, base)\n            exponent := shift_right_1_unsigned(exponent)\n        }\n    }\n\n    function checked_exp_t_uint256_t_uint256(base, exponent) -> power {\n        base := cleanup_t_uint256(base)\n        exponent := cleanup_t_uint256(exponent)\n\n        power := checked_exp_unsigned(base, exponent, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n\n    }\n\n    function checked_exp_unsigned(base, exponent, max) -> power {\n        // This function currently cannot be inlined because of the\n        // \"leave\" statements. We have to improve the optimizer.\n\n        // Note that 0**0 == 1\n        if iszero(exponent) { power := 1 leave }\n        if iszero(base) { power := 0 leave }\n\n        // Specializations for small bases\n        switch base\n        // 0 is handled above\n        case 1 { power := 1 leave }\n        case 2\n        {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := exp(2, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n        if or(\n            and(lt(base, 11), lt(exponent, 78)),\n            and(lt(base, 307), lt(exponent, 32))\n        )\n        {\n            power := exp(base, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n\n        power, base := checked_exp_helper(1, base, exponent, max)\n\n        if gt(power, div(max, base)) { panic_error_0x11() }\n        power := mul(power, base)\n    }\n\n    function cleanup_from_storage_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_struct$_IncrementalTreeData_$1197_storage_ptr(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function extract_from_storage_value_offset_0t_uint256(slot_value) -> value {\n        value := cleanup_from_storage_t_uint256(shift_right_0_unsigned(slot_value))\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function read_from_storage_offset_0_t_uint256(slot) -> value {\n        value := extract_from_storage_value_offset_0t_uint256(sload(slot))\n\n    }\n\n    function shift_right_0_unsigned(value) -> newValue {\n        newValue :=\n\n        shr(0, value)\n\n    }\n\n    function shift_right_1_unsigned(value) -> newValue {\n        newValue :=\n\n        shr(1, value)\n\n    }\n\n    function store_literal_in_memory_62c13f9e20ef6a49418227b3dc1613b161135d2222a0c493c73c44c2e361acda(memPtr) {\n\n        mstore(add(memPtr, 0), \"IncrementalBinaryTree: tree is f\")\n\n        mstore(add(memPtr, 32), \"ull\")\n\n    }\n\n    function store_literal_in_memory_8b8db1558a0a283e0a9442c31e94b10cc2d3fde6e01b7fd4aa819ae25430befe(memPtr) {\n\n        mstore(add(memPtr, 0), \"IncrementalBinaryTree: leaf must\")\n\n        mstore(add(memPtr, 32), \" be < SNARK_SCALAR_FIELD\")\n\n    }\n\n    function store_literal_in_memory_9e725d0cb0796474eb4cece98e977fe71fb6f37d207a543c5669547a629e4806(memPtr) {\n\n        mstore(add(memPtr, 0), \"IncrementalBinaryTree: sibling n\")\n\n        mstore(add(memPtr, 32), \"ode must be < SNARK_SCALAR_FIELD\")\n\n    }\n\n    function store_literal_in_memory_d1a9caf7371d7849cac8e00abf12726da9a4649405a81c36fdd95d9f9a7ca1b7(memPtr) {\n\n        mstore(add(memPtr, 0), \"IncrementalBinaryTree: tree dept\")\n\n        mstore(add(memPtr, 32), \"h must be between 1 and 32\")\n\n    }\n\n    function store_literal_in_memory_dbecebe72e2da15cb1517ee278f7226b5f42240a1f2bcbb33f940af2c87579ee(memPtr) {\n\n        mstore(add(memPtr, 0), \"IncrementalBinaryTree: leaf is n\")\n\n        mstore(add(memPtr, 32), \"ot part of the tree\")\n\n    }\n\n    function store_literal_in_memory_f672d3008f899b6a6167b66795e4c332b0f76a2f6917d25a6718ff9a0d7fb9d2(memPtr) {\n\n        mstore(add(memPtr, 0), \"IncrementalBinaryTree: length of\")\n\n        mstore(add(memPtr, 32), \" path is not correct\")\n\n    }\n\n    function validator_revert_t_struct$_IncrementalTreeData_$1197_storage_ptr(value) {\n        if iszero(eq(value, cleanup_t_struct$_IncrementalTreeData_$1197_storage_ptr(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint8(value) {\n        if iszero(eq(value, cleanup_t_uint8(value))) { revert(0, 0) }\n    }\n\n}\n","id":29,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{"@creds-protocol/contracts/zk-kit/incremental-merkle-tree.sol/Hashes.sol":{"PoseidonT3":[{"length":20,"start":534},{"length":20,"start":1123},{"length":20,"start":1787},{"length":20,"start":2259},{"length":20,"start":2982},{"length":20,"start":3210}]}},"object":"73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c80630629596f1461005b5780631095fbb414610084578063168703fa146100ad578063a5478827146100d6575b600080fd5b81801561006757600080fd5b50610082600480360381019061007d9190610f0a565b6100ff565b005b81801561009057600080fd5b506100ab60048036038101906100a69190610fa5565b61012b565b005b8180156100b957600080fd5b506100d460048036038101906100cf9190610ece565b6102cb565b005b8180156100e257600080fd5b506100fd60048036038101906100f89190610ff4565b610540565b005b61012386868860030160008081526020019081526020016000205487878787610540565b505050505050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001811061018d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610184906112fa565b60405180910390fd5b6000821180156101a15750602060ff168211155b6101e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d79061133a565b60405180910390fd5b81836000018190555060005b828160ff1610156102bc57818460030160008360ff1681526020019081526020016000208190555073__$770c9b13768732c92daf187f48205e6acb$__6329a5f2f66040518060400160405280858152602001858152506040518263ffffffff1660e01b815260040161025f91906112a4565b60206040518083038186803b15801561027757600080fd5b505af415801561028b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102af91906110a4565b91508060010190506101ec565b50808360010181905550505050565b6000826000015490507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018210610336576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032d906112fa565b60405180910390fd5b80600261034391906114a3565b836002015410610388576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037f906112da565b60405180910390fd5b600083600201549050600083905060005b838160ff1610156105135760006001841614156104095760405180604001604052808381526020018760030160008460ff168152602001908152602001600020548152508660040160008360ff168152602001908152602001600020906002610403929190610d89565b50610461565b818660040160008360ff16815260200190815260200160002060016002811061045b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b01819055505b73__$770c9b13768732c92daf187f48205e6acb$__6329a5f2f68760040160008460ff1681526020019081526020016000206040518263ffffffff1660e01b81526004016104af91906112bf565b60206040518083038186803b1580156104c757600080fd5b505af41580156104db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ff91906110a4565b9150600183901c9250806001019050610399565b50808560010181905550600185600201600082825461053291906113fa565b925050819055505050505050565b61054e8787868686866109d1565b61058d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105849061135a565b60405180910390fd5b600087600001549050600086905060005b828160ff1610156109bc57600085858360ff168181106105e7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906105fc91906110cd565b60ff1614156107dd578960040160008260ff168152602001908152602001600020600160028110610656577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b015487878360ff16818110610694577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013514156106f957818a60040160008360ff1681526020019081526020016000206000600281106106f3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b01819055505b73__$770c9b13768732c92daf187f48205e6acb$__6329a5f2f660405180604001604052808581526020018a8a8660ff16818110610760577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358152506040518263ffffffff1660e01b815260040161078691906112a4565b60206040518083038186803b15801561079e57600080fd5b505af41580156107b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d691906110a4565b91506109b1565b8960040160008260ff16815260200190815260200160002060006002811061082e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b015487878360ff1681811061086c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013514156108d157818a60040160008360ff1681526020019081526020016000206001600281106108cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b01819055505b73__$770c9b13768732c92daf187f48205e6acb$__6329a5f2f660405180604001604052808a8a8660ff16818110610932577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358152602001858152506040518263ffffffff1660e01b815260040161095e91906112a4565b60206040518083038186803b15801561097657600080fd5b505af415801561098a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ae91906110a4565b91505b80600101905061059e565b50808960010181905550505050505050505050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018610610a35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2c906112fa565b60405180910390fd5b6000876000015490508084849050148015610a5257508086869050145b610a91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a889061137a565b60405180910390fd5b600087905060005b828160ff161015610d73577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000188888360ff16818110610b01577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013510610b48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3f9061131a565b60405180910390fd5b600086868360ff16818110610b86577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610b9b91906110cd565b60ff161415610c885773__$770c9b13768732c92daf187f48205e6acb$__6329a5f2f660405180604001604052808581526020018b8b8660ff16818110610c0b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358152506040518263ffffffff1660e01b8152600401610c3191906112a4565b60206040518083038186803b158015610c4957600080fd5b505af4158015610c5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8191906110a4565b9150610d68565b73__$770c9b13768732c92daf187f48205e6acb$__6329a5f2f660405180604001604052808b8b8660ff16818110610ce9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358152602001858152506040518263ffffffff1660e01b8152600401610d1591906112a4565b60206040518083038186803b158015610d2d57600080fd5b505af4158015610d41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6591906110a4565b91505b806001019050610a99565b5088600101548114925050509695505050505050565b8260028101928215610db8579160200282015b82811115610db7578251825591602001919060010190610d9c565b5b509050610dc59190610dc9565b5090565b5b80821115610de2576000816000905550600101610dca565b5090565b60008083601f840112610df857600080fd5b8235905067ffffffffffffffff811115610e1157600080fd5b602083019150836020820283011115610e2957600080fd5b9250929050565b60008083601f840112610e4257600080fd5b8235905067ffffffffffffffff811115610e5b57600080fd5b602083019150836020820283011115610e7357600080fd5b9250929050565b600081359050610e898161183c565b92915050565b600081359050610e9e81611853565b92915050565b600081519050610eb381611853565b92915050565b600081359050610ec88161186a565b92915050565b60008060408385031215610ee157600080fd5b6000610eef85828601610e7a565b9250506020610f0085828601610e8f565b9150509250929050565b60008060008060008060808789031215610f2357600080fd5b6000610f3189828a01610e7a565b9650506020610f4289828a01610e8f565b955050604087013567ffffffffffffffff811115610f5f57600080fd5b610f6b89828a01610de6565b9450945050606087013567ffffffffffffffff811115610f8a57600080fd5b610f9689828a01610e30565b92509250509295509295509295565b600080600060608486031215610fba57600080fd5b6000610fc886828701610e7a565b9350506020610fd986828701610e8f565b9250506040610fea86828701610e8f565b9150509250925092565b600080600080600080600060a0888a03121561100f57600080fd5b600061101d8a828b01610e7a565b975050602061102e8a828b01610e8f565b965050604061103f8a828b01610e8f565b955050606088013567ffffffffffffffff81111561105c57600080fd5b6110688a828b01610de6565b9450945050608088013567ffffffffffffffff81111561108757600080fd5b6110938a828b01610e30565b925092505092959891949750929550565b6000602082840312156110b657600080fd5b60006110c484828501610ea4565b91505092915050565b6000602082840312156110df57600080fd5b60006110ed84828501610eb9565b91505092915050565b60006111028383611295565b60208301905092915050565b611117816113ae565b61112181846113de565b925061112c8261139a565b8060005b8381101561115d57815161114487826110f6565b965061114f836113c4565b925050600181019050611130565b505050505050565b61116e816113b9565b61117881846113de565b9250611183826113a4565b8060005b838110156111bb5761119882611635565b6111a287826110f6565b96506111ad836113d1565b925050600181019050611187565b505050505050565b60006111d06023836113e9565b91506111db82611662565b604082019050919050565b60006111f36038836113e9565b91506111fe826116b1565b604082019050919050565b60006112166040836113e9565b915061122182611700565b604082019050919050565b6000611239603a836113e9565b91506112448261174f565b604082019050919050565b600061125c6033836113e9565b91506112678261179e565b604082019050919050565b600061127f6034836113e9565b915061128a826117ed565b604082019050919050565b61129e816115d5565b82525050565b60006040820190506112b9600083018461110e565b92915050565b60006040820190506112d46000830184611165565b92915050565b600060208201905081810360008301526112f3816111c3565b9050919050565b60006020820190508181036000830152611313816111e6565b9050919050565b6000602082019050818103600083015261133381611209565b9050919050565b600060208201905081810360008301526113538161122c565b9050919050565b600060208201905081810360008301526113738161124f565b9050919050565b6000602082019050818103600083015261139381611272565b9050919050565b6000819050919050565b6000819050919050565b600060029050919050565b600060029050919050565b6000602082019050919050565b6000600182019050919050565b600081905092915050565b600082825260208201905092915050565b6000611405826115d5565b9150611410836115d5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561144557611444611606565b5b828201905092915050565b6000808291508390505b600185111561149a5780860481111561147657611475611606565b5b60018516156114855780820291505b808102905061149385611655565b945061145a565b94509492505050565b60006114ae826115d5565b91506114b9836115d5565b92506114e67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846114ee565b905092915050565b6000826114fe57600190506115ba565b8161150c57600090506115ba565b8160018114611522576002811461152c5761155b565b60019150506115ba565b60ff84111561153e5761153d611606565b5b8360020a91508482111561155557611554611606565b5b506115ba565b5060208310610133831016604e8410600b84101617156115905782820a90508381111561158b5761158a611606565b5b6115ba565b61159d8484846001611450565b925090508184048111156115b4576115b3611606565b5b81810290505b9392505050565b6000819050919050565b6000819050919050565b6000819050919050565b600060ff82169050919050565b60006115ff6115fa83611648565b6115c1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061164182546115ec565b9050919050565b60008160001c9050919050565b60008160011c9050919050565b7f496e6372656d656e74616c42696e617279547265653a2074726565206973206660008201527f756c6c0000000000000000000000000000000000000000000000000000000000602082015250565b7f496e6372656d656e74616c42696e617279547265653a206c656166206d75737460008201527f206265203c20534e41524b5f5343414c41525f4649454c440000000000000000602082015250565b7f496e6372656d656e74616c42696e617279547265653a207369626c696e67206e60008201527f6f6465206d757374206265203c20534e41524b5f5343414c41525f4649454c44602082015250565b7f496e6372656d656e74616c42696e617279547265653a2074726565206465707460008201527f68206d757374206265206265747765656e203120616e64203332000000000000602082015250565b7f496e6372656d656e74616c42696e617279547265653a206c656166206973206e60008201527f6f742070617274206f6620746865207472656500000000000000000000000000602082015250565b7f496e6372656d656e74616c42696e617279547265653a206c656e677468206f6660008201527f2070617468206973206e6f7420636f7272656374000000000000000000000000602082015250565b611845816115cb565b811461185057600080fd5b50565b61185c816115d5565b811461186757600080fd5b50565b611873816115df565b811461187e57600080fd5b5056fea264697066735822122012882cb750967cc4f2d456c1a6d743ad3dc2777ccb2882f3745884dc47d1907c64736f6c63430008040033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x56 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x629596F EQ PUSH2 0x5B JUMPI DUP1 PUSH4 0x1095FBB4 EQ PUSH2 0x84 JUMPI DUP1 PUSH4 0x168703FA EQ PUSH2 0xAD JUMPI DUP1 PUSH4 0xA5478827 EQ PUSH2 0xD6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x82 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x7D SWAP2 SWAP1 PUSH2 0xF0A JUMP JUMPDEST PUSH2 0xFF JUMP JUMPDEST STOP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xA6 SWAP2 SWAP1 PUSH2 0xFA5 JUMP JUMPDEST PUSH2 0x12B JUMP JUMPDEST STOP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0xB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xCF SWAP2 SWAP1 PUSH2 0xECE JUMP JUMPDEST PUSH2 0x2CB JUMP JUMPDEST STOP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0xE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xFD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xF8 SWAP2 SWAP1 PUSH2 0xFF4 JUMP JUMPDEST PUSH2 0x540 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x123 DUP7 DUP7 DUP9 PUSH1 0x3 ADD PUSH1 0x0 DUP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP8 DUP8 DUP8 DUP8 PUSH2 0x540 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x30644E72E131A029B85045B68181585D2833E84879B9709143E1F593F0000001 DUP2 LT PUSH2 0x18D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x184 SWAP1 PUSH2 0x12FA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 GT DUP1 ISZERO PUSH2 0x1A1 JUMPI POP PUSH1 0x20 PUSH1 0xFF AND DUP3 GT ISZERO JUMPDEST PUSH2 0x1E0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D7 SWAP1 PUSH2 0x133A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP4 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x0 JUMPDEST DUP3 DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x2BC JUMPI DUP2 DUP5 PUSH1 0x3 ADD PUSH1 0x0 DUP4 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH20 0x0 PUSH4 0x29A5F2F6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25F SWAP2 SWAP1 PUSH2 0x12A4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x277 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x28B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2AF SWAP2 SWAP1 PUSH2 0x10A4 JUMP JUMPDEST SWAP2 POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x1EC JUMP JUMPDEST POP DUP1 DUP4 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD SLOAD SWAP1 POP PUSH32 0x30644E72E131A029B85045B68181585D2833E84879B9709143E1F593F0000001 DUP3 LT PUSH2 0x336 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x32D SWAP1 PUSH2 0x12FA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x2 PUSH2 0x343 SWAP2 SWAP1 PUSH2 0x14A3 JUMP JUMPDEST DUP4 PUSH1 0x2 ADD SLOAD LT PUSH2 0x388 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x37F SWAP1 PUSH2 0x12DA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x2 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP4 SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x513 JUMPI PUSH1 0x0 PUSH1 0x1 DUP5 AND EQ ISZERO PUSH2 0x409 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x3 ADD PUSH1 0x0 DUP5 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE POP DUP7 PUSH1 0x4 ADD PUSH1 0x0 DUP4 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 PUSH2 0x403 SWAP3 SWAP2 SWAP1 PUSH2 0xD89 JUMP JUMPDEST POP PUSH2 0x461 JUMP JUMPDEST DUP2 DUP7 PUSH1 0x4 ADD PUSH1 0x0 DUP4 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 PUSH1 0x2 DUP2 LT PUSH2 0x45B JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD DUP2 SWAP1 SSTORE POP JUMPDEST PUSH20 0x0 PUSH4 0x29A5F2F6 DUP8 PUSH1 0x4 ADD PUSH1 0x0 DUP5 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AF SWAP2 SWAP1 PUSH2 0x12BF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x4DB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4FF SWAP2 SWAP1 PUSH2 0x10A4 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 DUP4 SWAP1 SHR SWAP3 POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x399 JUMP JUMPDEST POP DUP1 DUP6 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x1 DUP6 PUSH1 0x2 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x532 SWAP2 SWAP1 PUSH2 0x13FA JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x54E DUP8 DUP8 DUP7 DUP7 DUP7 DUP7 PUSH2 0x9D1 JUMP JUMPDEST PUSH2 0x58D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x584 SWAP1 PUSH2 0x135A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP8 PUSH1 0x0 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP7 SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x9BC JUMPI PUSH1 0x0 DUP6 DUP6 DUP4 PUSH1 0xFF AND DUP2 DUP2 LT PUSH2 0x5E7 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x5FC SWAP2 SWAP1 PUSH2 0x10CD JUMP JUMPDEST PUSH1 0xFF AND EQ ISZERO PUSH2 0x7DD JUMPI DUP10 PUSH1 0x4 ADD PUSH1 0x0 DUP3 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 PUSH1 0x2 DUP2 LT PUSH2 0x656 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD SLOAD DUP8 DUP8 DUP4 PUSH1 0xFF AND DUP2 DUP2 LT PUSH2 0x694 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD EQ ISZERO PUSH2 0x6F9 JUMPI DUP2 DUP11 PUSH1 0x4 ADD PUSH1 0x0 DUP4 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH2 0x6F3 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD DUP2 SWAP1 SSTORE POP JUMPDEST PUSH20 0x0 PUSH4 0x29A5F2F6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP11 DUP7 PUSH1 0xFF AND DUP2 DUP2 LT PUSH2 0x760 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x786 SWAP2 SWAP1 PUSH2 0x12A4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x79E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x7B2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7D6 SWAP2 SWAP1 PUSH2 0x10A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x9B1 JUMP JUMPDEST DUP10 PUSH1 0x4 ADD PUSH1 0x0 DUP3 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH2 0x82E JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD SLOAD DUP8 DUP8 DUP4 PUSH1 0xFF AND DUP2 DUP2 LT PUSH2 0x86C JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD EQ ISZERO PUSH2 0x8D1 JUMPI DUP2 DUP11 PUSH1 0x4 ADD PUSH1 0x0 DUP4 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 PUSH1 0x2 DUP2 LT PUSH2 0x8CB JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD DUP2 SWAP1 SSTORE POP JUMPDEST PUSH20 0x0 PUSH4 0x29A5F2F6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP11 DUP11 DUP7 PUSH1 0xFF AND DUP2 DUP2 LT PUSH2 0x932 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x95E SWAP2 SWAP1 PUSH2 0x12A4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x976 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x98A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9AE SWAP2 SWAP1 PUSH2 0x10A4 JUMP JUMPDEST SWAP2 POP JUMPDEST DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x59E JUMP JUMPDEST POP DUP1 DUP10 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x30644E72E131A029B85045B68181585D2833E84879B9709143E1F593F0000001 DUP7 LT PUSH2 0xA35 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA2C SWAP1 PUSH2 0x12FA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP8 PUSH1 0x0 ADD SLOAD SWAP1 POP DUP1 DUP5 DUP5 SWAP1 POP EQ DUP1 ISZERO PUSH2 0xA52 JUMPI POP DUP1 DUP7 DUP7 SWAP1 POP EQ JUMPDEST PUSH2 0xA91 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA88 SWAP1 PUSH2 0x137A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP8 SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0xD73 JUMPI PUSH32 0x30644E72E131A029B85045B68181585D2833E84879B9709143E1F593F0000001 DUP9 DUP9 DUP4 PUSH1 0xFF AND DUP2 DUP2 LT PUSH2 0xB01 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD LT PUSH2 0xB48 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB3F SWAP1 PUSH2 0x131A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP7 DUP7 DUP4 PUSH1 0xFF AND DUP2 DUP2 LT PUSH2 0xB86 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xB9B SWAP2 SWAP1 PUSH2 0x10CD JUMP JUMPDEST PUSH1 0xFF AND EQ ISZERO PUSH2 0xC88 JUMPI PUSH20 0x0 PUSH4 0x29A5F2F6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP12 DUP12 DUP7 PUSH1 0xFF AND DUP2 DUP2 LT PUSH2 0xC0B JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC31 SWAP2 SWAP1 PUSH2 0x12A4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xC5D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC81 SWAP2 SWAP1 PUSH2 0x10A4 JUMP JUMPDEST SWAP2 POP PUSH2 0xD68 JUMP JUMPDEST PUSH20 0x0 PUSH4 0x29A5F2F6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP12 DUP12 DUP7 PUSH1 0xFF AND DUP2 DUP2 LT PUSH2 0xCE9 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD15 SWAP2 SWAP1 PUSH2 0x12A4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xD41 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD65 SWAP2 SWAP1 PUSH2 0x10A4 JUMP JUMPDEST SWAP2 POP JUMPDEST DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0xA99 JUMP JUMPDEST POP DUP9 PUSH1 0x1 ADD SLOAD DUP2 EQ SWAP3 POP POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x2 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0xDB8 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0xDB7 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xD9C JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0xDC5 SWAP2 SWAP1 PUSH2 0xDC9 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0xDE2 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0xDCA JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xDF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xE11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0xE29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xE42 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xE5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0xE73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xE89 DUP2 PUSH2 0x183C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xE9E DUP2 PUSH2 0x1853 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xEB3 DUP2 PUSH2 0x1853 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xEC8 DUP2 PUSH2 0x186A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xEE1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xEEF DUP6 DUP3 DUP7 ADD PUSH2 0xE7A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xF00 DUP6 DUP3 DUP7 ADD PUSH2 0xE8F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xF23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xF31 DUP10 DUP3 DUP11 ADD PUSH2 0xE7A JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0xF42 DUP10 DUP3 DUP11 ADD PUSH2 0xE8F JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF5F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF6B DUP10 DUP3 DUP11 ADD PUSH2 0xDE6 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF96 DUP10 DUP3 DUP11 ADD PUSH2 0xE30 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xFBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xFC8 DUP7 DUP3 DUP8 ADD PUSH2 0xE7A JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xFD9 DUP7 DUP3 DUP8 ADD PUSH2 0xE8F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xFEA DUP7 DUP3 DUP8 ADD PUSH2 0xE8F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x100F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x101D DUP11 DUP3 DUP12 ADD PUSH2 0xE7A JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 PUSH2 0x102E DUP11 DUP3 DUP12 ADD PUSH2 0xE8F JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 PUSH2 0x103F DUP11 DUP3 DUP12 ADD PUSH2 0xE8F JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x105C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1068 DUP11 DUP3 DUP12 ADD PUSH2 0xDE6 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP PUSH1 0x80 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1087 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1093 DUP11 DUP3 DUP12 ADD PUSH2 0xE30 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x10C4 DUP5 DUP3 DUP6 ADD PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x10ED DUP5 DUP3 DUP6 ADD PUSH2 0xEB9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1102 DUP4 DUP4 PUSH2 0x1295 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1117 DUP2 PUSH2 0x13AE JUMP JUMPDEST PUSH2 0x1121 DUP2 DUP5 PUSH2 0x13DE JUMP JUMPDEST SWAP3 POP PUSH2 0x112C DUP3 PUSH2 0x139A JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x115D JUMPI DUP2 MLOAD PUSH2 0x1144 DUP8 DUP3 PUSH2 0x10F6 JUMP JUMPDEST SWAP7 POP PUSH2 0x114F DUP4 PUSH2 0x13C4 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x1130 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x116E DUP2 PUSH2 0x13B9 JUMP JUMPDEST PUSH2 0x1178 DUP2 DUP5 PUSH2 0x13DE JUMP JUMPDEST SWAP3 POP PUSH2 0x1183 DUP3 PUSH2 0x13A4 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x11BB JUMPI PUSH2 0x1198 DUP3 PUSH2 0x1635 JUMP JUMPDEST PUSH2 0x11A2 DUP8 DUP3 PUSH2 0x10F6 JUMP JUMPDEST SWAP7 POP PUSH2 0x11AD DUP4 PUSH2 0x13D1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x1187 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11D0 PUSH1 0x23 DUP4 PUSH2 0x13E9 JUMP JUMPDEST SWAP2 POP PUSH2 0x11DB DUP3 PUSH2 0x1662 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11F3 PUSH1 0x38 DUP4 PUSH2 0x13E9 JUMP JUMPDEST SWAP2 POP PUSH2 0x11FE DUP3 PUSH2 0x16B1 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1216 PUSH1 0x40 DUP4 PUSH2 0x13E9 JUMP JUMPDEST SWAP2 POP PUSH2 0x1221 DUP3 PUSH2 0x1700 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1239 PUSH1 0x3A DUP4 PUSH2 0x13E9 JUMP JUMPDEST SWAP2 POP PUSH2 0x1244 DUP3 PUSH2 0x174F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x125C PUSH1 0x33 DUP4 PUSH2 0x13E9 JUMP JUMPDEST SWAP2 POP PUSH2 0x1267 DUP3 PUSH2 0x179E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x127F PUSH1 0x34 DUP4 PUSH2 0x13E9 JUMP JUMPDEST SWAP2 POP PUSH2 0x128A DUP3 PUSH2 0x17ED JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x129E DUP2 PUSH2 0x15D5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x12B9 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x110E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x12D4 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1165 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x12F3 DUP2 PUSH2 0x11C3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1313 DUP2 PUSH2 0x11E6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1333 DUP2 PUSH2 0x1209 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1353 DUP2 PUSH2 0x122C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1373 DUP2 PUSH2 0x124F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1393 DUP2 PUSH2 0x1272 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1405 DUP3 PUSH2 0x15D5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1410 DUP4 PUSH2 0x15D5 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x1445 JUMPI PUSH2 0x1444 PUSH2 0x1606 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP2 POP DUP4 SWAP1 POP JUMPDEST PUSH1 0x1 DUP6 GT ISZERO PUSH2 0x149A JUMPI DUP1 DUP7 DIV DUP2 GT ISZERO PUSH2 0x1476 JUMPI PUSH2 0x1475 PUSH2 0x1606 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP6 AND ISZERO PUSH2 0x1485 JUMPI DUP1 DUP3 MUL SWAP2 POP JUMPDEST DUP1 DUP2 MUL SWAP1 POP PUSH2 0x1493 DUP6 PUSH2 0x1655 JUMP JUMPDEST SWAP5 POP PUSH2 0x145A JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14AE DUP3 PUSH2 0x15D5 JUMP JUMPDEST SWAP2 POP PUSH2 0x14B9 DUP4 PUSH2 0x15D5 JUMP JUMPDEST SWAP3 POP PUSH2 0x14E6 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP5 PUSH2 0x14EE JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x14FE JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x15BA JUMP JUMPDEST DUP2 PUSH2 0x150C JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x15BA JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x1522 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x152C JUMPI PUSH2 0x155B JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x15BA JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x153E JUMPI PUSH2 0x153D PUSH2 0x1606 JUMP JUMPDEST JUMPDEST DUP4 PUSH1 0x2 EXP SWAP2 POP DUP5 DUP3 GT ISZERO PUSH2 0x1555 JUMPI PUSH2 0x1554 PUSH2 0x1606 JUMP JUMPDEST JUMPDEST POP PUSH2 0x15BA JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x1590 JUMPI DUP3 DUP3 EXP SWAP1 POP DUP4 DUP2 GT ISZERO PUSH2 0x158B JUMPI PUSH2 0x158A PUSH2 0x1606 JUMP JUMPDEST JUMPDEST PUSH2 0x15BA JUMP JUMPDEST PUSH2 0x159D DUP5 DUP5 DUP5 PUSH1 0x1 PUSH2 0x1450 JUMP JUMPDEST SWAP3 POP SWAP1 POP DUP2 DUP5 DIV DUP2 GT ISZERO PUSH2 0x15B4 JUMPI PUSH2 0x15B3 PUSH2 0x1606 JUMP JUMPDEST JUMPDEST DUP2 DUP2 MUL SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15FF PUSH2 0x15FA DUP4 PUSH2 0x1648 JUMP JUMPDEST PUSH2 0x15C1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1641 DUP3 SLOAD PUSH2 0x15EC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E6372656D656E74616C42696E617279547265653A20747265652069732066 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x756C6C0000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x496E6372656D656E74616C42696E617279547265653A206C656166206D757374 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x206265203C20534E41524B5F5343414C41525F4649454C440000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x496E6372656D656E74616C42696E617279547265653A207369626C696E67206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F6465206D757374206265203C20534E41524B5F5343414C41525F4649454C44 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x496E6372656D656E74616C42696E617279547265653A20747265652064657074 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x68206D757374206265206265747765656E203120616E64203332000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x496E6372656D656E74616C42696E617279547265653A206C656166206973206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F742070617274206F6620746865207472656500000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x496E6372656D656E74616C42696E617279547265653A206C656E677468206F66 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x2070617468206973206E6F7420636F7272656374000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x1845 DUP2 PUSH2 0x15CB JUMP JUMPDEST DUP2 EQ PUSH2 0x1850 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x185C DUP2 PUSH2 0x15D5 JUMP JUMPDEST DUP2 EQ PUSH2 0x1867 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x1873 DUP2 PUSH2 0x15DF JUMP JUMPDEST DUP2 EQ PUSH2 0x187E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT DUP9 0x2C 0xB7 POP SWAP7 PUSH29 0xC4F2D456C1A6D743AD3DC2777CCB2882F3745884DC47D1907C64736F6C PUSH4 0x43000804 STOP CALLER ","sourceMap":"872:5250:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4429:262;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1241:594;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1956:823;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3084:1072;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4429:262;4617:67;4624:4;4630;4636;:11;;:14;4648:1;4636:14;;;;;;;;;;;;4652:13;;4667:16;;4617:6;:67::i;:::-;4429:262;;;;;;:::o;1241:594::-;1007:77;1373:4;:25;1365:94;;;;;;;;;;;;:::i;:::-;;;;;;;;;1485:1;1477:5;:9;:31;;;;;944:2;1490:18;;:5;:18;;1477:31;1469:102;;;;;;;;;;;;:::i;:::-;;;;;;;;;1595:5;1582:4;:10;;:18;;;;1616:7;1611:191;1633:5;1629:1;:9;;;1611:191;;;1673:4;1656;:11;;:14;1668:1;1656:14;;;;;;;;;;;;;:21;;;;1698:10;:19;:33;;;;;;;;1719:4;1698:33;;;;1725:4;1698:33;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1691:40;;1774:3;;;;;1611:191;;;;1824:4;1812;:9;;:16;;;;1241:594;;;:::o;1956:823::-;2037:13;2053:4;:10;;;2037:26;;1007:77;2082:4;:25;2074:94;;;;;;;;;;;;:::i;:::-;;;;;;;;;2211:5;2208:1;:8;;;;:::i;:::-;2186:4;:19;;;:30;2178:78;;;;;;;;;;;;:::i;:::-;;;;;;;;;2267:13;2283:4;:19;;;2267:35;;2312:12;2327:4;2312:19;;2347:7;2342:370;2364:5;2360:1;:9;;;2342:370;;;2404:1;2399;2391:5;:9;:14;2387:167;;;2425:45;;;;;;;;2449:4;2425:45;;;;2455:4;:11;;:14;2467:1;2455:14;;;;;;;;;;;;;;2425:45;;;:4;:17;;:20;2443:1;2425:20;;;;;;;;;;;;;:45;;;;;;;:::i;:::-;;2387:167;;;2535:4;2509;:17;;:20;2527:1;2509:20;;;;;;;;;;;;;2530:1;2509:23;;;;;;;;;;;;;;;;:30;;;;2387:167;2575:10;:19;2595:4;:17;;:20;2613:1;2595:20;;;;;;;;;;;;;2575:41;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2568:48;;2640:1;2630:11;;;;;2684:3;;;;;2342:370;;;;2734:4;2722;:9;;:16;;;;2771:1;2748:4;:19;;;:24;;;;;;;:::i;:::-;;;;;;;;1956:823;;;;;:::o;3084:1072::-;3318:51;3325:4;3331;3337:13;;3352:16;;3318:6;:51::i;:::-;3297:149;;;;;;;;;;;;:::i;:::-;;;;;;;;;3457:13;3473:4;:10;;;3457:26;;3493:12;3508:7;3493:22;;3531:7;3526:597;3548:5;3544:1;:9;;;3526:597;;;3598:1;3575:16;;3592:1;3575:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:24;;;3571:482;;;3643:4;:17;;:20;3661:1;3643:20;;;;;;;;;;;;;3664:1;3643:23;;;;;;;;;;;;;;;;;3623:13;;3637:1;3623:16;;;;;;;;;;;;;;;;;;;;;;;:43;3619:120;;;3716:4;3690;:17;;:20;3708:1;3690:20;;;;;;;;;;;;;3711:1;3690:23;;;;;;;;;;;;;;;;:30;;;;3619:120;3764:10;:19;:45;;;;;;;;3785:4;3764:45;;;;3791:13;;3805:1;3791:16;;;;;;;;;;;;;;;;;;;;;;;3764:45;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3757:52;;3571:482;;;3872:4;:17;;:20;3890:1;3872:20;;;;;;;;;;;;;3893:1;3872:23;;;;;;;;;;;;;;;;;3852:13;;3866:1;3852:16;;;;;;;;;;;;;;;;;;;;;;;:43;3848:120;;;3945:4;3919;:17;;:20;3937:1;3919:20;;;;;;;;;;;;;3940:1;3919:23;;;;;;;;;;;;;;;;:30;;;;3848:120;3993:10;:19;:45;;;;;;;;4014:13;;4028:1;4014:16;;;;;;;;;;;;;;;;;;;;;;;3993:45;;;;4032:4;3993:45;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3986:52;;3571:482;4095:3;;;;;3526:597;;;;4145:4;4133;:9;;:16;;;;3084:1072;;;;;;;;;:::o;5029:1091::-;5222:4;1007:77;5246:4;:25;5238:94;;;;;;;;;;;;:::i;:::-;;;;;;;;;5342:13;5358:4;:10;;;5342:26;;5426:5;5399:16;;:23;;:32;:65;;;;;5459:5;5435:13;;:20;;:29;5399:65;5378:164;;;;;;;;;;;;:::i;:::-;;;;;;;;;5553:12;5568:4;5553:19;;5588:7;5583:496;5605:5;5601:1;:9;;;5583:496;;;1007:77;5653:13;;5667:1;5653:16;;;;;;;;;;;;;;;;;;;;;;;:37;5628:160;;;;;;;;;;;;:::i;:::-;;;;;;;;;5830:1;5807:16;;5824:1;5807:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:24;;;5803:206;;;5858:10;:19;:45;;;;;;;;5879:4;5858:45;;;;5885:13;;5899:1;5885:16;;;;;;;;;;;;;;;;;;;;;;;5858:45;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5851:52;;5803:206;;;5949:10;:19;:45;;;;;;;;5970:13;;5984:1;5970:16;;;;;;;;;;;;;;;;;;;;;;;5949:45;;;;5988:4;5949:45;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5942:52;;5803:206;6051:3;;;;;5583:496;;;;6104:4;:9;;;6096:4;:17;6089:24;;;;5029:1091;;;;;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;24:367:29:-;97:8;107:6;157:3;150:4;142:6;138:17;134:27;124:2;;175:1;172;165:12;124:2;211:6;198:20;188:30;;241:18;233:6;230:30;227:2;;;273:1;270;263:12;227:2;310:4;302:6;298:17;286:29;;364:3;356:4;348:6;344:17;334:8;330:32;327:41;324:2;;;381:1;378;371:12;324:2;114:277;;;;;:::o;412:365::-;483:8;493:6;543:3;536:4;528:6;524:17;520:27;510:2;;561:1;558;551:12;510:2;597:6;584:20;574:30;;627:18;619:6;616:30;613:2;;;659:1;656;649:12;613:2;696:4;688:6;684:17;672:29;;750:3;742:4;734:6;730:17;720:8;716:32;713:41;710:2;;;767:1;764;757:12;710:2;500:277;;;;;:::o;783:215::-;867:5;905:6;892:20;883:29;;921:71;986:5;921:71;:::i;:::-;873:125;;;;:::o;1004:139::-;1050:5;1088:6;1075:20;1066:29;;1104:33;1131:5;1104:33;:::i;:::-;1056:87;;;;:::o;1149:143::-;1206:5;1237:6;1231:13;1222:22;;1253:33;1280:5;1253:33;:::i;:::-;1212:80;;;;:::o;1298:135::-;1342:5;1380:6;1367:20;1358:29;;1396:31;1421:5;1396:31;:::i;:::-;1348:85;;;;:::o;1439:483::-;1545:6;1553;1602:2;1590:9;1581:7;1577:23;1573:32;1570:2;;;1618:1;1615;1608:12;1570:2;1661:1;1686:91;1769:7;1760:6;1749:9;1745:22;1686:91;:::i;:::-;1676:101;;1632:155;1826:2;1852:53;1897:7;1888:6;1877:9;1873:22;1852:53;:::i;:::-;1842:63;;1797:118;1560:362;;;;;:::o;1928:1096::-;2104:6;2112;2120;2128;2136;2144;2193:3;2181:9;2172:7;2168:23;2164:33;2161:2;;;2210:1;2207;2200:12;2161:2;2253:1;2278:91;2361:7;2352:6;2341:9;2337:22;2278:91;:::i;:::-;2268:101;;2224:155;2418:2;2444:53;2489:7;2480:6;2469:9;2465:22;2444:53;:::i;:::-;2434:63;;2389:118;2574:2;2563:9;2559:18;2546:32;2605:18;2597:6;2594:30;2591:2;;;2637:1;2634;2627:12;2591:2;2673:80;2745:7;2736:6;2725:9;2721:22;2673:80;:::i;:::-;2655:98;;;;2517:246;2830:2;2819:9;2815:18;2802:32;2861:18;2853:6;2850:30;2847:2;;;2893:1;2890;2883:12;2847:2;2929:78;2999:7;2990:6;2979:9;2975:22;2929:78;:::i;:::-;2911:96;;;;2773:244;2151:873;;;;;;;;:::o;3030:628::-;3145:6;3153;3161;3210:2;3198:9;3189:7;3185:23;3181:32;3178:2;;;3226:1;3223;3216:12;3178:2;3269:1;3294:91;3377:7;3368:6;3357:9;3353:22;3294:91;:::i;:::-;3284:101;;3240:155;3434:2;3460:53;3505:7;3496:6;3485:9;3481:22;3460:53;:::i;:::-;3450:63;;3405:118;3562:2;3588:53;3633:7;3624:6;3613:9;3609:22;3588:53;:::i;:::-;3578:63;;3533:118;3168:490;;;;;:::o;3664:1242::-;3849:6;3857;3865;3873;3881;3889;3897;3946:3;3934:9;3925:7;3921:23;3917:33;3914:2;;;3963:1;3960;3953:12;3914:2;4006:1;4031:91;4114:7;4105:6;4094:9;4090:22;4031:91;:::i;:::-;4021:101;;3977:155;4171:2;4197:53;4242:7;4233:6;4222:9;4218:22;4197:53;:::i;:::-;4187:63;;4142:118;4299:2;4325:53;4370:7;4361:6;4350:9;4346:22;4325:53;:::i;:::-;4315:63;;4270:118;4455:2;4444:9;4440:18;4427:32;4486:18;4478:6;4475:30;4472:2;;;4518:1;4515;4508:12;4472:2;4554:80;4626:7;4617:6;4606:9;4602:22;4554:80;:::i;:::-;4536:98;;;;4398:246;4711:3;4700:9;4696:19;4683:33;4743:18;4735:6;4732:30;4729:2;;;4775:1;4772;4765:12;4729:2;4811:78;4881:7;4872:6;4861:9;4857:22;4811:78;:::i;:::-;4793:96;;;;4654:245;3904:1002;;;;;;;;;;:::o;4912:284::-;4982:6;5031:2;5019:9;5010:7;5006:23;5002:32;4999:2;;;5047:1;5044;5037:12;4999:2;5090:1;5115:64;5171:7;5162:6;5151:9;5147:22;5115:64;:::i;:::-;5105:74;;5061:128;4989:207;;;;:::o;5202:258::-;5259:6;5308:2;5296:9;5287:7;5283:23;5279:32;5276:2;;;5324:1;5321;5314:12;5276:2;5367:1;5392:51;5435:7;5426:6;5415:9;5411:22;5392:51;:::i;:::-;5382:61;;5338:115;5266:194;;;;:::o;5466:195::-;5543:10;5564:54;5614:3;5606:6;5564:54;:::i;:::-;5650:4;5645:3;5641:14;5627:28;;5554:107;;;;:::o;5699:718::-;5843:52;5889:5;5843:52;:::i;:::-;5911:92;5996:6;5991:3;5911:92;:::i;:::-;5904:99;;6027:54;6075:5;6027:54;:::i;:::-;6104:7;6135:1;6120:290;6145:6;6142:1;6139:13;6120:290;;;6221:6;6215:13;6248:71;6315:3;6300:13;6248:71;:::i;:::-;6241:78;;6342:58;6393:6;6342:58;:::i;:::-;6332:68;;6180:230;6167:1;6164;6160:9;6155:14;;6120:290;;;6124:14;5819:598;;;;;:::o;6455:737::-;6596:49;6639:5;6596:49;:::i;:::-;6661:92;6746:6;6741:3;6661:92;:::i;:::-;6654:99;;6777:51;6822:5;6777:51;:::i;:::-;6851:7;6882:1;6867:318;6892:6;6889:1;6886:13;6867:318;;;6962:44;6999:6;6962:44;:::i;:::-;7026:71;7093:3;7078:13;7026:71;:::i;:::-;7019:78;;7120:55;7168:6;7120:55;:::i;:::-;7110:65;;6927:258;6914:1;6911;6907:9;6902:14;;6867:318;;;6871:14;6572:620;;;;;:::o;7198:366::-;7340:3;7361:67;7425:2;7420:3;7361:67;:::i;:::-;7354:74;;7437:93;7526:3;7437:93;:::i;:::-;7555:2;7550:3;7546:12;7539:19;;7344:220;;;:::o;7570:366::-;7712:3;7733:67;7797:2;7792:3;7733:67;:::i;:::-;7726:74;;7809:93;7898:3;7809:93;:::i;:::-;7927:2;7922:3;7918:12;7911:19;;7716:220;;;:::o;7942:366::-;8084:3;8105:67;8169:2;8164:3;8105:67;:::i;:::-;8098:74;;8181:93;8270:3;8181:93;:::i;:::-;8299:2;8294:3;8290:12;8283:19;;8088:220;;;:::o;8314:366::-;8456:3;8477:67;8541:2;8536:3;8477:67;:::i;:::-;8470:74;;8553:93;8642:3;8553:93;:::i;:::-;8671:2;8666:3;8662:12;8655:19;;8460:220;;;:::o;8686:366::-;8828:3;8849:67;8913:2;8908:3;8849:67;:::i;:::-;8842:74;;8925:93;9014:3;8925:93;:::i;:::-;9043:2;9038:3;9034:12;9027:19;;8832:220;;;:::o;9058:366::-;9200:3;9221:67;9285:2;9280:3;9221:67;:::i;:::-;9214:74;;9297:93;9386:3;9297:93;:::i;:::-;9415:2;9410:3;9406:12;9399:19;;9204:220;;;:::o;9430:116::-;9515:24;9533:5;9515:24;:::i;:::-;9510:3;9503:37;9493:53;;:::o;9552:330::-;9699:4;9737:2;9726:9;9722:18;9714:26;;9750:125;9872:1;9861:9;9857:17;9848:6;9750:125;:::i;:::-;9704:178;;;;:::o;9888:324::-;10032:4;10070:2;10059:9;10055:18;10047:26;;10083:122;10202:1;10191:9;10187:17;10178:6;10083:122;:::i;:::-;10037:175;;;;:::o;10218:419::-;10384:4;10422:2;10411:9;10407:18;10399:26;;10471:9;10465:4;10461:20;10457:1;10446:9;10442:17;10435:47;10499:131;10625:4;10499:131;:::i;:::-;10491:139;;10389:248;;;:::o;10643:419::-;10809:4;10847:2;10836:9;10832:18;10824:26;;10896:9;10890:4;10886:20;10882:1;10871:9;10867:17;10860:47;10924:131;11050:4;10924:131;:::i;:::-;10916:139;;10814:248;;;:::o;11068:419::-;11234:4;11272:2;11261:9;11257:18;11249:26;;11321:9;11315:4;11311:20;11307:1;11296:9;11292:17;11285:47;11349:131;11475:4;11349:131;:::i;:::-;11341:139;;11239:248;;;:::o;11493:419::-;11659:4;11697:2;11686:9;11682:18;11674:26;;11746:9;11740:4;11736:20;11732:1;11721:9;11717:17;11710:47;11774:131;11900:4;11774:131;:::i;:::-;11766:139;;11664:248;;;:::o;11918:419::-;12084:4;12122:2;12111:9;12107:18;12099:26;;12171:9;12165:4;12161:20;12157:1;12146:9;12142:17;12135:47;12199:131;12325:4;12199:131;:::i;:::-;12191:139;;12089:248;;;:::o;12343:419::-;12509:4;12547:2;12536:9;12532:18;12524:26;;12596:9;12590:4;12586:20;12582:1;12571:9;12567:17;12560:47;12624:131;12750:4;12624:131;:::i;:::-;12616:139;;12514:248;;;:::o;12768:98::-;12833:4;12856:3;12848:11;;12838:28;;;:::o;12872:95::-;12934:4;12957:3;12949:11;;12939:28;;;:::o;12973:104::-;13038:6;13066:4;13056:14;;13045:32;;;:::o;13083:101::-;13145:6;13173:4;13163:14;;13152:32;;;:::o;13190:111::-;13258:4;13290;13285:3;13281:14;13273:22;;13263:38;;;:::o;13307:108::-;13372:4;13404;13399:3;13395:14;13387:22;;13377:38;;;:::o;13421:151::-;13526:11;13563:3;13548:18;;13538:34;;;;:::o;13578:169::-;13662:11;13696:6;13691:3;13684:19;13736:4;13731:3;13727:14;13712:29;;13674:73;;;;:::o;13753:305::-;13793:3;13812:20;13830:1;13812:20;:::i;:::-;13807:25;;13846:20;13864:1;13846:20;:::i;:::-;13841:25;;14000:1;13932:66;13928:74;13925:1;13922:81;13919:2;;;14006:18;;:::i;:::-;13919:2;14050:1;14047;14043:9;14036:16;;13797:261;;;;:::o;14064:848::-;14125:5;14132:4;14156:6;14147:15;;14180:5;14171:14;;14194:712;14215:1;14205:8;14202:15;14194:712;;;14310:4;14305:3;14301:14;14295:4;14292:24;14289:2;;;14319:18;;:::i;:::-;14289:2;14369:1;14359:8;14355:16;14352:2;;;14784:4;14777:5;14773:16;14764:25;;14352:2;14834:4;14828;14824:15;14816:23;;14864:32;14887:8;14864:32;:::i;:::-;14852:44;;14194:712;;;14137:775;;;;;;;:::o;14918:285::-;14978:5;15002:23;15020:4;15002:23;:::i;:::-;14994:31;;15046:27;15064:8;15046:27;:::i;:::-;15034:39;;15092:104;15129:66;15119:8;15113:4;15092:104;:::i;:::-;15083:113;;14984:219;;;;:::o;15209:1073::-;15263:5;15454:8;15444:2;;15475:1;15466:10;;15477:5;;15444:2;15503:4;15493:2;;15520:1;15511:10;;15522:5;;15493:2;15589:4;15637:1;15632:27;;;;15673:1;15668:191;;;;15582:277;;15632:27;15650:1;15641:10;;15652:5;;;15668:191;15713:3;15703:8;15700:17;15697:2;;;15720:18;;:::i;:::-;15697:2;15769:8;15766:1;15762:16;15753:25;;15804:3;15797:5;15794:14;15791:2;;;15811:18;;:::i;:::-;15791:2;15844:5;;;15582:277;;15968:2;15958:8;15955:16;15949:3;15943:4;15940:13;15936:36;15918:2;15908:8;15905:16;15900:2;15894:4;15891:12;15887:35;15871:111;15868:2;;;16024:8;16018:4;16014:19;16005:28;;16059:3;16052:5;16049:14;16046:2;;;16066:18;;:::i;:::-;16046:2;16099:5;;15868:2;16139:42;16177:3;16167:8;16161:4;16158:1;16139:42;:::i;:::-;16124:57;;;;16213:4;16208:3;16204:14;16197:5;16194:25;16191:2;;;16222:18;;:::i;:::-;16191:2;16271:4;16264:5;16260:16;16251:25;;15269:1013;;;;;;:::o;16288:90::-;16338:7;16367:5;16356:16;;16346:32;;;:::o;16384:115::-;16459:7;16488:5;16477:16;;16467:32;;;:::o;16505:77::-;16542:7;16571:5;16560:16;;16550:32;;;:::o;16588:86::-;16623:7;16663:4;16656:5;16652:16;16641:27;;16631:43;;;:::o;16680:166::-;16749:5;16774:66;16805:34;16828:10;16805:34;:::i;:::-;16774:66;:::i;:::-;16765:75;;16755:91;;;:::o;16852:180::-;16900:77;16897:1;16890:88;16997:4;16994:1;16987:15;17021:4;17018:1;17011:15;17038:144;17093:5;17118:57;17169:4;17163:11;17118:57;:::i;:::-;17109:66;;17099:83;;;:::o;17188:102::-;17230:8;17277:5;17274:1;17270:13;17249:34;;17239:51;;;:::o;17296:102::-;17338:8;17385:5;17382:1;17378:13;17357:34;;17347:51;;;:::o;17404:222::-;17544:34;17540:1;17532:6;17528:14;17521:58;17613:5;17608:2;17600:6;17596:15;17589:30;17510:116;:::o;17632:243::-;17772:34;17768:1;17760:6;17756:14;17749:58;17841:26;17836:2;17828:6;17824:15;17817:51;17738:137;:::o;17881:251::-;18021:34;18017:1;18009:6;18005:14;17998:58;18090:34;18085:2;18077:6;18073:15;18066:59;17987:145;:::o;18138:245::-;18278:34;18274:1;18266:6;18262:14;18255:58;18347:28;18342:2;18334:6;18330:15;18323:53;18244:139;:::o;18389:238::-;18529:34;18525:1;18517:6;18513:14;18506:58;18598:21;18593:2;18585:6;18581:15;18574:46;18495:132;:::o;18633:239::-;18773:34;18769:1;18761:6;18757:14;18750:58;18842:22;18837:2;18829:6;18825:15;18818:47;18739:133;:::o;18878:198::-;18989:62;19045:5;18989:62;:::i;:::-;18982:5;18979:73;18969:2;;19066:1;19063;19056:12;18969:2;18959:117;:::o;19082:122::-;19155:24;19173:5;19155:24;:::i;:::-;19148:5;19145:35;19135:2;;19194:1;19191;19184:12;19135:2;19125:79;:::o;19210:118::-;19281:22;19297:5;19281:22;:::i;:::-;19274:5;19271:33;19261:2;;19318:1;19315;19308:12;19261:2;19251:77;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1265400","executionCost":"1344","totalCost":"1266744"},"external":{"init(IncrementalTreeData storage,uint256,uint256)":"infinite","insert(IncrementalTreeData storage,uint256)":"infinite","remove(IncrementalTreeData storage,uint256,uint256[],uint8[])":"infinite","update(IncrementalTreeData storage,uint256,uint256,uint256[],uint8[])":"infinite"},"internal":{"verify(struct IncrementalTreeData storage pointer,uint256,uint256[] calldata,uint8[] calldata)":"infinite"}},"methodIdentifiers":{"init(IncrementalTreeData storage,uint256,uint256)":"1095fbb4","insert(IncrementalTreeData storage,uint256)":"168703fa","remove(IncrementalTreeData storage,uint256,uint256[],uint8[])":"0629596f","update(IncrementalTreeData storage,uint256,uint256,uint256[],uint8[])":"a5478827"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"The incremental tree allows to calculate the root hash each time a leaf is added, ensuring the integrity of the tree.\",\"kind\":\"dev\",\"methods\":{\"init(IncrementalTreeData storage,uint256,uint256)\":{\"details\":\"Initializes a tree.\",\"params\":{\"depth\":\": Depth of the tree.\",\"self\":\": Tree data.\",\"zero\":\": Zero value to be used.\"}},\"insert(IncrementalTreeData storage,uint256)\":{\"details\":\"Inserts a leaf in the tree.\",\"params\":{\"leaf\":\": Leaf to be inserted.\",\"self\":\": Tree data.\"}},\"remove(IncrementalTreeData storage,uint256,uint256[],uint8[])\":{\"details\":\"Removes a leaf from the tree.\",\"params\":{\"leaf\":\": Leaf to be removed.\",\"proofPathIndices\":\": Path of the proof of membership.\",\"proofSiblings\":\": Array of the sibling nodes of the proof of membership.\",\"self\":\": Tree data.\"}},\"update(IncrementalTreeData storage,uint256,uint256,uint256[],uint8[])\":{\"details\":\"Updates a leaf in the tree.\",\"params\":{\"leaf\":\": Leaf to be updated.\",\"newLeaf\":\": New leaf.\",\"proofPathIndices\":\": Path of the proof of membership.\",\"proofSiblings\":\": Array of the sibling nodes of the proof of membership.\",\"self\":\": Tree data.\"}}},\"title\":\"Incremental binary Merkle tree.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@creds-protocol/contracts/zk-kit/incremental-merkle-tree.sol/IncrementalBinaryTree.sol\":\"IncrementalBinaryTree\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@creds-protocol/contracts/zk-kit/incremental-merkle-tree.sol/Hashes.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary PoseidonT3 {\\n    function poseidon(uint256[2] memory) public pure returns (uint256) {}\\n}\\n\\nlibrary PoseidonT6 {\\n    function poseidon(uint256[5] memory) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xc634fec0820a2faab1bc350d94c3151835e8d2c2bc0321d9a198d62712786b81\",\"license\":\"MIT\"},\"@creds-protocol/contracts/zk-kit/incremental-merkle-tree.sol/IncrementalBinaryTree.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {PoseidonT3} from \\\"./Hashes.sol\\\";\\n\\n// Each incremental tree has certain properties and data that will\\n// be used to add new leaves.\\nstruct IncrementalTreeData {\\n    uint256 depth; // Depth of the tree (levels - 1).\\n    uint256 root; // Root hash of the tree.\\n    uint256 numberOfLeaves; // Number of leaves of the tree.\\n    mapping(uint256 => uint256) zeroes; // Zero hashes used for empty nodes (level -> zero hash).\\n    // The nodes of the subtrees used in the last addition of a leaf (level -> [left node, right node]).\\n    mapping(uint256 => uint256[2]) lastSubtrees; // Caching these values is essential to efficient appends.\\n}\\n\\n/// @title Incremental binary Merkle tree.\\n/// @dev The incremental tree allows to calculate the root hash each time a leaf is added, ensuring\\n/// the integrity of the tree.\\nlibrary IncrementalBinaryTree {\\n    uint8 internal constant MAX_DEPTH = 32;\\n    uint256 internal constant SNARK_SCALAR_FIELD =\\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n    /// @dev Initializes a tree.\\n    /// @param self: Tree data.\\n    /// @param depth: Depth of the tree.\\n    /// @param zero: Zero value to be used.\\n    function init(\\n        IncrementalTreeData storage self,\\n        uint256 depth,\\n        uint256 zero\\n    ) public {\\n        require(zero < SNARK_SCALAR_FIELD, \\\"IncrementalBinaryTree: leaf must be < SNARK_SCALAR_FIELD\\\");\\n        require(depth > 0 && depth <= MAX_DEPTH, \\\"IncrementalBinaryTree: tree depth must be between 1 and 32\\\");\\n\\n        self.depth = depth;\\n\\n        for (uint8 i = 0; i < depth; ) {\\n            self.zeroes[i] = zero;\\n            zero = PoseidonT3.poseidon([zero, zero]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        self.root = zero;\\n    }\\n\\n    /// @dev Inserts a leaf in the tree.\\n    /// @param self: Tree data.\\n    /// @param leaf: Leaf to be inserted.\\n    function insert(IncrementalTreeData storage self, uint256 leaf) public {\\n        uint256 depth = self.depth;\\n\\n        require(leaf < SNARK_SCALAR_FIELD, \\\"IncrementalBinaryTree: leaf must be < SNARK_SCALAR_FIELD\\\");\\n        require(self.numberOfLeaves < 2**depth, \\\"IncrementalBinaryTree: tree is full\\\");\\n\\n        uint256 index = self.numberOfLeaves;\\n        uint256 hash = leaf;\\n\\n        for (uint8 i = 0; i < depth; ) {\\n            if (index & 1 == 0) {\\n                self.lastSubtrees[i] = [hash, self.zeroes[i]];\\n            } else {\\n                self.lastSubtrees[i][1] = hash;\\n            }\\n\\n            hash = PoseidonT3.poseidon(self.lastSubtrees[i]);\\n            index >>= 1;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        self.root = hash;\\n        self.numberOfLeaves += 1;\\n    }\\n\\n    /// @dev Updates a leaf in the tree.\\n    /// @param self: Tree data.\\n    /// @param leaf: Leaf to be updated.\\n    /// @param newLeaf: New leaf.\\n    /// @param proofSiblings: Array of the sibling nodes of the proof of membership.\\n    /// @param proofPathIndices: Path of the proof of membership.\\n    function update(\\n        IncrementalTreeData storage self,\\n        uint256 leaf,\\n        uint256 newLeaf,\\n        uint256[] calldata proofSiblings,\\n        uint8[] calldata proofPathIndices\\n    ) public {\\n        require(\\n            verify(self, leaf, proofSiblings, proofPathIndices),\\n            \\\"IncrementalBinaryTree: leaf is not part of the tree\\\"\\n        );\\n\\n        uint256 depth = self.depth;\\n        uint256 hash = newLeaf;\\n\\n        for (uint8 i = 0; i < depth; ) {\\n            if (proofPathIndices[i] == 0) {\\n                if (proofSiblings[i] == self.lastSubtrees[i][1]) {\\n                    self.lastSubtrees[i][0] = hash;\\n                }\\n\\n                hash = PoseidonT3.poseidon([hash, proofSiblings[i]]);\\n            } else {\\n                if (proofSiblings[i] == self.lastSubtrees[i][0]) {\\n                    self.lastSubtrees[i][1] = hash;\\n                }\\n\\n                hash = PoseidonT3.poseidon([proofSiblings[i], hash]);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        self.root = hash;\\n    }\\n\\n    /// @dev Removes a leaf from the tree.\\n    /// @param self: Tree data.\\n    /// @param leaf: Leaf to be removed.\\n    /// @param proofSiblings: Array of the sibling nodes of the proof of membership.\\n    /// @param proofPathIndices: Path of the proof of membership.\\n    function remove(\\n        IncrementalTreeData storage self,\\n        uint256 leaf,\\n        uint256[] calldata proofSiblings,\\n        uint8[] calldata proofPathIndices\\n    ) public {\\n        update(self, leaf, self.zeroes[0], proofSiblings, proofPathIndices);\\n    }\\n\\n    /// @dev Verify if the path is correct and the leaf is part of the tree.\\n    /// @param self: Tree data.\\n    /// @param leaf: Leaf to be removed.\\n    /// @param proofSiblings: Array of the sibling nodes of the proof of membership.\\n    /// @param proofPathIndices: Path of the proof of membership.\\n    /// @return True or false.\\n    function verify(\\n        IncrementalTreeData storage self,\\n        uint256 leaf,\\n        uint256[] calldata proofSiblings,\\n        uint8[] calldata proofPathIndices\\n    ) private view returns (bool) {\\n        require(leaf < SNARK_SCALAR_FIELD, \\\"IncrementalBinaryTree: leaf must be < SNARK_SCALAR_FIELD\\\");\\n        uint256 depth = self.depth;\\n        require(\\n            proofPathIndices.length == depth && proofSiblings.length == depth,\\n            \\\"IncrementalBinaryTree: length of path is not correct\\\"\\n        );\\n\\n        uint256 hash = leaf;\\n\\n        for (uint8 i = 0; i < depth; ) {\\n            require(\\n                proofSiblings[i] < SNARK_SCALAR_FIELD,\\n                \\\"IncrementalBinaryTree: sibling node must be < SNARK_SCALAR_FIELD\\\"\\n            );\\n\\n            if (proofPathIndices[i] == 0) {\\n                hash = PoseidonT3.poseidon([hash, proofSiblings[i]]);\\n            } else {\\n                hash = PoseidonT3.poseidon([proofSiblings[i], hash]);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return hash == self.root;\\n    }\\n}\\n\",\"keccak256\":\"0x7aad99b66b8d77364ad901580b988257596eff6cc19d92986b376685f8dbdd1e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/security/ReentrancyGuard.sol":{"ReentrancyGuard":{"abi":[],"devdoc":{"details":"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1660,"contract":"@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard","label":"_status","offset":0,"slot":"0","type":"t_uint256"}],"types":{"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ERC721":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.","kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"constructor":{"details":"Initializes the contract by setting a `name` and a `symbol` to the token collection."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:3266:29","statements":[{"body":{"nodeType":"YulBlock","src":"102:259:29","statements":[{"nodeType":"YulAssignment","src":"112:75:29","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"179:6:29"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"137:41:29"},"nodeType":"YulFunctionCall","src":"137:49:29"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"121:15:29"},"nodeType":"YulFunctionCall","src":"121:66:29"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"112:5:29"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"203:5:29"},{"name":"length","nodeType":"YulIdentifier","src":"210:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"196:6:29"},"nodeType":"YulFunctionCall","src":"196:21:29"},"nodeType":"YulExpressionStatement","src":"196:21:29"},{"nodeType":"YulVariableDeclaration","src":"226:27:29","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"241:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"248:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"237:3:29"},"nodeType":"YulFunctionCall","src":"237:16:29"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"230:3:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"291:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"300:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"303:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"293:6:29"},"nodeType":"YulFunctionCall","src":"293:12:29"},"nodeType":"YulExpressionStatement","src":"293:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"272:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"277:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"268:3:29"},"nodeType":"YulFunctionCall","src":"268:16:29"},{"name":"end","nodeType":"YulIdentifier","src":"286:3:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"265:2:29"},"nodeType":"YulFunctionCall","src":"265:25:29"},"nodeType":"YulIf","src":"262:2:29"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"338:3:29"},{"name":"dst","nodeType":"YulIdentifier","src":"343:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"348:6:29"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"316:21:29"},"nodeType":"YulFunctionCall","src":"316:39:29"},"nodeType":"YulExpressionStatement","src":"316:39:29"}]},"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"75:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"80:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"88:3:29","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"96:5:29","type":""}],"src":"7:354:29"},{"body":{"nodeType":"YulBlock","src":"454:215:29","statements":[{"body":{"nodeType":"YulBlock","src":"503:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"512:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"515:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"505:6:29"},"nodeType":"YulFunctionCall","src":"505:12:29"},"nodeType":"YulExpressionStatement","src":"505:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"482:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"490:4:29","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"478:3:29"},"nodeType":"YulFunctionCall","src":"478:17:29"},{"name":"end","nodeType":"YulIdentifier","src":"497:3:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"474:3:29"},"nodeType":"YulFunctionCall","src":"474:27:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"467:6:29"},"nodeType":"YulFunctionCall","src":"467:35:29"},"nodeType":"YulIf","src":"464:2:29"},{"nodeType":"YulVariableDeclaration","src":"528:27:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"548:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"542:5:29"},"nodeType":"YulFunctionCall","src":"542:13:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"532:6:29","type":""}]},{"nodeType":"YulAssignment","src":"564:99:29","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"636:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"644:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"632:3:29"},"nodeType":"YulFunctionCall","src":"632:17:29"},{"name":"length","nodeType":"YulIdentifier","src":"651:6:29"},{"name":"end","nodeType":"YulIdentifier","src":"659:3:29"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"573:58:29"},"nodeType":"YulFunctionCall","src":"573:90:29"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"564:5:29"}]}]},"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"432:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"440:3:29","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"448:5:29","type":""}],"src":"381:288:29"},{"body":{"nodeType":"YulBlock","src":"789:538:29","statements":[{"body":{"nodeType":"YulBlock","src":"835:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"844:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"847:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"837:6:29"},"nodeType":"YulFunctionCall","src":"837:12:29"},"nodeType":"YulExpressionStatement","src":"837:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"810:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"819:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"806:3:29"},"nodeType":"YulFunctionCall","src":"806:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"831:2:29","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"802:3:29"},"nodeType":"YulFunctionCall","src":"802:32:29"},"nodeType":"YulIf","src":"799:2:29"},{"nodeType":"YulBlock","src":"861:224:29","statements":[{"nodeType":"YulVariableDeclaration","src":"876:38:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"900:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"911:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"896:3:29"},"nodeType":"YulFunctionCall","src":"896:17:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"890:5:29"},"nodeType":"YulFunctionCall","src":"890:24:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"880:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"961:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"970:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"973:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"963:6:29"},"nodeType":"YulFunctionCall","src":"963:12:29"},"nodeType":"YulExpressionStatement","src":"963:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"933:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"941:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"930:2:29"},"nodeType":"YulFunctionCall","src":"930:30:29"},"nodeType":"YulIf","src":"927:2:29"},{"nodeType":"YulAssignment","src":"991:84:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1047:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"1058:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1043:3:29"},"nodeType":"YulFunctionCall","src":"1043:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1067:7:29"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"1001:41:29"},"nodeType":"YulFunctionCall","src":"1001:74:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"991:6:29"}]}]},{"nodeType":"YulBlock","src":"1095:225:29","statements":[{"nodeType":"YulVariableDeclaration","src":"1110:39:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1134:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1145:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1130:3:29"},"nodeType":"YulFunctionCall","src":"1130:18:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1124:5:29"},"nodeType":"YulFunctionCall","src":"1124:25:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1114:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"1196:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1205:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1208:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1198:6:29"},"nodeType":"YulFunctionCall","src":"1198:12:29"},"nodeType":"YulExpressionStatement","src":"1198:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1168:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"1176:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1165:2:29"},"nodeType":"YulFunctionCall","src":"1165:30:29"},"nodeType":"YulIf","src":"1162:2:29"},{"nodeType":"YulAssignment","src":"1226:84:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1282:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"1293:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1278:3:29"},"nodeType":"YulFunctionCall","src":"1278:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1302:7:29"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"1236:41:29"},"nodeType":"YulFunctionCall","src":"1236:74:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1226:6:29"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"751:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"762:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"774:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"782:6:29","type":""}],"src":"675:652:29"},{"body":{"nodeType":"YulBlock","src":"1374:88:29","statements":[{"nodeType":"YulAssignment","src":"1384:30:29","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"1394:18:29"},"nodeType":"YulFunctionCall","src":"1394:20:29"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1384:6:29"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1443:6:29"},{"name":"size","nodeType":"YulIdentifier","src":"1451:4:29"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"1423:19:29"},"nodeType":"YulFunctionCall","src":"1423:33:29"},"nodeType":"YulExpressionStatement","src":"1423:33:29"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1358:4:29","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1367:6:29","type":""}],"src":"1333:129:29"},{"body":{"nodeType":"YulBlock","src":"1508:35:29","statements":[{"nodeType":"YulAssignment","src":"1518:19:29","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1534:2:29","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1528:5:29"},"nodeType":"YulFunctionCall","src":"1528:9:29"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1518:6:29"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1501:6:29","type":""}],"src":"1468:75:29"},{"body":{"nodeType":"YulBlock","src":"1616:241:29","statements":[{"body":{"nodeType":"YulBlock","src":"1721:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1723:16:29"},"nodeType":"YulFunctionCall","src":"1723:18:29"},"nodeType":"YulExpressionStatement","src":"1723:18:29"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1693:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"1701:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1690:2:29"},"nodeType":"YulFunctionCall","src":"1690:30:29"},"nodeType":"YulIf","src":"1687:2:29"},{"nodeType":"YulAssignment","src":"1753:37:29","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1783:6:29"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"1761:21:29"},"nodeType":"YulFunctionCall","src":"1761:29:29"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1753:4:29"}]},{"nodeType":"YulAssignment","src":"1827:23:29","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1839:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"1845:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1835:3:29"},"nodeType":"YulFunctionCall","src":"1835:15:29"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1827:4:29"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"1600:6:29","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"1611:4:29","type":""}],"src":"1549:308:29"},{"body":{"nodeType":"YulBlock","src":"1912:258:29","statements":[{"nodeType":"YulVariableDeclaration","src":"1922:10:29","value":{"kind":"number","nodeType":"YulLiteral","src":"1931:1:29","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1926:1:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"1991:63:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2016:3:29"},{"name":"i","nodeType":"YulIdentifier","src":"2021:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2012:3:29"},"nodeType":"YulFunctionCall","src":"2012:11:29"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2035:3:29"},{"name":"i","nodeType":"YulIdentifier","src":"2040:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2031:3:29"},"nodeType":"YulFunctionCall","src":"2031:11:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2025:5:29"},"nodeType":"YulFunctionCall","src":"2025:18:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2005:6:29"},"nodeType":"YulFunctionCall","src":"2005:39:29"},"nodeType":"YulExpressionStatement","src":"2005:39:29"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1952:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"1955:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1949:2:29"},"nodeType":"YulFunctionCall","src":"1949:13:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1963:19:29","statements":[{"nodeType":"YulAssignment","src":"1965:15:29","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1974:1:29"},{"kind":"number","nodeType":"YulLiteral","src":"1977:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1970:3:29"},"nodeType":"YulFunctionCall","src":"1970:10:29"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1965:1:29"}]}]},"pre":{"nodeType":"YulBlock","src":"1945:3:29","statements":[]},"src":"1941:113:29"},{"body":{"nodeType":"YulBlock","src":"2088:76:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2138:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"2143:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2134:3:29"},"nodeType":"YulFunctionCall","src":"2134:16:29"},{"kind":"number","nodeType":"YulLiteral","src":"2152:1:29","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2127:6:29"},"nodeType":"YulFunctionCall","src":"2127:27:29"},"nodeType":"YulExpressionStatement","src":"2127:27:29"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2069:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"2072:6:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2066:2:29"},"nodeType":"YulFunctionCall","src":"2066:13:29"},"nodeType":"YulIf","src":"2063:2:29"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1894:3:29","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1899:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"1904:6:29","type":""}],"src":"1863:307:29"},{"body":{"nodeType":"YulBlock","src":"2227:269:29","statements":[{"nodeType":"YulAssignment","src":"2237:22:29","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2251:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"2257:1:29","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"2247:3:29"},"nodeType":"YulFunctionCall","src":"2247:12:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2237:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"2268:38:29","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2298:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"2304:1:29","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2294:3:29"},"nodeType":"YulFunctionCall","src":"2294:12:29"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"2272:18:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"2345:51:29","statements":[{"nodeType":"YulAssignment","src":"2359:27:29","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2373:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"2381:4:29","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2369:3:29"},"nodeType":"YulFunctionCall","src":"2369:17:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2359:6:29"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2325:18:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2318:6:29"},"nodeType":"YulFunctionCall","src":"2318:26:29"},"nodeType":"YulIf","src":"2315:2:29"},{"body":{"nodeType":"YulBlock","src":"2448:42:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"2462:16:29"},"nodeType":"YulFunctionCall","src":"2462:18:29"},"nodeType":"YulExpressionStatement","src":"2462:18:29"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2412:18:29"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2435:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"2443:2:29","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2432:2:29"},"nodeType":"YulFunctionCall","src":"2432:14:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2409:2:29"},"nodeType":"YulFunctionCall","src":"2409:38:29"},"nodeType":"YulIf","src":"2406:2:29"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2211:4:29","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"2220:6:29","type":""}],"src":"2176:320:29"},{"body":{"nodeType":"YulBlock","src":"2545:238:29","statements":[{"nodeType":"YulVariableDeclaration","src":"2555:58:29","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2577:6:29"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"2607:4:29"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2585:21:29"},"nodeType":"YulFunctionCall","src":"2585:27:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2573:3:29"},"nodeType":"YulFunctionCall","src":"2573:40:29"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"2559:10:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"2724:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2726:16:29"},"nodeType":"YulFunctionCall","src":"2726:18:29"},"nodeType":"YulExpressionStatement","src":"2726:18:29"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2667:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"2679:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2664:2:29"},"nodeType":"YulFunctionCall","src":"2664:34:29"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2703:10:29"},{"name":"memPtr","nodeType":"YulIdentifier","src":"2715:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2700:2:29"},"nodeType":"YulFunctionCall","src":"2700:22:29"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2661:2:29"},"nodeType":"YulFunctionCall","src":"2661:62:29"},"nodeType":"YulIf","src":"2658:2:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2762:2:29","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2766:10:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2755:6:29"},"nodeType":"YulFunctionCall","src":"2755:22:29"},"nodeType":"YulExpressionStatement","src":"2755:22:29"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"2531:6:29","type":""},{"name":"size","nodeType":"YulTypedName","src":"2539:4:29","type":""}],"src":"2502:281:29"},{"body":{"nodeType":"YulBlock","src":"2817:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2834:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2837:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2827:6:29"},"nodeType":"YulFunctionCall","src":"2827:88:29"},"nodeType":"YulExpressionStatement","src":"2827:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2931:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2934:4:29","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2924:6:29"},"nodeType":"YulFunctionCall","src":"2924:15:29"},"nodeType":"YulExpressionStatement","src":"2924:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2955:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2958:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2948:6:29"},"nodeType":"YulFunctionCall","src":"2948:15:29"},"nodeType":"YulExpressionStatement","src":"2948:15:29"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"2789:180:29"},{"body":{"nodeType":"YulBlock","src":"3003:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3020:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3023:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3013:6:29"},"nodeType":"YulFunctionCall","src":"3013:88:29"},"nodeType":"YulExpressionStatement","src":"3013:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3117:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3120:4:29","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3110:6:29"},"nodeType":"YulFunctionCall","src":"3110:15:29"},"nodeType":"YulExpressionStatement","src":"3110:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3141:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3144:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3134:6:29"},"nodeType":"YulFunctionCall","src":"3134:15:29"},"nodeType":"YulExpressionStatement","src":"3134:15:29"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"2975:180:29"},{"body":{"nodeType":"YulBlock","src":"3209:54:29","statements":[{"nodeType":"YulAssignment","src":"3219:38:29","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3237:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"3244:2:29","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3233:3:29"},"nodeType":"YulFunctionCall","src":"3233:14:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3253:2:29","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3249:3:29"},"nodeType":"YulFunctionCall","src":"3249:7:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3229:3:29"},"nodeType":"YulFunctionCall","src":"3229:28:29"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"3219:6:29"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3192:5:29","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"3202:6:29","type":""}],"src":"3161:102:29"}]},"contents":"{\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert(0, 0) }\n        copy_memory_to_memory(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n\n        {\n\n            let offset := mload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value0 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value1 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n}\n","id":29,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b506040516200276538038062002765833981810160405281019062000037919062000193565b81600090805190602001906200004f92919062000071565b5080600190805190602001906200006892919062000071565b50505062000376565b8280546200007f906200029b565b90600052602060002090601f016020900481019282620000a35760008555620000ef565b82601f10620000be57805160ff1916838001178555620000ef565b82800160010185558215620000ef579182015b82811115620000ee578251825591602001919060010190620000d1565b5b509050620000fe919062000102565b5090565b5b808211156200011d57600081600090555060010162000103565b5090565b60006200013862000132846200022f565b62000206565b9050828152602081018484840111156200015157600080fd5b6200015e84828562000265565b509392505050565b600082601f8301126200017857600080fd5b81516200018a84826020860162000121565b91505092915050565b60008060408385031215620001a757600080fd5b600083015167ffffffffffffffff811115620001c257600080fd5b620001d08582860162000166565b925050602083015167ffffffffffffffff811115620001ee57600080fd5b620001fc8582860162000166565b9150509250929050565b60006200021262000225565b9050620002208282620002d1565b919050565b6000604051905090565b600067ffffffffffffffff8211156200024d576200024c62000336565b5b620002588262000365565b9050602081019050919050565b60005b838110156200028557808201518184015260208101905062000268565b8381111562000295576000848401525b50505050565b60006002820490506001821680620002b457607f821691505b60208210811415620002cb57620002ca62000307565b5b50919050565b620002dc8262000365565b810181811067ffffffffffffffff82111715620002fe57620002fd62000336565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6123df80620003866000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb46514610224578063b88d4fde14610240578063c87b56dd1461025c578063e985e9c51461028c576100cf565b80636352211e146101a657806370a08231146101d657806395d89b4114610206576100cf565b806301ffc9a7146100d457806306fdde0314610104578063081812fc14610122578063095ea7b31461015257806323b872dd1461016e57806342842e0e1461018a575b600080fd5b6100ee60048036038101906100e9919061196f565b6102bc565b6040516100fb9190611c80565b60405180910390f35b61010c61039e565b6040516101199190611c9b565b60405180910390f35b61013c600480360381019061013791906119c1565b610430565b6040516101499190611c19565b60405180910390f35b61016c60048036038101906101679190611933565b610476565b005b6101886004803603810190610183919061182d565b61058e565b005b6101a4600480360381019061019f919061182d565b6105ee565b005b6101c060048036038101906101bb91906119c1565b61060e565b6040516101cd9190611c19565b60405180910390f35b6101f060048036038101906101eb91906117c8565b610695565b6040516101fd9190611ddd565b60405180910390f35b61020e61074d565b60405161021b9190611c9b565b60405180910390f35b61023e600480360381019061023991906118f7565b6107df565b005b61025a6004803603810190610255919061187c565b6107f5565b005b610276600480360381019061027191906119c1565b610857565b6040516102839190611c9b565b60405180910390f35b6102a660048036038101906102a191906117f1565b6108bf565b6040516102b39190611c80565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061038757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610397575061039682610953565b5b9050919050565b6060600080546103ad90611fd1565b80601f01602080910402602001604051908101604052809291908181526020018280546103d990611fd1565b80156104265780601f106103fb57610100808354040283529160200191610426565b820191906000526020600020905b81548152906001019060200180831161040957829003601f168201915b5050505050905090565b600061043b826109bd565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006104818261060e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156104f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e990611d9d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610511610a08565b73ffffffffffffffffffffffffffffffffffffffff161480610540575061053f8161053a610a08565b6108bf565b5b61057f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057690611dbd565b60405180910390fd5b6105898383610a10565b505050565b61059f610599610a08565b82610ac9565b6105de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d590611cbd565b60405180910390fd5b6105e9838383610b5e565b505050565b610609838383604051806020016040528060008152506107f5565b505050565b60008061061a83610e58565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561068c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068390611d7d565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610706576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fd90611d5d565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461075c90611fd1565b80601f016020809104026020016040519081016040528092919081815260200182805461078890611fd1565b80156107d55780601f106107aa576101008083540402835291602001916107d5565b820191906000526020600020905b8154815290600101906020018083116107b857829003601f168201915b5050505050905090565b6107f16107ea610a08565b8383610e95565b5050565b610806610800610a08565b83610ac9565b610845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083c90611cbd565b60405180910390fd5b61085184848484611002565b50505050565b6060610862826109bd565b600061086c61105e565b9050600081511161088c57604051806020016040528060008152506108b7565b8061089684611075565b6040516020016108a7929190611bf5565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6109c681611199565b610a05576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fc90611d7d565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610a838361060e565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610ad58361060e565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610b175750610b1681856108bf565b5b80610b5557508373ffffffffffffffffffffffffffffffffffffffff16610b3d84610430565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610b7e8261060e565b73ffffffffffffffffffffffffffffffffffffffff1614610bd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcb90611cfd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3b90611d1d565b60405180910390fd5b610c5183838360016111da565b8273ffffffffffffffffffffffffffffffffffffffff16610c718261060e565b73ffffffffffffffffffffffffffffffffffffffff1614610cc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbe90611cfd565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610e538383836001611300565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610f04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efb90611d3d565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610ff59190611c80565b60405180910390a3505050565b61100d848484610b5e565b61101984848484611306565b611058576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104f90611cdd565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060600060016110848461149d565b01905060008167ffffffffffffffff8111156110c9577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156110fb5781602001600182028036833780820191505090505b509050600082602001820190505b60011561118e578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611178577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b04945060008514156111895761118e565b611109565b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166111bb83610e58565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60018111156112fa57600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461126e5780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112669190611ee7565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146112f95780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112f19190611e91565b925050819055505b5b50505050565b50505050565b60006113278473ffffffffffffffffffffffffffffffffffffffff166116d4565b15611490578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611350610a08565b8786866040518563ffffffff1660e01b81526004016113729493929190611c34565b602060405180830381600087803b15801561138c57600080fd5b505af19250505080156113bd57506040513d601f19601f820116820180604052508101906113ba9190611998565b60015b611440573d80600081146113ed576040519150601f19603f3d011682016040523d82523d6000602084013e6113f2565b606091505b50600081511415611438576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142f90611cdd565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611495565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611521577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611517577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611584576d04ee2d6d415b85acef8100000000838161157a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506020810190505b662386f26fc1000083106115d957662386f26fc1000083816115cf577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506010810190505b6305f5e1008310611628576305f5e100838161161e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506008810190505b6127108310611673576127108381611669577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506004810190505b606483106116bc57606483816116b2577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506002810190505b600a83106116cb576001810190505b80915050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600061170a61170584611e1d565b611df8565b90508281526020810184848401111561172257600080fd5b61172d848285611f8f565b509392505050565b6000813590506117448161234d565b92915050565b60008135905061175981612364565b92915050565b60008135905061176e8161237b565b92915050565b6000815190506117838161237b565b92915050565b600082601f83011261179a57600080fd5b81356117aa8482602086016116f7565b91505092915050565b6000813590506117c281612392565b92915050565b6000602082840312156117da57600080fd5b60006117e884828501611735565b91505092915050565b6000806040838503121561180457600080fd5b600061181285828601611735565b925050602061182385828601611735565b9150509250929050565b60008060006060848603121561184257600080fd5b600061185086828701611735565b935050602061186186828701611735565b9250506040611872868287016117b3565b9150509250925092565b6000806000806080858703121561189257600080fd5b60006118a087828801611735565b94505060206118b187828801611735565b93505060406118c2878288016117b3565b925050606085013567ffffffffffffffff8111156118df57600080fd5b6118eb87828801611789565b91505092959194509250565b6000806040838503121561190a57600080fd5b600061191885828601611735565b92505060206119298582860161174a565b9150509250929050565b6000806040838503121561194657600080fd5b600061195485828601611735565b9250506020611965858286016117b3565b9150509250929050565b60006020828403121561198157600080fd5b600061198f8482850161175f565b91505092915050565b6000602082840312156119aa57600080fd5b60006119b884828501611774565b91505092915050565b6000602082840312156119d357600080fd5b60006119e1848285016117b3565b91505092915050565b6119f381611f1b565b82525050565b611a0281611f2d565b82525050565b6000611a1382611e4e565b611a1d8185611e64565b9350611a2d818560208601611f9e565b611a36816120c1565b840191505092915050565b6000611a4c82611e59565b611a568185611e75565b9350611a66818560208601611f9e565b611a6f816120c1565b840191505092915050565b6000611a8582611e59565b611a8f8185611e86565b9350611a9f818560208601611f9e565b80840191505092915050565b6000611ab8602d83611e75565b9150611ac3826120d2565b604082019050919050565b6000611adb603283611e75565b9150611ae682612121565b604082019050919050565b6000611afe602583611e75565b9150611b0982612170565b604082019050919050565b6000611b21602483611e75565b9150611b2c826121bf565b604082019050919050565b6000611b44601983611e75565b9150611b4f8261220e565b602082019050919050565b6000611b67602983611e75565b9150611b7282612237565b604082019050919050565b6000611b8a601883611e75565b9150611b9582612286565b602082019050919050565b6000611bad602183611e75565b9150611bb8826122af565b604082019050919050565b6000611bd0603d83611e75565b9150611bdb826122fe565b604082019050919050565b611bef81611f85565b82525050565b6000611c018285611a7a565b9150611c0d8284611a7a565b91508190509392505050565b6000602082019050611c2e60008301846119ea565b92915050565b6000608082019050611c4960008301876119ea565b611c5660208301866119ea565b611c636040830185611be6565b8181036060830152611c758184611a08565b905095945050505050565b6000602082019050611c9560008301846119f9565b92915050565b60006020820190508181036000830152611cb58184611a41565b905092915050565b60006020820190508181036000830152611cd681611aab565b9050919050565b60006020820190508181036000830152611cf681611ace565b9050919050565b60006020820190508181036000830152611d1681611af1565b9050919050565b60006020820190508181036000830152611d3681611b14565b9050919050565b60006020820190508181036000830152611d5681611b37565b9050919050565b60006020820190508181036000830152611d7681611b5a565b9050919050565b60006020820190508181036000830152611d9681611b7d565b9050919050565b60006020820190508181036000830152611db681611ba0565b9050919050565b60006020820190508181036000830152611dd681611bc3565b9050919050565b6000602082019050611df26000830184611be6565b92915050565b6000611e02611e13565b9050611e0e8282612003565b919050565b6000604051905090565b600067ffffffffffffffff821115611e3857611e37612092565b5b611e41826120c1565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000611e9c82611f85565b9150611ea783611f85565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611edc57611edb612034565b5b828201905092915050565b6000611ef282611f85565b9150611efd83611f85565b925082821015611f1057611f0f612034565b5b828203905092915050565b6000611f2682611f65565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015611fbc578082015181840152602081019050611fa1565b83811115611fcb576000848401525b50505050565b60006002820490506001821680611fe957607f821691505b60208210811415611ffd57611ffc612063565b5b50919050565b61200c826120c1565b810181811067ffffffffffffffff8211171561202b5761202a612092565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b61235681611f1b565b811461236157600080fd5b50565b61236d81611f2d565b811461237857600080fd5b50565b61238481611f39565b811461238f57600080fd5b50565b61239b81611f85565b81146123a657600080fd5b5056fea26469706673582212200569c7ee2f5a68fa61bc611f53dc722aac4d3a96ed6ea7819570428d4d0ad08664736f6c63430008040033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2765 CODESIZE SUB DUP1 PUSH3 0x2765 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x193 JUMP JUMPDEST DUP2 PUSH1 0x0 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x4F SWAP3 SWAP2 SWAP1 PUSH3 0x71 JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x68 SWAP3 SWAP2 SWAP1 PUSH3 0x71 JUMP JUMPDEST POP POP POP PUSH3 0x376 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x7F SWAP1 PUSH3 0x29B JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0xA3 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0xEF JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0xBE JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0xEF JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0xEF JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xEE JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xD1 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0xFE SWAP2 SWAP1 PUSH3 0x102 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x11D JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x103 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x138 PUSH3 0x132 DUP5 PUSH3 0x22F JUMP JUMPDEST PUSH3 0x206 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x151 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x15E DUP5 DUP3 DUP6 PUSH3 0x265 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x178 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x18A DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x121 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x1A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x1C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1D0 DUP6 DUP3 DUP7 ADD PUSH3 0x166 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x1EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1FC DUP6 DUP3 DUP7 ADD PUSH3 0x166 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x212 PUSH3 0x225 JUMP JUMPDEST SWAP1 POP PUSH3 0x220 DUP3 DUP3 PUSH3 0x2D1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x24D JUMPI PUSH3 0x24C PUSH3 0x336 JUMP JUMPDEST JUMPDEST PUSH3 0x258 DUP3 PUSH3 0x365 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x285 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x268 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x295 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x2B4 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x2CB JUMPI PUSH3 0x2CA PUSH3 0x307 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x2DC DUP3 PUSH3 0x365 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x2FE JUMPI PUSH3 0x2FD PUSH3 0x336 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x23DF DUP1 PUSH3 0x386 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x28C JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x206 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x18A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x196F JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x1C80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10C PUSH2 0x39E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0x1C9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x19C1 JUMP JUMPDEST PUSH2 0x430 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x149 SWAP2 SWAP1 PUSH2 0x1C19 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x167 SWAP2 SWAP1 PUSH2 0x1933 JUMP JUMPDEST PUSH2 0x476 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x188 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x183 SWAP2 SWAP1 PUSH2 0x182D JUMP JUMPDEST PUSH2 0x58E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x182D JUMP JUMPDEST PUSH2 0x5EE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BB SWAP2 SWAP1 PUSH2 0x19C1 JUMP JUMPDEST PUSH2 0x60E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CD SWAP2 SWAP1 PUSH2 0x1C19 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x17C8 JUMP JUMPDEST PUSH2 0x695 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FD SWAP2 SWAP1 PUSH2 0x1DDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20E PUSH2 0x74D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21B SWAP2 SWAP1 PUSH2 0x1C9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x239 SWAP2 SWAP1 PUSH2 0x18F7 JUMP JUMPDEST PUSH2 0x7DF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x187C JUMP JUMPDEST PUSH2 0x7F5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x276 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x271 SWAP2 SWAP1 PUSH2 0x19C1 JUMP JUMPDEST PUSH2 0x857 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x1C9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x17F1 JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B3 SWAP2 SWAP1 PUSH2 0x1C80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x387 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x397 JUMPI POP PUSH2 0x396 DUP3 PUSH2 0x953 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x3AD SWAP1 PUSH2 0x1FD1 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3D9 SWAP1 PUSH2 0x1FD1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x426 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3FB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x426 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x409 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43B DUP3 PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x481 DUP3 PUSH2 0x60E JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E9 SWAP1 PUSH2 0x1D9D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x511 PUSH2 0xA08 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x540 JUMPI POP PUSH2 0x53F DUP2 PUSH2 0x53A PUSH2 0xA08 JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST JUMPDEST PUSH2 0x57F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x576 SWAP1 PUSH2 0x1DBD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x589 DUP4 DUP4 PUSH2 0xA10 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x59F PUSH2 0x599 PUSH2 0xA08 JUMP JUMPDEST DUP3 PUSH2 0xAC9 JUMP JUMPDEST PUSH2 0x5DE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5D5 SWAP1 PUSH2 0x1CBD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E9 DUP4 DUP4 DUP4 PUSH2 0xB5E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x609 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x7F5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x61A DUP4 PUSH2 0xE58 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x68C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x683 SWAP1 PUSH2 0x1D7D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x706 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FD SWAP1 PUSH2 0x1D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x75C SWAP1 PUSH2 0x1FD1 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x788 SWAP1 PUSH2 0x1FD1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7D5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7AA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7D5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7B8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x7F1 PUSH2 0x7EA PUSH2 0xA08 JUMP JUMPDEST DUP4 DUP4 PUSH2 0xE95 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x806 PUSH2 0x800 PUSH2 0xA08 JUMP JUMPDEST DUP4 PUSH2 0xAC9 JUMP JUMPDEST PUSH2 0x845 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x83C SWAP1 PUSH2 0x1CBD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x851 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1002 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x862 DUP3 PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x86C PUSH2 0x105E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x88C JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x8B7 JUMP JUMPDEST DUP1 PUSH2 0x896 DUP5 PUSH2 0x1075 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8A7 SWAP3 SWAP2 SWAP1 PUSH2 0x1BF5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9C6 DUP2 PUSH2 0x1199 JUMP JUMPDEST PUSH2 0xA05 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9FC SWAP1 PUSH2 0x1D7D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA83 DUP4 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAD5 DUP4 PUSH2 0x60E JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xB17 JUMPI POP PUSH2 0xB16 DUP2 DUP6 PUSH2 0x8BF JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xB55 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB3D DUP5 PUSH2 0x430 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB7E DUP3 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBD4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBCB SWAP1 PUSH2 0x1CFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC44 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC3B SWAP1 PUSH2 0x1D1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC51 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x11DA JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC71 DUP3 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCC7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCBE SWAP1 PUSH2 0x1CFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xE53 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1300 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xF04 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEFB SWAP1 PUSH2 0x1D3D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0xFF5 SWAP2 SWAP1 PUSH2 0x1C80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x100D DUP5 DUP5 DUP5 PUSH2 0xB5E JUMP JUMPDEST PUSH2 0x1019 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1306 JUMP JUMPDEST PUSH2 0x1058 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x104F SWAP1 PUSH2 0x1CDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x1084 DUP5 PUSH2 0x149D JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x10C9 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x10FB JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x118E JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x1178 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 EQ ISZERO PUSH2 0x1189 JUMPI PUSH2 0x118E JUMP JUMPDEST PUSH2 0x1109 JUMP JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x11BB DUP4 PUSH2 0xE58 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x12FA JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x126E JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1266 SWAP2 SWAP1 PUSH2 0x1EE7 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x12F9 JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x12F1 SWAP2 SWAP1 PUSH2 0x1E91 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1327 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x16D4 JUMP JUMPDEST ISZERO PUSH2 0x1490 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1350 PUSH2 0xA08 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1372 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1C34 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x138C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x13BD JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x13BA SWAP2 SWAP1 PUSH2 0x1998 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1440 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x13ED JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x13F2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x1438 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x142F SWAP1 PUSH2 0x1CDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x1495 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1521 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x1517 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x1584 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x157A JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x15D9 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x15CF JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1628 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x161E JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1673 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x1669 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x16BC JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x16B2 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x16CB JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x170A PUSH2 0x1705 DUP5 PUSH2 0x1E1D JUMP JUMPDEST PUSH2 0x1DF8 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1722 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x172D DUP5 DUP3 DUP6 PUSH2 0x1F8F JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1744 DUP2 PUSH2 0x234D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1759 DUP2 PUSH2 0x2364 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x176E DUP2 PUSH2 0x237B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1783 DUP2 PUSH2 0x237B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x179A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x17AA DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x16F7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x17C2 DUP2 PUSH2 0x2392 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x17DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x17E8 DUP5 DUP3 DUP6 ADD PUSH2 0x1735 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1804 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1812 DUP6 DUP3 DUP7 ADD PUSH2 0x1735 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1823 DUP6 DUP3 DUP7 ADD PUSH2 0x1735 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1842 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1850 DUP7 DUP3 DUP8 ADD PUSH2 0x1735 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1861 DUP7 DUP3 DUP8 ADD PUSH2 0x1735 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1872 DUP7 DUP3 DUP8 ADD PUSH2 0x17B3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1892 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x18A0 DUP8 DUP3 DUP9 ADD PUSH2 0x1735 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x18B1 DUP8 DUP3 DUP9 ADD PUSH2 0x1735 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x18C2 DUP8 DUP3 DUP9 ADD PUSH2 0x17B3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x18DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x18EB DUP8 DUP3 DUP9 ADD PUSH2 0x1789 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x190A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1918 DUP6 DUP3 DUP7 ADD PUSH2 0x1735 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1929 DUP6 DUP3 DUP7 ADD PUSH2 0x174A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1946 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1954 DUP6 DUP3 DUP7 ADD PUSH2 0x1735 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1965 DUP6 DUP3 DUP7 ADD PUSH2 0x17B3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1981 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x198F DUP5 DUP3 DUP6 ADD PUSH2 0x175F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x19B8 DUP5 DUP3 DUP6 ADD PUSH2 0x1774 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x19E1 DUP5 DUP3 DUP6 ADD PUSH2 0x17B3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x19F3 DUP2 PUSH2 0x1F1B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1A02 DUP2 PUSH2 0x1F2D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A13 DUP3 PUSH2 0x1E4E JUMP JUMPDEST PUSH2 0x1A1D DUP2 DUP6 PUSH2 0x1E64 JUMP JUMPDEST SWAP4 POP PUSH2 0x1A2D DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1F9E JUMP JUMPDEST PUSH2 0x1A36 DUP2 PUSH2 0x20C1 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A4C DUP3 PUSH2 0x1E59 JUMP JUMPDEST PUSH2 0x1A56 DUP2 DUP6 PUSH2 0x1E75 JUMP JUMPDEST SWAP4 POP PUSH2 0x1A66 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1F9E JUMP JUMPDEST PUSH2 0x1A6F DUP2 PUSH2 0x20C1 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A85 DUP3 PUSH2 0x1E59 JUMP JUMPDEST PUSH2 0x1A8F DUP2 DUP6 PUSH2 0x1E86 JUMP JUMPDEST SWAP4 POP PUSH2 0x1A9F DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1F9E JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AB8 PUSH1 0x2D DUP4 PUSH2 0x1E75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1AC3 DUP3 PUSH2 0x20D2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1ADB PUSH1 0x32 DUP4 PUSH2 0x1E75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1AE6 DUP3 PUSH2 0x2121 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AFE PUSH1 0x25 DUP4 PUSH2 0x1E75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B09 DUP3 PUSH2 0x2170 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B21 PUSH1 0x24 DUP4 PUSH2 0x1E75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B2C DUP3 PUSH2 0x21BF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B44 PUSH1 0x19 DUP4 PUSH2 0x1E75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B4F DUP3 PUSH2 0x220E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B67 PUSH1 0x29 DUP4 PUSH2 0x1E75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B72 DUP3 PUSH2 0x2237 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B8A PUSH1 0x18 DUP4 PUSH2 0x1E75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B95 DUP3 PUSH2 0x2286 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BAD PUSH1 0x21 DUP4 PUSH2 0x1E75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1BB8 DUP3 PUSH2 0x22AF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BD0 PUSH1 0x3D DUP4 PUSH2 0x1E75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1BDB DUP3 PUSH2 0x22FE JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1BEF DUP2 PUSH2 0x1F85 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C01 DUP3 DUP6 PUSH2 0x1A7A JUMP JUMPDEST SWAP2 POP PUSH2 0x1C0D DUP3 DUP5 PUSH2 0x1A7A JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1C2E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x19EA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x1C49 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x19EA JUMP JUMPDEST PUSH2 0x1C56 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x19EA JUMP JUMPDEST PUSH2 0x1C63 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1BE6 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x1C75 DUP2 DUP5 PUSH2 0x1A08 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1C95 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x19F9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CB5 DUP2 DUP5 PUSH2 0x1A41 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CD6 DUP2 PUSH2 0x1AAB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CF6 DUP2 PUSH2 0x1ACE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D16 DUP2 PUSH2 0x1AF1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D36 DUP2 PUSH2 0x1B14 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D56 DUP2 PUSH2 0x1B37 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D76 DUP2 PUSH2 0x1B5A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D96 DUP2 PUSH2 0x1B7D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1DB6 DUP2 PUSH2 0x1BA0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1DD6 DUP2 PUSH2 0x1BC3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1DF2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1BE6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E02 PUSH2 0x1E13 JUMP JUMPDEST SWAP1 POP PUSH2 0x1E0E DUP3 DUP3 PUSH2 0x2003 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1E38 JUMPI PUSH2 0x1E37 PUSH2 0x2092 JUMP JUMPDEST JUMPDEST PUSH2 0x1E41 DUP3 PUSH2 0x20C1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E9C DUP3 PUSH2 0x1F85 JUMP JUMPDEST SWAP2 POP PUSH2 0x1EA7 DUP4 PUSH2 0x1F85 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x1EDC JUMPI PUSH2 0x1EDB PUSH2 0x2034 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EF2 DUP3 PUSH2 0x1F85 JUMP JUMPDEST SWAP2 POP PUSH2 0x1EFD DUP4 PUSH2 0x1F85 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x1F10 JUMPI PUSH2 0x1F0F PUSH2 0x2034 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F26 DUP3 PUSH2 0x1F65 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1FBC JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1FA1 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1FCB JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1FE9 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1FFD JUMPI PUSH2 0x1FFC PUSH2 0x2063 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x200C DUP3 PUSH2 0x20C1 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x202B JUMPI PUSH2 0x202A PUSH2 0x2092 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x2356 DUP2 PUSH2 0x1F1B JUMP JUMPDEST DUP2 EQ PUSH2 0x2361 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x236D DUP2 PUSH2 0x1F2D JUMP JUMPDEST DUP2 EQ PUSH2 0x2378 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x2384 DUP2 PUSH2 0x1F39 JUMP JUMPDEST DUP2 EQ PUSH2 0x238F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x239B DUP2 PUSH2 0x1F85 JUMP JUMPDEST DUP2 EQ PUSH2 0x23A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SDIV PUSH10 0xC7EE2F5A68FA61BC611F MSTORE8 0xDC PUSH19 0x2AAC4D3A96ED6EA7819570428D4D0AD0866473 PUSH16 0x6C634300080400330000000000000000 ","sourceMap":"628:16327:13:-:0;;;1390:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1464:5;1456;:13;;;;;;;;;;;;:::i;:::-;;1489:7;1479;:17;;;;;;;;;;;;:::i;:::-;;1390:113;;628:16327;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:354:29:-;96:5;121:66;137:49;179:6;137:49;:::i;:::-;121:66;:::i;:::-;112:75;;210:6;203:5;196:21;248:4;241:5;237:16;286:3;277:6;272:3;268:16;265:25;262:2;;;303:1;300;293:12;262:2;316:39;348:6;343:3;338;316:39;:::i;:::-;102:259;;;;;;:::o;381:288::-;448:5;497:3;490:4;482:6;478:17;474:27;464:2;;515:1;512;505:12;464:2;548:6;542:13;573:90;659:3;651:6;644:4;636:6;632:17;573:90;:::i;:::-;564:99;;454:215;;;;;:::o;675:652::-;774:6;782;831:2;819:9;810:7;806:23;802:32;799:2;;;847:1;844;837:12;799:2;911:1;900:9;896:17;890:24;941:18;933:6;930:30;927:2;;;973:1;970;963:12;927:2;1001:74;1067:7;1058:6;1047:9;1043:22;1001:74;:::i;:::-;991:84;;861:224;1145:2;1134:9;1130:18;1124:25;1176:18;1168:6;1165:30;1162:2;;;1208:1;1205;1198:12;1162:2;1236:74;1302:7;1293:6;1282:9;1278:22;1236:74;:::i;:::-;1226:84;;1095:225;789:538;;;;;:::o;1333:129::-;1367:6;1394:20;;:::i;:::-;1384:30;;1423:33;1451:4;1443:6;1423:33;:::i;:::-;1374:88;;;:::o;1468:75::-;1501:6;1534:2;1528:9;1518:19;;1508:35;:::o;1549:308::-;1611:4;1701:18;1693:6;1690:30;1687:2;;;1723:18;;:::i;:::-;1687:2;1761:29;1783:6;1761:29;:::i;:::-;1753:37;;1845:4;1839;1835:15;1827:23;;1616:241;;;:::o;1863:307::-;1931:1;1941:113;1955:6;1952:1;1949:13;1941:113;;;2040:1;2035:3;2031:11;2025:18;2021:1;2016:3;2012:11;2005:39;1977:2;1974:1;1970:10;1965:15;;1941:113;;;2072:6;2069:1;2066:13;2063:2;;;2152:1;2143:6;2138:3;2134:16;2127:27;2063:2;1912:258;;;;:::o;2176:320::-;2220:6;2257:1;2251:4;2247:12;2237:22;;2304:1;2298:4;2294:12;2325:18;2315:2;;2381:4;2373:6;2369:17;2359:27;;2315:2;2443;2435:6;2432:14;2412:18;2409:38;2406:2;;;2462:18;;:::i;:::-;2406:2;2227:269;;;;:::o;2502:281::-;2585:27;2607:4;2585:27;:::i;:::-;2577:6;2573:40;2715:6;2703:10;2700:22;2679:18;2667:10;2664:34;2661:62;2658:2;;;2726:18;;:::i;:::-;2658:2;2766:10;2762:2;2755:22;2545:238;;;:::o;2789:180::-;2837:77;2834:1;2827:88;2934:4;2931:1;2924:15;2958:4;2955:1;2948:15;2975:180;3023:77;3020:1;3013:88;3120:4;3117:1;3110:15;3144:4;3141:1;3134:15;3161:102;3202:6;3253:2;3249:7;3244:2;3237:5;3233:14;3229:28;3219:38;;3209:54;;;:::o;628:16327:13:-;;;;;;;"},"deployedBytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:22379:29","statements":[{"body":{"nodeType":"YulBlock","src":"90:260:29","statements":[{"nodeType":"YulAssignment","src":"100:74:29","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"166:6:29"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"125:40:29"},"nodeType":"YulFunctionCall","src":"125:48:29"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"109:15:29"},"nodeType":"YulFunctionCall","src":"109:65:29"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"100:5:29"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"190:5:29"},{"name":"length","nodeType":"YulIdentifier","src":"197:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"183:6:29"},"nodeType":"YulFunctionCall","src":"183:21:29"},"nodeType":"YulExpressionStatement","src":"183:21:29"},{"nodeType":"YulVariableDeclaration","src":"213:27:29","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"228:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"235:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"224:3:29"},"nodeType":"YulFunctionCall","src":"224:16:29"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"217:3:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"278:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"287:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"290:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"280:6:29"},"nodeType":"YulFunctionCall","src":"280:12:29"},"nodeType":"YulExpressionStatement","src":"280:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"259:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"264:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"255:3:29"},"nodeType":"YulFunctionCall","src":"255:16:29"},{"name":"end","nodeType":"YulIdentifier","src":"273:3:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"252:2:29"},"nodeType":"YulFunctionCall","src":"252:25:29"},"nodeType":"YulIf","src":"249:2:29"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"327:3:29"},{"name":"dst","nodeType":"YulIdentifier","src":"332:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"337:6:29"}],"functionName":{"name":"copy_calldata_to_memory","nodeType":"YulIdentifier","src":"303:23:29"},"nodeType":"YulFunctionCall","src":"303:41:29"},"nodeType":"YulExpressionStatement","src":"303:41:29"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"63:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"68:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"76:3:29","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"84:5:29","type":""}],"src":"7:343:29"},{"body":{"nodeType":"YulBlock","src":"408:87:29","statements":[{"nodeType":"YulAssignment","src":"418:29:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"440:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"427:12:29"},"nodeType":"YulFunctionCall","src":"427:20:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"418:5:29"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"483:5:29"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"456:26:29"},"nodeType":"YulFunctionCall","src":"456:33:29"},"nodeType":"YulExpressionStatement","src":"456:33:29"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"386:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"394:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"402:5:29","type":""}],"src":"356:139:29"},{"body":{"nodeType":"YulBlock","src":"550:84:29","statements":[{"nodeType":"YulAssignment","src":"560:29:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"582:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"569:12:29"},"nodeType":"YulFunctionCall","src":"569:20:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"560:5:29"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"622:5:29"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"598:23:29"},"nodeType":"YulFunctionCall","src":"598:30:29"},"nodeType":"YulExpressionStatement","src":"598:30:29"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"528:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"536:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"544:5:29","type":""}],"src":"501:133:29"},{"body":{"nodeType":"YulBlock","src":"691:86:29","statements":[{"nodeType":"YulAssignment","src":"701:29:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"723:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"710:12:29"},"nodeType":"YulFunctionCall","src":"710:20:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"701:5:29"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"765:5:29"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"739:25:29"},"nodeType":"YulFunctionCall","src":"739:32:29"},"nodeType":"YulExpressionStatement","src":"739:32:29"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"669:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"677:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"685:5:29","type":""}],"src":"640:137:29"},{"body":{"nodeType":"YulBlock","src":"845:79:29","statements":[{"nodeType":"YulAssignment","src":"855:22:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"870:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"864:5:29"},"nodeType":"YulFunctionCall","src":"864:13:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"855:5:29"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"912:5:29"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"886:25:29"},"nodeType":"YulFunctionCall","src":"886:32:29"},"nodeType":"YulExpressionStatement","src":"886:32:29"}]},"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"823:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"831:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"839:5:29","type":""}],"src":"783:141:29"},{"body":{"nodeType":"YulBlock","src":"1004:210:29","statements":[{"body":{"nodeType":"YulBlock","src":"1053:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1062:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1065:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1055:6:29"},"nodeType":"YulFunctionCall","src":"1055:12:29"},"nodeType":"YulExpressionStatement","src":"1055:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1032:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"1040:4:29","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1028:3:29"},"nodeType":"YulFunctionCall","src":"1028:17:29"},{"name":"end","nodeType":"YulIdentifier","src":"1047:3:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1024:3:29"},"nodeType":"YulFunctionCall","src":"1024:27:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1017:6:29"},"nodeType":"YulFunctionCall","src":"1017:35:29"},"nodeType":"YulIf","src":"1014:2:29"},{"nodeType":"YulVariableDeclaration","src":"1078:34:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1105:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1092:12:29"},"nodeType":"YulFunctionCall","src":"1092:20:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1082:6:29","type":""}]},{"nodeType":"YulAssignment","src":"1121:87:29","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1181:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"1189:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1177:3:29"},"nodeType":"YulFunctionCall","src":"1177:17:29"},{"name":"length","nodeType":"YulIdentifier","src":"1196:6:29"},{"name":"end","nodeType":"YulIdentifier","src":"1204:3:29"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"1130:46:29"},"nodeType":"YulFunctionCall","src":"1130:78:29"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1121:5:29"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"982:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"990:3:29","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"998:5:29","type":""}],"src":"943:271:29"},{"body":{"nodeType":"YulBlock","src":"1272:87:29","statements":[{"nodeType":"YulAssignment","src":"1282:29:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1304:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1291:12:29"},"nodeType":"YulFunctionCall","src":"1291:20:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1282:5:29"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1347:5:29"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"1320:26:29"},"nodeType":"YulFunctionCall","src":"1320:33:29"},"nodeType":"YulExpressionStatement","src":"1320:33:29"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1250:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"1258:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1266:5:29","type":""}],"src":"1220:139:29"},{"body":{"nodeType":"YulBlock","src":"1431:196:29","statements":[{"body":{"nodeType":"YulBlock","src":"1477:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1486:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1489:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1479:6:29"},"nodeType":"YulFunctionCall","src":"1479:12:29"},"nodeType":"YulExpressionStatement","src":"1479:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1452:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"1461:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1448:3:29"},"nodeType":"YulFunctionCall","src":"1448:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"1473:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1444:3:29"},"nodeType":"YulFunctionCall","src":"1444:32:29"},"nodeType":"YulIf","src":"1441:2:29"},{"nodeType":"YulBlock","src":"1503:117:29","statements":[{"nodeType":"YulVariableDeclaration","src":"1518:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"1532:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1522:6:29","type":""}]},{"nodeType":"YulAssignment","src":"1547:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1582:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"1593:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1578:3:29"},"nodeType":"YulFunctionCall","src":"1578:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1602:7:29"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1557:20:29"},"nodeType":"YulFunctionCall","src":"1557:53:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1547:6:29"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1401:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1412:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1424:6:29","type":""}],"src":"1365:262:29"},{"body":{"nodeType":"YulBlock","src":"1716:324:29","statements":[{"body":{"nodeType":"YulBlock","src":"1762:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1771:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1774:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1764:6:29"},"nodeType":"YulFunctionCall","src":"1764:12:29"},"nodeType":"YulExpressionStatement","src":"1764:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1737:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"1746:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1733:3:29"},"nodeType":"YulFunctionCall","src":"1733:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"1758:2:29","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1729:3:29"},"nodeType":"YulFunctionCall","src":"1729:32:29"},"nodeType":"YulIf","src":"1726:2:29"},{"nodeType":"YulBlock","src":"1788:117:29","statements":[{"nodeType":"YulVariableDeclaration","src":"1803:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"1817:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1807:6:29","type":""}]},{"nodeType":"YulAssignment","src":"1832:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1867:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"1878:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1863:3:29"},"nodeType":"YulFunctionCall","src":"1863:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1887:7:29"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1842:20:29"},"nodeType":"YulFunctionCall","src":"1842:53:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1832:6:29"}]}]},{"nodeType":"YulBlock","src":"1915:118:29","statements":[{"nodeType":"YulVariableDeclaration","src":"1930:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"1944:2:29","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1934:6:29","type":""}]},{"nodeType":"YulAssignment","src":"1960:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1995:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"2006:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1991:3:29"},"nodeType":"YulFunctionCall","src":"1991:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2015:7:29"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1970:20:29"},"nodeType":"YulFunctionCall","src":"1970:53:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1960:6:29"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1678:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1689:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1701:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1709:6:29","type":""}],"src":"1633:407:29"},{"body":{"nodeType":"YulBlock","src":"2146:452:29","statements":[{"body":{"nodeType":"YulBlock","src":"2192:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2201:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2204:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2194:6:29"},"nodeType":"YulFunctionCall","src":"2194:12:29"},"nodeType":"YulExpressionStatement","src":"2194:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2167:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"2176:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2163:3:29"},"nodeType":"YulFunctionCall","src":"2163:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"2188:2:29","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2159:3:29"},"nodeType":"YulFunctionCall","src":"2159:32:29"},"nodeType":"YulIf","src":"2156:2:29"},{"nodeType":"YulBlock","src":"2218:117:29","statements":[{"nodeType":"YulVariableDeclaration","src":"2233:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"2247:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2237:6:29","type":""}]},{"nodeType":"YulAssignment","src":"2262:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2297:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"2308:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2293:3:29"},"nodeType":"YulFunctionCall","src":"2293:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2317:7:29"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2272:20:29"},"nodeType":"YulFunctionCall","src":"2272:53:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2262:6:29"}]}]},{"nodeType":"YulBlock","src":"2345:118:29","statements":[{"nodeType":"YulVariableDeclaration","src":"2360:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"2374:2:29","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2364:6:29","type":""}]},{"nodeType":"YulAssignment","src":"2390:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2425:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"2436:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2421:3:29"},"nodeType":"YulFunctionCall","src":"2421:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2445:7:29"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2400:20:29"},"nodeType":"YulFunctionCall","src":"2400:53:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2390:6:29"}]}]},{"nodeType":"YulBlock","src":"2473:118:29","statements":[{"nodeType":"YulVariableDeclaration","src":"2488:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"2502:2:29","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2492:6:29","type":""}]},{"nodeType":"YulAssignment","src":"2518:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2553:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"2564:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2549:3:29"},"nodeType":"YulFunctionCall","src":"2549:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2573:7:29"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2528:20:29"},"nodeType":"YulFunctionCall","src":"2528:53:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2518:6:29"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2100:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2111:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2123:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2131:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2139:6:29","type":""}],"src":"2046:552:29"},{"body":{"nodeType":"YulBlock","src":"2730:683:29","statements":[{"body":{"nodeType":"YulBlock","src":"2777:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2786:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2789:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2779:6:29"},"nodeType":"YulFunctionCall","src":"2779:12:29"},"nodeType":"YulExpressionStatement","src":"2779:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2751:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"2760:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2747:3:29"},"nodeType":"YulFunctionCall","src":"2747:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"2772:3:29","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2743:3:29"},"nodeType":"YulFunctionCall","src":"2743:33:29"},"nodeType":"YulIf","src":"2740:2:29"},{"nodeType":"YulBlock","src":"2803:117:29","statements":[{"nodeType":"YulVariableDeclaration","src":"2818:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"2832:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2822:6:29","type":""}]},{"nodeType":"YulAssignment","src":"2847:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2882:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"2893:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2878:3:29"},"nodeType":"YulFunctionCall","src":"2878:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2902:7:29"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2857:20:29"},"nodeType":"YulFunctionCall","src":"2857:53:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2847:6:29"}]}]},{"nodeType":"YulBlock","src":"2930:118:29","statements":[{"nodeType":"YulVariableDeclaration","src":"2945:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"2959:2:29","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2949:6:29","type":""}]},{"nodeType":"YulAssignment","src":"2975:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3010:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"3021:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3006:3:29"},"nodeType":"YulFunctionCall","src":"3006:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3030:7:29"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2985:20:29"},"nodeType":"YulFunctionCall","src":"2985:53:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2975:6:29"}]}]},{"nodeType":"YulBlock","src":"3058:118:29","statements":[{"nodeType":"YulVariableDeclaration","src":"3073:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"3087:2:29","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3077:6:29","type":""}]},{"nodeType":"YulAssignment","src":"3103:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3138:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"3149:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3134:3:29"},"nodeType":"YulFunctionCall","src":"3134:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3158:7:29"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3113:20:29"},"nodeType":"YulFunctionCall","src":"3113:53:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3103:6:29"}]}]},{"nodeType":"YulBlock","src":"3186:220:29","statements":[{"nodeType":"YulVariableDeclaration","src":"3201:46:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3232:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"3243:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3228:3:29"},"nodeType":"YulFunctionCall","src":"3228:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3215:12:29"},"nodeType":"YulFunctionCall","src":"3215:32:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3205:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"3294:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3303:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3306:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3296:6:29"},"nodeType":"YulFunctionCall","src":"3296:12:29"},"nodeType":"YulExpressionStatement","src":"3296:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3266:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"3274:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3263:2:29"},"nodeType":"YulFunctionCall","src":"3263:30:29"},"nodeType":"YulIf","src":"3260:2:29"},{"nodeType":"YulAssignment","src":"3324:72:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3368:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"3379:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3364:3:29"},"nodeType":"YulFunctionCall","src":"3364:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3388:7:29"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"3334:29:29"},"nodeType":"YulFunctionCall","src":"3334:62:29"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"3324:6:29"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2676:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2687:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2699:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2707:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2715:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2723:6:29","type":""}],"src":"2604:809:29"},{"body":{"nodeType":"YulBlock","src":"3499:321:29","statements":[{"body":{"nodeType":"YulBlock","src":"3545:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3554:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3557:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3547:6:29"},"nodeType":"YulFunctionCall","src":"3547:12:29"},"nodeType":"YulExpressionStatement","src":"3547:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3520:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"3529:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3516:3:29"},"nodeType":"YulFunctionCall","src":"3516:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"3541:2:29","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3512:3:29"},"nodeType":"YulFunctionCall","src":"3512:32:29"},"nodeType":"YulIf","src":"3509:2:29"},{"nodeType":"YulBlock","src":"3571:117:29","statements":[{"nodeType":"YulVariableDeclaration","src":"3586:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"3600:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3590:6:29","type":""}]},{"nodeType":"YulAssignment","src":"3615:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3650:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"3661:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3646:3:29"},"nodeType":"YulFunctionCall","src":"3646:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3670:7:29"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3625:20:29"},"nodeType":"YulFunctionCall","src":"3625:53:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3615:6:29"}]}]},{"nodeType":"YulBlock","src":"3698:115:29","statements":[{"nodeType":"YulVariableDeclaration","src":"3713:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"3727:2:29","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3717:6:29","type":""}]},{"nodeType":"YulAssignment","src":"3743:60:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3775:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"3786:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3771:3:29"},"nodeType":"YulFunctionCall","src":"3771:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3795:7:29"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"3753:17:29"},"nodeType":"YulFunctionCall","src":"3753:50:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3743:6:29"}]}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3461:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3472:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3484:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3492:6:29","type":""}],"src":"3419:401:29"},{"body":{"nodeType":"YulBlock","src":"3909:324:29","statements":[{"body":{"nodeType":"YulBlock","src":"3955:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3964:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3967:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3957:6:29"},"nodeType":"YulFunctionCall","src":"3957:12:29"},"nodeType":"YulExpressionStatement","src":"3957:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3930:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"3939:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3926:3:29"},"nodeType":"YulFunctionCall","src":"3926:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"3951:2:29","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3922:3:29"},"nodeType":"YulFunctionCall","src":"3922:32:29"},"nodeType":"YulIf","src":"3919:2:29"},{"nodeType":"YulBlock","src":"3981:117:29","statements":[{"nodeType":"YulVariableDeclaration","src":"3996:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"4010:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4000:6:29","type":""}]},{"nodeType":"YulAssignment","src":"4025:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4060:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"4071:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4056:3:29"},"nodeType":"YulFunctionCall","src":"4056:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4080:7:29"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4035:20:29"},"nodeType":"YulFunctionCall","src":"4035:53:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4025:6:29"}]}]},{"nodeType":"YulBlock","src":"4108:118:29","statements":[{"nodeType":"YulVariableDeclaration","src":"4123:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"4137:2:29","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4127:6:29","type":""}]},{"nodeType":"YulAssignment","src":"4153:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4188:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"4199:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4184:3:29"},"nodeType":"YulFunctionCall","src":"4184:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4208:7:29"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4163:20:29"},"nodeType":"YulFunctionCall","src":"4163:53:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4153:6:29"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3871:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3882:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3894:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3902:6:29","type":""}],"src":"3826:407:29"},{"body":{"nodeType":"YulBlock","src":"4304:195:29","statements":[{"body":{"nodeType":"YulBlock","src":"4350:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4359:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4362:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4352:6:29"},"nodeType":"YulFunctionCall","src":"4352:12:29"},"nodeType":"YulExpressionStatement","src":"4352:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4325:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"4334:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4321:3:29"},"nodeType":"YulFunctionCall","src":"4321:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"4346:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4317:3:29"},"nodeType":"YulFunctionCall","src":"4317:32:29"},"nodeType":"YulIf","src":"4314:2:29"},{"nodeType":"YulBlock","src":"4376:116:29","statements":[{"nodeType":"YulVariableDeclaration","src":"4391:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"4405:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4395:6:29","type":""}]},{"nodeType":"YulAssignment","src":"4420:62:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4454:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"4465:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4450:3:29"},"nodeType":"YulFunctionCall","src":"4450:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4474:7:29"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"4430:19:29"},"nodeType":"YulFunctionCall","src":"4430:52:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4420:6:29"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4274:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4285:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4297:6:29","type":""}],"src":"4239:260:29"},{"body":{"nodeType":"YulBlock","src":"4581:206:29","statements":[{"body":{"nodeType":"YulBlock","src":"4627:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4636:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4639:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4629:6:29"},"nodeType":"YulFunctionCall","src":"4629:12:29"},"nodeType":"YulExpressionStatement","src":"4629:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4602:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"4611:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4598:3:29"},"nodeType":"YulFunctionCall","src":"4598:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"4623:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4594:3:29"},"nodeType":"YulFunctionCall","src":"4594:32:29"},"nodeType":"YulIf","src":"4591:2:29"},{"nodeType":"YulBlock","src":"4653:127:29","statements":[{"nodeType":"YulVariableDeclaration","src":"4668:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"4682:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4672:6:29","type":""}]},{"nodeType":"YulAssignment","src":"4697:73:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4742:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"4753:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4738:3:29"},"nodeType":"YulFunctionCall","src":"4738:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4762:7:29"}],"functionName":{"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulIdentifier","src":"4707:30:29"},"nodeType":"YulFunctionCall","src":"4707:63:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4697:6:29"}]}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4551:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4562:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4574:6:29","type":""}],"src":"4505:282:29"},{"body":{"nodeType":"YulBlock","src":"4859:196:29","statements":[{"body":{"nodeType":"YulBlock","src":"4905:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4914:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4917:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4907:6:29"},"nodeType":"YulFunctionCall","src":"4907:12:29"},"nodeType":"YulExpressionStatement","src":"4907:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4880:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"4889:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4876:3:29"},"nodeType":"YulFunctionCall","src":"4876:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"4901:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4872:3:29"},"nodeType":"YulFunctionCall","src":"4872:32:29"},"nodeType":"YulIf","src":"4869:2:29"},{"nodeType":"YulBlock","src":"4931:117:29","statements":[{"nodeType":"YulVariableDeclaration","src":"4946:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"4960:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4950:6:29","type":""}]},{"nodeType":"YulAssignment","src":"4975:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5010:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"5021:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5006:3:29"},"nodeType":"YulFunctionCall","src":"5006:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5030:7:29"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4985:20:29"},"nodeType":"YulFunctionCall","src":"4985:53:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4975:6:29"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4829:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4840:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4852:6:29","type":""}],"src":"4793:262:29"},{"body":{"nodeType":"YulBlock","src":"5126:53:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5143:3:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5166:5:29"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"5148:17:29"},"nodeType":"YulFunctionCall","src":"5148:24:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5136:6:29"},"nodeType":"YulFunctionCall","src":"5136:37:29"},"nodeType":"YulExpressionStatement","src":"5136:37:29"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5114:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5121:3:29","type":""}],"src":"5061:118:29"},{"body":{"nodeType":"YulBlock","src":"5244:50:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5261:3:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5281:5:29"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"5266:14:29"},"nodeType":"YulFunctionCall","src":"5266:21:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5254:6:29"},"nodeType":"YulFunctionCall","src":"5254:34:29"},"nodeType":"YulExpressionStatement","src":"5254:34:29"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5232:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5239:3:29","type":""}],"src":"5185:109:29"},{"body":{"nodeType":"YulBlock","src":"5390:270:29","statements":[{"nodeType":"YulVariableDeclaration","src":"5400:52:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5446:5:29"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"5414:31:29"},"nodeType":"YulFunctionCall","src":"5414:38:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"5404:6:29","type":""}]},{"nodeType":"YulAssignment","src":"5461:77:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5526:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"5531:6:29"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"5468:57:29"},"nodeType":"YulFunctionCall","src":"5468:70:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5461:3:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5573:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"5580:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5569:3:29"},"nodeType":"YulFunctionCall","src":"5569:16:29"},{"name":"pos","nodeType":"YulIdentifier","src":"5587:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"5592:6:29"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"5547:21:29"},"nodeType":"YulFunctionCall","src":"5547:52:29"},"nodeType":"YulExpressionStatement","src":"5547:52:29"},{"nodeType":"YulAssignment","src":"5608:46:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5619:3:29"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5646:6:29"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"5624:21:29"},"nodeType":"YulFunctionCall","src":"5624:29:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5615:3:29"},"nodeType":"YulFunctionCall","src":"5615:39:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"5608:3:29"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5371:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5378:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"5386:3:29","type":""}],"src":"5300:360:29"},{"body":{"nodeType":"YulBlock","src":"5758:272:29","statements":[{"nodeType":"YulVariableDeclaration","src":"5768:53:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5815:5:29"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"5782:32:29"},"nodeType":"YulFunctionCall","src":"5782:39:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"5772:6:29","type":""}]},{"nodeType":"YulAssignment","src":"5830:78:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5896:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"5901:6:29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"5837:58:29"},"nodeType":"YulFunctionCall","src":"5837:71:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5830:3:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5943:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"5950:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5939:3:29"},"nodeType":"YulFunctionCall","src":"5939:16:29"},{"name":"pos","nodeType":"YulIdentifier","src":"5957:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"5962:6:29"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"5917:21:29"},"nodeType":"YulFunctionCall","src":"5917:52:29"},"nodeType":"YulExpressionStatement","src":"5917:52:29"},{"nodeType":"YulAssignment","src":"5978:46:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5989:3:29"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6016:6:29"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"5994:21:29"},"nodeType":"YulFunctionCall","src":"5994:29:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5985:3:29"},"nodeType":"YulFunctionCall","src":"5985:39:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"5978:3:29"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5739:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5746:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"5754:3:29","type":""}],"src":"5666:364:29"},{"body":{"nodeType":"YulBlock","src":"6146:267:29","statements":[{"nodeType":"YulVariableDeclaration","src":"6156:53:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6203:5:29"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"6170:32:29"},"nodeType":"YulFunctionCall","src":"6170:39:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6160:6:29","type":""}]},{"nodeType":"YulAssignment","src":"6218:96:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6302:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"6307:6:29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"6225:76:29"},"nodeType":"YulFunctionCall","src":"6225:89:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6218:3:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6349:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"6356:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6345:3:29"},"nodeType":"YulFunctionCall","src":"6345:16:29"},{"name":"pos","nodeType":"YulIdentifier","src":"6363:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"6368:6:29"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"6323:21:29"},"nodeType":"YulFunctionCall","src":"6323:52:29"},"nodeType":"YulExpressionStatement","src":"6323:52:29"},{"nodeType":"YulAssignment","src":"6384:23:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6395:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"6400:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6391:3:29"},"nodeType":"YulFunctionCall","src":"6391:16:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6384:3:29"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6127:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6134:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6142:3:29","type":""}],"src":"6036:377:29"},{"body":{"nodeType":"YulBlock","src":"6565:220:29","statements":[{"nodeType":"YulAssignment","src":"6575:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6641:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"6646:2:29","type":"","value":"45"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"6582:58:29"},"nodeType":"YulFunctionCall","src":"6582:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6575:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6747:3:29"}],"functionName":{"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulIdentifier","src":"6658:88:29"},"nodeType":"YulFunctionCall","src":"6658:93:29"},"nodeType":"YulExpressionStatement","src":"6658:93:29"},{"nodeType":"YulAssignment","src":"6760:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6771:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"6776:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6767:3:29"},"nodeType":"YulFunctionCall","src":"6767:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6760:3:29"}]}]},"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6553:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6561:3:29","type":""}],"src":"6419:366:29"},{"body":{"nodeType":"YulBlock","src":"6937:220:29","statements":[{"nodeType":"YulAssignment","src":"6947:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7013:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"7018:2:29","type":"","value":"50"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"6954:58:29"},"nodeType":"YulFunctionCall","src":"6954:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6947:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7119:3:29"}],"functionName":{"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulIdentifier","src":"7030:88:29"},"nodeType":"YulFunctionCall","src":"7030:93:29"},"nodeType":"YulExpressionStatement","src":"7030:93:29"},{"nodeType":"YulAssignment","src":"7132:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7143:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"7148:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7139:3:29"},"nodeType":"YulFunctionCall","src":"7139:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7132:3:29"}]}]},"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6925:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6933:3:29","type":""}],"src":"6791:366:29"},{"body":{"nodeType":"YulBlock","src":"7309:220:29","statements":[{"nodeType":"YulAssignment","src":"7319:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7385:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"7390:2:29","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7326:58:29"},"nodeType":"YulFunctionCall","src":"7326:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7319:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7491:3:29"}],"functionName":{"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulIdentifier","src":"7402:88:29"},"nodeType":"YulFunctionCall","src":"7402:93:29"},"nodeType":"YulExpressionStatement","src":"7402:93:29"},{"nodeType":"YulAssignment","src":"7504:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7515:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"7520:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7511:3:29"},"nodeType":"YulFunctionCall","src":"7511:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7504:3:29"}]}]},"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7297:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7305:3:29","type":""}],"src":"7163:366:29"},{"body":{"nodeType":"YulBlock","src":"7681:220:29","statements":[{"nodeType":"YulAssignment","src":"7691:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7757:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"7762:2:29","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7698:58:29"},"nodeType":"YulFunctionCall","src":"7698:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7691:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7863:3:29"}],"functionName":{"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulIdentifier","src":"7774:88:29"},"nodeType":"YulFunctionCall","src":"7774:93:29"},"nodeType":"YulExpressionStatement","src":"7774:93:29"},{"nodeType":"YulAssignment","src":"7876:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7887:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"7892:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7883:3:29"},"nodeType":"YulFunctionCall","src":"7883:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7876:3:29"}]}]},"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7669:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7677:3:29","type":""}],"src":"7535:366:29"},{"body":{"nodeType":"YulBlock","src":"8053:220:29","statements":[{"nodeType":"YulAssignment","src":"8063:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8129:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"8134:2:29","type":"","value":"25"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8070:58:29"},"nodeType":"YulFunctionCall","src":"8070:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8063:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8235:3:29"}],"functionName":{"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulIdentifier","src":"8146:88:29"},"nodeType":"YulFunctionCall","src":"8146:93:29"},"nodeType":"YulExpressionStatement","src":"8146:93:29"},{"nodeType":"YulAssignment","src":"8248:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8259:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"8264:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8255:3:29"},"nodeType":"YulFunctionCall","src":"8255:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8248:3:29"}]}]},"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8041:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8049:3:29","type":""}],"src":"7907:366:29"},{"body":{"nodeType":"YulBlock","src":"8425:220:29","statements":[{"nodeType":"YulAssignment","src":"8435:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8501:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"8506:2:29","type":"","value":"41"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8442:58:29"},"nodeType":"YulFunctionCall","src":"8442:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8435:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8607:3:29"}],"functionName":{"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulIdentifier","src":"8518:88:29"},"nodeType":"YulFunctionCall","src":"8518:93:29"},"nodeType":"YulExpressionStatement","src":"8518:93:29"},{"nodeType":"YulAssignment","src":"8620:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8631:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"8636:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8627:3:29"},"nodeType":"YulFunctionCall","src":"8627:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8620:3:29"}]}]},"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8413:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8421:3:29","type":""}],"src":"8279:366:29"},{"body":{"nodeType":"YulBlock","src":"8797:220:29","statements":[{"nodeType":"YulAssignment","src":"8807:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8873:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"8878:2:29","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8814:58:29"},"nodeType":"YulFunctionCall","src":"8814:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8807:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8979:3:29"}],"functionName":{"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulIdentifier","src":"8890:88:29"},"nodeType":"YulFunctionCall","src":"8890:93:29"},"nodeType":"YulExpressionStatement","src":"8890:93:29"},{"nodeType":"YulAssignment","src":"8992:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9003:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"9008:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8999:3:29"},"nodeType":"YulFunctionCall","src":"8999:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8992:3:29"}]}]},"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8785:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8793:3:29","type":""}],"src":"8651:366:29"},{"body":{"nodeType":"YulBlock","src":"9169:220:29","statements":[{"nodeType":"YulAssignment","src":"9179:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9245:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"9250:2:29","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9186:58:29"},"nodeType":"YulFunctionCall","src":"9186:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9179:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9351:3:29"}],"functionName":{"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulIdentifier","src":"9262:88:29"},"nodeType":"YulFunctionCall","src":"9262:93:29"},"nodeType":"YulExpressionStatement","src":"9262:93:29"},{"nodeType":"YulAssignment","src":"9364:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9375:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"9380:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9371:3:29"},"nodeType":"YulFunctionCall","src":"9371:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9364:3:29"}]}]},"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9157:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9165:3:29","type":""}],"src":"9023:366:29"},{"body":{"nodeType":"YulBlock","src":"9541:220:29","statements":[{"nodeType":"YulAssignment","src":"9551:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9617:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"9622:2:29","type":"","value":"61"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9558:58:29"},"nodeType":"YulFunctionCall","src":"9558:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9551:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9723:3:29"}],"functionName":{"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulIdentifier","src":"9634:88:29"},"nodeType":"YulFunctionCall","src":"9634:93:29"},"nodeType":"YulExpressionStatement","src":"9634:93:29"},{"nodeType":"YulAssignment","src":"9736:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9747:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"9752:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9743:3:29"},"nodeType":"YulFunctionCall","src":"9743:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9736:3:29"}]}]},"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9529:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9537:3:29","type":""}],"src":"9395:366:29"},{"body":{"nodeType":"YulBlock","src":"9832:53:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9849:3:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9872:5:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"9854:17:29"},"nodeType":"YulFunctionCall","src":"9854:24:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9842:6:29"},"nodeType":"YulFunctionCall","src":"9842:37:29"},"nodeType":"YulExpressionStatement","src":"9842:37:29"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9820:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9827:3:29","type":""}],"src":"9767:118:29"},{"body":{"nodeType":"YulBlock","src":"10075:251:29","statements":[{"nodeType":"YulAssignment","src":"10086:102:29","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10175:6:29"},{"name":"pos","nodeType":"YulIdentifier","src":"10184:3:29"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"10093:81:29"},"nodeType":"YulFunctionCall","src":"10093:95:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10086:3:29"}]},{"nodeType":"YulAssignment","src":"10198:102:29","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"10287:6:29"},{"name":"pos","nodeType":"YulIdentifier","src":"10296:3:29"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"10205:81:29"},"nodeType":"YulFunctionCall","src":"10205:95:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10198:3:29"}]},{"nodeType":"YulAssignment","src":"10310:10:29","value":{"name":"pos","nodeType":"YulIdentifier","src":"10317:3:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10310:3:29"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10046:3:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10052:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10060:6:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10071:3:29","type":""}],"src":"9891:435:29"},{"body":{"nodeType":"YulBlock","src":"10430:124:29","statements":[{"nodeType":"YulAssignment","src":"10440:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10452:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"10463:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10448:3:29"},"nodeType":"YulFunctionCall","src":"10448:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10440:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10520:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10533:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"10544:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10529:3:29"},"nodeType":"YulFunctionCall","src":"10529:17:29"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"10476:43:29"},"nodeType":"YulFunctionCall","src":"10476:71:29"},"nodeType":"YulExpressionStatement","src":"10476:71:29"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10402:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10414:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10425:4:29","type":""}],"src":"10332:222:29"},{"body":{"nodeType":"YulBlock","src":"10760:440:29","statements":[{"nodeType":"YulAssignment","src":"10770:27:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10782:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"10793:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10778:3:29"},"nodeType":"YulFunctionCall","src":"10778:19:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10770:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10851:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10864:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"10875:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10860:3:29"},"nodeType":"YulFunctionCall","src":"10860:17:29"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"10807:43:29"},"nodeType":"YulFunctionCall","src":"10807:71:29"},"nodeType":"YulExpressionStatement","src":"10807:71:29"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"10932:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10945:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"10956:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10941:3:29"},"nodeType":"YulFunctionCall","src":"10941:18:29"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"10888:43:29"},"nodeType":"YulFunctionCall","src":"10888:72:29"},"nodeType":"YulExpressionStatement","src":"10888:72:29"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"11014:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11027:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"11038:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11023:3:29"},"nodeType":"YulFunctionCall","src":"11023:18:29"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"10970:43:29"},"nodeType":"YulFunctionCall","src":"10970:72:29"},"nodeType":"YulExpressionStatement","src":"10970:72:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11063:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"11074:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11059:3:29"},"nodeType":"YulFunctionCall","src":"11059:18:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11083:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"11089:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11079:3:29"},"nodeType":"YulFunctionCall","src":"11079:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11052:6:29"},"nodeType":"YulFunctionCall","src":"11052:48:29"},"nodeType":"YulExpressionStatement","src":"11052:48:29"},{"nodeType":"YulAssignment","src":"11109:84:29","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"11179:6:29"},{"name":"tail","nodeType":"YulIdentifier","src":"11188:4:29"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11117:61:29"},"nodeType":"YulFunctionCall","src":"11117:76:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11109:4:29"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10708:9:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"10720:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"10728:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10736:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10744:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10755:4:29","type":""}],"src":"10560:640:29"},{"body":{"nodeType":"YulBlock","src":"11298:118:29","statements":[{"nodeType":"YulAssignment","src":"11308:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11320:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"11331:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11316:3:29"},"nodeType":"YulFunctionCall","src":"11316:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11308:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11382:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11395:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"11406:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11391:3:29"},"nodeType":"YulFunctionCall","src":"11391:17:29"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"11344:37:29"},"nodeType":"YulFunctionCall","src":"11344:65:29"},"nodeType":"YulExpressionStatement","src":"11344:65:29"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11270:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11282:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11293:4:29","type":""}],"src":"11206:210:29"},{"body":{"nodeType":"YulBlock","src":"11540:195:29","statements":[{"nodeType":"YulAssignment","src":"11550:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11562:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"11573:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11558:3:29"},"nodeType":"YulFunctionCall","src":"11558:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11550:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11597:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"11608:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11593:3:29"},"nodeType":"YulFunctionCall","src":"11593:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11616:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"11622:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11612:3:29"},"nodeType":"YulFunctionCall","src":"11612:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11586:6:29"},"nodeType":"YulFunctionCall","src":"11586:47:29"},"nodeType":"YulExpressionStatement","src":"11586:47:29"},{"nodeType":"YulAssignment","src":"11642:86:29","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11714:6:29"},{"name":"tail","nodeType":"YulIdentifier","src":"11723:4:29"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11650:63:29"},"nodeType":"YulFunctionCall","src":"11650:78:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11642:4:29"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11512:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11524:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11535:4:29","type":""}],"src":"11422:313:29"},{"body":{"nodeType":"YulBlock","src":"11912:248:29","statements":[{"nodeType":"YulAssignment","src":"11922:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11934:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"11945:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11930:3:29"},"nodeType":"YulFunctionCall","src":"11930:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11922:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11969:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"11980:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11965:3:29"},"nodeType":"YulFunctionCall","src":"11965:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11988:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"11994:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11984:3:29"},"nodeType":"YulFunctionCall","src":"11984:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11958:6:29"},"nodeType":"YulFunctionCall","src":"11958:47:29"},"nodeType":"YulExpressionStatement","src":"11958:47:29"},{"nodeType":"YulAssignment","src":"12014:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12148:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12022:124:29"},"nodeType":"YulFunctionCall","src":"12022:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12014:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11892:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11907:4:29","type":""}],"src":"11741:419:29"},{"body":{"nodeType":"YulBlock","src":"12337:248:29","statements":[{"nodeType":"YulAssignment","src":"12347:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12359:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"12370:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12355:3:29"},"nodeType":"YulFunctionCall","src":"12355:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12347:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12394:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"12405:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12390:3:29"},"nodeType":"YulFunctionCall","src":"12390:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12413:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"12419:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12409:3:29"},"nodeType":"YulFunctionCall","src":"12409:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12383:6:29"},"nodeType":"YulFunctionCall","src":"12383:47:29"},"nodeType":"YulExpressionStatement","src":"12383:47:29"},{"nodeType":"YulAssignment","src":"12439:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12573:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12447:124:29"},"nodeType":"YulFunctionCall","src":"12447:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12439:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12317:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12332:4:29","type":""}],"src":"12166:419:29"},{"body":{"nodeType":"YulBlock","src":"12762:248:29","statements":[{"nodeType":"YulAssignment","src":"12772:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12784:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"12795:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12780:3:29"},"nodeType":"YulFunctionCall","src":"12780:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12772:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12819:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"12830:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12815:3:29"},"nodeType":"YulFunctionCall","src":"12815:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12838:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"12844:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12834:3:29"},"nodeType":"YulFunctionCall","src":"12834:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12808:6:29"},"nodeType":"YulFunctionCall","src":"12808:47:29"},"nodeType":"YulExpressionStatement","src":"12808:47:29"},{"nodeType":"YulAssignment","src":"12864:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12998:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12872:124:29"},"nodeType":"YulFunctionCall","src":"12872:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12864:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12742:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12757:4:29","type":""}],"src":"12591:419:29"},{"body":{"nodeType":"YulBlock","src":"13187:248:29","statements":[{"nodeType":"YulAssignment","src":"13197:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13209:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"13220:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13205:3:29"},"nodeType":"YulFunctionCall","src":"13205:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13197:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13244:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"13255:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13240:3:29"},"nodeType":"YulFunctionCall","src":"13240:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13263:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"13269:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13259:3:29"},"nodeType":"YulFunctionCall","src":"13259:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13233:6:29"},"nodeType":"YulFunctionCall","src":"13233:47:29"},"nodeType":"YulExpressionStatement","src":"13233:47:29"},{"nodeType":"YulAssignment","src":"13289:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13423:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13297:124:29"},"nodeType":"YulFunctionCall","src":"13297:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13289:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13167:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13182:4:29","type":""}],"src":"13016:419:29"},{"body":{"nodeType":"YulBlock","src":"13612:248:29","statements":[{"nodeType":"YulAssignment","src":"13622:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13634:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"13645:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13630:3:29"},"nodeType":"YulFunctionCall","src":"13630:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13622:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13669:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"13680:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13665:3:29"},"nodeType":"YulFunctionCall","src":"13665:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13688:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"13694:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13684:3:29"},"nodeType":"YulFunctionCall","src":"13684:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13658:6:29"},"nodeType":"YulFunctionCall","src":"13658:47:29"},"nodeType":"YulExpressionStatement","src":"13658:47:29"},{"nodeType":"YulAssignment","src":"13714:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13848:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13722:124:29"},"nodeType":"YulFunctionCall","src":"13722:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13714:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13592:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13607:4:29","type":""}],"src":"13441:419:29"},{"body":{"nodeType":"YulBlock","src":"14037:248:29","statements":[{"nodeType":"YulAssignment","src":"14047:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14059:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"14070:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14055:3:29"},"nodeType":"YulFunctionCall","src":"14055:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14047:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14094:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"14105:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14090:3:29"},"nodeType":"YulFunctionCall","src":"14090:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14113:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"14119:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14109:3:29"},"nodeType":"YulFunctionCall","src":"14109:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14083:6:29"},"nodeType":"YulFunctionCall","src":"14083:47:29"},"nodeType":"YulExpressionStatement","src":"14083:47:29"},{"nodeType":"YulAssignment","src":"14139:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14273:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14147:124:29"},"nodeType":"YulFunctionCall","src":"14147:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14139:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14017:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14032:4:29","type":""}],"src":"13866:419:29"},{"body":{"nodeType":"YulBlock","src":"14462:248:29","statements":[{"nodeType":"YulAssignment","src":"14472:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14484:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"14495:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14480:3:29"},"nodeType":"YulFunctionCall","src":"14480:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14472:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14519:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"14530:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14515:3:29"},"nodeType":"YulFunctionCall","src":"14515:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14538:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"14544:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14534:3:29"},"nodeType":"YulFunctionCall","src":"14534:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14508:6:29"},"nodeType":"YulFunctionCall","src":"14508:47:29"},"nodeType":"YulExpressionStatement","src":"14508:47:29"},{"nodeType":"YulAssignment","src":"14564:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14698:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14572:124:29"},"nodeType":"YulFunctionCall","src":"14572:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14564:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14442:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14457:4:29","type":""}],"src":"14291:419:29"},{"body":{"nodeType":"YulBlock","src":"14887:248:29","statements":[{"nodeType":"YulAssignment","src":"14897:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14909:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"14920:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14905:3:29"},"nodeType":"YulFunctionCall","src":"14905:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14897:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14944:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"14955:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14940:3:29"},"nodeType":"YulFunctionCall","src":"14940:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14963:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"14969:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14959:3:29"},"nodeType":"YulFunctionCall","src":"14959:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14933:6:29"},"nodeType":"YulFunctionCall","src":"14933:47:29"},"nodeType":"YulExpressionStatement","src":"14933:47:29"},{"nodeType":"YulAssignment","src":"14989:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15123:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14997:124:29"},"nodeType":"YulFunctionCall","src":"14997:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14989:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14867:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14882:4:29","type":""}],"src":"14716:419:29"},{"body":{"nodeType":"YulBlock","src":"15312:248:29","statements":[{"nodeType":"YulAssignment","src":"15322:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15334:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"15345:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15330:3:29"},"nodeType":"YulFunctionCall","src":"15330:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15322:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15369:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"15380:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15365:3:29"},"nodeType":"YulFunctionCall","src":"15365:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15388:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"15394:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15384:3:29"},"nodeType":"YulFunctionCall","src":"15384:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15358:6:29"},"nodeType":"YulFunctionCall","src":"15358:47:29"},"nodeType":"YulExpressionStatement","src":"15358:47:29"},{"nodeType":"YulAssignment","src":"15414:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15548:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15422:124:29"},"nodeType":"YulFunctionCall","src":"15422:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15414:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15292:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15307:4:29","type":""}],"src":"15141:419:29"},{"body":{"nodeType":"YulBlock","src":"15664:124:29","statements":[{"nodeType":"YulAssignment","src":"15674:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15686:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"15697:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15682:3:29"},"nodeType":"YulFunctionCall","src":"15682:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15674:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15754:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15767:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"15778:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15763:3:29"},"nodeType":"YulFunctionCall","src":"15763:17:29"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"15710:43:29"},"nodeType":"YulFunctionCall","src":"15710:71:29"},"nodeType":"YulExpressionStatement","src":"15710:71:29"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15636:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15648:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15659:4:29","type":""}],"src":"15566:222:29"},{"body":{"nodeType":"YulBlock","src":"15835:88:29","statements":[{"nodeType":"YulAssignment","src":"15845:30:29","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"15855:18:29"},"nodeType":"YulFunctionCall","src":"15855:20:29"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15845:6:29"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15904:6:29"},{"name":"size","nodeType":"YulIdentifier","src":"15912:4:29"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"15884:19:29"},"nodeType":"YulFunctionCall","src":"15884:33:29"},"nodeType":"YulExpressionStatement","src":"15884:33:29"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"15819:4:29","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"15828:6:29","type":""}],"src":"15794:129:29"},{"body":{"nodeType":"YulBlock","src":"15969:35:29","statements":[{"nodeType":"YulAssignment","src":"15979:19:29","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15995:2:29","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15989:5:29"},"nodeType":"YulFunctionCall","src":"15989:9:29"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15979:6:29"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"15962:6:29","type":""}],"src":"15929:75:29"},{"body":{"nodeType":"YulBlock","src":"16076:241:29","statements":[{"body":{"nodeType":"YulBlock","src":"16181:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"16183:16:29"},"nodeType":"YulFunctionCall","src":"16183:18:29"},"nodeType":"YulExpressionStatement","src":"16183:18:29"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"16153:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"16161:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16150:2:29"},"nodeType":"YulFunctionCall","src":"16150:30:29"},"nodeType":"YulIf","src":"16147:2:29"},{"nodeType":"YulAssignment","src":"16213:37:29","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"16243:6:29"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"16221:21:29"},"nodeType":"YulFunctionCall","src":"16221:29:29"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"16213:4:29"}]},{"nodeType":"YulAssignment","src":"16287:23:29","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"16299:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"16305:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16295:3:29"},"nodeType":"YulFunctionCall","src":"16295:15:29"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"16287:4:29"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"16060:6:29","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"16071:4:29","type":""}],"src":"16010:307:29"},{"body":{"nodeType":"YulBlock","src":"16381:40:29","statements":[{"nodeType":"YulAssignment","src":"16392:22:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16408:5:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16402:5:29"},"nodeType":"YulFunctionCall","src":"16402:12:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"16392:6:29"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16364:5:29","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"16374:6:29","type":""}],"src":"16323:98:29"},{"body":{"nodeType":"YulBlock","src":"16486:40:29","statements":[{"nodeType":"YulAssignment","src":"16497:22:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16513:5:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16507:5:29"},"nodeType":"YulFunctionCall","src":"16507:12:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"16497:6:29"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16469:5:29","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"16479:6:29","type":""}],"src":"16427:99:29"},{"body":{"nodeType":"YulBlock","src":"16627:73:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16644:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"16649:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16637:6:29"},"nodeType":"YulFunctionCall","src":"16637:19:29"},"nodeType":"YulExpressionStatement","src":"16637:19:29"},{"nodeType":"YulAssignment","src":"16665:29:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16684:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"16689:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16680:3:29"},"nodeType":"YulFunctionCall","src":"16680:14:29"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"16665:11:29"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16599:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"16604:6:29","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"16615:11:29","type":""}],"src":"16532:168:29"},{"body":{"nodeType":"YulBlock","src":"16802:73:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16819:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"16824:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16812:6:29"},"nodeType":"YulFunctionCall","src":"16812:19:29"},"nodeType":"YulExpressionStatement","src":"16812:19:29"},{"nodeType":"YulAssignment","src":"16840:29:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16859:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"16864:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16855:3:29"},"nodeType":"YulFunctionCall","src":"16855:14:29"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"16840:11:29"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16774:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"16779:6:29","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"16790:11:29","type":""}],"src":"16706:169:29"},{"body":{"nodeType":"YulBlock","src":"16995:34:29","statements":[{"nodeType":"YulAssignment","src":"17005:18:29","value":{"name":"pos","nodeType":"YulIdentifier","src":"17020:3:29"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"17005:11:29"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16967:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"16972:6:29","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"16983:11:29","type":""}],"src":"16881:148:29"},{"body":{"nodeType":"YulBlock","src":"17079:261:29","statements":[{"nodeType":"YulAssignment","src":"17089:25:29","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"17112:1:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"17094:17:29"},"nodeType":"YulFunctionCall","src":"17094:20:29"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"17089:1:29"}]},{"nodeType":"YulAssignment","src":"17123:25:29","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"17146:1:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"17128:17:29"},"nodeType":"YulFunctionCall","src":"17128:20:29"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"17123:1:29"}]},{"body":{"nodeType":"YulBlock","src":"17286:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"17288:16:29"},"nodeType":"YulFunctionCall","src":"17288:18:29"},"nodeType":"YulExpressionStatement","src":"17288:18:29"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"17207:1:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17214:66:29","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"y","nodeType":"YulIdentifier","src":"17282:1:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17210:3:29"},"nodeType":"YulFunctionCall","src":"17210:74:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"17204:2:29"},"nodeType":"YulFunctionCall","src":"17204:81:29"},"nodeType":"YulIf","src":"17201:2:29"},{"nodeType":"YulAssignment","src":"17318:16:29","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"17329:1:29"},{"name":"y","nodeType":"YulIdentifier","src":"17332:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17325:3:29"},"nodeType":"YulFunctionCall","src":"17325:9:29"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"17318:3:29"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"17066:1:29","type":""},{"name":"y","nodeType":"YulTypedName","src":"17069:1:29","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"17075:3:29","type":""}],"src":"17035:305:29"},{"body":{"nodeType":"YulBlock","src":"17391:146:29","statements":[{"nodeType":"YulAssignment","src":"17401:25:29","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"17424:1:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"17406:17:29"},"nodeType":"YulFunctionCall","src":"17406:20:29"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"17401:1:29"}]},{"nodeType":"YulAssignment","src":"17435:25:29","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"17458:1:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"17440:17:29"},"nodeType":"YulFunctionCall","src":"17440:20:29"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"17435:1:29"}]},{"body":{"nodeType":"YulBlock","src":"17482:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"17484:16:29"},"nodeType":"YulFunctionCall","src":"17484:18:29"},"nodeType":"YulExpressionStatement","src":"17484:18:29"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"17476:1:29"},{"name":"y","nodeType":"YulIdentifier","src":"17479:1:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"17473:2:29"},"nodeType":"YulFunctionCall","src":"17473:8:29"},"nodeType":"YulIf","src":"17470:2:29"},{"nodeType":"YulAssignment","src":"17514:17:29","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"17526:1:29"},{"name":"y","nodeType":"YulIdentifier","src":"17529:1:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17522:3:29"},"nodeType":"YulFunctionCall","src":"17522:9:29"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"17514:4:29"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"17377:1:29","type":""},{"name":"y","nodeType":"YulTypedName","src":"17380:1:29","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"17386:4:29","type":""}],"src":"17346:191:29"},{"body":{"nodeType":"YulBlock","src":"17588:51:29","statements":[{"nodeType":"YulAssignment","src":"17598:35:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17627:5:29"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"17609:17:29"},"nodeType":"YulFunctionCall","src":"17609:24:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"17598:7:29"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17570:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"17580:7:29","type":""}],"src":"17543:96:29"},{"body":{"nodeType":"YulBlock","src":"17687:48:29","statements":[{"nodeType":"YulAssignment","src":"17697:32:29","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17722:5:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"17715:6:29"},"nodeType":"YulFunctionCall","src":"17715:13:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"17708:6:29"},"nodeType":"YulFunctionCall","src":"17708:21:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"17697:7:29"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17669:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"17679:7:29","type":""}],"src":"17645:90:29"},{"body":{"nodeType":"YulBlock","src":"17785:105:29","statements":[{"nodeType":"YulAssignment","src":"17795:89:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17810:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"17817:66:29","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17806:3:29"},"nodeType":"YulFunctionCall","src":"17806:78:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"17795:7:29"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17767:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"17777:7:29","type":""}],"src":"17741:149:29"},{"body":{"nodeType":"YulBlock","src":"17941:81:29","statements":[{"nodeType":"YulAssignment","src":"17951:65:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17966:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"17973:42:29","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17962:3:29"},"nodeType":"YulFunctionCall","src":"17962:54:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"17951:7:29"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17923:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"17933:7:29","type":""}],"src":"17896:126:29"},{"body":{"nodeType":"YulBlock","src":"18073:32:29","statements":[{"nodeType":"YulAssignment","src":"18083:16:29","value":{"name":"value","nodeType":"YulIdentifier","src":"18094:5:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"18083:7:29"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18055:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"18065:7:29","type":""}],"src":"18028:77:29"},{"body":{"nodeType":"YulBlock","src":"18162:103:29","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"18185:3:29"},{"name":"src","nodeType":"YulIdentifier","src":"18190:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"18195:6:29"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"18172:12:29"},"nodeType":"YulFunctionCall","src":"18172:30:29"},"nodeType":"YulExpressionStatement","src":"18172:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"18243:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"18248:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18239:3:29"},"nodeType":"YulFunctionCall","src":"18239:16:29"},{"kind":"number","nodeType":"YulLiteral","src":"18257:1:29","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18232:6:29"},"nodeType":"YulFunctionCall","src":"18232:27:29"},"nodeType":"YulExpressionStatement","src":"18232:27:29"}]},"name":"copy_calldata_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"18144:3:29","type":""},{"name":"dst","nodeType":"YulTypedName","src":"18149:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"18154:6:29","type":""}],"src":"18111:154:29"},{"body":{"nodeType":"YulBlock","src":"18320:258:29","statements":[{"nodeType":"YulVariableDeclaration","src":"18330:10:29","value":{"kind":"number","nodeType":"YulLiteral","src":"18339:1:29","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"18334:1:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"18399:63:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"18424:3:29"},{"name":"i","nodeType":"YulIdentifier","src":"18429:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18420:3:29"},"nodeType":"YulFunctionCall","src":"18420:11:29"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"18443:3:29"},{"name":"i","nodeType":"YulIdentifier","src":"18448:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18439:3:29"},"nodeType":"YulFunctionCall","src":"18439:11:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18433:5:29"},"nodeType":"YulFunctionCall","src":"18433:18:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18413:6:29"},"nodeType":"YulFunctionCall","src":"18413:39:29"},"nodeType":"YulExpressionStatement","src":"18413:39:29"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"18360:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"18363:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"18357:2:29"},"nodeType":"YulFunctionCall","src":"18357:13:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"18371:19:29","statements":[{"nodeType":"YulAssignment","src":"18373:15:29","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"18382:1:29"},{"kind":"number","nodeType":"YulLiteral","src":"18385:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18378:3:29"},"nodeType":"YulFunctionCall","src":"18378:10:29"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"18373:1:29"}]}]},"pre":{"nodeType":"YulBlock","src":"18353:3:29","statements":[]},"src":"18349:113:29"},{"body":{"nodeType":"YulBlock","src":"18496:76:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"18546:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"18551:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18542:3:29"},"nodeType":"YulFunctionCall","src":"18542:16:29"},{"kind":"number","nodeType":"YulLiteral","src":"18560:1:29","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18535:6:29"},"nodeType":"YulFunctionCall","src":"18535:27:29"},"nodeType":"YulExpressionStatement","src":"18535:27:29"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"18477:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"18480:6:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"18474:2:29"},"nodeType":"YulFunctionCall","src":"18474:13:29"},"nodeType":"YulIf","src":"18471:2:29"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"18302:3:29","type":""},{"name":"dst","nodeType":"YulTypedName","src":"18307:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"18312:6:29","type":""}],"src":"18271:307:29"},{"body":{"nodeType":"YulBlock","src":"18635:269:29","statements":[{"nodeType":"YulAssignment","src":"18645:22:29","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"18659:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"18665:1:29","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"18655:3:29"},"nodeType":"YulFunctionCall","src":"18655:12:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"18645:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"18676:38:29","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"18706:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"18712:1:29","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18702:3:29"},"nodeType":"YulFunctionCall","src":"18702:12:29"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"18680:18:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"18753:51:29","statements":[{"nodeType":"YulAssignment","src":"18767:27:29","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"18781:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"18789:4:29","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18777:3:29"},"nodeType":"YulFunctionCall","src":"18777:17:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"18767:6:29"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"18733:18:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"18726:6:29"},"nodeType":"YulFunctionCall","src":"18726:26:29"},"nodeType":"YulIf","src":"18723:2:29"},{"body":{"nodeType":"YulBlock","src":"18856:42:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"18870:16:29"},"nodeType":"YulFunctionCall","src":"18870:18:29"},"nodeType":"YulExpressionStatement","src":"18870:18:29"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"18820:18:29"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"18843:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"18851:2:29","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"18840:2:29"},"nodeType":"YulFunctionCall","src":"18840:14:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"18817:2:29"},"nodeType":"YulFunctionCall","src":"18817:38:29"},"nodeType":"YulIf","src":"18814:2:29"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"18619:4:29","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"18628:6:29","type":""}],"src":"18584:320:29"},{"body":{"nodeType":"YulBlock","src":"18953:238:29","statements":[{"nodeType":"YulVariableDeclaration","src":"18963:58:29","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18985:6:29"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"19015:4:29"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"18993:21:29"},"nodeType":"YulFunctionCall","src":"18993:27:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18981:3:29"},"nodeType":"YulFunctionCall","src":"18981:40:29"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"18967:10:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"19132:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"19134:16:29"},"nodeType":"YulFunctionCall","src":"19134:18:29"},"nodeType":"YulExpressionStatement","src":"19134:18:29"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"19075:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"19087:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"19072:2:29"},"nodeType":"YulFunctionCall","src":"19072:34:29"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"19111:10:29"},{"name":"memPtr","nodeType":"YulIdentifier","src":"19123:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"19108:2:29"},"nodeType":"YulFunctionCall","src":"19108:22:29"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"19069:2:29"},"nodeType":"YulFunctionCall","src":"19069:62:29"},"nodeType":"YulIf","src":"19066:2:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19170:2:29","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"19174:10:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19163:6:29"},"nodeType":"YulFunctionCall","src":"19163:22:29"},"nodeType":"YulExpressionStatement","src":"19163:22:29"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18939:6:29","type":""},{"name":"size","nodeType":"YulTypedName","src":"18947:4:29","type":""}],"src":"18910:281:29"},{"body":{"nodeType":"YulBlock","src":"19225:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19242:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19245:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19235:6:29"},"nodeType":"YulFunctionCall","src":"19235:88:29"},"nodeType":"YulExpressionStatement","src":"19235:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19339:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"19342:4:29","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19332:6:29"},"nodeType":"YulFunctionCall","src":"19332:15:29"},"nodeType":"YulExpressionStatement","src":"19332:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19363:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19366:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19356:6:29"},"nodeType":"YulFunctionCall","src":"19356:15:29"},"nodeType":"YulExpressionStatement","src":"19356:15:29"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"19197:180:29"},{"body":{"nodeType":"YulBlock","src":"19411:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19428:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19431:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19421:6:29"},"nodeType":"YulFunctionCall","src":"19421:88:29"},"nodeType":"YulExpressionStatement","src":"19421:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19525:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"19528:4:29","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19518:6:29"},"nodeType":"YulFunctionCall","src":"19518:15:29"},"nodeType":"YulExpressionStatement","src":"19518:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19549:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19552:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19542:6:29"},"nodeType":"YulFunctionCall","src":"19542:15:29"},"nodeType":"YulExpressionStatement","src":"19542:15:29"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"19383:180:29"},{"body":{"nodeType":"YulBlock","src":"19597:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19614:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19617:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19607:6:29"},"nodeType":"YulFunctionCall","src":"19607:88:29"},"nodeType":"YulExpressionStatement","src":"19607:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19711:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"19714:4:29","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19704:6:29"},"nodeType":"YulFunctionCall","src":"19704:15:29"},"nodeType":"YulExpressionStatement","src":"19704:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19735:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19738:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19728:6:29"},"nodeType":"YulFunctionCall","src":"19728:15:29"},"nodeType":"YulExpressionStatement","src":"19728:15:29"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"19569:180:29"},{"body":{"nodeType":"YulBlock","src":"19803:54:29","statements":[{"nodeType":"YulAssignment","src":"19813:38:29","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19831:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"19838:2:29","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19827:3:29"},"nodeType":"YulFunctionCall","src":"19827:14:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19847:2:29","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"19843:3:29"},"nodeType":"YulFunctionCall","src":"19843:7:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19823:3:29"},"nodeType":"YulFunctionCall","src":"19823:28:29"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"19813:6:29"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"19786:5:29","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"19796:6:29","type":""}],"src":"19755:102:29"},{"body":{"nodeType":"YulBlock","src":"19969:126:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19991:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"19999:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19987:3:29"},"nodeType":"YulFunctionCall","src":"19987:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"20003:34:29","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19980:6:29"},"nodeType":"YulFunctionCall","src":"19980:58:29"},"nodeType":"YulExpressionStatement","src":"19980:58:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20059:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"20067:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20055:3:29"},"nodeType":"YulFunctionCall","src":"20055:15:29"},{"kind":"string","nodeType":"YulLiteral","src":"20072:15:29","type":"","value":"r or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20048:6:29"},"nodeType":"YulFunctionCall","src":"20048:40:29"},"nodeType":"YulExpressionStatement","src":"20048:40:29"}]},"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"19961:6:29","type":""}],"src":"19863:232:29"},{"body":{"nodeType":"YulBlock","src":"20207:131:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20229:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"20237:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20225:3:29"},"nodeType":"YulFunctionCall","src":"20225:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"20241:34:29","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20218:6:29"},"nodeType":"YulFunctionCall","src":"20218:58:29"},"nodeType":"YulExpressionStatement","src":"20218:58:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20297:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"20305:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20293:3:29"},"nodeType":"YulFunctionCall","src":"20293:15:29"},{"kind":"string","nodeType":"YulLiteral","src":"20310:20:29","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20286:6:29"},"nodeType":"YulFunctionCall","src":"20286:45:29"},"nodeType":"YulExpressionStatement","src":"20286:45:29"}]},"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"20199:6:29","type":""}],"src":"20101:237:29"},{"body":{"nodeType":"YulBlock","src":"20450:118:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20472:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"20480:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20468:3:29"},"nodeType":"YulFunctionCall","src":"20468:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"20484:34:29","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20461:6:29"},"nodeType":"YulFunctionCall","src":"20461:58:29"},"nodeType":"YulExpressionStatement","src":"20461:58:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20540:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"20548:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20536:3:29"},"nodeType":"YulFunctionCall","src":"20536:15:29"},{"kind":"string","nodeType":"YulLiteral","src":"20553:7:29","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20529:6:29"},"nodeType":"YulFunctionCall","src":"20529:32:29"},"nodeType":"YulExpressionStatement","src":"20529:32:29"}]},"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"20442:6:29","type":""}],"src":"20344:224:29"},{"body":{"nodeType":"YulBlock","src":"20680:117:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20702:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"20710:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20698:3:29"},"nodeType":"YulFunctionCall","src":"20698:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"20714:34:29","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20691:6:29"},"nodeType":"YulFunctionCall","src":"20691:58:29"},"nodeType":"YulExpressionStatement","src":"20691:58:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20770:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"20778:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20766:3:29"},"nodeType":"YulFunctionCall","src":"20766:15:29"},{"kind":"string","nodeType":"YulLiteral","src":"20783:6:29","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20759:6:29"},"nodeType":"YulFunctionCall","src":"20759:31:29"},"nodeType":"YulExpressionStatement","src":"20759:31:29"}]},"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"20672:6:29","type":""}],"src":"20574:223:29"},{"body":{"nodeType":"YulBlock","src":"20909:69:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20931:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"20939:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20927:3:29"},"nodeType":"YulFunctionCall","src":"20927:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"20943:27:29","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20920:6:29"},"nodeType":"YulFunctionCall","src":"20920:51:29"},"nodeType":"YulExpressionStatement","src":"20920:51:29"}]},"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"20901:6:29","type":""}],"src":"20803:175:29"},{"body":{"nodeType":"YulBlock","src":"21090:122:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21112:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"21120:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21108:3:29"},"nodeType":"YulFunctionCall","src":"21108:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"21124:34:29","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21101:6:29"},"nodeType":"YulFunctionCall","src":"21101:58:29"},"nodeType":"YulExpressionStatement","src":"21101:58:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21180:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"21188:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21176:3:29"},"nodeType":"YulFunctionCall","src":"21176:15:29"},{"kind":"string","nodeType":"YulLiteral","src":"21193:11:29","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21169:6:29"},"nodeType":"YulFunctionCall","src":"21169:36:29"},"nodeType":"YulExpressionStatement","src":"21169:36:29"}]},"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"21082:6:29","type":""}],"src":"20984:228:29"},{"body":{"nodeType":"YulBlock","src":"21324:68:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21346:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"21354:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21342:3:29"},"nodeType":"YulFunctionCall","src":"21342:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"21358:26:29","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21335:6:29"},"nodeType":"YulFunctionCall","src":"21335:50:29"},"nodeType":"YulExpressionStatement","src":"21335:50:29"}]},"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"21316:6:29","type":""}],"src":"21218:174:29"},{"body":{"nodeType":"YulBlock","src":"21504:114:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21526:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"21534:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21522:3:29"},"nodeType":"YulFunctionCall","src":"21522:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"21538:34:29","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21515:6:29"},"nodeType":"YulFunctionCall","src":"21515:58:29"},"nodeType":"YulExpressionStatement","src":"21515:58:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21594:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"21602:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21590:3:29"},"nodeType":"YulFunctionCall","src":"21590:15:29"},{"kind":"string","nodeType":"YulLiteral","src":"21607:3:29","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21583:6:29"},"nodeType":"YulFunctionCall","src":"21583:28:29"},"nodeType":"YulExpressionStatement","src":"21583:28:29"}]},"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"21496:6:29","type":""}],"src":"21398:220:29"},{"body":{"nodeType":"YulBlock","src":"21730:142:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21752:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"21760:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21748:3:29"},"nodeType":"YulFunctionCall","src":"21748:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"21764:34:29","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21741:6:29"},"nodeType":"YulFunctionCall","src":"21741:58:29"},"nodeType":"YulExpressionStatement","src":"21741:58:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21820:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"21828:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21816:3:29"},"nodeType":"YulFunctionCall","src":"21816:15:29"},{"kind":"string","nodeType":"YulLiteral","src":"21833:31:29","type":"","value":"ken owner or approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21809:6:29"},"nodeType":"YulFunctionCall","src":"21809:56:29"},"nodeType":"YulExpressionStatement","src":"21809:56:29"}]},"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"21722:6:29","type":""}],"src":"21624:248:29"},{"body":{"nodeType":"YulBlock","src":"21921:79:29","statements":[{"body":{"nodeType":"YulBlock","src":"21978:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21987:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21990:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21980:6:29"},"nodeType":"YulFunctionCall","src":"21980:12:29"},"nodeType":"YulExpressionStatement","src":"21980:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21944:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21969:5:29"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"21951:17:29"},"nodeType":"YulFunctionCall","src":"21951:24:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"21941:2:29"},"nodeType":"YulFunctionCall","src":"21941:35:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"21934:6:29"},"nodeType":"YulFunctionCall","src":"21934:43:29"},"nodeType":"YulIf","src":"21931:2:29"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"21914:5:29","type":""}],"src":"21878:122:29"},{"body":{"nodeType":"YulBlock","src":"22046:76:29","statements":[{"body":{"nodeType":"YulBlock","src":"22100:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22109:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22112:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"22102:6:29"},"nodeType":"YulFunctionCall","src":"22102:12:29"},"nodeType":"YulExpressionStatement","src":"22102:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22069:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22091:5:29"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"22076:14:29"},"nodeType":"YulFunctionCall","src":"22076:21:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"22066:2:29"},"nodeType":"YulFunctionCall","src":"22066:32:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"22059:6:29"},"nodeType":"YulFunctionCall","src":"22059:40:29"},"nodeType":"YulIf","src":"22056:2:29"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"22039:5:29","type":""}],"src":"22006:116:29"},{"body":{"nodeType":"YulBlock","src":"22170:78:29","statements":[{"body":{"nodeType":"YulBlock","src":"22226:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22235:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22238:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"22228:6:29"},"nodeType":"YulFunctionCall","src":"22228:12:29"},"nodeType":"YulExpressionStatement","src":"22228:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22193:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22217:5:29"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"22200:16:29"},"nodeType":"YulFunctionCall","src":"22200:23:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"22190:2:29"},"nodeType":"YulFunctionCall","src":"22190:34:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"22183:6:29"},"nodeType":"YulFunctionCall","src":"22183:42:29"},"nodeType":"YulIf","src":"22180:2:29"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"22163:5:29","type":""}],"src":"22128:120:29"},{"body":{"nodeType":"YulBlock","src":"22297:79:29","statements":[{"body":{"nodeType":"YulBlock","src":"22354:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22363:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22366:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"22356:6:29"},"nodeType":"YulFunctionCall","src":"22356:12:29"},"nodeType":"YulExpressionStatement","src":"22356:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22320:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22345:5:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"22327:17:29"},"nodeType":"YulFunctionCall","src":"22327:24:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"22317:2:29"},"nodeType":"YulFunctionCall","src":"22317:35:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"22310:6:29"},"nodeType":"YulFunctionCall","src":"22310:43:29"},"nodeType":"YulIf","src":"22307:2:29"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"22290:5:29","type":""}],"src":"22254:122:29"}]},"contents":"{\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert(0, 0) }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 45)\n        store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 50)\n        store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n        store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 61)\n        store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        if lt(x, y) { panic_error_0x11() }\n\n        diff := sub(x, y)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: caller is not token owne\")\n\n        mstore(add(memPtr, 32), \"r or approved\")\n\n    }\n\n    function store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to non ERC721Re\")\n\n        mstore(add(memPtr, 32), \"ceiver implementer\")\n\n    }\n\n    function store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer from incorrect \")\n\n        mstore(add(memPtr, 32), \"owner\")\n\n    }\n\n    function store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve to caller\")\n\n    }\n\n    function store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: address zero is not a va\")\n\n        mstore(add(memPtr, 32), \"lid owner\")\n\n    }\n\n    function store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: invalid token ID\")\n\n    }\n\n    function store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approval to current owne\")\n\n        mstore(add(memPtr, 32), \"r\")\n\n    }\n\n    function store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve caller is not to\")\n\n        mstore(add(memPtr, 32), \"ken owner or approved for all\")\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n","id":29,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb46514610224578063b88d4fde14610240578063c87b56dd1461025c578063e985e9c51461028c576100cf565b80636352211e146101a657806370a08231146101d657806395d89b4114610206576100cf565b806301ffc9a7146100d457806306fdde0314610104578063081812fc14610122578063095ea7b31461015257806323b872dd1461016e57806342842e0e1461018a575b600080fd5b6100ee60048036038101906100e9919061196f565b6102bc565b6040516100fb9190611c80565b60405180910390f35b61010c61039e565b6040516101199190611c9b565b60405180910390f35b61013c600480360381019061013791906119c1565b610430565b6040516101499190611c19565b60405180910390f35b61016c60048036038101906101679190611933565b610476565b005b6101886004803603810190610183919061182d565b61058e565b005b6101a4600480360381019061019f919061182d565b6105ee565b005b6101c060048036038101906101bb91906119c1565b61060e565b6040516101cd9190611c19565b60405180910390f35b6101f060048036038101906101eb91906117c8565b610695565b6040516101fd9190611ddd565b60405180910390f35b61020e61074d565b60405161021b9190611c9b565b60405180910390f35b61023e600480360381019061023991906118f7565b6107df565b005b61025a6004803603810190610255919061187c565b6107f5565b005b610276600480360381019061027191906119c1565b610857565b6040516102839190611c9b565b60405180910390f35b6102a660048036038101906102a191906117f1565b6108bf565b6040516102b39190611c80565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061038757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610397575061039682610953565b5b9050919050565b6060600080546103ad90611fd1565b80601f01602080910402602001604051908101604052809291908181526020018280546103d990611fd1565b80156104265780601f106103fb57610100808354040283529160200191610426565b820191906000526020600020905b81548152906001019060200180831161040957829003601f168201915b5050505050905090565b600061043b826109bd565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006104818261060e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156104f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e990611d9d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610511610a08565b73ffffffffffffffffffffffffffffffffffffffff161480610540575061053f8161053a610a08565b6108bf565b5b61057f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057690611dbd565b60405180910390fd5b6105898383610a10565b505050565b61059f610599610a08565b82610ac9565b6105de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d590611cbd565b60405180910390fd5b6105e9838383610b5e565b505050565b610609838383604051806020016040528060008152506107f5565b505050565b60008061061a83610e58565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561068c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068390611d7d565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610706576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fd90611d5d565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461075c90611fd1565b80601f016020809104026020016040519081016040528092919081815260200182805461078890611fd1565b80156107d55780601f106107aa576101008083540402835291602001916107d5565b820191906000526020600020905b8154815290600101906020018083116107b857829003601f168201915b5050505050905090565b6107f16107ea610a08565b8383610e95565b5050565b610806610800610a08565b83610ac9565b610845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083c90611cbd565b60405180910390fd5b61085184848484611002565b50505050565b6060610862826109bd565b600061086c61105e565b9050600081511161088c57604051806020016040528060008152506108b7565b8061089684611075565b6040516020016108a7929190611bf5565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6109c681611199565b610a05576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fc90611d7d565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610a838361060e565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610ad58361060e565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610b175750610b1681856108bf565b5b80610b5557508373ffffffffffffffffffffffffffffffffffffffff16610b3d84610430565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610b7e8261060e565b73ffffffffffffffffffffffffffffffffffffffff1614610bd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcb90611cfd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3b90611d1d565b60405180910390fd5b610c5183838360016111da565b8273ffffffffffffffffffffffffffffffffffffffff16610c718261060e565b73ffffffffffffffffffffffffffffffffffffffff1614610cc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbe90611cfd565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610e538383836001611300565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610f04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efb90611d3d565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610ff59190611c80565b60405180910390a3505050565b61100d848484610b5e565b61101984848484611306565b611058576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104f90611cdd565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060600060016110848461149d565b01905060008167ffffffffffffffff8111156110c9577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156110fb5781602001600182028036833780820191505090505b509050600082602001820190505b60011561118e578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611178577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b04945060008514156111895761118e565b611109565b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166111bb83610e58565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60018111156112fa57600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461126e5780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112669190611ee7565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146112f95780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112f19190611e91565b925050819055505b5b50505050565b50505050565b60006113278473ffffffffffffffffffffffffffffffffffffffff166116d4565b15611490578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611350610a08565b8786866040518563ffffffff1660e01b81526004016113729493929190611c34565b602060405180830381600087803b15801561138c57600080fd5b505af19250505080156113bd57506040513d601f19601f820116820180604052508101906113ba9190611998565b60015b611440573d80600081146113ed576040519150601f19603f3d011682016040523d82523d6000602084013e6113f2565b606091505b50600081511415611438576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142f90611cdd565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611495565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611521577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611517577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611584576d04ee2d6d415b85acef8100000000838161157a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506020810190505b662386f26fc1000083106115d957662386f26fc1000083816115cf577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506010810190505b6305f5e1008310611628576305f5e100838161161e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506008810190505b6127108310611673576127108381611669577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506004810190505b606483106116bc57606483816116b2577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506002810190505b600a83106116cb576001810190505b80915050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600061170a61170584611e1d565b611df8565b90508281526020810184848401111561172257600080fd5b61172d848285611f8f565b509392505050565b6000813590506117448161234d565b92915050565b60008135905061175981612364565b92915050565b60008135905061176e8161237b565b92915050565b6000815190506117838161237b565b92915050565b600082601f83011261179a57600080fd5b81356117aa8482602086016116f7565b91505092915050565b6000813590506117c281612392565b92915050565b6000602082840312156117da57600080fd5b60006117e884828501611735565b91505092915050565b6000806040838503121561180457600080fd5b600061181285828601611735565b925050602061182385828601611735565b9150509250929050565b60008060006060848603121561184257600080fd5b600061185086828701611735565b935050602061186186828701611735565b9250506040611872868287016117b3565b9150509250925092565b6000806000806080858703121561189257600080fd5b60006118a087828801611735565b94505060206118b187828801611735565b93505060406118c2878288016117b3565b925050606085013567ffffffffffffffff8111156118df57600080fd5b6118eb87828801611789565b91505092959194509250565b6000806040838503121561190a57600080fd5b600061191885828601611735565b92505060206119298582860161174a565b9150509250929050565b6000806040838503121561194657600080fd5b600061195485828601611735565b9250506020611965858286016117b3565b9150509250929050565b60006020828403121561198157600080fd5b600061198f8482850161175f565b91505092915050565b6000602082840312156119aa57600080fd5b60006119b884828501611774565b91505092915050565b6000602082840312156119d357600080fd5b60006119e1848285016117b3565b91505092915050565b6119f381611f1b565b82525050565b611a0281611f2d565b82525050565b6000611a1382611e4e565b611a1d8185611e64565b9350611a2d818560208601611f9e565b611a36816120c1565b840191505092915050565b6000611a4c82611e59565b611a568185611e75565b9350611a66818560208601611f9e565b611a6f816120c1565b840191505092915050565b6000611a8582611e59565b611a8f8185611e86565b9350611a9f818560208601611f9e565b80840191505092915050565b6000611ab8602d83611e75565b9150611ac3826120d2565b604082019050919050565b6000611adb603283611e75565b9150611ae682612121565b604082019050919050565b6000611afe602583611e75565b9150611b0982612170565b604082019050919050565b6000611b21602483611e75565b9150611b2c826121bf565b604082019050919050565b6000611b44601983611e75565b9150611b4f8261220e565b602082019050919050565b6000611b67602983611e75565b9150611b7282612237565b604082019050919050565b6000611b8a601883611e75565b9150611b9582612286565b602082019050919050565b6000611bad602183611e75565b9150611bb8826122af565b604082019050919050565b6000611bd0603d83611e75565b9150611bdb826122fe565b604082019050919050565b611bef81611f85565b82525050565b6000611c018285611a7a565b9150611c0d8284611a7a565b91508190509392505050565b6000602082019050611c2e60008301846119ea565b92915050565b6000608082019050611c4960008301876119ea565b611c5660208301866119ea565b611c636040830185611be6565b8181036060830152611c758184611a08565b905095945050505050565b6000602082019050611c9560008301846119f9565b92915050565b60006020820190508181036000830152611cb58184611a41565b905092915050565b60006020820190508181036000830152611cd681611aab565b9050919050565b60006020820190508181036000830152611cf681611ace565b9050919050565b60006020820190508181036000830152611d1681611af1565b9050919050565b60006020820190508181036000830152611d3681611b14565b9050919050565b60006020820190508181036000830152611d5681611b37565b9050919050565b60006020820190508181036000830152611d7681611b5a565b9050919050565b60006020820190508181036000830152611d9681611b7d565b9050919050565b60006020820190508181036000830152611db681611ba0565b9050919050565b60006020820190508181036000830152611dd681611bc3565b9050919050565b6000602082019050611df26000830184611be6565b92915050565b6000611e02611e13565b9050611e0e8282612003565b919050565b6000604051905090565b600067ffffffffffffffff821115611e3857611e37612092565b5b611e41826120c1565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000611e9c82611f85565b9150611ea783611f85565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611edc57611edb612034565b5b828201905092915050565b6000611ef282611f85565b9150611efd83611f85565b925082821015611f1057611f0f612034565b5b828203905092915050565b6000611f2682611f65565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015611fbc578082015181840152602081019050611fa1565b83811115611fcb576000848401525b50505050565b60006002820490506001821680611fe957607f821691505b60208210811415611ffd57611ffc612063565b5b50919050565b61200c826120c1565b810181811067ffffffffffffffff8211171561202b5761202a612092565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b61235681611f1b565b811461236157600080fd5b50565b61236d81611f2d565b811461237857600080fd5b50565b61238481611f39565b811461238f57600080fd5b50565b61239b81611f85565b81146123a657600080fd5b5056fea26469706673582212200569c7ee2f5a68fa61bc611f53dc722aac4d3a96ed6ea7819570428d4d0ad08664736f6c63430008040033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x28C JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x206 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x18A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x196F JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x1C80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10C PUSH2 0x39E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0x1C9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x19C1 JUMP JUMPDEST PUSH2 0x430 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x149 SWAP2 SWAP1 PUSH2 0x1C19 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x167 SWAP2 SWAP1 PUSH2 0x1933 JUMP JUMPDEST PUSH2 0x476 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x188 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x183 SWAP2 SWAP1 PUSH2 0x182D JUMP JUMPDEST PUSH2 0x58E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x182D JUMP JUMPDEST PUSH2 0x5EE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BB SWAP2 SWAP1 PUSH2 0x19C1 JUMP JUMPDEST PUSH2 0x60E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CD SWAP2 SWAP1 PUSH2 0x1C19 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x17C8 JUMP JUMPDEST PUSH2 0x695 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FD SWAP2 SWAP1 PUSH2 0x1DDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20E PUSH2 0x74D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21B SWAP2 SWAP1 PUSH2 0x1C9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x239 SWAP2 SWAP1 PUSH2 0x18F7 JUMP JUMPDEST PUSH2 0x7DF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x187C JUMP JUMPDEST PUSH2 0x7F5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x276 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x271 SWAP2 SWAP1 PUSH2 0x19C1 JUMP JUMPDEST PUSH2 0x857 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x1C9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x17F1 JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B3 SWAP2 SWAP1 PUSH2 0x1C80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x387 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x397 JUMPI POP PUSH2 0x396 DUP3 PUSH2 0x953 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x3AD SWAP1 PUSH2 0x1FD1 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3D9 SWAP1 PUSH2 0x1FD1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x426 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3FB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x426 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x409 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43B DUP3 PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x481 DUP3 PUSH2 0x60E JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E9 SWAP1 PUSH2 0x1D9D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x511 PUSH2 0xA08 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x540 JUMPI POP PUSH2 0x53F DUP2 PUSH2 0x53A PUSH2 0xA08 JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST JUMPDEST PUSH2 0x57F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x576 SWAP1 PUSH2 0x1DBD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x589 DUP4 DUP4 PUSH2 0xA10 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x59F PUSH2 0x599 PUSH2 0xA08 JUMP JUMPDEST DUP3 PUSH2 0xAC9 JUMP JUMPDEST PUSH2 0x5DE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5D5 SWAP1 PUSH2 0x1CBD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E9 DUP4 DUP4 DUP4 PUSH2 0xB5E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x609 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x7F5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x61A DUP4 PUSH2 0xE58 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x68C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x683 SWAP1 PUSH2 0x1D7D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x706 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FD SWAP1 PUSH2 0x1D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x75C SWAP1 PUSH2 0x1FD1 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x788 SWAP1 PUSH2 0x1FD1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7D5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7AA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7D5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7B8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x7F1 PUSH2 0x7EA PUSH2 0xA08 JUMP JUMPDEST DUP4 DUP4 PUSH2 0xE95 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x806 PUSH2 0x800 PUSH2 0xA08 JUMP JUMPDEST DUP4 PUSH2 0xAC9 JUMP JUMPDEST PUSH2 0x845 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x83C SWAP1 PUSH2 0x1CBD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x851 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1002 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x862 DUP3 PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x86C PUSH2 0x105E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x88C JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x8B7 JUMP JUMPDEST DUP1 PUSH2 0x896 DUP5 PUSH2 0x1075 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8A7 SWAP3 SWAP2 SWAP1 PUSH2 0x1BF5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9C6 DUP2 PUSH2 0x1199 JUMP JUMPDEST PUSH2 0xA05 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9FC SWAP1 PUSH2 0x1D7D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA83 DUP4 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAD5 DUP4 PUSH2 0x60E JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xB17 JUMPI POP PUSH2 0xB16 DUP2 DUP6 PUSH2 0x8BF JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xB55 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB3D DUP5 PUSH2 0x430 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB7E DUP3 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBD4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBCB SWAP1 PUSH2 0x1CFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC44 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC3B SWAP1 PUSH2 0x1D1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC51 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x11DA JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC71 DUP3 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCC7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCBE SWAP1 PUSH2 0x1CFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xE53 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1300 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xF04 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEFB SWAP1 PUSH2 0x1D3D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0xFF5 SWAP2 SWAP1 PUSH2 0x1C80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x100D DUP5 DUP5 DUP5 PUSH2 0xB5E JUMP JUMPDEST PUSH2 0x1019 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1306 JUMP JUMPDEST PUSH2 0x1058 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x104F SWAP1 PUSH2 0x1CDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x1084 DUP5 PUSH2 0x149D JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x10C9 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x10FB JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x118E JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x1178 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 EQ ISZERO PUSH2 0x1189 JUMPI PUSH2 0x118E JUMP JUMPDEST PUSH2 0x1109 JUMP JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x11BB DUP4 PUSH2 0xE58 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x12FA JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x126E JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1266 SWAP2 SWAP1 PUSH2 0x1EE7 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x12F9 JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x12F1 SWAP2 SWAP1 PUSH2 0x1E91 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1327 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x16D4 JUMP JUMPDEST ISZERO PUSH2 0x1490 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1350 PUSH2 0xA08 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1372 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1C34 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x138C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x13BD JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x13BA SWAP2 SWAP1 PUSH2 0x1998 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1440 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x13ED JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x13F2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x1438 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x142F SWAP1 PUSH2 0x1CDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x1495 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1521 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x1517 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x1584 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x157A JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x15D9 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x15CF JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1628 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x161E JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1673 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x1669 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x16BC JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x16B2 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x16CB JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x170A PUSH2 0x1705 DUP5 PUSH2 0x1E1D JUMP JUMPDEST PUSH2 0x1DF8 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1722 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x172D DUP5 DUP3 DUP6 PUSH2 0x1F8F JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1744 DUP2 PUSH2 0x234D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1759 DUP2 PUSH2 0x2364 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x176E DUP2 PUSH2 0x237B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1783 DUP2 PUSH2 0x237B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x179A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x17AA DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x16F7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x17C2 DUP2 PUSH2 0x2392 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x17DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x17E8 DUP5 DUP3 DUP6 ADD PUSH2 0x1735 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1804 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1812 DUP6 DUP3 DUP7 ADD PUSH2 0x1735 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1823 DUP6 DUP3 DUP7 ADD PUSH2 0x1735 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1842 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1850 DUP7 DUP3 DUP8 ADD PUSH2 0x1735 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1861 DUP7 DUP3 DUP8 ADD PUSH2 0x1735 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1872 DUP7 DUP3 DUP8 ADD PUSH2 0x17B3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1892 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x18A0 DUP8 DUP3 DUP9 ADD PUSH2 0x1735 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x18B1 DUP8 DUP3 DUP9 ADD PUSH2 0x1735 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x18C2 DUP8 DUP3 DUP9 ADD PUSH2 0x17B3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x18DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x18EB DUP8 DUP3 DUP9 ADD PUSH2 0x1789 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x190A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1918 DUP6 DUP3 DUP7 ADD PUSH2 0x1735 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1929 DUP6 DUP3 DUP7 ADD PUSH2 0x174A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1946 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1954 DUP6 DUP3 DUP7 ADD PUSH2 0x1735 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1965 DUP6 DUP3 DUP7 ADD PUSH2 0x17B3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1981 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x198F DUP5 DUP3 DUP6 ADD PUSH2 0x175F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x19B8 DUP5 DUP3 DUP6 ADD PUSH2 0x1774 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x19E1 DUP5 DUP3 DUP6 ADD PUSH2 0x17B3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x19F3 DUP2 PUSH2 0x1F1B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1A02 DUP2 PUSH2 0x1F2D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A13 DUP3 PUSH2 0x1E4E JUMP JUMPDEST PUSH2 0x1A1D DUP2 DUP6 PUSH2 0x1E64 JUMP JUMPDEST SWAP4 POP PUSH2 0x1A2D DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1F9E JUMP JUMPDEST PUSH2 0x1A36 DUP2 PUSH2 0x20C1 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A4C DUP3 PUSH2 0x1E59 JUMP JUMPDEST PUSH2 0x1A56 DUP2 DUP6 PUSH2 0x1E75 JUMP JUMPDEST SWAP4 POP PUSH2 0x1A66 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1F9E JUMP JUMPDEST PUSH2 0x1A6F DUP2 PUSH2 0x20C1 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A85 DUP3 PUSH2 0x1E59 JUMP JUMPDEST PUSH2 0x1A8F DUP2 DUP6 PUSH2 0x1E86 JUMP JUMPDEST SWAP4 POP PUSH2 0x1A9F DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1F9E JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AB8 PUSH1 0x2D DUP4 PUSH2 0x1E75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1AC3 DUP3 PUSH2 0x20D2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1ADB PUSH1 0x32 DUP4 PUSH2 0x1E75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1AE6 DUP3 PUSH2 0x2121 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AFE PUSH1 0x25 DUP4 PUSH2 0x1E75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B09 DUP3 PUSH2 0x2170 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B21 PUSH1 0x24 DUP4 PUSH2 0x1E75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B2C DUP3 PUSH2 0x21BF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B44 PUSH1 0x19 DUP4 PUSH2 0x1E75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B4F DUP3 PUSH2 0x220E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B67 PUSH1 0x29 DUP4 PUSH2 0x1E75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B72 DUP3 PUSH2 0x2237 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B8A PUSH1 0x18 DUP4 PUSH2 0x1E75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B95 DUP3 PUSH2 0x2286 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BAD PUSH1 0x21 DUP4 PUSH2 0x1E75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1BB8 DUP3 PUSH2 0x22AF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BD0 PUSH1 0x3D DUP4 PUSH2 0x1E75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1BDB DUP3 PUSH2 0x22FE JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1BEF DUP2 PUSH2 0x1F85 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C01 DUP3 DUP6 PUSH2 0x1A7A JUMP JUMPDEST SWAP2 POP PUSH2 0x1C0D DUP3 DUP5 PUSH2 0x1A7A JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1C2E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x19EA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x1C49 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x19EA JUMP JUMPDEST PUSH2 0x1C56 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x19EA JUMP JUMPDEST PUSH2 0x1C63 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1BE6 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x1C75 DUP2 DUP5 PUSH2 0x1A08 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1C95 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x19F9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CB5 DUP2 DUP5 PUSH2 0x1A41 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CD6 DUP2 PUSH2 0x1AAB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CF6 DUP2 PUSH2 0x1ACE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D16 DUP2 PUSH2 0x1AF1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D36 DUP2 PUSH2 0x1B14 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D56 DUP2 PUSH2 0x1B37 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D76 DUP2 PUSH2 0x1B5A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D96 DUP2 PUSH2 0x1B7D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1DB6 DUP2 PUSH2 0x1BA0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1DD6 DUP2 PUSH2 0x1BC3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1DF2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1BE6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E02 PUSH2 0x1E13 JUMP JUMPDEST SWAP1 POP PUSH2 0x1E0E DUP3 DUP3 PUSH2 0x2003 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1E38 JUMPI PUSH2 0x1E37 PUSH2 0x2092 JUMP JUMPDEST JUMPDEST PUSH2 0x1E41 DUP3 PUSH2 0x20C1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E9C DUP3 PUSH2 0x1F85 JUMP JUMPDEST SWAP2 POP PUSH2 0x1EA7 DUP4 PUSH2 0x1F85 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x1EDC JUMPI PUSH2 0x1EDB PUSH2 0x2034 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EF2 DUP3 PUSH2 0x1F85 JUMP JUMPDEST SWAP2 POP PUSH2 0x1EFD DUP4 PUSH2 0x1F85 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x1F10 JUMPI PUSH2 0x1F0F PUSH2 0x2034 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F26 DUP3 PUSH2 0x1F65 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1FBC JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1FA1 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1FCB JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1FE9 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1FFD JUMPI PUSH2 0x1FFC PUSH2 0x2063 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x200C DUP3 PUSH2 0x20C1 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x202B JUMPI PUSH2 0x202A PUSH2 0x2092 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x2356 DUP2 PUSH2 0x1F1B JUMP JUMPDEST DUP2 EQ PUSH2 0x2361 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x236D DUP2 PUSH2 0x1F2D JUMP JUMPDEST DUP2 EQ PUSH2 0x2378 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x2384 DUP2 PUSH2 0x1F39 JUMP JUMPDEST DUP2 EQ PUSH2 0x238F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x239B DUP2 PUSH2 0x1F85 JUMP JUMPDEST DUP2 EQ PUSH2 0x23A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SDIV PUSH10 0xC7EE2F5A68FA61BC611F MSTORE8 0xDC PUSH19 0x2AAC4D3A96ED6EA7819570428D4D0AD0866473 PUSH16 0x6C634300080400330000000000000000 ","sourceMap":"628:16327:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1570:300;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2471:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3935:167;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3468:406;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4612:326;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5004:179;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2190:219;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1929:204;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2633:102;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4169:153;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5249:314;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2801:276;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4388:162;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1570:300;1672:4;1722:25;1707:40;;;:11;:40;;;;:104;;;;1778:33;1763:48;;;:11;:48;;;;1707:104;:156;;;;1827:36;1851:11;1827:23;:36::i;:::-;1707:156;1688:175;;1570:300;;;:::o;2471:98::-;2525:13;2557:5;2550:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:98;:::o;3935:167::-;4011:7;4030:23;4045:7;4030:14;:23::i;:::-;4071:15;:24;4087:7;4071:24;;;;;;;;;;;;;;;;;;;;;4064:31;;3935:167;;;:::o;3468:406::-;3548:13;3564:23;3579:7;3564:14;:23::i;:::-;3548:39;;3611:5;3605:11;;:2;:11;;;;3597:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;3702:5;3686:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;3711:37;3728:5;3735:12;:10;:12::i;:::-;3711:16;:37::i;:::-;3686:62;3665:170;;;;;;;;;;;;:::i;:::-;;;;;;;;;3846:21;3855:2;3859:7;3846:8;:21::i;:::-;3468:406;;;:::o;4612:326::-;4801:41;4820:12;:10;:12::i;:::-;4834:7;4801:18;:41::i;:::-;4793:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;4903:28;4913:4;4919:2;4923:7;4903:9;:28::i;:::-;4612:326;;;:::o;5004:179::-;5137:39;5154:4;5160:2;5164:7;5137:39;;;;;;;;;;;;:16;:39::i;:::-;5004:179;;;:::o;2190:219::-;2262:7;2281:13;2297:17;2306:7;2297:8;:17::i;:::-;2281:33;;2349:1;2332:19;;:5;:19;;;;2324:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;2397:5;2390:12;;;2190:219;;;:::o;1929:204::-;2001:7;2045:1;2028:19;;:5;:19;;;;2020:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2110:9;:16;2120:5;2110:16;;;;;;;;;;;;;;;;2103:23;;1929:204;;;:::o;2633:102::-;2689:13;2721:7;2714:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2633:102;:::o;4169:153::-;4263:52;4282:12;:10;:12::i;:::-;4296:8;4306;4263:18;:52::i;:::-;4169:153;;:::o;5249:314::-;5417:41;5436:12;:10;:12::i;:::-;5450:7;5417:18;:41::i;:::-;5409:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;5518:38;5532:4;5538:2;5542:7;5551:4;5518:13;:38::i;:::-;5249:314;;;;:::o;2801:276::-;2874:13;2899:23;2914:7;2899:14;:23::i;:::-;2933:21;2957:10;:8;:10::i;:::-;2933:34;;3008:1;2990:7;2984:21;:25;:86;;;;;;;;;;;;;;;;;3036:7;3045:18;:7;:16;:18::i;:::-;3019:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2984:86;2977:93;;;2801:276;;;:::o;4388:162::-;4485:4;4508:18;:25;4527:5;4508:25;;;;;;;;;;;;;;;:35;4534:8;4508:35;;;;;;;;;;;;;;;;;;;;;;;;;4501:42;;4388:162;;;;:::o;829:155:21:-;914:4;952:25;937:40;;;:11;:40;;;;930:47;;829:155;;;:::o;13466:133:13:-;13547:16;13555:7;13547;:16::i;:::-;13539:53;;;;;;;;;;;;:::i;:::-;;;;;;;;;13466:133;:::o;640:96:18:-;693:7;719:10;712:17;;640:96;:::o;12768:171:13:-;12869:2;12842:15;:24;12858:7;12842:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;12924:7;12920:2;12886:46;;12895:23;12910:7;12895:14;:23::i;:::-;12886:46;;;;;;;;;;;;12768:171;;:::o;7540:261::-;7633:4;7649:13;7665:23;7680:7;7665:14;:23::i;:::-;7649:39;;7717:5;7706:16;;:7;:16;;;:52;;;;7726:32;7743:5;7750:7;7726:16;:32::i;:::-;7706:52;:87;;;;7786:7;7762:31;;:20;7774:7;7762:11;:20::i;:::-;:31;;;7706:87;7698:96;;;7540:261;;;;:::o;11423:1233::-;11577:4;11550:31;;:23;11565:7;11550:14;:23::i;:::-;:31;;;11542:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11655:1;11641:16;;:2;:16;;;;11633:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;11709:42;11730:4;11736:2;11740:7;11749:1;11709:20;:42::i;:::-;11878:4;11851:31;;:23;11866:7;11851:14;:23::i;:::-;:31;;;11843:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11993:15;:24;12009:7;11993:24;;;;;;;;;;;;11986:31;;;;;;;;;;;12480:1;12461:9;:15;12471:4;12461:15;;;;;;;;;;;;;;;;:20;;;;;;;;;;;12512:1;12495:9;:13;12505:2;12495:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;12552:2;12533:7;:16;12541:7;12533:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;12589:7;12585:2;12570:27;;12579:4;12570:27;;;;;;;;;;;;12608:41;12628:4;12634:2;12638:7;12647:1;12608:19;:41::i;:::-;11423:1233;;;:::o;6838:115::-;6904:7;6930;:16;6938:7;6930:16;;;;;;;;;;;;;;;;;;;;;6923:23;;6838:115;;;:::o;13075:307::-;13225:8;13216:17;;:5;:17;;;;13208:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;13311:8;13273:18;:25;13292:5;13273:25;;;;;;;;;;;;;;;:35;13299:8;13273:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;13356:8;13334:41;;13349:5;13334:41;;;13366:8;13334:41;;;;;;:::i;:::-;;;;;;;;13075:307;;;:::o;6424:305::-;6574:28;6584:4;6590:2;6594:7;6574:9;:28::i;:::-;6620:47;6643:4;6649:2;6653:7;6662:4;6620:22;:47::i;:::-;6612:110;;;;;;;;;;;;:::i;:::-;;;;;;;;;6424:305;;;;:::o;3319:92::-;3370:13;3395:9;;;;;;;;;;;;;;3319:92;:::o;415:696:20:-;471:13;520:14;557:1;537:17;548:5;537:10;:17::i;:::-;:21;520:38;;572:20;606:6;595:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;572:41;;627:11;753:6;749:2;745:15;737:6;733:28;726:35;;788:280;795:4;788:280;;;819:5;;;;;;;;958:8;953:2;946:5;942:14;937:30;932:3;924:44;1012:2;1003:11;;;;;;;;;;;;;;;;;1045:1;1036:5;:10;1032:21;;;1048:5;;1032:21;788:280;;;1088:6;1081:13;;;;;415:696;;;:::o;7256:126:13:-;7321:4;7373:1;7344:31;;:17;7353:7;7344:8;:17::i;:::-;:31;;;;7337:38;;7256:126;;;:::o;15698:396::-;15882:1;15870:9;:13;15866:222;;;15919:1;15903:18;;:4;:18;;;15899:85;;15960:9;15941;:15;15951:4;15941:15;;;;;;;;;;;;;;;;:28;;;;;;;:::i;:::-;;;;;;;;15899:85;16015:1;16001:16;;:2;:16;;;15997:81;;16054:9;16037;:13;16047:2;16037:13;;;;;;;;;;;;;;;;:26;;;;;;;:::i;:::-;;;;;;;;15997:81;15866:222;15698:396;;;;:::o;16800:153::-;;;;;:::o;14151:831::-;14300:4;14320:15;:2;:13;;;:15::i;:::-;14316:660;;;14371:2;14355:36;;;14392:12;:10;:12::i;:::-;14406:4;14412:7;14421:4;14355:71;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;14351:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14610:1;14593:6;:13;:18;14589:321;;;14635:60;;;;;;;;;;:::i;:::-;;;;;;;;14589:321;14862:6;14856:13;14847:6;14843:2;14839:15;14832:38;14351:573;14486:41;;;14476:51;;;:6;:51;;;;14469:58;;;;;14316:660;14961:4;14954:11;;14151:831;;;;;;;:::o;9889:890:23:-;9942:7;9961:14;9978:1;9961:18;;10026:6;10017:5;:15;10013:99;;10061:6;10052:15;;;;;;;;;;;;;;;;;10095:2;10085:12;;;;10013:99;10138:6;10129:5;:15;10125:99;;10173:6;10164:15;;;;;;;;;;;;;;;;;10207:2;10197:12;;;;10125:99;10250:6;10241:5;:15;10237:99;;10285:6;10276:15;;;;;;;;;;;;;;;;;10319:2;10309:12;;;;10237:99;10362:5;10353;:14;10349:96;;10396:5;10387:14;;;;;;;;;;;;;;;;;10429:1;10419:11;;;;10349:96;10471:5;10462;:14;10458:96;;10505:5;10496:14;;;;;;;;;;;;;;;;;10538:1;10528:11;;;;10458:96;10580:5;10571;:14;10567:96;;10614:5;10605:14;;;;;;;;;;;;;;;;;10647:1;10637:11;;;;10567:96;10689:5;10680;:14;10676:64;;10724:1;10714:11;;;;10676:64;10766:6;10759:13;;;9889:890;;;:::o;1175:320:17:-;1235:4;1487:1;1465:7;:19;;;:23;1458:30;;1175:320;;;:::o;7:343:29:-;84:5;109:65;125:48;166:6;125:48;:::i;:::-;109:65;:::i;:::-;100:74;;197:6;190:5;183:21;235:4;228:5;224:16;273:3;264:6;259:3;255:16;252:25;249:2;;;290:1;287;280:12;249:2;303:41;337:6;332:3;327;303:41;:::i;:::-;90:260;;;;;;:::o;356:139::-;402:5;440:6;427:20;418:29;;456:33;483:5;456:33;:::i;:::-;408:87;;;;:::o;501:133::-;544:5;582:6;569:20;560:29;;598:30;622:5;598:30;:::i;:::-;550:84;;;;:::o;640:137::-;685:5;723:6;710:20;701:29;;739:32;765:5;739:32;:::i;:::-;691:86;;;;:::o;783:141::-;839:5;870:6;864:13;855:22;;886:32;912:5;886:32;:::i;:::-;845:79;;;;:::o;943:271::-;998:5;1047:3;1040:4;1032:6;1028:17;1024:27;1014:2;;1065:1;1062;1055:12;1014:2;1105:6;1092:20;1130:78;1204:3;1196:6;1189:4;1181:6;1177:17;1130:78;:::i;:::-;1121:87;;1004:210;;;;;:::o;1220:139::-;1266:5;1304:6;1291:20;1282:29;;1320:33;1347:5;1320:33;:::i;:::-;1272:87;;;;:::o;1365:262::-;1424:6;1473:2;1461:9;1452:7;1448:23;1444:32;1441:2;;;1489:1;1486;1479:12;1441:2;1532:1;1557:53;1602:7;1593:6;1582:9;1578:22;1557:53;:::i;:::-;1547:63;;1503:117;1431:196;;;;:::o;1633:407::-;1701:6;1709;1758:2;1746:9;1737:7;1733:23;1729:32;1726:2;;;1774:1;1771;1764:12;1726:2;1817:1;1842:53;1887:7;1878:6;1867:9;1863:22;1842:53;:::i;:::-;1832:63;;1788:117;1944:2;1970:53;2015:7;2006:6;1995:9;1991:22;1970:53;:::i;:::-;1960:63;;1915:118;1716:324;;;;;:::o;2046:552::-;2123:6;2131;2139;2188:2;2176:9;2167:7;2163:23;2159:32;2156:2;;;2204:1;2201;2194:12;2156:2;2247:1;2272:53;2317:7;2308:6;2297:9;2293:22;2272:53;:::i;:::-;2262:63;;2218:117;2374:2;2400:53;2445:7;2436:6;2425:9;2421:22;2400:53;:::i;:::-;2390:63;;2345:118;2502:2;2528:53;2573:7;2564:6;2553:9;2549:22;2528:53;:::i;:::-;2518:63;;2473:118;2146:452;;;;;:::o;2604:809::-;2699:6;2707;2715;2723;2772:3;2760:9;2751:7;2747:23;2743:33;2740:2;;;2789:1;2786;2779:12;2740:2;2832:1;2857:53;2902:7;2893:6;2882:9;2878:22;2857:53;:::i;:::-;2847:63;;2803:117;2959:2;2985:53;3030:7;3021:6;3010:9;3006:22;2985:53;:::i;:::-;2975:63;;2930:118;3087:2;3113:53;3158:7;3149:6;3138:9;3134:22;3113:53;:::i;:::-;3103:63;;3058:118;3243:2;3232:9;3228:18;3215:32;3274:18;3266:6;3263:30;3260:2;;;3306:1;3303;3296:12;3260:2;3334:62;3388:7;3379:6;3368:9;3364:22;3334:62;:::i;:::-;3324:72;;3186:220;2730:683;;;;;;;:::o;3419:401::-;3484:6;3492;3541:2;3529:9;3520:7;3516:23;3512:32;3509:2;;;3557:1;3554;3547:12;3509:2;3600:1;3625:53;3670:7;3661:6;3650:9;3646:22;3625:53;:::i;:::-;3615:63;;3571:117;3727:2;3753:50;3795:7;3786:6;3775:9;3771:22;3753:50;:::i;:::-;3743:60;;3698:115;3499:321;;;;;:::o;3826:407::-;3894:6;3902;3951:2;3939:9;3930:7;3926:23;3922:32;3919:2;;;3967:1;3964;3957:12;3919:2;4010:1;4035:53;4080:7;4071:6;4060:9;4056:22;4035:53;:::i;:::-;4025:63;;3981:117;4137:2;4163:53;4208:7;4199:6;4188:9;4184:22;4163:53;:::i;:::-;4153:63;;4108:118;3909:324;;;;;:::o;4239:260::-;4297:6;4346:2;4334:9;4325:7;4321:23;4317:32;4314:2;;;4362:1;4359;4352:12;4314:2;4405:1;4430:52;4474:7;4465:6;4454:9;4450:22;4430:52;:::i;:::-;4420:62;;4376:116;4304:195;;;;:::o;4505:282::-;4574:6;4623:2;4611:9;4602:7;4598:23;4594:32;4591:2;;;4639:1;4636;4629:12;4591:2;4682:1;4707:63;4762:7;4753:6;4742:9;4738:22;4707:63;:::i;:::-;4697:73;;4653:127;4581:206;;;;:::o;4793:262::-;4852:6;4901:2;4889:9;4880:7;4876:23;4872:32;4869:2;;;4917:1;4914;4907:12;4869:2;4960:1;4985:53;5030:7;5021:6;5010:9;5006:22;4985:53;:::i;:::-;4975:63;;4931:117;4859:196;;;;:::o;5061:118::-;5148:24;5166:5;5148:24;:::i;:::-;5143:3;5136:37;5126:53;;:::o;5185:109::-;5266:21;5281:5;5266:21;:::i;:::-;5261:3;5254:34;5244:50;;:::o;5300:360::-;5386:3;5414:38;5446:5;5414:38;:::i;:::-;5468:70;5531:6;5526:3;5468:70;:::i;:::-;5461:77;;5547:52;5592:6;5587:3;5580:4;5573:5;5569:16;5547:52;:::i;:::-;5624:29;5646:6;5624:29;:::i;:::-;5619:3;5615:39;5608:46;;5390:270;;;;;:::o;5666:364::-;5754:3;5782:39;5815:5;5782:39;:::i;:::-;5837:71;5901:6;5896:3;5837:71;:::i;:::-;5830:78;;5917:52;5962:6;5957:3;5950:4;5943:5;5939:16;5917:52;:::i;:::-;5994:29;6016:6;5994:29;:::i;:::-;5989:3;5985:39;5978:46;;5758:272;;;;;:::o;6036:377::-;6142:3;6170:39;6203:5;6170:39;:::i;:::-;6225:89;6307:6;6302:3;6225:89;:::i;:::-;6218:96;;6323:52;6368:6;6363:3;6356:4;6349:5;6345:16;6323:52;:::i;:::-;6400:6;6395:3;6391:16;6384:23;;6146:267;;;;;:::o;6419:366::-;6561:3;6582:67;6646:2;6641:3;6582:67;:::i;:::-;6575:74;;6658:93;6747:3;6658:93;:::i;:::-;6776:2;6771:3;6767:12;6760:19;;6565:220;;;:::o;6791:366::-;6933:3;6954:67;7018:2;7013:3;6954:67;:::i;:::-;6947:74;;7030:93;7119:3;7030:93;:::i;:::-;7148:2;7143:3;7139:12;7132:19;;6937:220;;;:::o;7163:366::-;7305:3;7326:67;7390:2;7385:3;7326:67;:::i;:::-;7319:74;;7402:93;7491:3;7402:93;:::i;:::-;7520:2;7515:3;7511:12;7504:19;;7309:220;;;:::o;7535:366::-;7677:3;7698:67;7762:2;7757:3;7698:67;:::i;:::-;7691:74;;7774:93;7863:3;7774:93;:::i;:::-;7892:2;7887:3;7883:12;7876:19;;7681:220;;;:::o;7907:366::-;8049:3;8070:67;8134:2;8129:3;8070:67;:::i;:::-;8063:74;;8146:93;8235:3;8146:93;:::i;:::-;8264:2;8259:3;8255:12;8248:19;;8053:220;;;:::o;8279:366::-;8421:3;8442:67;8506:2;8501:3;8442:67;:::i;:::-;8435:74;;8518:93;8607:3;8518:93;:::i;:::-;8636:2;8631:3;8627:12;8620:19;;8425:220;;;:::o;8651:366::-;8793:3;8814:67;8878:2;8873:3;8814:67;:::i;:::-;8807:74;;8890:93;8979:3;8890:93;:::i;:::-;9008:2;9003:3;8999:12;8992:19;;8797:220;;;:::o;9023:366::-;9165:3;9186:67;9250:2;9245:3;9186:67;:::i;:::-;9179:74;;9262:93;9351:3;9262:93;:::i;:::-;9380:2;9375:3;9371:12;9364:19;;9169:220;;;:::o;9395:366::-;9537:3;9558:67;9622:2;9617:3;9558:67;:::i;:::-;9551:74;;9634:93;9723:3;9634:93;:::i;:::-;9752:2;9747:3;9743:12;9736:19;;9541:220;;;:::o;9767:118::-;9854:24;9872:5;9854:24;:::i;:::-;9849:3;9842:37;9832:53;;:::o;9891:435::-;10071:3;10093:95;10184:3;10175:6;10093:95;:::i;:::-;10086:102;;10205:95;10296:3;10287:6;10205:95;:::i;:::-;10198:102;;10317:3;10310:10;;10075:251;;;;;:::o;10332:222::-;10425:4;10463:2;10452:9;10448:18;10440:26;;10476:71;10544:1;10533:9;10529:17;10520:6;10476:71;:::i;:::-;10430:124;;;;:::o;10560:640::-;10755:4;10793:3;10782:9;10778:19;10770:27;;10807:71;10875:1;10864:9;10860:17;10851:6;10807:71;:::i;:::-;10888:72;10956:2;10945:9;10941:18;10932:6;10888:72;:::i;:::-;10970;11038:2;11027:9;11023:18;11014:6;10970:72;:::i;:::-;11089:9;11083:4;11079:20;11074:2;11063:9;11059:18;11052:48;11117:76;11188:4;11179:6;11117:76;:::i;:::-;11109:84;;10760:440;;;;;;;:::o;11206:210::-;11293:4;11331:2;11320:9;11316:18;11308:26;;11344:65;11406:1;11395:9;11391:17;11382:6;11344:65;:::i;:::-;11298:118;;;;:::o;11422:313::-;11535:4;11573:2;11562:9;11558:18;11550:26;;11622:9;11616:4;11612:20;11608:1;11597:9;11593:17;11586:47;11650:78;11723:4;11714:6;11650:78;:::i;:::-;11642:86;;11540:195;;;;:::o;11741:419::-;11907:4;11945:2;11934:9;11930:18;11922:26;;11994:9;11988:4;11984:20;11980:1;11969:9;11965:17;11958:47;12022:131;12148:4;12022:131;:::i;:::-;12014:139;;11912:248;;;:::o;12166:419::-;12332:4;12370:2;12359:9;12355:18;12347:26;;12419:9;12413:4;12409:20;12405:1;12394:9;12390:17;12383:47;12447:131;12573:4;12447:131;:::i;:::-;12439:139;;12337:248;;;:::o;12591:419::-;12757:4;12795:2;12784:9;12780:18;12772:26;;12844:9;12838:4;12834:20;12830:1;12819:9;12815:17;12808:47;12872:131;12998:4;12872:131;:::i;:::-;12864:139;;12762:248;;;:::o;13016:419::-;13182:4;13220:2;13209:9;13205:18;13197:26;;13269:9;13263:4;13259:20;13255:1;13244:9;13240:17;13233:47;13297:131;13423:4;13297:131;:::i;:::-;13289:139;;13187:248;;;:::o;13441:419::-;13607:4;13645:2;13634:9;13630:18;13622:26;;13694:9;13688:4;13684:20;13680:1;13669:9;13665:17;13658:47;13722:131;13848:4;13722:131;:::i;:::-;13714:139;;13612:248;;;:::o;13866:419::-;14032:4;14070:2;14059:9;14055:18;14047:26;;14119:9;14113:4;14109:20;14105:1;14094:9;14090:17;14083:47;14147:131;14273:4;14147:131;:::i;:::-;14139:139;;14037:248;;;:::o;14291:419::-;14457:4;14495:2;14484:9;14480:18;14472:26;;14544:9;14538:4;14534:20;14530:1;14519:9;14515:17;14508:47;14572:131;14698:4;14572:131;:::i;:::-;14564:139;;14462:248;;;:::o;14716:419::-;14882:4;14920:2;14909:9;14905:18;14897:26;;14969:9;14963:4;14959:20;14955:1;14944:9;14940:17;14933:47;14997:131;15123:4;14997:131;:::i;:::-;14989:139;;14887:248;;;:::o;15141:419::-;15307:4;15345:2;15334:9;15330:18;15322:26;;15394:9;15388:4;15384:20;15380:1;15369:9;15365:17;15358:47;15422:131;15548:4;15422:131;:::i;:::-;15414:139;;15312:248;;;:::o;15566:222::-;15659:4;15697:2;15686:9;15682:18;15674:26;;15710:71;15778:1;15767:9;15763:17;15754:6;15710:71;:::i;:::-;15664:124;;;;:::o;15794:129::-;15828:6;15855:20;;:::i;:::-;15845:30;;15884:33;15912:4;15904:6;15884:33;:::i;:::-;15835:88;;;:::o;15929:75::-;15962:6;15995:2;15989:9;15979:19;;15969:35;:::o;16010:307::-;16071:4;16161:18;16153:6;16150:30;16147:2;;;16183:18;;:::i;:::-;16147:2;16221:29;16243:6;16221:29;:::i;:::-;16213:37;;16305:4;16299;16295:15;16287:23;;16076:241;;;:::o;16323:98::-;16374:6;16408:5;16402:12;16392:22;;16381:40;;;:::o;16427:99::-;16479:6;16513:5;16507:12;16497:22;;16486:40;;;:::o;16532:168::-;16615:11;16649:6;16644:3;16637:19;16689:4;16684:3;16680:14;16665:29;;16627:73;;;;:::o;16706:169::-;16790:11;16824:6;16819:3;16812:19;16864:4;16859:3;16855:14;16840:29;;16802:73;;;;:::o;16881:148::-;16983:11;17020:3;17005:18;;16995:34;;;;:::o;17035:305::-;17075:3;17094:20;17112:1;17094:20;:::i;:::-;17089:25;;17128:20;17146:1;17128:20;:::i;:::-;17123:25;;17282:1;17214:66;17210:74;17207:1;17204:81;17201:2;;;17288:18;;:::i;:::-;17201:2;17332:1;17329;17325:9;17318:16;;17079:261;;;;:::o;17346:191::-;17386:4;17406:20;17424:1;17406:20;:::i;:::-;17401:25;;17440:20;17458:1;17440:20;:::i;:::-;17435:25;;17479:1;17476;17473:8;17470:2;;;17484:18;;:::i;:::-;17470:2;17529:1;17526;17522:9;17514:17;;17391:146;;;;:::o;17543:96::-;17580:7;17609:24;17627:5;17609:24;:::i;:::-;17598:35;;17588:51;;;:::o;17645:90::-;17679:7;17722:5;17715:13;17708:21;17697:32;;17687:48;;;:::o;17741:149::-;17777:7;17817:66;17810:5;17806:78;17795:89;;17785:105;;;:::o;17896:126::-;17933:7;17973:42;17966:5;17962:54;17951:65;;17941:81;;;:::o;18028:77::-;18065:7;18094:5;18083:16;;18073:32;;;:::o;18111:154::-;18195:6;18190:3;18185;18172:30;18257:1;18248:6;18243:3;18239:16;18232:27;18162:103;;;:::o;18271:307::-;18339:1;18349:113;18363:6;18360:1;18357:13;18349:113;;;18448:1;18443:3;18439:11;18433:18;18429:1;18424:3;18420:11;18413:39;18385:2;18382:1;18378:10;18373:15;;18349:113;;;18480:6;18477:1;18474:13;18471:2;;;18560:1;18551:6;18546:3;18542:16;18535:27;18471:2;18320:258;;;;:::o;18584:320::-;18628:6;18665:1;18659:4;18655:12;18645:22;;18712:1;18706:4;18702:12;18733:18;18723:2;;18789:4;18781:6;18777:17;18767:27;;18723:2;18851;18843:6;18840:14;18820:18;18817:38;18814:2;;;18870:18;;:::i;:::-;18814:2;18635:269;;;;:::o;18910:281::-;18993:27;19015:4;18993:27;:::i;:::-;18985:6;18981:40;19123:6;19111:10;19108:22;19087:18;19075:10;19072:34;19069:62;19066:2;;;19134:18;;:::i;:::-;19066:2;19174:10;19170:2;19163:22;18953:238;;;:::o;19197:180::-;19245:77;19242:1;19235:88;19342:4;19339:1;19332:15;19366:4;19363:1;19356:15;19383:180;19431:77;19428:1;19421:88;19528:4;19525:1;19518:15;19552:4;19549:1;19542:15;19569:180;19617:77;19614:1;19607:88;19714:4;19711:1;19704:15;19738:4;19735:1;19728:15;19755:102;19796:6;19847:2;19843:7;19838:2;19831:5;19827:14;19823:28;19813:38;;19803:54;;;:::o;19863:232::-;20003:34;19999:1;19991:6;19987:14;19980:58;20072:15;20067:2;20059:6;20055:15;20048:40;19969:126;:::o;20101:237::-;20241:34;20237:1;20229:6;20225:14;20218:58;20310:20;20305:2;20297:6;20293:15;20286:45;20207:131;:::o;20344:224::-;20484:34;20480:1;20472:6;20468:14;20461:58;20553:7;20548:2;20540:6;20536:15;20529:32;20450:118;:::o;20574:223::-;20714:34;20710:1;20702:6;20698:14;20691:58;20783:6;20778:2;20770:6;20766:15;20759:31;20680:117;:::o;20803:175::-;20943:27;20939:1;20931:6;20927:14;20920:51;20909:69;:::o;20984:228::-;21124:34;21120:1;21112:6;21108:14;21101:58;21193:11;21188:2;21180:6;21176:15;21169:36;21090:122;:::o;21218:174::-;21358:26;21354:1;21346:6;21342:14;21335:50;21324:68;:::o;21398:220::-;21538:34;21534:1;21526:6;21522:14;21515:58;21607:3;21602:2;21594:6;21590:15;21583:28;21504:114;:::o;21624:248::-;21764:34;21760:1;21752:6;21748:14;21741:58;21833:31;21828:2;21820:6;21816:15;21809:56;21730:142;:::o;21878:122::-;21951:24;21969:5;21951:24;:::i;:::-;21944:5;21941:35;21931:2;;21990:1;21987;21980:12;21931:2;21921:79;:::o;22006:116::-;22076:21;22091:5;22076:21;:::i;:::-;22069:5;22066:32;22056:2;;22112:1;22109;22102:12;22056:2;22046:76;:::o;22128:120::-;22200:23;22217:5;22200:23;:::i;:::-;22193:5;22190:34;22180:2;;22238:1;22235;22228:12;22180:2;22170:78;:::o;22254:122::-;22327:24;22345:5;22327:24;:::i;:::-;22320:5;22317:35;22307:2;;22366:1;22363;22356:12;22307:2;22297:79;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1836600","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"1624","getApproved(uint256)":"2677","isApprovedForAll(address,address)":"infinite","name()":"infinite","ownerOf(uint256)":"1725","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","supportsInterface(bytes4)":"774","symbol()":"infinite","tokenURI(uint256)":"2167","transferFrom(address,address,uint256)":"infinite"},"internal":{"_afterTokenTransfer(address,address,uint256,uint256)":"17","_approve(address,uint256)":"infinite","_baseURI()":"infinite","_beforeTokenTransfer(address,address,uint256,uint256)":"infinite","_burn(uint256)":"infinite","_checkOnERC721Received(address,address,uint256,bytes memory)":"infinite","_exists(uint256)":"1012","_isApprovedOrOwner(address,uint256)":"infinite","_mint(address,uint256)":"infinite","_ownerOf(uint256)":"948","_requireMinted(uint256)":"infinite","_safeMint(address,uint256)":"infinite","_safeMint(address,uint256,bytes memory)":"infinite","_safeTransfer(address,address,uint256,bytes memory)":"infinite","_setApprovalForAll(address,address,bool)":"infinite","_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the contract by setting a `name` and a `symbol` to the token collection.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":\"ERC721\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1729,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":1731,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":1735,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":1739,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":1743,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":1749,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Required interface of an ERC721 compliant contract.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."}},"title":"ERC721 token receiver interface","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"IERC721Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional metadata extension","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122099cacbc6e50b727c05ad7311b45ab66de75b492a5183dd43291999daa084e96664736f6c63430008040033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP10 0xCA 0xCB 0xC6 0xE5 SIGNEXTEND PUSH19 0x7C05AD7311B45AB66DE75B492A5183DD432919 SWAP10 0xDA LOG0 DUP5 0xE9 PUSH7 0x64736F6C634300 ADDMOD DIV STOP CALLER ","sourceMap":"194:8964:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122099cacbc6e50b727c05ad7311b45ab66de75b492a5183dd43291999daa084e96664736f6c63430008040033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP10 0xCA 0xCB 0xC6 0xE5 SIGNEXTEND PUSH19 0x7C05AD7311B45AB66DE75B492A5183DD432919 SWAP10 0xDA LOG0 DUP5 0xE9 PUSH7 0x64736F6C634300 ADDMOD DIV STOP CALLER ","sourceMap":"194:8964:17:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Counters.sol":{"Counters":{"abi":[],"devdoc":{"author":"Matt Condon (@shrugs)","details":"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`","kind":"dev","methods":{},"title":"Counters","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122070e73f0a9bdb8d9cff6918fc96fb658d845e9d4bdea4f69cc3af8352bfc6673964736f6c63430008040033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH17 0xE73F0A9BDB8D9CFF6918FC96FB658D845E SWAP14 0x4B 0xDE LOG4 0xF6 SWAP13 0xC3 0xAF DUP4 MSTORE 0xBF 0xC6 PUSH8 0x3964736F6C634300 ADDMOD DIV STOP CALLER ","sourceMap":"424:971:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122070e73f0a9bdb8d9cff6918fc96fb658d845e9d4bdea4f69cc3af8352bfc6673964736f6c63430008040033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH17 0xE73F0A9BDB8D9CFF6918FC96FB658D845E SWAP14 0x4B 0xDE LOG4 0xF6 SWAP13 0xC3 0xAF DUP4 MSTORE 0xBF 0xC6 PUSH8 0x3964736F6C634300 ADDMOD DIV STOP CALLER ","sourceMap":"424:971:19:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"current(struct Counters.Counter storage pointer)":"infinite","decrement(struct Counters.Counter storage pointer)":"infinite","increment(struct Counters.Counter storage pointer)":"infinite","reset(struct Counters.Counter storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Counters.sol\":\"Counters\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122029c05119bccc511574891c718be35f03446c9f74fefc042f852a10c927558d5c64736f6c63430008040033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x29 0xC0 MLOAD NOT 0xBC 0xCC MLOAD ISZERO PUSH21 0x891C718BE35F03446C9F74FEFC042F852A10C92755 DUP14 0x5C PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ","sourceMap":"188:2065:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122029c05119bccc511574891c718be35f03446c9f74fefc042f852a10c927558d5c64736f6c63430008040033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x29 0xC0 MLOAD NOT 0xBC 0xCC MLOAD ISZERO PUSH21 0x891C718BE35F03446C9F74FEFC042F852A10C92755 DUP14 0x5C PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ","sourceMap":"188:2065:20:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122078e9d2bfe7428d9072e4eebe3ffd84c65a54fcfee3290e32937f2b0dad96bb4d64736f6c63430008040033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH25 0xE9D2BFE7428D9072E4EEBE3FFD84C65A54FCFEE3290E32937F 0x2B 0xD 0xAD SWAP7 0xBB 0x4D PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ","sourceMap":"202:12302:23:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122078e9d2bfe7428d9072e4eebe3ffd84c65a54fcfee3290e32937f2b0dad96bb4d64736f6c63430008040033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH25 0xE9D2BFE7428D9072E4EEBE3FFD84C65A54FCFEE3290E32937F 0x2B 0xD 0xAD SWAP7 0xBB 0x4D PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ","sourceMap":"202:12302:23:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Trustified-NonTransferable.sol":{"TrustifiedNonTransferable":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"","type":"address"},{"indexed":false,"internalType":"uint256","name":"","type":"uint256"}],"name":"TokenMinted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"","type":"address"},{"indexed":false,"internalType":"address","name":"","type":"address"},{"indexed":false,"internalType":"uint256","name":"","type":"uint256"}],"name":"TokenTransfered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"tokenUri","type":"string"},{"internalType":"uint256","name":"quantity","type":"uint256"}],"name":"bulkMintBadgesERC721","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"quantity","type":"uint256"}],"name":"bulkMintERC721","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"eventId","type":"uint256"}],"name":"getTokenIds","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"safeMint","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"tokenURI","type":"string"}],"name":"safeMintBadge","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"tokenIds","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferBadgesToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"tokenURI","type":"string"}],"name":"transferToken","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:516:29","statements":[{"body":{"nodeType":"YulBlock","src":"58:269:29","statements":[{"nodeType":"YulAssignment","src":"68:22:29","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"82:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"88:1:29","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"78:3:29"},"nodeType":"YulFunctionCall","src":"78:12:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"68:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"99:38:29","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"129:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"135:1:29","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"125:3:29"},"nodeType":"YulFunctionCall","src":"125:12:29"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"103:18:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"176:51:29","statements":[{"nodeType":"YulAssignment","src":"190:27:29","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"204:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"212:4:29","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"200:3:29"},"nodeType":"YulFunctionCall","src":"200:17:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"190:6:29"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"156:18:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"149:6:29"},"nodeType":"YulFunctionCall","src":"149:26:29"},"nodeType":"YulIf","src":"146:2:29"},{"body":{"nodeType":"YulBlock","src":"279:42:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"293:16:29"},"nodeType":"YulFunctionCall","src":"293:18:29"},"nodeType":"YulExpressionStatement","src":"293:18:29"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"243:18:29"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"266:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"274:2:29","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"263:2:29"},"nodeType":"YulFunctionCall","src":"263:14:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"240:2:29"},"nodeType":"YulFunctionCall","src":"240:38:29"},"nodeType":"YulIf","src":"237:2:29"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"42:4:29","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"51:6:29","type":""}],"src":"7:320:29"},{"body":{"nodeType":"YulBlock","src":"361:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"378:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"381:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"371:6:29"},"nodeType":"YulFunctionCall","src":"371:88:29"},"nodeType":"YulExpressionStatement","src":"371:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"475:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"478:4:29","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"468:6:29"},"nodeType":"YulFunctionCall","src":"468:15:29"},"nodeType":"YulExpressionStatement","src":"468:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"499:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"502:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"492:6:29"},"nodeType":"YulFunctionCall","src":"492:15:29"},"nodeType":"YulExpressionStatement","src":"492:15:29"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"333:180:29"}]},"contents":"{\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n}\n","id":29,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b506040518060400160405280600a81526020017f54727573746966696564000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f54464e0000000000000000000000000000000000000000000000000000000000815250816000908051906020019062000096929190620000b8565b508060019080519060200190620000af929190620000b8565b505050620001cd565b828054620000c69062000168565b90600052602060002090601f016020900481019282620000ea576000855562000136565b82601f106200010557805160ff191683800117855562000136565b8280016001018555821562000136579182015b828111156200013557825182559160200191906001019062000118565b5b50905062000145919062000149565b5090565b5b80821115620001645760008160009055506001016200014a565b5090565b600060028204905060018216806200018157607f821691505b602082108114156200019857620001976200019e565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6134cb80620001dd6000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80636871ee40116100b8578063b88d4fde1161007c578063b88d4fde1461035e578063c87b56dd1461037a578063d4d94b05146103aa578063deeb9a3f146103c6578063e985e9c5146103e2578063eed8cc351461041257610137565b80636871ee40146102ba57806370a08231146102d85780637b2eb35c1461030857806395d89b4114610324578063a22cb4651461034257610137565b8063265d9a6c116100ff578063265d9a6c146101f25780632743dfd01461022257806342842e0e1461023e57806357991d301461025a5780636352211e1461028a57610137565b806301ffc9a71461013c57806306fdde031461016c578063081812fc1461018a578063095ea7b3146101ba57806323b872dd146101d6575b600080fd5b61015660048036038101906101519190612542565b610442565b6040516101639190612ada565b60405180910390f35b610174610524565b6040516101819190612af5565b60405180910390f35b6101a4600480360381019061019f9190612629565b6105b6565b6040516101b191906129f1565b60405180910390f35b6101d460048036038101906101cf9190612506565b6105fc565b005b6101f060048036038101906101eb9190612385565b610714565b005b61020c60048036038101906102079190612594565b61076d565b6040516102199190612cd7565b60405180910390f35b61023c60048036038101906102379190612629565b6107a3565b005b61025860048036038101906102539190612385565b61085e565b005b610274600480360381019061026f9190612629565b61087e565b6040516102819190612ab8565b60405180910390f35b6102a4600480360381019061029f9190612629565b6108e9565b6040516102b191906129f1565b60405180910390f35b6102c2610970565b6040516102cf9190612cd7565b60405180910390f35b6102f260048036038101906102ed9190612320565b61099a565b6040516102ff9190612cd7565b60405180910390f35b610322600480360381019061031d919061244f565b610a52565b005b61032c610ba0565b6040516103399190612af5565b60405180910390f35b61035c600480360381019061035791906124ca565b610c32565b005b610378600480360381019061037391906123d4565b610c48565b005b610394600480360381019061038f9190612629565b610caa565b6040516103a19190612af5565b60405180910390f35b6103c460048036038101906103bf91906125d5565b610dbd565b005b6103e060048036038101906103db9190612385565b610e7a565b005b6103fc60048036038101906103f79190612349565b610fbd565b6040516104099190612ada565b60405180910390f35b61042c60048036038101906104279190612652565b611051565b6040516104399190612cd7565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061050d57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061051d575061051c82611082565b5b9050919050565b60606000805461053390612f35565b80601f016020809104026020016040519081016040528092919081815260200182805461055f90612f35565b80156105ac5780601f10610581576101008083540402835291602001916105ac565b820191906000526020600020905b81548152906001019060200180831161058f57829003601f168201915b5050505050905090565b60006105c1826110ec565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610607826108e9565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610678576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066f90612c57565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610697611137565b73ffffffffffffffffffffffffffffffffffffffff1614806106c657506106c5816106c0611137565b610fbd565b5b610705576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fc90612c77565b60405180910390fd5b61070f838361113f565b505050565b61071e83826111f8565b61075d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075490612c97565b60405180910390fd5b61076883838361128d565b505050565b60008061077a6007611587565b90506107866007611595565b61079030826115ab565b61079a81846117c9565b80915050919050565b60006107af6008611587565b90506107bb6008611595565b60005b828110156108205760006107d0610970565b90506009600084815260200190815260200160002081908060018154018082558091505060019003906000526020600020016000909190919091505550808061081890612f98565b9150506107be565b507fb9144c96c86541f6fa89c9f2f02495cccf4b08cd6643e26d34ee00aa586558a83382604051610852929190612a8f565b60405180910390a15050565b61087983838360405180602001604052806000815250610c48565b505050565b6060600960008381526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156108dd57602002820191906000526020600020905b8154815260200190600101908083116108c9575b50505050509050919050565b6000806108f58361183d565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610967576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095e90612c37565b60405180910390fd5b80915050919050565b60008061097d6007611587565b90506109896007611595565b61099330826115ab565b8091505090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0290612bd7565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60011515600a600084815260200190815260200160002060009054906101000a900460ff1615151415610aba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab190612cb7565b60405180910390fd5b610ac482826117c9565b3073ffffffffffffffffffffffffffffffffffffffff166323b872dd8585856040518463ffffffff1660e01b8152600401610b0193929190612a0c565b600060405180830381600087803b158015610b1b57600080fd5b505af1158015610b2f573d6000803e3d6000fd5b505050507fec61728879a33aa50b55e1f4789dcfc1c680f30a24d7b8694a9f874e242a97b4848484604051610b6693929190612a0c565b60405180910390a16001600a600084815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050565b606060018054610baf90612f35565b80601f0160208091040260200160405190810160405280929190818152602001828054610bdb90612f35565b8015610c285780601f10610bfd57610100808354040283529160200191610c28565b820191906000526020600020905b815481529060010190602001808311610c0b57829003601f168201915b5050505050905090565b610c44610c3d611137565b838361187a565b5050565b610c59610c53611137565b836111f8565b610c98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8f90612b17565b60405180910390fd5b610ca4848484846119e7565b50505050565b6060610cb5826110ec565b6000600660008481526020019081526020016000208054610cd590612f35565b80601f0160208091040260200160405190810160405280929190818152602001828054610d0190612f35565b8015610d4e5780601f10610d2357610100808354040283529160200191610d4e565b820191906000526020600020905b815481529060010190602001808311610d3157829003601f168201915b505050505090506000610d5f611a43565b9050600081511415610d75578192505050610db8565b600082511115610daa578082604051602001610d929291906129cd565b60405160208183030381529060405292505050610db8565b610db384611a5a565b925050505b919050565b6000610dc96008611587565b9050610dd56008611595565b60005b82811015610e3b576000610deb8561076d565b905060096000848152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190915055508080610e3390612f98565b915050610dd8565b507fb9144c96c86541f6fa89c9f2f02495cccf4b08cd6643e26d34ee00aa586558a83382604051610e6d929190612a8f565b60405180910390a1505050565b60011515600a600083815260200190815260200160002060009054906101000a900460ff1615151415610ee2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed990612cb7565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff166323b872dd8484846040518463ffffffff1660e01b8152600401610f1f93929190612a0c565b600060405180830381600087803b158015610f3957600080fd5b505af1158015610f4d573d6000803e3d6000fd5b505050507fec61728879a33aa50b55e1f4789dcfc1c680f30a24d7b8694a9f874e242a97b4838383604051610f8493929190612a0c565b60405180910390a16001600a600083815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6009602052816000526040600020818154811061106d57600080fd5b90600052602060002001600091509150505481565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6110f581611ac2565b611134576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112b90612c37565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166111b2836108e9565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611204836108e9565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061124657506112458185610fbd565b5b8061128457508373ffffffffffffffffffffffffffffffffffffffff1661126c846105b6565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166112ad826108e9565b73ffffffffffffffffffffffffffffffffffffffff1614611303576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112fa90612b57565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611373576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136a90612b97565b60405180910390fd5b6113808383836001611b03565b8273ffffffffffffffffffffffffffffffffffffffff166113a0826108e9565b73ffffffffffffffffffffffffffffffffffffffff16146113f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ed90612b57565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46115828383836001611c29565b505050565b600081600001549050919050565b6001816000016000828254019250508190555050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561161b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161290612c17565b60405180910390fd5b61162481611ac2565b15611664576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165b90612b77565b60405180910390fd5b611672600083836001611b03565b61167b81611ac2565b156116bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b290612b77565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46117c5600083836001611c29565b5050565b6117d282611ac2565b611811576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180890612bf7565b60405180910390fd5b80600660008481526020019081526020016000209080519060200190611838929190612144565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156118e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e090612bb7565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516119da9190612ada565b60405180910390a3505050565b6119f284848461128d565b6119fe84848484611c2f565b611a3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3490612b37565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060611a65826110ec565b6000611a6f611a43565b90506000815111611a8f5760405180602001604052806000815250611aba565b80611a9984611dc6565b604051602001611aaa9291906129cd565b6040516020818303038152906040525b915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16611ae48361183d565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6001811115611c2357600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611b975780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611b8f9190612e4b565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611c225780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c1a9190612df5565b925050819055505b5b50505050565b50505050565b6000611c508473ffffffffffffffffffffffffffffffffffffffff16611eea565b15611db9578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611c79611137565b8786866040518563ffffffff1660e01b8152600401611c9b9493929190612a43565b602060405180830381600087803b158015611cb557600080fd5b505af1925050508015611ce657506040513d601f19601f82011682018060405250810190611ce3919061256b565b60015b611d69573d8060008114611d16576040519150601f19603f3d011682016040523d82523d6000602084013e611d1b565b606091505b50600081511415611d61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5890612b37565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611dbe565b600190505b949350505050565b606060006001611dd584611f0d565b01905060008167ffffffffffffffff811115611e1a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611e4c5781602001600182028036833780820191505090505b509050600082602001820190505b600115611edf578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611ec9577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0494506000851415611eda57611edf565b611e5a565b819350505050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611f91577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611f87577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611ff4576d04ee2d6d415b85acef81000000008381611fea577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506020810190505b662386f26fc10000831061204957662386f26fc10000838161203f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506010810190505b6305f5e1008310612098576305f5e100838161208e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506008810190505b61271083106120e35761271083816120d9577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506004810190505b6064831061212c5760648381612122577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506002810190505b600a831061213b576001810190505b80915050919050565b82805461215090612f35565b90600052602060002090601f01602090048101928261217257600085556121b9565b82601f1061218b57805160ff19168380011785556121b9565b828001600101855582156121b9579182015b828111156121b857825182559160200191906001019061219d565b5b5090506121c691906121ca565b5090565b5b808211156121e35760008160009055506001016121cb565b5090565b60006121fa6121f584612d17565b612cf2565b90508281526020810184848401111561221257600080fd5b61221d848285612ef3565b509392505050565b600061223861223384612d48565b612cf2565b90508281526020810184848401111561225057600080fd5b61225b848285612ef3565b509392505050565b60008135905061227281613439565b92915050565b60008135905061228781613450565b92915050565b60008135905061229c81613467565b92915050565b6000815190506122b181613467565b92915050565b600082601f8301126122c857600080fd5b81356122d88482602086016121e7565b91505092915050565b600082601f8301126122f257600080fd5b8135612302848260208601612225565b91505092915050565b60008135905061231a8161347e565b92915050565b60006020828403121561233257600080fd5b600061234084828501612263565b91505092915050565b6000806040838503121561235c57600080fd5b600061236a85828601612263565b925050602061237b85828601612263565b9150509250929050565b60008060006060848603121561239a57600080fd5b60006123a886828701612263565b93505060206123b986828701612263565b92505060406123ca8682870161230b565b9150509250925092565b600080600080608085870312156123ea57600080fd5b60006123f887828801612263565b945050602061240987828801612263565b935050604061241a8782880161230b565b925050606085013567ffffffffffffffff81111561243757600080fd5b612443878288016122b7565b91505092959194509250565b6000806000806080858703121561246557600080fd5b600061247387828801612263565b945050602061248487828801612263565b93505060406124958782880161230b565b925050606085013567ffffffffffffffff8111156124b257600080fd5b6124be878288016122e1565b91505092959194509250565b600080604083850312156124dd57600080fd5b60006124eb85828601612263565b92505060206124fc85828601612278565b9150509250929050565b6000806040838503121561251957600080fd5b600061252785828601612263565b92505060206125388582860161230b565b9150509250929050565b60006020828403121561255457600080fd5b60006125628482850161228d565b91505092915050565b60006020828403121561257d57600080fd5b600061258b848285016122a2565b91505092915050565b6000602082840312156125a657600080fd5b600082013567ffffffffffffffff8111156125c057600080fd5b6125cc848285016122e1565b91505092915050565b600080604083850312156125e857600080fd5b600083013567ffffffffffffffff81111561260257600080fd5b61260e858286016122e1565b925050602061261f8582860161230b565b9150509250929050565b60006020828403121561263b57600080fd5b60006126498482850161230b565b91505092915050565b6000806040838503121561266557600080fd5b60006126738582860161230b565b92505060206126848582860161230b565b9150509250929050565b600061269a83836129af565b60208301905092915050565b6126af81612e7f565b82525050565b60006126c082612d89565b6126ca8185612db7565b93506126d583612d79565b8060005b838110156127065781516126ed888261268e565b97506126f883612daa565b9250506001810190506126d9565b5085935050505092915050565b61271c81612e91565b82525050565b600061272d82612d94565b6127378185612dc8565b9350612747818560208601612f02565b6127508161306e565b840191505092915050565b600061276682612d9f565b6127708185612dd9565b9350612780818560208601612f02565b6127898161306e565b840191505092915050565b600061279f82612d9f565b6127a98185612dea565b93506127b9818560208601612f02565b80840191505092915050565b60006127d2602d83612dd9565b91506127dd8261307f565b604082019050919050565b60006127f5603283612dd9565b9150612800826130ce565b604082019050919050565b6000612818602583612dd9565b91506128238261311d565b604082019050919050565b600061283b601c83612dd9565b91506128468261316c565b602082019050919050565b600061285e602483612dd9565b915061286982613195565b604082019050919050565b6000612881601983612dd9565b915061288c826131e4565b602082019050919050565b60006128a4602983612dd9565b91506128af8261320d565b604082019050919050565b60006128c7602e83612dd9565b91506128d28261325c565b604082019050919050565b60006128ea602083612dd9565b91506128f5826132ab565b602082019050919050565b600061290d601883612dd9565b9150612918826132d4565b602082019050919050565b6000612930602183612dd9565b915061293b826132fd565b604082019050919050565b6000612953603d83612dd9565b915061295e8261334c565b604082019050919050565b6000612976603183612dd9565b91506129818261339b565b604082019050919050565b6000612999602283612dd9565b91506129a4826133ea565b604082019050919050565b6129b881612ee9565b82525050565b6129c781612ee9565b82525050565b60006129d98285612794565b91506129e58284612794565b91508190509392505050565b6000602082019050612a0660008301846126a6565b92915050565b6000606082019050612a2160008301866126a6565b612a2e60208301856126a6565b612a3b60408301846129be565b949350505050565b6000608082019050612a5860008301876126a6565b612a6560208301866126a6565b612a7260408301856129be565b8181036060830152612a848184612722565b905095945050505050565b6000604082019050612aa460008301856126a6565b612ab160208301846129be565b9392505050565b60006020820190508181036000830152612ad281846126b5565b905092915050565b6000602082019050612aef6000830184612713565b92915050565b60006020820190508181036000830152612b0f818461275b565b905092915050565b60006020820190508181036000830152612b30816127c5565b9050919050565b60006020820190508181036000830152612b50816127e8565b9050919050565b60006020820190508181036000830152612b708161280b565b9050919050565b60006020820190508181036000830152612b908161282e565b9050919050565b60006020820190508181036000830152612bb081612851565b9050919050565b60006020820190508181036000830152612bd081612874565b9050919050565b60006020820190508181036000830152612bf081612897565b9050919050565b60006020820190508181036000830152612c10816128ba565b9050919050565b60006020820190508181036000830152612c30816128dd565b9050919050565b60006020820190508181036000830152612c5081612900565b9050919050565b60006020820190508181036000830152612c7081612923565b9050919050565b60006020820190508181036000830152612c9081612946565b9050919050565b60006020820190508181036000830152612cb081612969565b9050919050565b60006020820190508181036000830152612cd08161298c565b9050919050565b6000602082019050612cec60008301846129be565b92915050565b6000612cfc612d0d565b9050612d088282612f67565b919050565b6000604051905090565b600067ffffffffffffffff821115612d3257612d3161303f565b5b612d3b8261306e565b9050602081019050919050565b600067ffffffffffffffff821115612d6357612d6261303f565b5b612d6c8261306e565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000612e0082612ee9565b9150612e0b83612ee9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612e4057612e3f612fe1565b5b828201905092915050565b6000612e5682612ee9565b9150612e6183612ee9565b925082821015612e7457612e73612fe1565b5b828203905092915050565b6000612e8a82612ec9565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015612f20578082015181840152602081019050612f05565b83811115612f2f576000848401525b50505050565b60006002820490506001821680612f4d57607f821691505b60208210811415612f6157612f60613010565b5b50919050565b612f708261306e565b810181811067ffffffffffffffff82111715612f8f57612f8e61303f565b5b80604052505050565b6000612fa382612ee9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612fd657612fd5612fe1565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f5468697320746f6b656e2063616e206e6f74206265207472616e73666572726560008201527f6421000000000000000000000000000000000000000000000000000000000000602082015250565b61344281612e7f565b811461344d57600080fd5b50565b61345981612e91565b811461346457600080fd5b50565b61347081612e9d565b811461347b57600080fd5b50565b61348781612ee9565b811461349257600080fd5b5056fea2646970667358221220ca104a9eef4358d4445fbe3c5e3f2287b78831801e159281d9bfeb13ecddc0c964736f6c63430008040033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xA DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5472757374696669656400000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x54464E0000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x0 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x96 SWAP3 SWAP2 SWAP1 PUSH3 0xB8 JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0xAF SWAP3 SWAP2 SWAP1 PUSH3 0xB8 JUMP JUMPDEST POP POP POP PUSH3 0x1CD JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0xC6 SWAP1 PUSH3 0x168 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0xEA JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x136 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x105 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x136 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x136 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x135 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x118 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0x145 SWAP2 SWAP1 PUSH3 0x149 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x164 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x14A JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x181 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x198 JUMPI PUSH3 0x197 PUSH3 0x19E JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x34CB DUP1 PUSH3 0x1DD PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x137 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6871EE40 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x35E JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x37A JUMPI DUP1 PUSH4 0xD4D94B05 EQ PUSH2 0x3AA JUMPI DUP1 PUSH4 0xDEEB9A3F EQ PUSH2 0x3C6 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x3E2 JUMPI DUP1 PUSH4 0xEED8CC35 EQ PUSH2 0x412 JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x6871EE40 EQ PUSH2 0x2BA JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2D8 JUMPI DUP1 PUSH4 0x7B2EB35C EQ PUSH2 0x308 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x324 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x342 JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x265D9A6C GT PUSH2 0xFF JUMPI DUP1 PUSH4 0x265D9A6C EQ PUSH2 0x1F2 JUMPI DUP1 PUSH4 0x2743DFD0 EQ PUSH2 0x222 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x23E JUMPI DUP1 PUSH4 0x57991D30 EQ PUSH2 0x25A JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x28A JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x16C JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x18A JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1BA JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1D6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x156 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x151 SWAP2 SWAP1 PUSH2 0x2542 JUMP JUMPDEST PUSH2 0x442 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x163 SWAP2 SWAP1 PUSH2 0x2ADA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x174 PUSH2 0x524 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x181 SWAP2 SWAP1 PUSH2 0x2AF5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x2629 JUMP JUMPDEST PUSH2 0x5B6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B1 SWAP2 SWAP1 PUSH2 0x29F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1CF SWAP2 SWAP1 PUSH2 0x2506 JUMP JUMPDEST PUSH2 0x5FC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x2385 JUMP JUMPDEST PUSH2 0x714 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x20C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x207 SWAP2 SWAP1 PUSH2 0x2594 JUMP JUMPDEST PUSH2 0x76D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x219 SWAP2 SWAP1 PUSH2 0x2CD7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x237 SWAP2 SWAP1 PUSH2 0x2629 JUMP JUMPDEST PUSH2 0x7A3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x258 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x253 SWAP2 SWAP1 PUSH2 0x2385 JUMP JUMPDEST PUSH2 0x85E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x274 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x26F SWAP2 SWAP1 PUSH2 0x2629 JUMP JUMPDEST PUSH2 0x87E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x281 SWAP2 SWAP1 PUSH2 0x2AB8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x29F SWAP2 SWAP1 PUSH2 0x2629 JUMP JUMPDEST PUSH2 0x8E9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B1 SWAP2 SWAP1 PUSH2 0x29F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2C2 PUSH2 0x970 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2CF SWAP2 SWAP1 PUSH2 0x2CD7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2F2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2ED SWAP2 SWAP1 PUSH2 0x2320 JUMP JUMPDEST PUSH2 0x99A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2FF SWAP2 SWAP1 PUSH2 0x2CD7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x322 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x31D SWAP2 SWAP1 PUSH2 0x244F JUMP JUMPDEST PUSH2 0xA52 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x32C PUSH2 0xBA0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x339 SWAP2 SWAP1 PUSH2 0x2AF5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x35C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x357 SWAP2 SWAP1 PUSH2 0x24CA JUMP JUMPDEST PUSH2 0xC32 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x378 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x373 SWAP2 SWAP1 PUSH2 0x23D4 JUMP JUMPDEST PUSH2 0xC48 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x394 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x38F SWAP2 SWAP1 PUSH2 0x2629 JUMP JUMPDEST PUSH2 0xCAA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3A1 SWAP2 SWAP1 PUSH2 0x2AF5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3BF SWAP2 SWAP1 PUSH2 0x25D5 JUMP JUMPDEST PUSH2 0xDBD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3E0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3DB SWAP2 SWAP1 PUSH2 0x2385 JUMP JUMPDEST PUSH2 0xE7A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3FC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3F7 SWAP2 SWAP1 PUSH2 0x2349 JUMP JUMPDEST PUSH2 0xFBD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x409 SWAP2 SWAP1 PUSH2 0x2ADA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x42C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x427 SWAP2 SWAP1 PUSH2 0x2652 JUMP JUMPDEST PUSH2 0x1051 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x439 SWAP2 SWAP1 PUSH2 0x2CD7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x50D JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x51D JUMPI POP PUSH2 0x51C DUP3 PUSH2 0x1082 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x533 SWAP1 PUSH2 0x2F35 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x55F SWAP1 PUSH2 0x2F35 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x5AC JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x581 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x5AC JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x58F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5C1 DUP3 PUSH2 0x10EC JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x607 DUP3 PUSH2 0x8E9 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x678 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66F SWAP1 PUSH2 0x2C57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x697 PUSH2 0x1137 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x6C6 JUMPI POP PUSH2 0x6C5 DUP2 PUSH2 0x6C0 PUSH2 0x1137 JUMP JUMPDEST PUSH2 0xFBD JUMP JUMPDEST JUMPDEST PUSH2 0x705 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FC SWAP1 PUSH2 0x2C77 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x70F DUP4 DUP4 PUSH2 0x113F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x71E DUP4 DUP3 PUSH2 0x11F8 JUMP JUMPDEST PUSH2 0x75D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x754 SWAP1 PUSH2 0x2C97 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x768 DUP4 DUP4 DUP4 PUSH2 0x128D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x77A PUSH1 0x7 PUSH2 0x1587 JUMP JUMPDEST SWAP1 POP PUSH2 0x786 PUSH1 0x7 PUSH2 0x1595 JUMP JUMPDEST PUSH2 0x790 ADDRESS DUP3 PUSH2 0x15AB JUMP JUMPDEST PUSH2 0x79A DUP2 DUP5 PUSH2 0x17C9 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7AF PUSH1 0x8 PUSH2 0x1587 JUMP JUMPDEST SWAP1 POP PUSH2 0x7BB PUSH1 0x8 PUSH2 0x1595 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x820 JUMPI PUSH1 0x0 PUSH2 0x7D0 PUSH2 0x970 JUMP JUMPDEST SWAP1 POP PUSH1 0x9 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE POP DUP1 DUP1 PUSH2 0x818 SWAP1 PUSH2 0x2F98 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x7BE JUMP JUMPDEST POP PUSH32 0xB9144C96C86541F6FA89C9F2F02495CCCF4B08CD6643E26D34EE00AA586558A8 CALLER DUP3 PUSH1 0x40 MLOAD PUSH2 0x852 SWAP3 SWAP2 SWAP1 PUSH2 0x2A8F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x879 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xC48 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x9 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x8DD JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x8C9 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x8F5 DUP4 PUSH2 0x183D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x967 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x95E SWAP1 PUSH2 0x2C37 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x97D PUSH1 0x7 PUSH2 0x1587 JUMP JUMPDEST SWAP1 POP PUSH2 0x989 PUSH1 0x7 PUSH2 0x1595 JUMP JUMPDEST PUSH2 0x993 ADDRESS DUP3 PUSH2 0x15AB JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xA0B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA02 SWAP1 PUSH2 0x2BD7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 ISZERO ISZERO PUSH1 0xA PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ ISZERO PUSH2 0xABA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAB1 SWAP1 PUSH2 0x2CB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xAC4 DUP3 DUP3 PUSH2 0x17C9 JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB01 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A0C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB2F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH32 0xEC61728879A33AA50B55E1F4789DCFC1C680F30A24D7B8694A9F874E242A97B4 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0xB66 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x1 PUSH1 0xA PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0xBAF SWAP1 PUSH2 0x2F35 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xBDB SWAP1 PUSH2 0x2F35 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xC28 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xBFD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xC28 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xC0B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xC44 PUSH2 0xC3D PUSH2 0x1137 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x187A JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xC59 PUSH2 0xC53 PUSH2 0x1137 JUMP JUMPDEST DUP4 PUSH2 0x11F8 JUMP JUMPDEST PUSH2 0xC98 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC8F SWAP1 PUSH2 0x2B17 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xCA4 DUP5 DUP5 DUP5 DUP5 PUSH2 0x19E7 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xCB5 DUP3 PUSH2 0x10EC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH2 0xCD5 SWAP1 PUSH2 0x2F35 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xD01 SWAP1 PUSH2 0x2F35 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xD4E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xD23 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xD4E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xD31 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0xD5F PUSH2 0x1A43 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0xD75 JUMPI DUP2 SWAP3 POP POP POP PUSH2 0xDB8 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0xDAA JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xD92 SWAP3 SWAP2 SWAP1 PUSH2 0x29CD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP PUSH2 0xDB8 JUMP JUMPDEST PUSH2 0xDB3 DUP5 PUSH2 0x1A5A JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDC9 PUSH1 0x8 PUSH2 0x1587 JUMP JUMPDEST SWAP1 POP PUSH2 0xDD5 PUSH1 0x8 PUSH2 0x1595 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xE3B JUMPI PUSH1 0x0 PUSH2 0xDEB DUP6 PUSH2 0x76D JUMP JUMPDEST SWAP1 POP PUSH1 0x9 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE POP DUP1 DUP1 PUSH2 0xE33 SWAP1 PUSH2 0x2F98 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xDD8 JUMP JUMPDEST POP PUSH32 0xB9144C96C86541F6FA89C9F2F02495CCCF4B08CD6643E26D34EE00AA586558A8 CALLER DUP3 PUSH1 0x40 MLOAD PUSH2 0xE6D SWAP3 SWAP2 SWAP1 PUSH2 0x2A8F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x1 ISZERO ISZERO PUSH1 0xA PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ ISZERO PUSH2 0xEE2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xED9 SWAP1 PUSH2 0x2CB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF1F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A0C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xF4D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH32 0xEC61728879A33AA50B55E1F4789DCFC1C680F30A24D7B8694A9F874E242A97B4 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0xF84 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x1 PUSH1 0xA PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x106D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x10F5 DUP2 PUSH2 0x1AC2 JUMP JUMPDEST PUSH2 0x1134 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x112B SWAP1 PUSH2 0x2C37 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x11B2 DUP4 PUSH2 0x8E9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1204 DUP4 PUSH2 0x8E9 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x1246 JUMPI POP PUSH2 0x1245 DUP2 DUP6 PUSH2 0xFBD JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x1284 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x126C DUP5 PUSH2 0x5B6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x12AD DUP3 PUSH2 0x8E9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1303 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12FA SWAP1 PUSH2 0x2B57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1373 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x136A SWAP1 PUSH2 0x2B97 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1380 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1B03 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x13A0 DUP3 PUSH2 0x8E9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x13F6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13ED SWAP1 PUSH2 0x2B57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1582 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1C29 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x161B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1612 SWAP1 PUSH2 0x2C17 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1624 DUP2 PUSH2 0x1AC2 JUMP JUMPDEST ISZERO PUSH2 0x1664 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x165B SWAP1 PUSH2 0x2B77 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1672 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1B03 JUMP JUMPDEST PUSH2 0x167B DUP2 PUSH2 0x1AC2 JUMP JUMPDEST ISZERO PUSH2 0x16BB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16B2 SWAP1 PUSH2 0x2B77 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x17C5 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1C29 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x17D2 DUP3 PUSH2 0x1AC2 JUMP JUMPDEST PUSH2 0x1811 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1808 SWAP1 PUSH2 0x2BF7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x1838 SWAP3 SWAP2 SWAP1 PUSH2 0x2144 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x18E9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x18E0 SWAP1 PUSH2 0x2BB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x19DA SWAP2 SWAP1 PUSH2 0x2ADA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x19F2 DUP5 DUP5 DUP5 PUSH2 0x128D JUMP JUMPDEST PUSH2 0x19FE DUP5 DUP5 DUP5 DUP5 PUSH2 0x1C2F JUMP JUMPDEST PUSH2 0x1A3D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A34 SWAP1 PUSH2 0x2B37 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1A65 DUP3 PUSH2 0x10EC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A6F PUSH2 0x1A43 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x1A8F JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1ABA JUMP JUMPDEST DUP1 PUSH2 0x1A99 DUP5 PUSH2 0x1DC6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1AAA SWAP3 SWAP2 SWAP1 PUSH2 0x29CD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1AE4 DUP4 PUSH2 0x183D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1C23 JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1B97 JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1B8F SWAP2 SWAP1 PUSH2 0x2E4B JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1C22 JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1C1A SWAP2 SWAP1 PUSH2 0x2DF5 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C50 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1EEA JUMP JUMPDEST ISZERO PUSH2 0x1DB9 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1C79 PUSH2 0x1137 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C9B SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A43 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1CB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1CE6 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1CE3 SWAP2 SWAP1 PUSH2 0x256B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1D69 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1D16 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1D1B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x1D61 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D58 SWAP1 PUSH2 0x2B37 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x1DBE JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x1DD5 DUP5 PUSH2 0x1F0D JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1E1A JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1E4C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1EDF JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x1EC9 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 EQ ISZERO PUSH2 0x1EDA JUMPI PUSH2 0x1EDF JUMP JUMPDEST PUSH2 0x1E5A JUMP JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1F91 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x1F87 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x1FF4 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x1FEA JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x2049 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x203F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x2098 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x208E JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x20E3 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x20D9 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x212C JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x2122 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x213B JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x2150 SWAP1 PUSH2 0x2F35 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x2172 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x21B9 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x218B JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x21B9 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x21B9 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x21B8 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x219D JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x21C6 SWAP2 SWAP1 PUSH2 0x21CA JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x21E3 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x21CB JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21FA PUSH2 0x21F5 DUP5 PUSH2 0x2D17 JUMP JUMPDEST PUSH2 0x2CF2 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x2212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x221D DUP5 DUP3 DUP6 PUSH2 0x2EF3 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2238 PUSH2 0x2233 DUP5 PUSH2 0x2D48 JUMP JUMPDEST PUSH2 0x2CF2 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x2250 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x225B DUP5 DUP3 DUP6 PUSH2 0x2EF3 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2272 DUP2 PUSH2 0x3439 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2287 DUP2 PUSH2 0x3450 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x229C DUP2 PUSH2 0x3467 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x22B1 DUP2 PUSH2 0x3467 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x22C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x22D8 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x21E7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x22F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2302 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x2225 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x231A DUP2 PUSH2 0x347E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2332 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2340 DUP5 DUP3 DUP6 ADD PUSH2 0x2263 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x235C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x236A DUP6 DUP3 DUP7 ADD PUSH2 0x2263 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x237B DUP6 DUP3 DUP7 ADD PUSH2 0x2263 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x239A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x23A8 DUP7 DUP3 DUP8 ADD PUSH2 0x2263 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x23B9 DUP7 DUP3 DUP8 ADD PUSH2 0x2263 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x23CA DUP7 DUP3 DUP8 ADD PUSH2 0x230B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x23EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x23F8 DUP8 DUP3 DUP9 ADD PUSH2 0x2263 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x2409 DUP8 DUP3 DUP9 ADD PUSH2 0x2263 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x241A DUP8 DUP3 DUP9 ADD PUSH2 0x230B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2437 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2443 DUP8 DUP3 DUP9 ADD PUSH2 0x22B7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2465 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2473 DUP8 DUP3 DUP9 ADD PUSH2 0x2263 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x2484 DUP8 DUP3 DUP9 ADD PUSH2 0x2263 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x2495 DUP8 DUP3 DUP9 ADD PUSH2 0x230B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x24B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x24BE DUP8 DUP3 DUP9 ADD PUSH2 0x22E1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x24EB DUP6 DUP3 DUP7 ADD PUSH2 0x2263 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x24FC DUP6 DUP3 DUP7 ADD PUSH2 0x2278 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2519 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2527 DUP6 DUP3 DUP7 ADD PUSH2 0x2263 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2538 DUP6 DUP3 DUP7 ADD PUSH2 0x230B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2554 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2562 DUP5 DUP3 DUP6 ADD PUSH2 0x228D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x257D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x258B DUP5 DUP3 DUP6 ADD PUSH2 0x22A2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x25A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x25C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x25CC DUP5 DUP3 DUP6 ADD PUSH2 0x22E1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x25E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2602 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x260E DUP6 DUP3 DUP7 ADD PUSH2 0x22E1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x261F DUP6 DUP3 DUP7 ADD PUSH2 0x230B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x263B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2649 DUP5 DUP3 DUP6 ADD PUSH2 0x230B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2665 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2673 DUP6 DUP3 DUP7 ADD PUSH2 0x230B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2684 DUP6 DUP3 DUP7 ADD PUSH2 0x230B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x269A DUP4 DUP4 PUSH2 0x29AF JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x26AF DUP2 PUSH2 0x2E7F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26C0 DUP3 PUSH2 0x2D89 JUMP JUMPDEST PUSH2 0x26CA DUP2 DUP6 PUSH2 0x2DB7 JUMP JUMPDEST SWAP4 POP PUSH2 0x26D5 DUP4 PUSH2 0x2D79 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2706 JUMPI DUP2 MLOAD PUSH2 0x26ED DUP9 DUP3 PUSH2 0x268E JUMP JUMPDEST SWAP8 POP PUSH2 0x26F8 DUP4 PUSH2 0x2DAA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x26D9 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x271C DUP2 PUSH2 0x2E91 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x272D DUP3 PUSH2 0x2D94 JUMP JUMPDEST PUSH2 0x2737 DUP2 DUP6 PUSH2 0x2DC8 JUMP JUMPDEST SWAP4 POP PUSH2 0x2747 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2F02 JUMP JUMPDEST PUSH2 0x2750 DUP2 PUSH2 0x306E JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2766 DUP3 PUSH2 0x2D9F JUMP JUMPDEST PUSH2 0x2770 DUP2 DUP6 PUSH2 0x2DD9 JUMP JUMPDEST SWAP4 POP PUSH2 0x2780 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2F02 JUMP JUMPDEST PUSH2 0x2789 DUP2 PUSH2 0x306E JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x279F DUP3 PUSH2 0x2D9F JUMP JUMPDEST PUSH2 0x27A9 DUP2 DUP6 PUSH2 0x2DEA JUMP JUMPDEST SWAP4 POP PUSH2 0x27B9 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2F02 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27D2 PUSH1 0x2D DUP4 PUSH2 0x2DD9 JUMP JUMPDEST SWAP2 POP PUSH2 0x27DD DUP3 PUSH2 0x307F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27F5 PUSH1 0x32 DUP4 PUSH2 0x2DD9 JUMP JUMPDEST SWAP2 POP PUSH2 0x2800 DUP3 PUSH2 0x30CE JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2818 PUSH1 0x25 DUP4 PUSH2 0x2DD9 JUMP JUMPDEST SWAP2 POP PUSH2 0x2823 DUP3 PUSH2 0x311D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x283B PUSH1 0x1C DUP4 PUSH2 0x2DD9 JUMP JUMPDEST SWAP2 POP PUSH2 0x2846 DUP3 PUSH2 0x316C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x285E PUSH1 0x24 DUP4 PUSH2 0x2DD9 JUMP JUMPDEST SWAP2 POP PUSH2 0x2869 DUP3 PUSH2 0x3195 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2881 PUSH1 0x19 DUP4 PUSH2 0x2DD9 JUMP JUMPDEST SWAP2 POP PUSH2 0x288C DUP3 PUSH2 0x31E4 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28A4 PUSH1 0x29 DUP4 PUSH2 0x2DD9 JUMP JUMPDEST SWAP2 POP PUSH2 0x28AF DUP3 PUSH2 0x320D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28C7 PUSH1 0x2E DUP4 PUSH2 0x2DD9 JUMP JUMPDEST SWAP2 POP PUSH2 0x28D2 DUP3 PUSH2 0x325C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28EA PUSH1 0x20 DUP4 PUSH2 0x2DD9 JUMP JUMPDEST SWAP2 POP PUSH2 0x28F5 DUP3 PUSH2 0x32AB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x290D PUSH1 0x18 DUP4 PUSH2 0x2DD9 JUMP JUMPDEST SWAP2 POP PUSH2 0x2918 DUP3 PUSH2 0x32D4 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2930 PUSH1 0x21 DUP4 PUSH2 0x2DD9 JUMP JUMPDEST SWAP2 POP PUSH2 0x293B DUP3 PUSH2 0x32FD JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2953 PUSH1 0x3D DUP4 PUSH2 0x2DD9 JUMP JUMPDEST SWAP2 POP PUSH2 0x295E DUP3 PUSH2 0x334C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2976 PUSH1 0x31 DUP4 PUSH2 0x2DD9 JUMP JUMPDEST SWAP2 POP PUSH2 0x2981 DUP3 PUSH2 0x339B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2999 PUSH1 0x22 DUP4 PUSH2 0x2DD9 JUMP JUMPDEST SWAP2 POP PUSH2 0x29A4 DUP3 PUSH2 0x33EA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x29B8 DUP2 PUSH2 0x2EE9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x29C7 DUP2 PUSH2 0x2EE9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29D9 DUP3 DUP6 PUSH2 0x2794 JUMP JUMPDEST SWAP2 POP PUSH2 0x29E5 DUP3 DUP5 PUSH2 0x2794 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2A06 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x26A6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2A21 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x26A6 JUMP JUMPDEST PUSH2 0x2A2E PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x26A6 JUMP JUMPDEST PUSH2 0x2A3B PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x29BE JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2A58 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x26A6 JUMP JUMPDEST PUSH2 0x2A65 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x26A6 JUMP JUMPDEST PUSH2 0x2A72 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x29BE JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2A84 DUP2 DUP5 PUSH2 0x2722 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2AA4 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x26A6 JUMP JUMPDEST PUSH2 0x2AB1 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x29BE JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2AD2 DUP2 DUP5 PUSH2 0x26B5 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2AEF PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2713 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B0F DUP2 DUP5 PUSH2 0x275B JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B30 DUP2 PUSH2 0x27C5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B50 DUP2 PUSH2 0x27E8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B70 DUP2 PUSH2 0x280B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B90 DUP2 PUSH2 0x282E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2BB0 DUP2 PUSH2 0x2851 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2BD0 DUP2 PUSH2 0x2874 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2BF0 DUP2 PUSH2 0x2897 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C10 DUP2 PUSH2 0x28BA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C30 DUP2 PUSH2 0x28DD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C50 DUP2 PUSH2 0x2900 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C70 DUP2 PUSH2 0x2923 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C90 DUP2 PUSH2 0x2946 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2CB0 DUP2 PUSH2 0x2969 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2CD0 DUP2 PUSH2 0x298C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2CEC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x29BE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CFC PUSH2 0x2D0D JUMP JUMPDEST SWAP1 POP PUSH2 0x2D08 DUP3 DUP3 PUSH2 0x2F67 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2D32 JUMPI PUSH2 0x2D31 PUSH2 0x303F JUMP JUMPDEST JUMPDEST PUSH2 0x2D3B DUP3 PUSH2 0x306E JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2D63 JUMPI PUSH2 0x2D62 PUSH2 0x303F JUMP JUMPDEST JUMPDEST PUSH2 0x2D6C DUP3 PUSH2 0x306E JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E00 DUP3 PUSH2 0x2EE9 JUMP JUMPDEST SWAP2 POP PUSH2 0x2E0B DUP4 PUSH2 0x2EE9 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x2E40 JUMPI PUSH2 0x2E3F PUSH2 0x2FE1 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E56 DUP3 PUSH2 0x2EE9 JUMP JUMPDEST SWAP2 POP PUSH2 0x2E61 DUP4 PUSH2 0x2EE9 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x2E74 JUMPI PUSH2 0x2E73 PUSH2 0x2FE1 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E8A DUP3 PUSH2 0x2EC9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2F20 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2F05 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x2F2F JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2F4D JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x2F61 JUMPI PUSH2 0x2F60 PUSH2 0x3010 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2F70 DUP3 PUSH2 0x306E JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x2F8F JUMPI PUSH2 0x2F8E PUSH2 0x303F JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FA3 DUP3 PUSH2 0x2EE9 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x2FD6 JUMPI PUSH2 0x2FD5 PUSH2 0x2FE1 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45524337323155524953746F726167653A2055524920736574206F66206E6F6E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6578697374656E7420746F6B656E000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722063616C6C6572206973206E6F74206F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x776E6572206E6F7220617070726F766564000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x5468697320746F6B656E2063616E206E6F74206265207472616E736665727265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6421000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x3442 DUP2 PUSH2 0x2E7F JUMP JUMPDEST DUP2 EQ PUSH2 0x344D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x3459 DUP2 PUSH2 0x2E91 JUMP JUMPDEST DUP2 EQ PUSH2 0x3464 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x3470 DUP2 PUSH2 0x2E9D JUMP JUMPDEST DUP2 EQ PUSH2 0x347B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x3487 DUP2 PUSH2 0x2EE9 JUMP JUMPDEST DUP2 EQ PUSH2 0x3492 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCA LT 0x4A SWAP15 0xEF NUMBER PC 0xD4 DIFFICULTY 0x5F 0xBE EXTCODECOPY 0x5E EXTCODEHASH 0x22 DUP8 0xB7 DUP9 BALANCE DUP1 0x1E ISZERO SWAP3 DUP2 0xD9 0xBF 0xEB SGT 0xEC 0xDD 0xC0 0xC9 PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ","sourceMap":"288:2653:24:-:0;;;685:44;;;;;;;;;;1390:113:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1464:5;1456;:13;;;;;;;;;;;;:::i;:::-;;1489:7;1479;:17;;;;;;;;;;;;:::i;:::-;;1390:113;;288:2653:24;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:320:29:-;51:6;88:1;82:4;78:12;68:22;;135:1;129:4;125:12;156:18;146:2;;212:4;204:6;200:17;190:27;;146:2;274;266:6;263:14;243:18;240:38;237:2;;;293:18;;:::i;:::-;237:2;58:269;;;;:::o;333:180::-;381:77;378:1;371:88;478:4;475:1;468:15;502:4;499:1;492:15;288:2653:24;;;;;;;"},"deployedBytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:33577:29","statements":[{"body":{"nodeType":"YulBlock","src":"90:260:29","statements":[{"nodeType":"YulAssignment","src":"100:74:29","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"166:6:29"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"125:40:29"},"nodeType":"YulFunctionCall","src":"125:48:29"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"109:15:29"},"nodeType":"YulFunctionCall","src":"109:65:29"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"100:5:29"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"190:5:29"},{"name":"length","nodeType":"YulIdentifier","src":"197:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"183:6:29"},"nodeType":"YulFunctionCall","src":"183:21:29"},"nodeType":"YulExpressionStatement","src":"183:21:29"},{"nodeType":"YulVariableDeclaration","src":"213:27:29","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"228:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"235:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"224:3:29"},"nodeType":"YulFunctionCall","src":"224:16:29"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"217:3:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"278:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"287:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"290:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"280:6:29"},"nodeType":"YulFunctionCall","src":"280:12:29"},"nodeType":"YulExpressionStatement","src":"280:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"259:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"264:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"255:3:29"},"nodeType":"YulFunctionCall","src":"255:16:29"},{"name":"end","nodeType":"YulIdentifier","src":"273:3:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"252:2:29"},"nodeType":"YulFunctionCall","src":"252:25:29"},"nodeType":"YulIf","src":"249:2:29"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"327:3:29"},{"name":"dst","nodeType":"YulIdentifier","src":"332:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"337:6:29"}],"functionName":{"name":"copy_calldata_to_memory","nodeType":"YulIdentifier","src":"303:23:29"},"nodeType":"YulFunctionCall","src":"303:41:29"},"nodeType":"YulExpressionStatement","src":"303:41:29"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"63:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"68:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"76:3:29","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"84:5:29","type":""}],"src":"7:343:29"},{"body":{"nodeType":"YulBlock","src":"440:261:29","statements":[{"nodeType":"YulAssignment","src":"450:75:29","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"517:6:29"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"475:41:29"},"nodeType":"YulFunctionCall","src":"475:49:29"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"459:15:29"},"nodeType":"YulFunctionCall","src":"459:66:29"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"450:5:29"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"541:5:29"},{"name":"length","nodeType":"YulIdentifier","src":"548:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"534:6:29"},"nodeType":"YulFunctionCall","src":"534:21:29"},"nodeType":"YulExpressionStatement","src":"534:21:29"},{"nodeType":"YulVariableDeclaration","src":"564:27:29","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"579:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"586:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"575:3:29"},"nodeType":"YulFunctionCall","src":"575:16:29"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"568:3:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"629:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"638:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"641:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"631:6:29"},"nodeType":"YulFunctionCall","src":"631:12:29"},"nodeType":"YulExpressionStatement","src":"631:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"610:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"615:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"606:3:29"},"nodeType":"YulFunctionCall","src":"606:16:29"},{"name":"end","nodeType":"YulIdentifier","src":"624:3:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"603:2:29"},"nodeType":"YulFunctionCall","src":"603:25:29"},"nodeType":"YulIf","src":"600:2:29"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"678:3:29"},{"name":"dst","nodeType":"YulIdentifier","src":"683:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"688:6:29"}],"functionName":{"name":"copy_calldata_to_memory","nodeType":"YulIdentifier","src":"654:23:29"},"nodeType":"YulFunctionCall","src":"654:41:29"},"nodeType":"YulExpressionStatement","src":"654:41:29"}]},"name":"abi_decode_available_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"413:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"418:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"426:3:29","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"434:5:29","type":""}],"src":"356:345:29"},{"body":{"nodeType":"YulBlock","src":"759:87:29","statements":[{"nodeType":"YulAssignment","src":"769:29:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"791:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"778:12:29"},"nodeType":"YulFunctionCall","src":"778:20:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"769:5:29"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"834:5:29"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"807:26:29"},"nodeType":"YulFunctionCall","src":"807:33:29"},"nodeType":"YulExpressionStatement","src":"807:33:29"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"737:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"745:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"753:5:29","type":""}],"src":"707:139:29"},{"body":{"nodeType":"YulBlock","src":"901:84:29","statements":[{"nodeType":"YulAssignment","src":"911:29:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"933:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"920:12:29"},"nodeType":"YulFunctionCall","src":"920:20:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"911:5:29"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"973:5:29"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"949:23:29"},"nodeType":"YulFunctionCall","src":"949:30:29"},"nodeType":"YulExpressionStatement","src":"949:30:29"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"879:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"887:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"895:5:29","type":""}],"src":"852:133:29"},{"body":{"nodeType":"YulBlock","src":"1042:86:29","statements":[{"nodeType":"YulAssignment","src":"1052:29:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1074:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1061:12:29"},"nodeType":"YulFunctionCall","src":"1061:20:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1052:5:29"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1116:5:29"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"1090:25:29"},"nodeType":"YulFunctionCall","src":"1090:32:29"},"nodeType":"YulExpressionStatement","src":"1090:32:29"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1020:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"1028:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1036:5:29","type":""}],"src":"991:137:29"},{"body":{"nodeType":"YulBlock","src":"1196:79:29","statements":[{"nodeType":"YulAssignment","src":"1206:22:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1221:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1215:5:29"},"nodeType":"YulFunctionCall","src":"1215:13:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1206:5:29"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1263:5:29"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"1237:25:29"},"nodeType":"YulFunctionCall","src":"1237:32:29"},"nodeType":"YulExpressionStatement","src":"1237:32:29"}]},"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1174:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"1182:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1190:5:29","type":""}],"src":"1134:141:29"},{"body":{"nodeType":"YulBlock","src":"1355:210:29","statements":[{"body":{"nodeType":"YulBlock","src":"1404:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1413:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1416:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1406:6:29"},"nodeType":"YulFunctionCall","src":"1406:12:29"},"nodeType":"YulExpressionStatement","src":"1406:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1383:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"1391:4:29","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1379:3:29"},"nodeType":"YulFunctionCall","src":"1379:17:29"},{"name":"end","nodeType":"YulIdentifier","src":"1398:3:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1375:3:29"},"nodeType":"YulFunctionCall","src":"1375:27:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1368:6:29"},"nodeType":"YulFunctionCall","src":"1368:35:29"},"nodeType":"YulIf","src":"1365:2:29"},{"nodeType":"YulVariableDeclaration","src":"1429:34:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1456:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1443:12:29"},"nodeType":"YulFunctionCall","src":"1443:20:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1433:6:29","type":""}]},{"nodeType":"YulAssignment","src":"1472:87:29","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1532:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"1540:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1528:3:29"},"nodeType":"YulFunctionCall","src":"1528:17:29"},{"name":"length","nodeType":"YulIdentifier","src":"1547:6:29"},{"name":"end","nodeType":"YulIdentifier","src":"1555:3:29"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"1481:46:29"},"nodeType":"YulFunctionCall","src":"1481:78:29"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1472:5:29"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1333:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"1341:3:29","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1349:5:29","type":""}],"src":"1294:271:29"},{"body":{"nodeType":"YulBlock","src":"1647:211:29","statements":[{"body":{"nodeType":"YulBlock","src":"1696:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1705:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1708:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1698:6:29"},"nodeType":"YulFunctionCall","src":"1698:12:29"},"nodeType":"YulExpressionStatement","src":"1698:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1675:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"1683:4:29","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1671:3:29"},"nodeType":"YulFunctionCall","src":"1671:17:29"},{"name":"end","nodeType":"YulIdentifier","src":"1690:3:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1667:3:29"},"nodeType":"YulFunctionCall","src":"1667:27:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1660:6:29"},"nodeType":"YulFunctionCall","src":"1660:35:29"},"nodeType":"YulIf","src":"1657:2:29"},{"nodeType":"YulVariableDeclaration","src":"1721:34:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1748:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1735:12:29"},"nodeType":"YulFunctionCall","src":"1735:20:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1725:6:29","type":""}]},{"nodeType":"YulAssignment","src":"1764:88:29","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1825:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"1833:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1821:3:29"},"nodeType":"YulFunctionCall","src":"1821:17:29"},{"name":"length","nodeType":"YulIdentifier","src":"1840:6:29"},{"name":"end","nodeType":"YulIdentifier","src":"1848:3:29"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"1773:47:29"},"nodeType":"YulFunctionCall","src":"1773:79:29"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1764:5:29"}]}]},"name":"abi_decode_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1625:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"1633:3:29","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1641:5:29","type":""}],"src":"1585:273:29"},{"body":{"nodeType":"YulBlock","src":"1916:87:29","statements":[{"nodeType":"YulAssignment","src":"1926:29:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1948:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1935:12:29"},"nodeType":"YulFunctionCall","src":"1935:20:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1926:5:29"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1991:5:29"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"1964:26:29"},"nodeType":"YulFunctionCall","src":"1964:33:29"},"nodeType":"YulExpressionStatement","src":"1964:33:29"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1894:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"1902:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1910:5:29","type":""}],"src":"1864:139:29"},{"body":{"nodeType":"YulBlock","src":"2075:196:29","statements":[{"body":{"nodeType":"YulBlock","src":"2121:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2130:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2133:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2123:6:29"},"nodeType":"YulFunctionCall","src":"2123:12:29"},"nodeType":"YulExpressionStatement","src":"2123:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2096:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"2105:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2092:3:29"},"nodeType":"YulFunctionCall","src":"2092:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"2117:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2088:3:29"},"nodeType":"YulFunctionCall","src":"2088:32:29"},"nodeType":"YulIf","src":"2085:2:29"},{"nodeType":"YulBlock","src":"2147:117:29","statements":[{"nodeType":"YulVariableDeclaration","src":"2162:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"2176:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2166:6:29","type":""}]},{"nodeType":"YulAssignment","src":"2191:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2226:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"2237:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2222:3:29"},"nodeType":"YulFunctionCall","src":"2222:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2246:7:29"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2201:20:29"},"nodeType":"YulFunctionCall","src":"2201:53:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2191:6:29"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2045:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2056:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2068:6:29","type":""}],"src":"2009:262:29"},{"body":{"nodeType":"YulBlock","src":"2360:324:29","statements":[{"body":{"nodeType":"YulBlock","src":"2406:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2415:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2418:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2408:6:29"},"nodeType":"YulFunctionCall","src":"2408:12:29"},"nodeType":"YulExpressionStatement","src":"2408:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2381:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"2390:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2377:3:29"},"nodeType":"YulFunctionCall","src":"2377:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"2402:2:29","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2373:3:29"},"nodeType":"YulFunctionCall","src":"2373:32:29"},"nodeType":"YulIf","src":"2370:2:29"},{"nodeType":"YulBlock","src":"2432:117:29","statements":[{"nodeType":"YulVariableDeclaration","src":"2447:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"2461:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2451:6:29","type":""}]},{"nodeType":"YulAssignment","src":"2476:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2511:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"2522:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2507:3:29"},"nodeType":"YulFunctionCall","src":"2507:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2531:7:29"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2486:20:29"},"nodeType":"YulFunctionCall","src":"2486:53:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2476:6:29"}]}]},{"nodeType":"YulBlock","src":"2559:118:29","statements":[{"nodeType":"YulVariableDeclaration","src":"2574:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"2588:2:29","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2578:6:29","type":""}]},{"nodeType":"YulAssignment","src":"2604:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2639:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"2650:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2635:3:29"},"nodeType":"YulFunctionCall","src":"2635:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2659:7:29"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2614:20:29"},"nodeType":"YulFunctionCall","src":"2614:53:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2604:6:29"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2322:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2333:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2345:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2353:6:29","type":""}],"src":"2277:407:29"},{"body":{"nodeType":"YulBlock","src":"2790:452:29","statements":[{"body":{"nodeType":"YulBlock","src":"2836:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2845:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2848:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2838:6:29"},"nodeType":"YulFunctionCall","src":"2838:12:29"},"nodeType":"YulExpressionStatement","src":"2838:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2811:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"2820:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2807:3:29"},"nodeType":"YulFunctionCall","src":"2807:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"2832:2:29","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2803:3:29"},"nodeType":"YulFunctionCall","src":"2803:32:29"},"nodeType":"YulIf","src":"2800:2:29"},{"nodeType":"YulBlock","src":"2862:117:29","statements":[{"nodeType":"YulVariableDeclaration","src":"2877:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"2891:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2881:6:29","type":""}]},{"nodeType":"YulAssignment","src":"2906:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2941:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"2952:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2937:3:29"},"nodeType":"YulFunctionCall","src":"2937:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2961:7:29"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2916:20:29"},"nodeType":"YulFunctionCall","src":"2916:53:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2906:6:29"}]}]},{"nodeType":"YulBlock","src":"2989:118:29","statements":[{"nodeType":"YulVariableDeclaration","src":"3004:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"3018:2:29","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3008:6:29","type":""}]},{"nodeType":"YulAssignment","src":"3034:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3069:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"3080:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3065:3:29"},"nodeType":"YulFunctionCall","src":"3065:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3089:7:29"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3044:20:29"},"nodeType":"YulFunctionCall","src":"3044:53:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3034:6:29"}]}]},{"nodeType":"YulBlock","src":"3117:118:29","statements":[{"nodeType":"YulVariableDeclaration","src":"3132:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"3146:2:29","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3136:6:29","type":""}]},{"nodeType":"YulAssignment","src":"3162:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3197:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"3208:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3193:3:29"},"nodeType":"YulFunctionCall","src":"3193:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3217:7:29"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3172:20:29"},"nodeType":"YulFunctionCall","src":"3172:53:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3162:6:29"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2744:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2755:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2767:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2775:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2783:6:29","type":""}],"src":"2690:552:29"},{"body":{"nodeType":"YulBlock","src":"3374:683:29","statements":[{"body":{"nodeType":"YulBlock","src":"3421:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3430:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3433:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3423:6:29"},"nodeType":"YulFunctionCall","src":"3423:12:29"},"nodeType":"YulExpressionStatement","src":"3423:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3395:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"3404:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3391:3:29"},"nodeType":"YulFunctionCall","src":"3391:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"3416:3:29","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3387:3:29"},"nodeType":"YulFunctionCall","src":"3387:33:29"},"nodeType":"YulIf","src":"3384:2:29"},{"nodeType":"YulBlock","src":"3447:117:29","statements":[{"nodeType":"YulVariableDeclaration","src":"3462:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"3476:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3466:6:29","type":""}]},{"nodeType":"YulAssignment","src":"3491:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3526:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"3537:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3522:3:29"},"nodeType":"YulFunctionCall","src":"3522:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3546:7:29"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3501:20:29"},"nodeType":"YulFunctionCall","src":"3501:53:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3491:6:29"}]}]},{"nodeType":"YulBlock","src":"3574:118:29","statements":[{"nodeType":"YulVariableDeclaration","src":"3589:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"3603:2:29","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3593:6:29","type":""}]},{"nodeType":"YulAssignment","src":"3619:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3654:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"3665:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3650:3:29"},"nodeType":"YulFunctionCall","src":"3650:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3674:7:29"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3629:20:29"},"nodeType":"YulFunctionCall","src":"3629:53:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3619:6:29"}]}]},{"nodeType":"YulBlock","src":"3702:118:29","statements":[{"nodeType":"YulVariableDeclaration","src":"3717:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"3731:2:29","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3721:6:29","type":""}]},{"nodeType":"YulAssignment","src":"3747:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3782:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"3793:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3778:3:29"},"nodeType":"YulFunctionCall","src":"3778:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3802:7:29"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3757:20:29"},"nodeType":"YulFunctionCall","src":"3757:53:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3747:6:29"}]}]},{"nodeType":"YulBlock","src":"3830:220:29","statements":[{"nodeType":"YulVariableDeclaration","src":"3845:46:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3876:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"3887:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3872:3:29"},"nodeType":"YulFunctionCall","src":"3872:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3859:12:29"},"nodeType":"YulFunctionCall","src":"3859:32:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3849:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"3938:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3947:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3950:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3940:6:29"},"nodeType":"YulFunctionCall","src":"3940:12:29"},"nodeType":"YulExpressionStatement","src":"3940:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3910:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"3918:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3907:2:29"},"nodeType":"YulFunctionCall","src":"3907:30:29"},"nodeType":"YulIf","src":"3904:2:29"},{"nodeType":"YulAssignment","src":"3968:72:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4012:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"4023:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4008:3:29"},"nodeType":"YulFunctionCall","src":"4008:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4032:7:29"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"3978:29:29"},"nodeType":"YulFunctionCall","src":"3978:62:29"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"3968:6:29"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3320:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3331:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3343:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3351:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3359:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3367:6:29","type":""}],"src":"3248:809:29"},{"body":{"nodeType":"YulBlock","src":"4190:684:29","statements":[{"body":{"nodeType":"YulBlock","src":"4237:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4246:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4249:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4239:6:29"},"nodeType":"YulFunctionCall","src":"4239:12:29"},"nodeType":"YulExpressionStatement","src":"4239:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4211:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"4220:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4207:3:29"},"nodeType":"YulFunctionCall","src":"4207:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"4232:3:29","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4203:3:29"},"nodeType":"YulFunctionCall","src":"4203:33:29"},"nodeType":"YulIf","src":"4200:2:29"},{"nodeType":"YulBlock","src":"4263:117:29","statements":[{"nodeType":"YulVariableDeclaration","src":"4278:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"4292:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4282:6:29","type":""}]},{"nodeType":"YulAssignment","src":"4307:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4342:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"4353:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4338:3:29"},"nodeType":"YulFunctionCall","src":"4338:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4362:7:29"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4317:20:29"},"nodeType":"YulFunctionCall","src":"4317:53:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4307:6:29"}]}]},{"nodeType":"YulBlock","src":"4390:118:29","statements":[{"nodeType":"YulVariableDeclaration","src":"4405:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"4419:2:29","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4409:6:29","type":""}]},{"nodeType":"YulAssignment","src":"4435:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4470:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"4481:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4466:3:29"},"nodeType":"YulFunctionCall","src":"4466:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4490:7:29"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4445:20:29"},"nodeType":"YulFunctionCall","src":"4445:53:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4435:6:29"}]}]},{"nodeType":"YulBlock","src":"4518:118:29","statements":[{"nodeType":"YulVariableDeclaration","src":"4533:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"4547:2:29","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4537:6:29","type":""}]},{"nodeType":"YulAssignment","src":"4563:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4598:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"4609:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4594:3:29"},"nodeType":"YulFunctionCall","src":"4594:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4618:7:29"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4573:20:29"},"nodeType":"YulFunctionCall","src":"4573:53:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4563:6:29"}]}]},{"nodeType":"YulBlock","src":"4646:221:29","statements":[{"nodeType":"YulVariableDeclaration","src":"4661:46:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4692:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"4703:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4688:3:29"},"nodeType":"YulFunctionCall","src":"4688:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4675:12:29"},"nodeType":"YulFunctionCall","src":"4675:32:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4665:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"4754:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4763:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4766:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4756:6:29"},"nodeType":"YulFunctionCall","src":"4756:12:29"},"nodeType":"YulExpressionStatement","src":"4756:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4726:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"4734:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4723:2:29"},"nodeType":"YulFunctionCall","src":"4723:30:29"},"nodeType":"YulIf","src":"4720:2:29"},{"nodeType":"YulAssignment","src":"4784:73:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4829:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"4840:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4825:3:29"},"nodeType":"YulFunctionCall","src":"4825:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4849:7:29"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"4794:30:29"},"nodeType":"YulFunctionCall","src":"4794:63:29"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4784:6:29"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4136:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4147:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4159:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4167:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4175:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4183:6:29","type":""}],"src":"4063:811:29"},{"body":{"nodeType":"YulBlock","src":"4960:321:29","statements":[{"body":{"nodeType":"YulBlock","src":"5006:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5015:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5018:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5008:6:29"},"nodeType":"YulFunctionCall","src":"5008:12:29"},"nodeType":"YulExpressionStatement","src":"5008:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4981:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"4990:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4977:3:29"},"nodeType":"YulFunctionCall","src":"4977:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"5002:2:29","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4973:3:29"},"nodeType":"YulFunctionCall","src":"4973:32:29"},"nodeType":"YulIf","src":"4970:2:29"},{"nodeType":"YulBlock","src":"5032:117:29","statements":[{"nodeType":"YulVariableDeclaration","src":"5047:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"5061:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5051:6:29","type":""}]},{"nodeType":"YulAssignment","src":"5076:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5111:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"5122:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5107:3:29"},"nodeType":"YulFunctionCall","src":"5107:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5131:7:29"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5086:20:29"},"nodeType":"YulFunctionCall","src":"5086:53:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5076:6:29"}]}]},{"nodeType":"YulBlock","src":"5159:115:29","statements":[{"nodeType":"YulVariableDeclaration","src":"5174:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"5188:2:29","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5178:6:29","type":""}]},{"nodeType":"YulAssignment","src":"5204:60:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5236:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"5247:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5232:3:29"},"nodeType":"YulFunctionCall","src":"5232:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5256:7:29"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"5214:17:29"},"nodeType":"YulFunctionCall","src":"5214:50:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5204:6:29"}]}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4922:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4933:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4945:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4953:6:29","type":""}],"src":"4880:401:29"},{"body":{"nodeType":"YulBlock","src":"5370:324:29","statements":[{"body":{"nodeType":"YulBlock","src":"5416:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5425:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5428:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5418:6:29"},"nodeType":"YulFunctionCall","src":"5418:12:29"},"nodeType":"YulExpressionStatement","src":"5418:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5391:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"5400:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5387:3:29"},"nodeType":"YulFunctionCall","src":"5387:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"5412:2:29","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5383:3:29"},"nodeType":"YulFunctionCall","src":"5383:32:29"},"nodeType":"YulIf","src":"5380:2:29"},{"nodeType":"YulBlock","src":"5442:117:29","statements":[{"nodeType":"YulVariableDeclaration","src":"5457:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"5471:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5461:6:29","type":""}]},{"nodeType":"YulAssignment","src":"5486:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5521:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"5532:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5517:3:29"},"nodeType":"YulFunctionCall","src":"5517:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5541:7:29"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5496:20:29"},"nodeType":"YulFunctionCall","src":"5496:53:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5486:6:29"}]}]},{"nodeType":"YulBlock","src":"5569:118:29","statements":[{"nodeType":"YulVariableDeclaration","src":"5584:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"5598:2:29","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5588:6:29","type":""}]},{"nodeType":"YulAssignment","src":"5614:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5649:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"5660:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5645:3:29"},"nodeType":"YulFunctionCall","src":"5645:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5669:7:29"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5624:20:29"},"nodeType":"YulFunctionCall","src":"5624:53:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5614:6:29"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5332:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5343:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5355:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5363:6:29","type":""}],"src":"5287:407:29"},{"body":{"nodeType":"YulBlock","src":"5765:195:29","statements":[{"body":{"nodeType":"YulBlock","src":"5811:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5820:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5823:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5813:6:29"},"nodeType":"YulFunctionCall","src":"5813:12:29"},"nodeType":"YulExpressionStatement","src":"5813:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5786:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"5795:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5782:3:29"},"nodeType":"YulFunctionCall","src":"5782:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"5807:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5778:3:29"},"nodeType":"YulFunctionCall","src":"5778:32:29"},"nodeType":"YulIf","src":"5775:2:29"},{"nodeType":"YulBlock","src":"5837:116:29","statements":[{"nodeType":"YulVariableDeclaration","src":"5852:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"5866:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5856:6:29","type":""}]},{"nodeType":"YulAssignment","src":"5881:62:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5915:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"5926:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5911:3:29"},"nodeType":"YulFunctionCall","src":"5911:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5935:7:29"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"5891:19:29"},"nodeType":"YulFunctionCall","src":"5891:52:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5881:6:29"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5735:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5746:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5758:6:29","type":""}],"src":"5700:260:29"},{"body":{"nodeType":"YulBlock","src":"6042:206:29","statements":[{"body":{"nodeType":"YulBlock","src":"6088:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6097:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6100:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6090:6:29"},"nodeType":"YulFunctionCall","src":"6090:12:29"},"nodeType":"YulExpressionStatement","src":"6090:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6063:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"6072:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6059:3:29"},"nodeType":"YulFunctionCall","src":"6059:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"6084:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6055:3:29"},"nodeType":"YulFunctionCall","src":"6055:32:29"},"nodeType":"YulIf","src":"6052:2:29"},{"nodeType":"YulBlock","src":"6114:127:29","statements":[{"nodeType":"YulVariableDeclaration","src":"6129:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"6143:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6133:6:29","type":""}]},{"nodeType":"YulAssignment","src":"6158:73:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6203:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"6214:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6199:3:29"},"nodeType":"YulFunctionCall","src":"6199:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6223:7:29"}],"functionName":{"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulIdentifier","src":"6168:30:29"},"nodeType":"YulFunctionCall","src":"6168:63:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6158:6:29"}]}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6012:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6023:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6035:6:29","type":""}],"src":"5966:282:29"},{"body":{"nodeType":"YulBlock","src":"6330:299:29","statements":[{"body":{"nodeType":"YulBlock","src":"6376:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6385:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6388:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6378:6:29"},"nodeType":"YulFunctionCall","src":"6378:12:29"},"nodeType":"YulExpressionStatement","src":"6378:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6351:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"6360:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6347:3:29"},"nodeType":"YulFunctionCall","src":"6347:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"6372:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6343:3:29"},"nodeType":"YulFunctionCall","src":"6343:32:29"},"nodeType":"YulIf","src":"6340:2:29"},{"nodeType":"YulBlock","src":"6402:220:29","statements":[{"nodeType":"YulVariableDeclaration","src":"6417:45:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6448:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6459:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6444:3:29"},"nodeType":"YulFunctionCall","src":"6444:17:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6431:12:29"},"nodeType":"YulFunctionCall","src":"6431:31:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6421:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"6509:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6518:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6521:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6511:6:29"},"nodeType":"YulFunctionCall","src":"6511:12:29"},"nodeType":"YulExpressionStatement","src":"6511:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6481:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"6489:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6478:2:29"},"nodeType":"YulFunctionCall","src":"6478:30:29"},"nodeType":"YulIf","src":"6475:2:29"},{"nodeType":"YulAssignment","src":"6539:73:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6584:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"6595:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6580:3:29"},"nodeType":"YulFunctionCall","src":"6580:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6604:7:29"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"6549:30:29"},"nodeType":"YulFunctionCall","src":"6549:63:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6539:6:29"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6300:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6311:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6323:6:29","type":""}],"src":"6254:375:29"},{"body":{"nodeType":"YulBlock","src":"6728:427:29","statements":[{"body":{"nodeType":"YulBlock","src":"6774:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6783:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6786:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6776:6:29"},"nodeType":"YulFunctionCall","src":"6776:12:29"},"nodeType":"YulExpressionStatement","src":"6776:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6749:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"6758:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6745:3:29"},"nodeType":"YulFunctionCall","src":"6745:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"6770:2:29","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6741:3:29"},"nodeType":"YulFunctionCall","src":"6741:32:29"},"nodeType":"YulIf","src":"6738:2:29"},{"nodeType":"YulBlock","src":"6800:220:29","statements":[{"nodeType":"YulVariableDeclaration","src":"6815:45:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6846:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6857:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6842:3:29"},"nodeType":"YulFunctionCall","src":"6842:17:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6829:12:29"},"nodeType":"YulFunctionCall","src":"6829:31:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6819:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"6907:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6916:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6919:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6909:6:29"},"nodeType":"YulFunctionCall","src":"6909:12:29"},"nodeType":"YulExpressionStatement","src":"6909:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6879:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"6887:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6876:2:29"},"nodeType":"YulFunctionCall","src":"6876:30:29"},"nodeType":"YulIf","src":"6873:2:29"},{"nodeType":"YulAssignment","src":"6937:73:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6982:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"6993:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6978:3:29"},"nodeType":"YulFunctionCall","src":"6978:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7002:7:29"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"6947:30:29"},"nodeType":"YulFunctionCall","src":"6947:63:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6937:6:29"}]}]},{"nodeType":"YulBlock","src":"7030:118:29","statements":[{"nodeType":"YulVariableDeclaration","src":"7045:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"7059:2:29","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7049:6:29","type":""}]},{"nodeType":"YulAssignment","src":"7075:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7110:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"7121:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7106:3:29"},"nodeType":"YulFunctionCall","src":"7106:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7130:7:29"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"7085:20:29"},"nodeType":"YulFunctionCall","src":"7085:53:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7075:6:29"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6690:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6701:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6713:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6721:6:29","type":""}],"src":"6635:520:29"},{"body":{"nodeType":"YulBlock","src":"7227:196:29","statements":[{"body":{"nodeType":"YulBlock","src":"7273:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7282:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7285:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7275:6:29"},"nodeType":"YulFunctionCall","src":"7275:12:29"},"nodeType":"YulExpressionStatement","src":"7275:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7248:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"7257:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7244:3:29"},"nodeType":"YulFunctionCall","src":"7244:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"7269:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7240:3:29"},"nodeType":"YulFunctionCall","src":"7240:32:29"},"nodeType":"YulIf","src":"7237:2:29"},{"nodeType":"YulBlock","src":"7299:117:29","statements":[{"nodeType":"YulVariableDeclaration","src":"7314:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"7328:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7318:6:29","type":""}]},{"nodeType":"YulAssignment","src":"7343:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7378:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"7389:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7374:3:29"},"nodeType":"YulFunctionCall","src":"7374:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7398:7:29"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"7353:20:29"},"nodeType":"YulFunctionCall","src":"7353:53:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7343:6:29"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7197:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7208:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7220:6:29","type":""}],"src":"7161:262:29"},{"body":{"nodeType":"YulBlock","src":"7512:324:29","statements":[{"body":{"nodeType":"YulBlock","src":"7558:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7567:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7570:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7560:6:29"},"nodeType":"YulFunctionCall","src":"7560:12:29"},"nodeType":"YulExpressionStatement","src":"7560:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7533:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"7542:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7529:3:29"},"nodeType":"YulFunctionCall","src":"7529:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"7554:2:29","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7525:3:29"},"nodeType":"YulFunctionCall","src":"7525:32:29"},"nodeType":"YulIf","src":"7522:2:29"},{"nodeType":"YulBlock","src":"7584:117:29","statements":[{"nodeType":"YulVariableDeclaration","src":"7599:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"7613:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7603:6:29","type":""}]},{"nodeType":"YulAssignment","src":"7628:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7663:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"7674:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7659:3:29"},"nodeType":"YulFunctionCall","src":"7659:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7683:7:29"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"7638:20:29"},"nodeType":"YulFunctionCall","src":"7638:53:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7628:6:29"}]}]},{"nodeType":"YulBlock","src":"7711:118:29","statements":[{"nodeType":"YulVariableDeclaration","src":"7726:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"7740:2:29","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7730:6:29","type":""}]},{"nodeType":"YulAssignment","src":"7756:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7791:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"7802:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7787:3:29"},"nodeType":"YulFunctionCall","src":"7787:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7811:7:29"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"7766:20:29"},"nodeType":"YulFunctionCall","src":"7766:53:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7756:6:29"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7474:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7485:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7497:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7505:6:29","type":""}],"src":"7429:407:29"},{"body":{"nodeType":"YulBlock","src":"7922:99:29","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7966:6:29"},{"name":"pos","nodeType":"YulIdentifier","src":"7974:3:29"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"7932:33:29"},"nodeType":"YulFunctionCall","src":"7932:46:29"},"nodeType":"YulExpressionStatement","src":"7932:46:29"},{"nodeType":"YulAssignment","src":"7987:28:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8005:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"8010:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8001:3:29"},"nodeType":"YulFunctionCall","src":"8001:14:29"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"7987:10:29"}]}]},"name":"abi_encodeUpdatedPos_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"7895:6:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7903:3:29","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"7911:10:29","type":""}],"src":"7842:179:29"},{"body":{"nodeType":"YulBlock","src":"8092:53:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8109:3:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8132:5:29"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"8114:17:29"},"nodeType":"YulFunctionCall","src":"8114:24:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8102:6:29"},"nodeType":"YulFunctionCall","src":"8102:37:29"},"nodeType":"YulExpressionStatement","src":"8102:37:29"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8080:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"8087:3:29","type":""}],"src":"8027:118:29"},{"body":{"nodeType":"YulBlock","src":"8305:608:29","statements":[{"nodeType":"YulVariableDeclaration","src":"8315:68:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8377:5:29"}],"functionName":{"name":"array_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"8329:47:29"},"nodeType":"YulFunctionCall","src":"8329:54:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8319:6:29","type":""}]},{"nodeType":"YulAssignment","src":"8392:93:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8473:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"8478:6:29"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8399:73:29"},"nodeType":"YulFunctionCall","src":"8399:86:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8392:3:29"}]},{"nodeType":"YulVariableDeclaration","src":"8494:71:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8559:5:29"}],"functionName":{"name":"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"8509:49:29"},"nodeType":"YulFunctionCall","src":"8509:56:29"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"8498:7:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8574:21:29","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"8588:7:29"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"8578:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"8664:224:29","statements":[{"nodeType":"YulVariableDeclaration","src":"8678:34:29","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"8705:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8699:5:29"},"nodeType":"YulFunctionCall","src":"8699:13:29"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"8682:13:29","type":""}]},{"nodeType":"YulAssignment","src":"8725:70:29","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"8776:13:29"},{"name":"pos","nodeType":"YulIdentifier","src":"8791:3:29"}],"functionName":{"name":"abi_encodeUpdatedPos_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"8732:43:29"},"nodeType":"YulFunctionCall","src":"8732:63:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8725:3:29"}]},{"nodeType":"YulAssignment","src":"8808:70:29","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"8871:6:29"}],"functionName":{"name":"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"8818:52:29"},"nodeType":"YulFunctionCall","src":"8818:60:29"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"8808:6:29"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8626:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"8629:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8623:2:29"},"nodeType":"YulFunctionCall","src":"8623:13:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"8637:18:29","statements":[{"nodeType":"YulAssignment","src":"8639:14:29","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8648:1:29"},{"kind":"number","nodeType":"YulLiteral","src":"8651:1:29","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8644:3:29"},"nodeType":"YulFunctionCall","src":"8644:9:29"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"8639:1:29"}]}]},"pre":{"nodeType":"YulBlock","src":"8608:14:29","statements":[{"nodeType":"YulVariableDeclaration","src":"8610:10:29","value":{"kind":"number","nodeType":"YulLiteral","src":"8619:1:29","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"8614:1:29","type":""}]}]},"src":"8604:284:29"},{"nodeType":"YulAssignment","src":"8897:10:29","value":{"name":"pos","nodeType":"YulIdentifier","src":"8904:3:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8897:3:29"}]}]},"name":"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8284:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"8291:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8300:3:29","type":""}],"src":"8181:732:29"},{"body":{"nodeType":"YulBlock","src":"8978:50:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8995:3:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9015:5:29"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"9000:14:29"},"nodeType":"YulFunctionCall","src":"9000:21:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8988:6:29"},"nodeType":"YulFunctionCall","src":"8988:34:29"},"nodeType":"YulExpressionStatement","src":"8988:34:29"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8966:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"8973:3:29","type":""}],"src":"8919:109:29"},{"body":{"nodeType":"YulBlock","src":"9124:270:29","statements":[{"nodeType":"YulVariableDeclaration","src":"9134:52:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9180:5:29"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"9148:31:29"},"nodeType":"YulFunctionCall","src":"9148:38:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"9138:6:29","type":""}]},{"nodeType":"YulAssignment","src":"9195:77:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9260:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"9265:6:29"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9202:57:29"},"nodeType":"YulFunctionCall","src":"9202:70:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9195:3:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9307:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"9314:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9303:3:29"},"nodeType":"YulFunctionCall","src":"9303:16:29"},{"name":"pos","nodeType":"YulIdentifier","src":"9321:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"9326:6:29"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"9281:21:29"},"nodeType":"YulFunctionCall","src":"9281:52:29"},"nodeType":"YulExpressionStatement","src":"9281:52:29"},{"nodeType":"YulAssignment","src":"9342:46:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9353:3:29"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9380:6:29"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"9358:21:29"},"nodeType":"YulFunctionCall","src":"9358:29:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9349:3:29"},"nodeType":"YulFunctionCall","src":"9349:39:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9342:3:29"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9105:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9112:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9120:3:29","type":""}],"src":"9034:360:29"},{"body":{"nodeType":"YulBlock","src":"9492:272:29","statements":[{"nodeType":"YulVariableDeclaration","src":"9502:53:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9549:5:29"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"9516:32:29"},"nodeType":"YulFunctionCall","src":"9516:39:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"9506:6:29","type":""}]},{"nodeType":"YulAssignment","src":"9564:78:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9630:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"9635:6:29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9571:58:29"},"nodeType":"YulFunctionCall","src":"9571:71:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9564:3:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9677:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"9684:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9673:3:29"},"nodeType":"YulFunctionCall","src":"9673:16:29"},{"name":"pos","nodeType":"YulIdentifier","src":"9691:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"9696:6:29"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"9651:21:29"},"nodeType":"YulFunctionCall","src":"9651:52:29"},"nodeType":"YulExpressionStatement","src":"9651:52:29"},{"nodeType":"YulAssignment","src":"9712:46:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9723:3:29"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9750:6:29"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"9728:21:29"},"nodeType":"YulFunctionCall","src":"9728:29:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9719:3:29"},"nodeType":"YulFunctionCall","src":"9719:39:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9712:3:29"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9473:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9480:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9488:3:29","type":""}],"src":"9400:364:29"},{"body":{"nodeType":"YulBlock","src":"9880:267:29","statements":[{"nodeType":"YulVariableDeclaration","src":"9890:53:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9937:5:29"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"9904:32:29"},"nodeType":"YulFunctionCall","src":"9904:39:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"9894:6:29","type":""}]},{"nodeType":"YulAssignment","src":"9952:96:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10036:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"10041:6:29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"9959:76:29"},"nodeType":"YulFunctionCall","src":"9959:89:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9952:3:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10083:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"10090:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10079:3:29"},"nodeType":"YulFunctionCall","src":"10079:16:29"},{"name":"pos","nodeType":"YulIdentifier","src":"10097:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"10102:6:29"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"10057:21:29"},"nodeType":"YulFunctionCall","src":"10057:52:29"},"nodeType":"YulExpressionStatement","src":"10057:52:29"},{"nodeType":"YulAssignment","src":"10118:23:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10129:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"10134:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10125:3:29"},"nodeType":"YulFunctionCall","src":"10125:16:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10118:3:29"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9861:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9868:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9876:3:29","type":""}],"src":"9770:377:29"},{"body":{"nodeType":"YulBlock","src":"10299:220:29","statements":[{"nodeType":"YulAssignment","src":"10309:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10375:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"10380:2:29","type":"","value":"45"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10316:58:29"},"nodeType":"YulFunctionCall","src":"10316:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10309:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10481:3:29"}],"functionName":{"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulIdentifier","src":"10392:88:29"},"nodeType":"YulFunctionCall","src":"10392:93:29"},"nodeType":"YulExpressionStatement","src":"10392:93:29"},{"nodeType":"YulAssignment","src":"10494:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10505:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"10510:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10501:3:29"},"nodeType":"YulFunctionCall","src":"10501:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10494:3:29"}]}]},"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10287:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10295:3:29","type":""}],"src":"10153:366:29"},{"body":{"nodeType":"YulBlock","src":"10671:220:29","statements":[{"nodeType":"YulAssignment","src":"10681:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10747:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"10752:2:29","type":"","value":"50"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10688:58:29"},"nodeType":"YulFunctionCall","src":"10688:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10681:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10853:3:29"}],"functionName":{"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulIdentifier","src":"10764:88:29"},"nodeType":"YulFunctionCall","src":"10764:93:29"},"nodeType":"YulExpressionStatement","src":"10764:93:29"},{"nodeType":"YulAssignment","src":"10866:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10877:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"10882:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10873:3:29"},"nodeType":"YulFunctionCall","src":"10873:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10866:3:29"}]}]},"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10659:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10667:3:29","type":""}],"src":"10525:366:29"},{"body":{"nodeType":"YulBlock","src":"11043:220:29","statements":[{"nodeType":"YulAssignment","src":"11053:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11119:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"11124:2:29","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11060:58:29"},"nodeType":"YulFunctionCall","src":"11060:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11053:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11225:3:29"}],"functionName":{"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulIdentifier","src":"11136:88:29"},"nodeType":"YulFunctionCall","src":"11136:93:29"},"nodeType":"YulExpressionStatement","src":"11136:93:29"},{"nodeType":"YulAssignment","src":"11238:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11249:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"11254:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11245:3:29"},"nodeType":"YulFunctionCall","src":"11245:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11238:3:29"}]}]},"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11031:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11039:3:29","type":""}],"src":"10897:366:29"},{"body":{"nodeType":"YulBlock","src":"11415:220:29","statements":[{"nodeType":"YulAssignment","src":"11425:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11491:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"11496:2:29","type":"","value":"28"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11432:58:29"},"nodeType":"YulFunctionCall","src":"11432:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11425:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11597:3:29"}],"functionName":{"name":"store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","nodeType":"YulIdentifier","src":"11508:88:29"},"nodeType":"YulFunctionCall","src":"11508:93:29"},"nodeType":"YulExpressionStatement","src":"11508:93:29"},{"nodeType":"YulAssignment","src":"11610:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11621:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"11626:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11617:3:29"},"nodeType":"YulFunctionCall","src":"11617:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11610:3:29"}]}]},"name":"abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11403:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11411:3:29","type":""}],"src":"11269:366:29"},{"body":{"nodeType":"YulBlock","src":"11787:220:29","statements":[{"nodeType":"YulAssignment","src":"11797:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11863:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"11868:2:29","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11804:58:29"},"nodeType":"YulFunctionCall","src":"11804:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11797:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11969:3:29"}],"functionName":{"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulIdentifier","src":"11880:88:29"},"nodeType":"YulFunctionCall","src":"11880:93:29"},"nodeType":"YulExpressionStatement","src":"11880:93:29"},{"nodeType":"YulAssignment","src":"11982:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11993:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"11998:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11989:3:29"},"nodeType":"YulFunctionCall","src":"11989:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11982:3:29"}]}]},"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11775:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11783:3:29","type":""}],"src":"11641:366:29"},{"body":{"nodeType":"YulBlock","src":"12159:220:29","statements":[{"nodeType":"YulAssignment","src":"12169:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12235:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"12240:2:29","type":"","value":"25"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12176:58:29"},"nodeType":"YulFunctionCall","src":"12176:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12169:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12341:3:29"}],"functionName":{"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulIdentifier","src":"12252:88:29"},"nodeType":"YulFunctionCall","src":"12252:93:29"},"nodeType":"YulExpressionStatement","src":"12252:93:29"},{"nodeType":"YulAssignment","src":"12354:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12365:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"12370:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12361:3:29"},"nodeType":"YulFunctionCall","src":"12361:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12354:3:29"}]}]},"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12147:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12155:3:29","type":""}],"src":"12013:366:29"},{"body":{"nodeType":"YulBlock","src":"12531:220:29","statements":[{"nodeType":"YulAssignment","src":"12541:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12607:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"12612:2:29","type":"","value":"41"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12548:58:29"},"nodeType":"YulFunctionCall","src":"12548:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12541:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12713:3:29"}],"functionName":{"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulIdentifier","src":"12624:88:29"},"nodeType":"YulFunctionCall","src":"12624:93:29"},"nodeType":"YulExpressionStatement","src":"12624:93:29"},{"nodeType":"YulAssignment","src":"12726:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12737:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"12742:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12733:3:29"},"nodeType":"YulFunctionCall","src":"12733:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12726:3:29"}]}]},"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12519:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12527:3:29","type":""}],"src":"12385:366:29"},{"body":{"nodeType":"YulBlock","src":"12903:220:29","statements":[{"nodeType":"YulAssignment","src":"12913:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12979:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"12984:2:29","type":"","value":"46"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12920:58:29"},"nodeType":"YulFunctionCall","src":"12920:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12913:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13085:3:29"}],"functionName":{"name":"store_literal_in_memory_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4","nodeType":"YulIdentifier","src":"12996:88:29"},"nodeType":"YulFunctionCall","src":"12996:93:29"},"nodeType":"YulExpressionStatement","src":"12996:93:29"},{"nodeType":"YulAssignment","src":"13098:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13109:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"13114:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13105:3:29"},"nodeType":"YulFunctionCall","src":"13105:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13098:3:29"}]}]},"name":"abi_encode_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12891:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12899:3:29","type":""}],"src":"12757:366:29"},{"body":{"nodeType":"YulBlock","src":"13275:220:29","statements":[{"nodeType":"YulAssignment","src":"13285:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13351:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"13356:2:29","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13292:58:29"},"nodeType":"YulFunctionCall","src":"13292:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13285:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13457:3:29"}],"functionName":{"name":"store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","nodeType":"YulIdentifier","src":"13368:88:29"},"nodeType":"YulFunctionCall","src":"13368:93:29"},"nodeType":"YulExpressionStatement","src":"13368:93:29"},{"nodeType":"YulAssignment","src":"13470:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13481:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"13486:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13477:3:29"},"nodeType":"YulFunctionCall","src":"13477:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13470:3:29"}]}]},"name":"abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13263:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13271:3:29","type":""}],"src":"13129:366:29"},{"body":{"nodeType":"YulBlock","src":"13647:220:29","statements":[{"nodeType":"YulAssignment","src":"13657:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13723:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"13728:2:29","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13664:58:29"},"nodeType":"YulFunctionCall","src":"13664:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13657:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13829:3:29"}],"functionName":{"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulIdentifier","src":"13740:88:29"},"nodeType":"YulFunctionCall","src":"13740:93:29"},"nodeType":"YulExpressionStatement","src":"13740:93:29"},{"nodeType":"YulAssignment","src":"13842:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13853:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"13858:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13849:3:29"},"nodeType":"YulFunctionCall","src":"13849:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13842:3:29"}]}]},"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13635:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13643:3:29","type":""}],"src":"13501:366:29"},{"body":{"nodeType":"YulBlock","src":"14019:220:29","statements":[{"nodeType":"YulAssignment","src":"14029:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14095:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"14100:2:29","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14036:58:29"},"nodeType":"YulFunctionCall","src":"14036:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14029:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14201:3:29"}],"functionName":{"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulIdentifier","src":"14112:88:29"},"nodeType":"YulFunctionCall","src":"14112:93:29"},"nodeType":"YulExpressionStatement","src":"14112:93:29"},{"nodeType":"YulAssignment","src":"14214:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14225:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"14230:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14221:3:29"},"nodeType":"YulFunctionCall","src":"14221:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14214:3:29"}]}]},"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14007:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14015:3:29","type":""}],"src":"13873:366:29"},{"body":{"nodeType":"YulBlock","src":"14391:220:29","statements":[{"nodeType":"YulAssignment","src":"14401:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14467:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"14472:2:29","type":"","value":"61"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14408:58:29"},"nodeType":"YulFunctionCall","src":"14408:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14401:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14573:3:29"}],"functionName":{"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulIdentifier","src":"14484:88:29"},"nodeType":"YulFunctionCall","src":"14484:93:29"},"nodeType":"YulExpressionStatement","src":"14484:93:29"},{"nodeType":"YulAssignment","src":"14586:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14597:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"14602:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14593:3:29"},"nodeType":"YulFunctionCall","src":"14593:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14586:3:29"}]}]},"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14379:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14387:3:29","type":""}],"src":"14245:366:29"},{"body":{"nodeType":"YulBlock","src":"14763:220:29","statements":[{"nodeType":"YulAssignment","src":"14773:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14839:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"14844:2:29","type":"","value":"49"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14780:58:29"},"nodeType":"YulFunctionCall","src":"14780:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14773:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14945:3:29"}],"functionName":{"name":"store_literal_in_memory_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2","nodeType":"YulIdentifier","src":"14856:88:29"},"nodeType":"YulFunctionCall","src":"14856:93:29"},"nodeType":"YulExpressionStatement","src":"14856:93:29"},{"nodeType":"YulAssignment","src":"14958:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14969:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"14974:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14965:3:29"},"nodeType":"YulFunctionCall","src":"14965:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14958:3:29"}]}]},"name":"abi_encode_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14751:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14759:3:29","type":""}],"src":"14617:366:29"},{"body":{"nodeType":"YulBlock","src":"15135:220:29","statements":[{"nodeType":"YulAssignment","src":"15145:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15211:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"15216:2:29","type":"","value":"34"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15152:58:29"},"nodeType":"YulFunctionCall","src":"15152:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15145:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15317:3:29"}],"functionName":{"name":"store_literal_in_memory_d5a66e7313a9aec57702e7cec57da779ab04b86d2407767a8ac34c46f27c720d","nodeType":"YulIdentifier","src":"15228:88:29"},"nodeType":"YulFunctionCall","src":"15228:93:29"},"nodeType":"YulExpressionStatement","src":"15228:93:29"},{"nodeType":"YulAssignment","src":"15330:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15341:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"15346:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15337:3:29"},"nodeType":"YulFunctionCall","src":"15337:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15330:3:29"}]}]},"name":"abi_encode_t_stringliteral_d5a66e7313a9aec57702e7cec57da779ab04b86d2407767a8ac34c46f27c720d_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15123:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15131:3:29","type":""}],"src":"14989:366:29"},{"body":{"nodeType":"YulBlock","src":"15416:53:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15433:3:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15456:5:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"15438:17:29"},"nodeType":"YulFunctionCall","src":"15438:24:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15426:6:29"},"nodeType":"YulFunctionCall","src":"15426:37:29"},"nodeType":"YulExpressionStatement","src":"15426:37:29"}]},"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15404:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"15411:3:29","type":""}],"src":"15361:108:29"},{"body":{"nodeType":"YulBlock","src":"15540:53:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15557:3:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15580:5:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"15562:17:29"},"nodeType":"YulFunctionCall","src":"15562:24:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15550:6:29"},"nodeType":"YulFunctionCall","src":"15550:37:29"},"nodeType":"YulExpressionStatement","src":"15550:37:29"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15528:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"15535:3:29","type":""}],"src":"15475:118:29"},{"body":{"nodeType":"YulBlock","src":"15783:251:29","statements":[{"nodeType":"YulAssignment","src":"15794:102:29","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15883:6:29"},{"name":"pos","nodeType":"YulIdentifier","src":"15892:3:29"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"15801:81:29"},"nodeType":"YulFunctionCall","src":"15801:95:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15794:3:29"}]},{"nodeType":"YulAssignment","src":"15906:102:29","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"15995:6:29"},{"name":"pos","nodeType":"YulIdentifier","src":"16004:3:29"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"15913:81:29"},"nodeType":"YulFunctionCall","src":"15913:95:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15906:3:29"}]},{"nodeType":"YulAssignment","src":"16018:10:29","value":{"name":"pos","nodeType":"YulIdentifier","src":"16025:3:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16018:3:29"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15754:3:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15760:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15768:6:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15779:3:29","type":""}],"src":"15599:435:29"},{"body":{"nodeType":"YulBlock","src":"16138:124:29","statements":[{"nodeType":"YulAssignment","src":"16148:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16160:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16171:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16156:3:29"},"nodeType":"YulFunctionCall","src":"16156:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16148:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16228:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16241:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16252:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16237:3:29"},"nodeType":"YulFunctionCall","src":"16237:17:29"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"16184:43:29"},"nodeType":"YulFunctionCall","src":"16184:71:29"},"nodeType":"YulExpressionStatement","src":"16184:71:29"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16110:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16122:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16133:4:29","type":""}],"src":"16040:222:29"},{"body":{"nodeType":"YulBlock","src":"16422:288:29","statements":[{"nodeType":"YulAssignment","src":"16432:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16444:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16455:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16440:3:29"},"nodeType":"YulFunctionCall","src":"16440:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16432:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16512:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16525:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16536:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16521:3:29"},"nodeType":"YulFunctionCall","src":"16521:17:29"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"16468:43:29"},"nodeType":"YulFunctionCall","src":"16468:71:29"},"nodeType":"YulExpressionStatement","src":"16468:71:29"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"16593:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16606:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16617:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16602:3:29"},"nodeType":"YulFunctionCall","src":"16602:18:29"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"16549:43:29"},"nodeType":"YulFunctionCall","src":"16549:72:29"},"nodeType":"YulExpressionStatement","src":"16549:72:29"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"16675:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16688:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16699:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16684:3:29"},"nodeType":"YulFunctionCall","src":"16684:18:29"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"16631:43:29"},"nodeType":"YulFunctionCall","src":"16631:72:29"},"nodeType":"YulExpressionStatement","src":"16631:72:29"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16378:9:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"16390:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16398:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16406:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16417:4:29","type":""}],"src":"16268:442:29"},{"body":{"nodeType":"YulBlock","src":"16916:440:29","statements":[{"nodeType":"YulAssignment","src":"16926:27:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16938:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16949:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16934:3:29"},"nodeType":"YulFunctionCall","src":"16934:19:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16926:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17007:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17020:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"17031:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17016:3:29"},"nodeType":"YulFunctionCall","src":"17016:17:29"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"16963:43:29"},"nodeType":"YulFunctionCall","src":"16963:71:29"},"nodeType":"YulExpressionStatement","src":"16963:71:29"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"17088:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17101:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"17112:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17097:3:29"},"nodeType":"YulFunctionCall","src":"17097:18:29"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"17044:43:29"},"nodeType":"YulFunctionCall","src":"17044:72:29"},"nodeType":"YulExpressionStatement","src":"17044:72:29"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"17170:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17183:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"17194:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17179:3:29"},"nodeType":"YulFunctionCall","src":"17179:18:29"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"17126:43:29"},"nodeType":"YulFunctionCall","src":"17126:72:29"},"nodeType":"YulExpressionStatement","src":"17126:72:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17219:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"17230:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17215:3:29"},"nodeType":"YulFunctionCall","src":"17215:18:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17239:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"17245:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17235:3:29"},"nodeType":"YulFunctionCall","src":"17235:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17208:6:29"},"nodeType":"YulFunctionCall","src":"17208:48:29"},"nodeType":"YulExpressionStatement","src":"17208:48:29"},{"nodeType":"YulAssignment","src":"17265:84:29","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"17335:6:29"},{"name":"tail","nodeType":"YulIdentifier","src":"17344:4:29"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17273:61:29"},"nodeType":"YulFunctionCall","src":"17273:76:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17265:4:29"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16864:9:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"16876:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"16884:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16892:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16900:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16911:4:29","type":""}],"src":"16716:640:29"},{"body":{"nodeType":"YulBlock","src":"17488:206:29","statements":[{"nodeType":"YulAssignment","src":"17498:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17510:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"17521:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17506:3:29"},"nodeType":"YulFunctionCall","src":"17506:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17498:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17578:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17591:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"17602:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17587:3:29"},"nodeType":"YulFunctionCall","src":"17587:17:29"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"17534:43:29"},"nodeType":"YulFunctionCall","src":"17534:71:29"},"nodeType":"YulExpressionStatement","src":"17534:71:29"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"17659:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17672:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"17683:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17668:3:29"},"nodeType":"YulFunctionCall","src":"17668:18:29"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"17615:43:29"},"nodeType":"YulFunctionCall","src":"17615:72:29"},"nodeType":"YulExpressionStatement","src":"17615:72:29"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17452:9:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"17464:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17472:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17483:4:29","type":""}],"src":"17362:332:29"},{"body":{"nodeType":"YulBlock","src":"17848:225:29","statements":[{"nodeType":"YulAssignment","src":"17858:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17870:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"17881:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17866:3:29"},"nodeType":"YulFunctionCall","src":"17866:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17858:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17905:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"17916:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17901:3:29"},"nodeType":"YulFunctionCall","src":"17901:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17924:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"17930:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17920:3:29"},"nodeType":"YulFunctionCall","src":"17920:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17894:6:29"},"nodeType":"YulFunctionCall","src":"17894:47:29"},"nodeType":"YulExpressionStatement","src":"17894:47:29"},{"nodeType":"YulAssignment","src":"17950:116:29","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18052:6:29"},{"name":"tail","nodeType":"YulIdentifier","src":"18061:4:29"}],"functionName":{"name":"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17958:93:29"},"nodeType":"YulFunctionCall","src":"17958:108:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17950:4:29"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17820:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17832:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17843:4:29","type":""}],"src":"17700:373:29"},{"body":{"nodeType":"YulBlock","src":"18171:118:29","statements":[{"nodeType":"YulAssignment","src":"18181:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18193:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"18204:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18189:3:29"},"nodeType":"YulFunctionCall","src":"18189:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18181:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18255:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18268:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"18279:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18264:3:29"},"nodeType":"YulFunctionCall","src":"18264:17:29"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"18217:37:29"},"nodeType":"YulFunctionCall","src":"18217:65:29"},"nodeType":"YulExpressionStatement","src":"18217:65:29"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18143:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18155:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18166:4:29","type":""}],"src":"18079:210:29"},{"body":{"nodeType":"YulBlock","src":"18413:195:29","statements":[{"nodeType":"YulAssignment","src":"18423:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18435:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"18446:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18431:3:29"},"nodeType":"YulFunctionCall","src":"18431:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18423:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18470:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"18481:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18466:3:29"},"nodeType":"YulFunctionCall","src":"18466:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18489:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"18495:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18485:3:29"},"nodeType":"YulFunctionCall","src":"18485:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18459:6:29"},"nodeType":"YulFunctionCall","src":"18459:47:29"},"nodeType":"YulExpressionStatement","src":"18459:47:29"},{"nodeType":"YulAssignment","src":"18515:86:29","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18587:6:29"},{"name":"tail","nodeType":"YulIdentifier","src":"18596:4:29"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18523:63:29"},"nodeType":"YulFunctionCall","src":"18523:78:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18515:4:29"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18385:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18397:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18408:4:29","type":""}],"src":"18295:313:29"},{"body":{"nodeType":"YulBlock","src":"18785:248:29","statements":[{"nodeType":"YulAssignment","src":"18795:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18807:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"18818:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18803:3:29"},"nodeType":"YulFunctionCall","src":"18803:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18795:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18842:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"18853:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18838:3:29"},"nodeType":"YulFunctionCall","src":"18838:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18861:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"18867:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18857:3:29"},"nodeType":"YulFunctionCall","src":"18857:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18831:6:29"},"nodeType":"YulFunctionCall","src":"18831:47:29"},"nodeType":"YulExpressionStatement","src":"18831:47:29"},{"nodeType":"YulAssignment","src":"18887:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19021:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18895:124:29"},"nodeType":"YulFunctionCall","src":"18895:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18887:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18765:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18780:4:29","type":""}],"src":"18614:419:29"},{"body":{"nodeType":"YulBlock","src":"19210:248:29","statements":[{"nodeType":"YulAssignment","src":"19220:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19232:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"19243:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19228:3:29"},"nodeType":"YulFunctionCall","src":"19228:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19220:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19267:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"19278:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19263:3:29"},"nodeType":"YulFunctionCall","src":"19263:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19286:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"19292:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19282:3:29"},"nodeType":"YulFunctionCall","src":"19282:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19256:6:29"},"nodeType":"YulFunctionCall","src":"19256:47:29"},"nodeType":"YulExpressionStatement","src":"19256:47:29"},{"nodeType":"YulAssignment","src":"19312:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19446:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19320:124:29"},"nodeType":"YulFunctionCall","src":"19320:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19312:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19190:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19205:4:29","type":""}],"src":"19039:419:29"},{"body":{"nodeType":"YulBlock","src":"19635:248:29","statements":[{"nodeType":"YulAssignment","src":"19645:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19657:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"19668:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19653:3:29"},"nodeType":"YulFunctionCall","src":"19653:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19645:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19692:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"19703:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19688:3:29"},"nodeType":"YulFunctionCall","src":"19688:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19711:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"19717:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19707:3:29"},"nodeType":"YulFunctionCall","src":"19707:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19681:6:29"},"nodeType":"YulFunctionCall","src":"19681:47:29"},"nodeType":"YulExpressionStatement","src":"19681:47:29"},{"nodeType":"YulAssignment","src":"19737:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19871:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19745:124:29"},"nodeType":"YulFunctionCall","src":"19745:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19737:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19615:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19630:4:29","type":""}],"src":"19464:419:29"},{"body":{"nodeType":"YulBlock","src":"20060:248:29","statements":[{"nodeType":"YulAssignment","src":"20070:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20082:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"20093:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20078:3:29"},"nodeType":"YulFunctionCall","src":"20078:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20070:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20117:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"20128:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20113:3:29"},"nodeType":"YulFunctionCall","src":"20113:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20136:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"20142:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20132:3:29"},"nodeType":"YulFunctionCall","src":"20132:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20106:6:29"},"nodeType":"YulFunctionCall","src":"20106:47:29"},"nodeType":"YulExpressionStatement","src":"20106:47:29"},{"nodeType":"YulAssignment","src":"20162:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20296:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20170:124:29"},"nodeType":"YulFunctionCall","src":"20170:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20162:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20040:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20055:4:29","type":""}],"src":"19889:419:29"},{"body":{"nodeType":"YulBlock","src":"20485:248:29","statements":[{"nodeType":"YulAssignment","src":"20495:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20507:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"20518:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20503:3:29"},"nodeType":"YulFunctionCall","src":"20503:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20495:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20542:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"20553:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20538:3:29"},"nodeType":"YulFunctionCall","src":"20538:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20561:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"20567:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20557:3:29"},"nodeType":"YulFunctionCall","src":"20557:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20531:6:29"},"nodeType":"YulFunctionCall","src":"20531:47:29"},"nodeType":"YulExpressionStatement","src":"20531:47:29"},{"nodeType":"YulAssignment","src":"20587:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20721:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20595:124:29"},"nodeType":"YulFunctionCall","src":"20595:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20587:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20465:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20480:4:29","type":""}],"src":"20314:419:29"},{"body":{"nodeType":"YulBlock","src":"20910:248:29","statements":[{"nodeType":"YulAssignment","src":"20920:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20932:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"20943:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20928:3:29"},"nodeType":"YulFunctionCall","src":"20928:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20920:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20967:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"20978:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20963:3:29"},"nodeType":"YulFunctionCall","src":"20963:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20986:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"20992:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20982:3:29"},"nodeType":"YulFunctionCall","src":"20982:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20956:6:29"},"nodeType":"YulFunctionCall","src":"20956:47:29"},"nodeType":"YulExpressionStatement","src":"20956:47:29"},{"nodeType":"YulAssignment","src":"21012:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21146:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21020:124:29"},"nodeType":"YulFunctionCall","src":"21020:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21012:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20890:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20905:4:29","type":""}],"src":"20739:419:29"},{"body":{"nodeType":"YulBlock","src":"21335:248:29","statements":[{"nodeType":"YulAssignment","src":"21345:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21357:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"21368:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21353:3:29"},"nodeType":"YulFunctionCall","src":"21353:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21345:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21392:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"21403:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21388:3:29"},"nodeType":"YulFunctionCall","src":"21388:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21411:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"21417:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21407:3:29"},"nodeType":"YulFunctionCall","src":"21407:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21381:6:29"},"nodeType":"YulFunctionCall","src":"21381:47:29"},"nodeType":"YulExpressionStatement","src":"21381:47:29"},{"nodeType":"YulAssignment","src":"21437:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21571:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21445:124:29"},"nodeType":"YulFunctionCall","src":"21445:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21437:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21315:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21330:4:29","type":""}],"src":"21164:419:29"},{"body":{"nodeType":"YulBlock","src":"21760:248:29","statements":[{"nodeType":"YulAssignment","src":"21770:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21782:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"21793:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21778:3:29"},"nodeType":"YulFunctionCall","src":"21778:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21770:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21817:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"21828:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21813:3:29"},"nodeType":"YulFunctionCall","src":"21813:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21836:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"21842:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21832:3:29"},"nodeType":"YulFunctionCall","src":"21832:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21806:6:29"},"nodeType":"YulFunctionCall","src":"21806:47:29"},"nodeType":"YulExpressionStatement","src":"21806:47:29"},{"nodeType":"YulAssignment","src":"21862:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21996:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21870:124:29"},"nodeType":"YulFunctionCall","src":"21870:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21862:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21740:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21755:4:29","type":""}],"src":"21589:419:29"},{"body":{"nodeType":"YulBlock","src":"22185:248:29","statements":[{"nodeType":"YulAssignment","src":"22195:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22207:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"22218:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22203:3:29"},"nodeType":"YulFunctionCall","src":"22203:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22195:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22242:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"22253:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22238:3:29"},"nodeType":"YulFunctionCall","src":"22238:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22261:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"22267:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22257:3:29"},"nodeType":"YulFunctionCall","src":"22257:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22231:6:29"},"nodeType":"YulFunctionCall","src":"22231:47:29"},"nodeType":"YulExpressionStatement","src":"22231:47:29"},{"nodeType":"YulAssignment","src":"22287:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22421:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22295:124:29"},"nodeType":"YulFunctionCall","src":"22295:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22287:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22165:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22180:4:29","type":""}],"src":"22014:419:29"},{"body":{"nodeType":"YulBlock","src":"22610:248:29","statements":[{"nodeType":"YulAssignment","src":"22620:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22632:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"22643:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22628:3:29"},"nodeType":"YulFunctionCall","src":"22628:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22620:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22667:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"22678:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22663:3:29"},"nodeType":"YulFunctionCall","src":"22663:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22686:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"22692:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22682:3:29"},"nodeType":"YulFunctionCall","src":"22682:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22656:6:29"},"nodeType":"YulFunctionCall","src":"22656:47:29"},"nodeType":"YulExpressionStatement","src":"22656:47:29"},{"nodeType":"YulAssignment","src":"22712:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22846:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22720:124:29"},"nodeType":"YulFunctionCall","src":"22720:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22712:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22590:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22605:4:29","type":""}],"src":"22439:419:29"},{"body":{"nodeType":"YulBlock","src":"23035:248:29","statements":[{"nodeType":"YulAssignment","src":"23045:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23057:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"23068:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23053:3:29"},"nodeType":"YulFunctionCall","src":"23053:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23045:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23092:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"23103:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23088:3:29"},"nodeType":"YulFunctionCall","src":"23088:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23111:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"23117:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23107:3:29"},"nodeType":"YulFunctionCall","src":"23107:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23081:6:29"},"nodeType":"YulFunctionCall","src":"23081:47:29"},"nodeType":"YulExpressionStatement","src":"23081:47:29"},{"nodeType":"YulAssignment","src":"23137:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23271:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23145:124:29"},"nodeType":"YulFunctionCall","src":"23145:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23137:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23015:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23030:4:29","type":""}],"src":"22864:419:29"},{"body":{"nodeType":"YulBlock","src":"23460:248:29","statements":[{"nodeType":"YulAssignment","src":"23470:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23482:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"23493:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23478:3:29"},"nodeType":"YulFunctionCall","src":"23478:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23470:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23517:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"23528:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23513:3:29"},"nodeType":"YulFunctionCall","src":"23513:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23536:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"23542:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23532:3:29"},"nodeType":"YulFunctionCall","src":"23532:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23506:6:29"},"nodeType":"YulFunctionCall","src":"23506:47:29"},"nodeType":"YulExpressionStatement","src":"23506:47:29"},{"nodeType":"YulAssignment","src":"23562:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23696:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23570:124:29"},"nodeType":"YulFunctionCall","src":"23570:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23562:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23440:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23455:4:29","type":""}],"src":"23289:419:29"},{"body":{"nodeType":"YulBlock","src":"23885:248:29","statements":[{"nodeType":"YulAssignment","src":"23895:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23907:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"23918:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23903:3:29"},"nodeType":"YulFunctionCall","src":"23903:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23895:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23942:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"23953:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23938:3:29"},"nodeType":"YulFunctionCall","src":"23938:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23961:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"23967:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23957:3:29"},"nodeType":"YulFunctionCall","src":"23957:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23931:6:29"},"nodeType":"YulFunctionCall","src":"23931:47:29"},"nodeType":"YulExpressionStatement","src":"23931:47:29"},{"nodeType":"YulAssignment","src":"23987:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24121:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23995:124:29"},"nodeType":"YulFunctionCall","src":"23995:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23987:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23865:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23880:4:29","type":""}],"src":"23714:419:29"},{"body":{"nodeType":"YulBlock","src":"24310:248:29","statements":[{"nodeType":"YulAssignment","src":"24320:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24332:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"24343:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24328:3:29"},"nodeType":"YulFunctionCall","src":"24328:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24320:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24367:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"24378:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24363:3:29"},"nodeType":"YulFunctionCall","src":"24363:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24386:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"24392:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24382:3:29"},"nodeType":"YulFunctionCall","src":"24382:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24356:6:29"},"nodeType":"YulFunctionCall","src":"24356:47:29"},"nodeType":"YulExpressionStatement","src":"24356:47:29"},{"nodeType":"YulAssignment","src":"24412:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24546:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_d5a66e7313a9aec57702e7cec57da779ab04b86d2407767a8ac34c46f27c720d_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24420:124:29"},"nodeType":"YulFunctionCall","src":"24420:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24412:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_d5a66e7313a9aec57702e7cec57da779ab04b86d2407767a8ac34c46f27c720d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24290:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24305:4:29","type":""}],"src":"24139:419:29"},{"body":{"nodeType":"YulBlock","src":"24662:124:29","statements":[{"nodeType":"YulAssignment","src":"24672:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24684:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"24695:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24680:3:29"},"nodeType":"YulFunctionCall","src":"24680:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24672:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"24752:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24765:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"24776:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24761:3:29"},"nodeType":"YulFunctionCall","src":"24761:17:29"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"24708:43:29"},"nodeType":"YulFunctionCall","src":"24708:71:29"},"nodeType":"YulExpressionStatement","src":"24708:71:29"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24634:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"24646:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24657:4:29","type":""}],"src":"24564:222:29"},{"body":{"nodeType":"YulBlock","src":"24833:88:29","statements":[{"nodeType":"YulAssignment","src":"24843:30:29","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"24853:18:29"},"nodeType":"YulFunctionCall","src":"24853:20:29"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24843:6:29"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24902:6:29"},{"name":"size","nodeType":"YulIdentifier","src":"24910:4:29"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"24882:19:29"},"nodeType":"YulFunctionCall","src":"24882:33:29"},"nodeType":"YulExpressionStatement","src":"24882:33:29"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"24817:4:29","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"24826:6:29","type":""}],"src":"24792:129:29"},{"body":{"nodeType":"YulBlock","src":"24967:35:29","statements":[{"nodeType":"YulAssignment","src":"24977:19:29","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24993:2:29","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24987:5:29"},"nodeType":"YulFunctionCall","src":"24987:9:29"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24977:6:29"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"24960:6:29","type":""}],"src":"24927:75:29"},{"body":{"nodeType":"YulBlock","src":"25074:241:29","statements":[{"body":{"nodeType":"YulBlock","src":"25179:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"25181:16:29"},"nodeType":"YulFunctionCall","src":"25181:18:29"},"nodeType":"YulExpressionStatement","src":"25181:18:29"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"25151:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"25159:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"25148:2:29"},"nodeType":"YulFunctionCall","src":"25148:30:29"},"nodeType":"YulIf","src":"25145:2:29"},{"nodeType":"YulAssignment","src":"25211:37:29","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"25241:6:29"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"25219:21:29"},"nodeType":"YulFunctionCall","src":"25219:29:29"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"25211:4:29"}]},{"nodeType":"YulAssignment","src":"25285:23:29","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"25297:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"25303:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25293:3:29"},"nodeType":"YulFunctionCall","src":"25293:15:29"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"25285:4:29"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"25058:6:29","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"25069:4:29","type":""}],"src":"25008:307:29"},{"body":{"nodeType":"YulBlock","src":"25388:241:29","statements":[{"body":{"nodeType":"YulBlock","src":"25493:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"25495:16:29"},"nodeType":"YulFunctionCall","src":"25495:18:29"},"nodeType":"YulExpressionStatement","src":"25495:18:29"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"25465:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"25473:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"25462:2:29"},"nodeType":"YulFunctionCall","src":"25462:30:29"},"nodeType":"YulIf","src":"25459:2:29"},{"nodeType":"YulAssignment","src":"25525:37:29","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"25555:6:29"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"25533:21:29"},"nodeType":"YulFunctionCall","src":"25533:29:29"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"25525:4:29"}]},{"nodeType":"YulAssignment","src":"25599:23:29","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"25611:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"25617:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25607:3:29"},"nodeType":"YulFunctionCall","src":"25607:15:29"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"25599:4:29"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"25372:6:29","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"25383:4:29","type":""}],"src":"25321:308:29"},{"body":{"nodeType":"YulBlock","src":"25707:60:29","statements":[{"nodeType":"YulAssignment","src":"25717:11:29","value":{"name":"ptr","nodeType":"YulIdentifier","src":"25725:3:29"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"25717:4:29"}]},{"nodeType":"YulAssignment","src":"25738:22:29","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"25750:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"25755:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25746:3:29"},"nodeType":"YulFunctionCall","src":"25746:14:29"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"25738:4:29"}]}]},"name":"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"25694:3:29","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"25702:4:29","type":""}],"src":"25635:132:29"},{"body":{"nodeType":"YulBlock","src":"25847:40:29","statements":[{"nodeType":"YulAssignment","src":"25858:22:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25874:5:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"25868:5:29"},"nodeType":"YulFunctionCall","src":"25868:12:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"25858:6:29"}]}]},"name":"array_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"25830:5:29","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"25840:6:29","type":""}],"src":"25773:114:29"},{"body":{"nodeType":"YulBlock","src":"25951:40:29","statements":[{"nodeType":"YulAssignment","src":"25962:22:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25978:5:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"25972:5:29"},"nodeType":"YulFunctionCall","src":"25972:12:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"25962:6:29"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"25934:5:29","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"25944:6:29","type":""}],"src":"25893:98:29"},{"body":{"nodeType":"YulBlock","src":"26056:40:29","statements":[{"nodeType":"YulAssignment","src":"26067:22:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26083:5:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"26077:5:29"},"nodeType":"YulFunctionCall","src":"26077:12:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"26067:6:29"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"26039:5:29","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"26049:6:29","type":""}],"src":"25997:99:29"},{"body":{"nodeType":"YulBlock","src":"26177:38:29","statements":[{"nodeType":"YulAssignment","src":"26187:22:29","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"26199:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"26204:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26195:3:29"},"nodeType":"YulFunctionCall","src":"26195:14:29"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"26187:4:29"}]}]},"name":"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"26164:3:29","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"26172:4:29","type":""}],"src":"26102:113:29"},{"body":{"nodeType":"YulBlock","src":"26332:73:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26349:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"26354:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26342:6:29"},"nodeType":"YulFunctionCall","src":"26342:19:29"},"nodeType":"YulExpressionStatement","src":"26342:19:29"},{"nodeType":"YulAssignment","src":"26370:29:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26389:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"26394:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26385:3:29"},"nodeType":"YulFunctionCall","src":"26385:14:29"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"26370:11:29"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"26304:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"26309:6:29","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"26320:11:29","type":""}],"src":"26221:184:29"},{"body":{"nodeType":"YulBlock","src":"26506:73:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26523:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"26528:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26516:6:29"},"nodeType":"YulFunctionCall","src":"26516:19:29"},"nodeType":"YulExpressionStatement","src":"26516:19:29"},{"nodeType":"YulAssignment","src":"26544:29:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26563:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"26568:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26559:3:29"},"nodeType":"YulFunctionCall","src":"26559:14:29"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"26544:11:29"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"26478:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"26483:6:29","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"26494:11:29","type":""}],"src":"26411:168:29"},{"body":{"nodeType":"YulBlock","src":"26681:73:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26698:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"26703:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26691:6:29"},"nodeType":"YulFunctionCall","src":"26691:19:29"},"nodeType":"YulExpressionStatement","src":"26691:19:29"},{"nodeType":"YulAssignment","src":"26719:29:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26738:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"26743:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26734:3:29"},"nodeType":"YulFunctionCall","src":"26734:14:29"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"26719:11:29"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"26653:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"26658:6:29","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"26669:11:29","type":""}],"src":"26585:169:29"},{"body":{"nodeType":"YulBlock","src":"26874:34:29","statements":[{"nodeType":"YulAssignment","src":"26884:18:29","value":{"name":"pos","nodeType":"YulIdentifier","src":"26899:3:29"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"26884:11:29"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"26846:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"26851:6:29","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"26862:11:29","type":""}],"src":"26760:148:29"},{"body":{"nodeType":"YulBlock","src":"26958:261:29","statements":[{"nodeType":"YulAssignment","src":"26968:25:29","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"26991:1:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"26973:17:29"},"nodeType":"YulFunctionCall","src":"26973:20:29"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"26968:1:29"}]},{"nodeType":"YulAssignment","src":"27002:25:29","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"27025:1:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"27007:17:29"},"nodeType":"YulFunctionCall","src":"27007:20:29"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"27002:1:29"}]},{"body":{"nodeType":"YulBlock","src":"27165:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"27167:16:29"},"nodeType":"YulFunctionCall","src":"27167:18:29"},"nodeType":"YulExpressionStatement","src":"27167:18:29"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"27086:1:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27093:66:29","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"y","nodeType":"YulIdentifier","src":"27161:1:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27089:3:29"},"nodeType":"YulFunctionCall","src":"27089:74:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"27083:2:29"},"nodeType":"YulFunctionCall","src":"27083:81:29"},"nodeType":"YulIf","src":"27080:2:29"},{"nodeType":"YulAssignment","src":"27197:16:29","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"27208:1:29"},{"name":"y","nodeType":"YulIdentifier","src":"27211:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27204:3:29"},"nodeType":"YulFunctionCall","src":"27204:9:29"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"27197:3:29"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"26945:1:29","type":""},{"name":"y","nodeType":"YulTypedName","src":"26948:1:29","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"26954:3:29","type":""}],"src":"26914:305:29"},{"body":{"nodeType":"YulBlock","src":"27270:146:29","statements":[{"nodeType":"YulAssignment","src":"27280:25:29","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"27303:1:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"27285:17:29"},"nodeType":"YulFunctionCall","src":"27285:20:29"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"27280:1:29"}]},{"nodeType":"YulAssignment","src":"27314:25:29","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"27337:1:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"27319:17:29"},"nodeType":"YulFunctionCall","src":"27319:20:29"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"27314:1:29"}]},{"body":{"nodeType":"YulBlock","src":"27361:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"27363:16:29"},"nodeType":"YulFunctionCall","src":"27363:18:29"},"nodeType":"YulExpressionStatement","src":"27363:18:29"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"27355:1:29"},{"name":"y","nodeType":"YulIdentifier","src":"27358:1:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"27352:2:29"},"nodeType":"YulFunctionCall","src":"27352:8:29"},"nodeType":"YulIf","src":"27349:2:29"},{"nodeType":"YulAssignment","src":"27393:17:29","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"27405:1:29"},{"name":"y","nodeType":"YulIdentifier","src":"27408:1:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27401:3:29"},"nodeType":"YulFunctionCall","src":"27401:9:29"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"27393:4:29"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"27256:1:29","type":""},{"name":"y","nodeType":"YulTypedName","src":"27259:1:29","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"27265:4:29","type":""}],"src":"27225:191:29"},{"body":{"nodeType":"YulBlock","src":"27467:51:29","statements":[{"nodeType":"YulAssignment","src":"27477:35:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27506:5:29"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"27488:17:29"},"nodeType":"YulFunctionCall","src":"27488:24:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"27477:7:29"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"27449:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"27459:7:29","type":""}],"src":"27422:96:29"},{"body":{"nodeType":"YulBlock","src":"27566:48:29","statements":[{"nodeType":"YulAssignment","src":"27576:32:29","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27601:5:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"27594:6:29"},"nodeType":"YulFunctionCall","src":"27594:13:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"27587:6:29"},"nodeType":"YulFunctionCall","src":"27587:21:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"27576:7:29"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"27548:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"27558:7:29","type":""}],"src":"27524:90:29"},{"body":{"nodeType":"YulBlock","src":"27664:105:29","statements":[{"nodeType":"YulAssignment","src":"27674:89:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27689:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"27696:66:29","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"27685:3:29"},"nodeType":"YulFunctionCall","src":"27685:78:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"27674:7:29"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"27646:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"27656:7:29","type":""}],"src":"27620:149:29"},{"body":{"nodeType":"YulBlock","src":"27820:81:29","statements":[{"nodeType":"YulAssignment","src":"27830:65:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27845:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"27852:42:29","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"27841:3:29"},"nodeType":"YulFunctionCall","src":"27841:54:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"27830:7:29"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"27802:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"27812:7:29","type":""}],"src":"27775:126:29"},{"body":{"nodeType":"YulBlock","src":"27952:32:29","statements":[{"nodeType":"YulAssignment","src":"27962:16:29","value":{"name":"value","nodeType":"YulIdentifier","src":"27973:5:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"27962:7:29"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"27934:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"27944:7:29","type":""}],"src":"27907:77:29"},{"body":{"nodeType":"YulBlock","src":"28041:103:29","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"28064:3:29"},{"name":"src","nodeType":"YulIdentifier","src":"28069:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"28074:6:29"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"28051:12:29"},"nodeType":"YulFunctionCall","src":"28051:30:29"},"nodeType":"YulExpressionStatement","src":"28051:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"28122:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"28127:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28118:3:29"},"nodeType":"YulFunctionCall","src":"28118:16:29"},{"kind":"number","nodeType":"YulLiteral","src":"28136:1:29","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28111:6:29"},"nodeType":"YulFunctionCall","src":"28111:27:29"},"nodeType":"YulExpressionStatement","src":"28111:27:29"}]},"name":"copy_calldata_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"28023:3:29","type":""},{"name":"dst","nodeType":"YulTypedName","src":"28028:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"28033:6:29","type":""}],"src":"27990:154:29"},{"body":{"nodeType":"YulBlock","src":"28199:258:29","statements":[{"nodeType":"YulVariableDeclaration","src":"28209:10:29","value":{"kind":"number","nodeType":"YulLiteral","src":"28218:1:29","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"28213:1:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"28278:63:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"28303:3:29"},{"name":"i","nodeType":"YulIdentifier","src":"28308:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28299:3:29"},"nodeType":"YulFunctionCall","src":"28299:11:29"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"28322:3:29"},{"name":"i","nodeType":"YulIdentifier","src":"28327:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28318:3:29"},"nodeType":"YulFunctionCall","src":"28318:11:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"28312:5:29"},"nodeType":"YulFunctionCall","src":"28312:18:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28292:6:29"},"nodeType":"YulFunctionCall","src":"28292:39:29"},"nodeType":"YulExpressionStatement","src":"28292:39:29"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"28239:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"28242:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"28236:2:29"},"nodeType":"YulFunctionCall","src":"28236:13:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"28250:19:29","statements":[{"nodeType":"YulAssignment","src":"28252:15:29","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"28261:1:29"},{"kind":"number","nodeType":"YulLiteral","src":"28264:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28257:3:29"},"nodeType":"YulFunctionCall","src":"28257:10:29"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"28252:1:29"}]}]},"pre":{"nodeType":"YulBlock","src":"28232:3:29","statements":[]},"src":"28228:113:29"},{"body":{"nodeType":"YulBlock","src":"28375:76:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"28425:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"28430:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28421:3:29"},"nodeType":"YulFunctionCall","src":"28421:16:29"},{"kind":"number","nodeType":"YulLiteral","src":"28439:1:29","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28414:6:29"},"nodeType":"YulFunctionCall","src":"28414:27:29"},"nodeType":"YulExpressionStatement","src":"28414:27:29"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"28356:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"28359:6:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"28353:2:29"},"nodeType":"YulFunctionCall","src":"28353:13:29"},"nodeType":"YulIf","src":"28350:2:29"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"28181:3:29","type":""},{"name":"dst","nodeType":"YulTypedName","src":"28186:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"28191:6:29","type":""}],"src":"28150:307:29"},{"body":{"nodeType":"YulBlock","src":"28514:269:29","statements":[{"nodeType":"YulAssignment","src":"28524:22:29","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"28538:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"28544:1:29","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"28534:3:29"},"nodeType":"YulFunctionCall","src":"28534:12:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"28524:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"28555:38:29","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"28585:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"28591:1:29","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"28581:3:29"},"nodeType":"YulFunctionCall","src":"28581:12:29"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"28559:18:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"28632:51:29","statements":[{"nodeType":"YulAssignment","src":"28646:27:29","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"28660:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"28668:4:29","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"28656:3:29"},"nodeType":"YulFunctionCall","src":"28656:17:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"28646:6:29"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"28612:18:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"28605:6:29"},"nodeType":"YulFunctionCall","src":"28605:26:29"},"nodeType":"YulIf","src":"28602:2:29"},{"body":{"nodeType":"YulBlock","src":"28735:42:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"28749:16:29"},"nodeType":"YulFunctionCall","src":"28749:18:29"},"nodeType":"YulExpressionStatement","src":"28749:18:29"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"28699:18:29"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"28722:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"28730:2:29","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"28719:2:29"},"nodeType":"YulFunctionCall","src":"28719:14:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"28696:2:29"},"nodeType":"YulFunctionCall","src":"28696:38:29"},"nodeType":"YulIf","src":"28693:2:29"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"28498:4:29","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"28507:6:29","type":""}],"src":"28463:320:29"},{"body":{"nodeType":"YulBlock","src":"28832:238:29","statements":[{"nodeType":"YulVariableDeclaration","src":"28842:58:29","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"28864:6:29"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"28894:4:29"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"28872:21:29"},"nodeType":"YulFunctionCall","src":"28872:27:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28860:3:29"},"nodeType":"YulFunctionCall","src":"28860:40:29"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"28846:10:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"29011:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"29013:16:29"},"nodeType":"YulFunctionCall","src":"29013:18:29"},"nodeType":"YulExpressionStatement","src":"29013:18:29"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"28954:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"28966:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"28951:2:29"},"nodeType":"YulFunctionCall","src":"28951:34:29"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"28990:10:29"},{"name":"memPtr","nodeType":"YulIdentifier","src":"29002:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"28987:2:29"},"nodeType":"YulFunctionCall","src":"28987:22:29"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"28948:2:29"},"nodeType":"YulFunctionCall","src":"28948:62:29"},"nodeType":"YulIf","src":"28945:2:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29049:2:29","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"29053:10:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29042:6:29"},"nodeType":"YulFunctionCall","src":"29042:22:29"},"nodeType":"YulExpressionStatement","src":"29042:22:29"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"28818:6:29","type":""},{"name":"size","nodeType":"YulTypedName","src":"28826:4:29","type":""}],"src":"28789:281:29"},{"body":{"nodeType":"YulBlock","src":"29119:190:29","statements":[{"nodeType":"YulAssignment","src":"29129:33:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29156:5:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"29138:17:29"},"nodeType":"YulFunctionCall","src":"29138:24:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"29129:5:29"}]},{"body":{"nodeType":"YulBlock","src":"29252:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"29254:16:29"},"nodeType":"YulFunctionCall","src":"29254:18:29"},"nodeType":"YulExpressionStatement","src":"29254:18:29"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29177:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"29184:66:29","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"29174:2:29"},"nodeType":"YulFunctionCall","src":"29174:77:29"},"nodeType":"YulIf","src":"29171:2:29"},{"nodeType":"YulAssignment","src":"29283:20:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29294:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"29301:1:29","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29290:3:29"},"nodeType":"YulFunctionCall","src":"29290:13:29"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"29283:3:29"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"29105:5:29","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"29115:3:29","type":""}],"src":"29076:233:29"},{"body":{"nodeType":"YulBlock","src":"29343:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29360:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"29363:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29353:6:29"},"nodeType":"YulFunctionCall","src":"29353:88:29"},"nodeType":"YulExpressionStatement","src":"29353:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29457:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"29460:4:29","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29450:6:29"},"nodeType":"YulFunctionCall","src":"29450:15:29"},"nodeType":"YulExpressionStatement","src":"29450:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29481:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"29484:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"29474:6:29"},"nodeType":"YulFunctionCall","src":"29474:15:29"},"nodeType":"YulExpressionStatement","src":"29474:15:29"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"29315:180:29"},{"body":{"nodeType":"YulBlock","src":"29529:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29546:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"29549:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29539:6:29"},"nodeType":"YulFunctionCall","src":"29539:88:29"},"nodeType":"YulExpressionStatement","src":"29539:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29643:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"29646:4:29","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29636:6:29"},"nodeType":"YulFunctionCall","src":"29636:15:29"},"nodeType":"YulExpressionStatement","src":"29636:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29667:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"29670:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"29660:6:29"},"nodeType":"YulFunctionCall","src":"29660:15:29"},"nodeType":"YulExpressionStatement","src":"29660:15:29"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"29501:180:29"},{"body":{"nodeType":"YulBlock","src":"29715:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29732:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"29735:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29725:6:29"},"nodeType":"YulFunctionCall","src":"29725:88:29"},"nodeType":"YulExpressionStatement","src":"29725:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29829:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"29832:4:29","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29822:6:29"},"nodeType":"YulFunctionCall","src":"29822:15:29"},"nodeType":"YulExpressionStatement","src":"29822:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29853:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"29856:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"29846:6:29"},"nodeType":"YulFunctionCall","src":"29846:15:29"},"nodeType":"YulExpressionStatement","src":"29846:15:29"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"29687:180:29"},{"body":{"nodeType":"YulBlock","src":"29921:54:29","statements":[{"nodeType":"YulAssignment","src":"29931:38:29","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29949:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"29956:2:29","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29945:3:29"},"nodeType":"YulFunctionCall","src":"29945:14:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29965:2:29","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"29961:3:29"},"nodeType":"YulFunctionCall","src":"29961:7:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"29941:3:29"},"nodeType":"YulFunctionCall","src":"29941:28:29"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"29931:6:29"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"29904:5:29","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"29914:6:29","type":""}],"src":"29873:102:29"},{"body":{"nodeType":"YulBlock","src":"30087:126:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30109:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"30117:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30105:3:29"},"nodeType":"YulFunctionCall","src":"30105:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"30121:34:29","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30098:6:29"},"nodeType":"YulFunctionCall","src":"30098:58:29"},"nodeType":"YulExpressionStatement","src":"30098:58:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30177:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"30185:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30173:3:29"},"nodeType":"YulFunctionCall","src":"30173:15:29"},{"kind":"string","nodeType":"YulLiteral","src":"30190:15:29","type":"","value":"r or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30166:6:29"},"nodeType":"YulFunctionCall","src":"30166:40:29"},"nodeType":"YulExpressionStatement","src":"30166:40:29"}]},"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"30079:6:29","type":""}],"src":"29981:232:29"},{"body":{"nodeType":"YulBlock","src":"30325:131:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30347:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"30355:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30343:3:29"},"nodeType":"YulFunctionCall","src":"30343:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"30359:34:29","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30336:6:29"},"nodeType":"YulFunctionCall","src":"30336:58:29"},"nodeType":"YulExpressionStatement","src":"30336:58:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30415:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"30423:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30411:3:29"},"nodeType":"YulFunctionCall","src":"30411:15:29"},{"kind":"string","nodeType":"YulLiteral","src":"30428:20:29","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30404:6:29"},"nodeType":"YulFunctionCall","src":"30404:45:29"},"nodeType":"YulExpressionStatement","src":"30404:45:29"}]},"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"30317:6:29","type":""}],"src":"30219:237:29"},{"body":{"nodeType":"YulBlock","src":"30568:118:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30590:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"30598:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30586:3:29"},"nodeType":"YulFunctionCall","src":"30586:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"30602:34:29","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30579:6:29"},"nodeType":"YulFunctionCall","src":"30579:58:29"},"nodeType":"YulExpressionStatement","src":"30579:58:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30658:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"30666:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30654:3:29"},"nodeType":"YulFunctionCall","src":"30654:15:29"},{"kind":"string","nodeType":"YulLiteral","src":"30671:7:29","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30647:6:29"},"nodeType":"YulFunctionCall","src":"30647:32:29"},"nodeType":"YulExpressionStatement","src":"30647:32:29"}]},"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"30560:6:29","type":""}],"src":"30462:224:29"},{"body":{"nodeType":"YulBlock","src":"30798:72:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30820:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"30828:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30816:3:29"},"nodeType":"YulFunctionCall","src":"30816:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"30832:30:29","type":"","value":"ERC721: token already minted"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30809:6:29"},"nodeType":"YulFunctionCall","src":"30809:54:29"},"nodeType":"YulExpressionStatement","src":"30809:54:29"}]},"name":"store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"30790:6:29","type":""}],"src":"30692:178:29"},{"body":{"nodeType":"YulBlock","src":"30982:117:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31004:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"31012:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31000:3:29"},"nodeType":"YulFunctionCall","src":"31000:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"31016:34:29","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30993:6:29"},"nodeType":"YulFunctionCall","src":"30993:58:29"},"nodeType":"YulExpressionStatement","src":"30993:58:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31072:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"31080:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31068:3:29"},"nodeType":"YulFunctionCall","src":"31068:15:29"},{"kind":"string","nodeType":"YulLiteral","src":"31085:6:29","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31061:6:29"},"nodeType":"YulFunctionCall","src":"31061:31:29"},"nodeType":"YulExpressionStatement","src":"31061:31:29"}]},"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"30974:6:29","type":""}],"src":"30876:223:29"},{"body":{"nodeType":"YulBlock","src":"31211:69:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31233:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"31241:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31229:3:29"},"nodeType":"YulFunctionCall","src":"31229:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"31245:27:29","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31222:6:29"},"nodeType":"YulFunctionCall","src":"31222:51:29"},"nodeType":"YulExpressionStatement","src":"31222:51:29"}]},"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"31203:6:29","type":""}],"src":"31105:175:29"},{"body":{"nodeType":"YulBlock","src":"31392:122:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31414:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"31422:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31410:3:29"},"nodeType":"YulFunctionCall","src":"31410:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"31426:34:29","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31403:6:29"},"nodeType":"YulFunctionCall","src":"31403:58:29"},"nodeType":"YulExpressionStatement","src":"31403:58:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31482:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"31490:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31478:3:29"},"nodeType":"YulFunctionCall","src":"31478:15:29"},{"kind":"string","nodeType":"YulLiteral","src":"31495:11:29","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31471:6:29"},"nodeType":"YulFunctionCall","src":"31471:36:29"},"nodeType":"YulExpressionStatement","src":"31471:36:29"}]},"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"31384:6:29","type":""}],"src":"31286:228:29"},{"body":{"nodeType":"YulBlock","src":"31626:127:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31648:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"31656:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31644:3:29"},"nodeType":"YulFunctionCall","src":"31644:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"31660:34:29","type":"","value":"ERC721URIStorage: URI set of non"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31637:6:29"},"nodeType":"YulFunctionCall","src":"31637:58:29"},"nodeType":"YulExpressionStatement","src":"31637:58:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31716:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"31724:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31712:3:29"},"nodeType":"YulFunctionCall","src":"31712:15:29"},{"kind":"string","nodeType":"YulLiteral","src":"31729:16:29","type":"","value":"existent token"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31705:6:29"},"nodeType":"YulFunctionCall","src":"31705:41:29"},"nodeType":"YulExpressionStatement","src":"31705:41:29"}]},"name":"store_literal_in_memory_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"31618:6:29","type":""}],"src":"31520:233:29"},{"body":{"nodeType":"YulBlock","src":"31865:76:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31887:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"31895:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31883:3:29"},"nodeType":"YulFunctionCall","src":"31883:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"31899:34:29","type":"","value":"ERC721: mint to the zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31876:6:29"},"nodeType":"YulFunctionCall","src":"31876:58:29"},"nodeType":"YulExpressionStatement","src":"31876:58:29"}]},"name":"store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"31857:6:29","type":""}],"src":"31759:182:29"},{"body":{"nodeType":"YulBlock","src":"32053:68:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"32075:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"32083:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32071:3:29"},"nodeType":"YulFunctionCall","src":"32071:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"32087:26:29","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32064:6:29"},"nodeType":"YulFunctionCall","src":"32064:50:29"},"nodeType":"YulExpressionStatement","src":"32064:50:29"}]},"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"32045:6:29","type":""}],"src":"31947:174:29"},{"body":{"nodeType":"YulBlock","src":"32233:114:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"32255:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"32263:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32251:3:29"},"nodeType":"YulFunctionCall","src":"32251:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"32267:34:29","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32244:6:29"},"nodeType":"YulFunctionCall","src":"32244:58:29"},"nodeType":"YulExpressionStatement","src":"32244:58:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"32323:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"32331:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32319:3:29"},"nodeType":"YulFunctionCall","src":"32319:15:29"},{"kind":"string","nodeType":"YulLiteral","src":"32336:3:29","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32312:6:29"},"nodeType":"YulFunctionCall","src":"32312:28:29"},"nodeType":"YulExpressionStatement","src":"32312:28:29"}]},"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"32225:6:29","type":""}],"src":"32127:220:29"},{"body":{"nodeType":"YulBlock","src":"32459:142:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"32481:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"32489:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32477:3:29"},"nodeType":"YulFunctionCall","src":"32477:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"32493:34:29","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32470:6:29"},"nodeType":"YulFunctionCall","src":"32470:58:29"},"nodeType":"YulExpressionStatement","src":"32470:58:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"32549:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"32557:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32545:3:29"},"nodeType":"YulFunctionCall","src":"32545:15:29"},{"kind":"string","nodeType":"YulLiteral","src":"32562:31:29","type":"","value":"ken owner or approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32538:6:29"},"nodeType":"YulFunctionCall","src":"32538:56:29"},"nodeType":"YulExpressionStatement","src":"32538:56:29"}]},"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"32451:6:29","type":""}],"src":"32353:248:29"},{"body":{"nodeType":"YulBlock","src":"32713:130:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"32735:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"32743:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32731:3:29"},"nodeType":"YulFunctionCall","src":"32731:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"32747:34:29","type":"","value":"ERC721: transfer caller is not o"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32724:6:29"},"nodeType":"YulFunctionCall","src":"32724:58:29"},"nodeType":"YulExpressionStatement","src":"32724:58:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"32803:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"32811:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32799:3:29"},"nodeType":"YulFunctionCall","src":"32799:15:29"},{"kind":"string","nodeType":"YulLiteral","src":"32816:19:29","type":"","value":"wner nor approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32792:6:29"},"nodeType":"YulFunctionCall","src":"32792:44:29"},"nodeType":"YulExpressionStatement","src":"32792:44:29"}]},"name":"store_literal_in_memory_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"32705:6:29","type":""}],"src":"32607:236:29"},{"body":{"nodeType":"YulBlock","src":"32955:115:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"32977:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"32985:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32973:3:29"},"nodeType":"YulFunctionCall","src":"32973:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"32989:34:29","type":"","value":"This token can not be transferre"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32966:6:29"},"nodeType":"YulFunctionCall","src":"32966:58:29"},"nodeType":"YulExpressionStatement","src":"32966:58:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"33045:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"33053:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33041:3:29"},"nodeType":"YulFunctionCall","src":"33041:15:29"},{"kind":"string","nodeType":"YulLiteral","src":"33058:4:29","type":"","value":"d!"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33034:6:29"},"nodeType":"YulFunctionCall","src":"33034:29:29"},"nodeType":"YulExpressionStatement","src":"33034:29:29"}]},"name":"store_literal_in_memory_d5a66e7313a9aec57702e7cec57da779ab04b86d2407767a8ac34c46f27c720d","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"32947:6:29","type":""}],"src":"32849:221:29"},{"body":{"nodeType":"YulBlock","src":"33119:79:29","statements":[{"body":{"nodeType":"YulBlock","src":"33176:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33185:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"33188:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"33178:6:29"},"nodeType":"YulFunctionCall","src":"33178:12:29"},"nodeType":"YulExpressionStatement","src":"33178:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"33142:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"33167:5:29"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"33149:17:29"},"nodeType":"YulFunctionCall","src":"33149:24:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"33139:2:29"},"nodeType":"YulFunctionCall","src":"33139:35:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"33132:6:29"},"nodeType":"YulFunctionCall","src":"33132:43:29"},"nodeType":"YulIf","src":"33129:2:29"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"33112:5:29","type":""}],"src":"33076:122:29"},{"body":{"nodeType":"YulBlock","src":"33244:76:29","statements":[{"body":{"nodeType":"YulBlock","src":"33298:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33307:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"33310:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"33300:6:29"},"nodeType":"YulFunctionCall","src":"33300:12:29"},"nodeType":"YulExpressionStatement","src":"33300:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"33267:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"33289:5:29"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"33274:14:29"},"nodeType":"YulFunctionCall","src":"33274:21:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"33264:2:29"},"nodeType":"YulFunctionCall","src":"33264:32:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"33257:6:29"},"nodeType":"YulFunctionCall","src":"33257:40:29"},"nodeType":"YulIf","src":"33254:2:29"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"33237:5:29","type":""}],"src":"33204:116:29"},{"body":{"nodeType":"YulBlock","src":"33368:78:29","statements":[{"body":{"nodeType":"YulBlock","src":"33424:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33433:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"33436:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"33426:6:29"},"nodeType":"YulFunctionCall","src":"33426:12:29"},"nodeType":"YulExpressionStatement","src":"33426:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"33391:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"33415:5:29"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"33398:16:29"},"nodeType":"YulFunctionCall","src":"33398:23:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"33388:2:29"},"nodeType":"YulFunctionCall","src":"33388:34:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"33381:6:29"},"nodeType":"YulFunctionCall","src":"33381:42:29"},"nodeType":"YulIf","src":"33378:2:29"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"33361:5:29","type":""}],"src":"33326:120:29"},{"body":{"nodeType":"YulBlock","src":"33495:79:29","statements":[{"body":{"nodeType":"YulBlock","src":"33552:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33561:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"33564:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"33554:6:29"},"nodeType":"YulFunctionCall","src":"33554:12:29"},"nodeType":"YulExpressionStatement","src":"33554:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"33518:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"33543:5:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"33525:17:29"},"nodeType":"YulFunctionCall","src":"33525:24:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"33515:2:29"},"nodeType":"YulFunctionCall","src":"33515:35:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"33508:6:29"},"nodeType":"YulFunctionCall","src":"33508:43:29"},"nodeType":"YulIf","src":"33505:2:29"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"33488:5:29","type":""}],"src":"33452:122:29"}]},"contents":"{\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert(0, 0) }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert(0, 0) }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_string_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value3 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value0 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value0 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encodeUpdatedPos_t_uint256_to_t_uint256(value0, pos) -> updatedPos {\n        abi_encode_t_uint256_to_t_uint256(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    // uint256[] -> uint256[]\n    function abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_uint256_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_uint256_to_t_uint256(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 45)\n        store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 50)\n        store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 28)\n        store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n        store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)\n        store_literal_in_memory_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 61)\n        store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 49)\n        store_literal_in_memory_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_d5a66e7313a9aec57702e7cec57da779ab04b86d2407767a8ac34c46f27c720d_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_d5a66e7313a9aec57702e7cec57da779ab04b86d2407767a8ac34c46f27c720d(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_d5a66e7313a9aec57702e7cec57da779ab04b86d2407767a8ac34c46f27c720d__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d5a66e7313a9aec57702e7cec57da779ab04b86d2407767a8ac34c46f27c720d_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function array_length_t_array$_t_uint256_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        if lt(x, y) { panic_error_0x11() }\n\n        diff := sub(x, y)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: caller is not token owne\")\n\n        mstore(add(memPtr, 32), \"r or approved\")\n\n    }\n\n    function store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to non ERC721Re\")\n\n        mstore(add(memPtr, 32), \"ceiver implementer\")\n\n    }\n\n    function store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer from incorrect \")\n\n        mstore(add(memPtr, 32), \"owner\")\n\n    }\n\n    function store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: token already minted\")\n\n    }\n\n    function store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve to caller\")\n\n    }\n\n    function store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: address zero is not a va\")\n\n        mstore(add(memPtr, 32), \"lid owner\")\n\n    }\n\n    function store_literal_in_memory_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721URIStorage: URI set of non\")\n\n        mstore(add(memPtr, 32), \"existent token\")\n\n    }\n\n    function store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: mint to the zero address\")\n\n    }\n\n    function store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: invalid token ID\")\n\n    }\n\n    function store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approval to current owne\")\n\n        mstore(add(memPtr, 32), \"r\")\n\n    }\n\n    function store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve caller is not to\")\n\n        mstore(add(memPtr, 32), \"ken owner or approved for all\")\n\n    }\n\n    function store_literal_in_memory_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer caller is not o\")\n\n        mstore(add(memPtr, 32), \"wner nor approved\")\n\n    }\n\n    function store_literal_in_memory_d5a66e7313a9aec57702e7cec57da779ab04b86d2407767a8ac34c46f27c720d(memPtr) {\n\n        mstore(add(memPtr, 0), \"This token can not be transferre\")\n\n        mstore(add(memPtr, 32), \"d!\")\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n","id":29,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101375760003560e01c80636871ee40116100b8578063b88d4fde1161007c578063b88d4fde1461035e578063c87b56dd1461037a578063d4d94b05146103aa578063deeb9a3f146103c6578063e985e9c5146103e2578063eed8cc351461041257610137565b80636871ee40146102ba57806370a08231146102d85780637b2eb35c1461030857806395d89b4114610324578063a22cb4651461034257610137565b8063265d9a6c116100ff578063265d9a6c146101f25780632743dfd01461022257806342842e0e1461023e57806357991d301461025a5780636352211e1461028a57610137565b806301ffc9a71461013c57806306fdde031461016c578063081812fc1461018a578063095ea7b3146101ba57806323b872dd146101d6575b600080fd5b61015660048036038101906101519190612542565b610442565b6040516101639190612ada565b60405180910390f35b610174610524565b6040516101819190612af5565b60405180910390f35b6101a4600480360381019061019f9190612629565b6105b6565b6040516101b191906129f1565b60405180910390f35b6101d460048036038101906101cf9190612506565b6105fc565b005b6101f060048036038101906101eb9190612385565b610714565b005b61020c60048036038101906102079190612594565b61076d565b6040516102199190612cd7565b60405180910390f35b61023c60048036038101906102379190612629565b6107a3565b005b61025860048036038101906102539190612385565b61085e565b005b610274600480360381019061026f9190612629565b61087e565b6040516102819190612ab8565b60405180910390f35b6102a4600480360381019061029f9190612629565b6108e9565b6040516102b191906129f1565b60405180910390f35b6102c2610970565b6040516102cf9190612cd7565b60405180910390f35b6102f260048036038101906102ed9190612320565b61099a565b6040516102ff9190612cd7565b60405180910390f35b610322600480360381019061031d919061244f565b610a52565b005b61032c610ba0565b6040516103399190612af5565b60405180910390f35b61035c600480360381019061035791906124ca565b610c32565b005b610378600480360381019061037391906123d4565b610c48565b005b610394600480360381019061038f9190612629565b610caa565b6040516103a19190612af5565b60405180910390f35b6103c460048036038101906103bf91906125d5565b610dbd565b005b6103e060048036038101906103db9190612385565b610e7a565b005b6103fc60048036038101906103f79190612349565b610fbd565b6040516104099190612ada565b60405180910390f35b61042c60048036038101906104279190612652565b611051565b6040516104399190612cd7565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061050d57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061051d575061051c82611082565b5b9050919050565b60606000805461053390612f35565b80601f016020809104026020016040519081016040528092919081815260200182805461055f90612f35565b80156105ac5780601f10610581576101008083540402835291602001916105ac565b820191906000526020600020905b81548152906001019060200180831161058f57829003601f168201915b5050505050905090565b60006105c1826110ec565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610607826108e9565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610678576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066f90612c57565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610697611137565b73ffffffffffffffffffffffffffffffffffffffff1614806106c657506106c5816106c0611137565b610fbd565b5b610705576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fc90612c77565b60405180910390fd5b61070f838361113f565b505050565b61071e83826111f8565b61075d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075490612c97565b60405180910390fd5b61076883838361128d565b505050565b60008061077a6007611587565b90506107866007611595565b61079030826115ab565b61079a81846117c9565b80915050919050565b60006107af6008611587565b90506107bb6008611595565b60005b828110156108205760006107d0610970565b90506009600084815260200190815260200160002081908060018154018082558091505060019003906000526020600020016000909190919091505550808061081890612f98565b9150506107be565b507fb9144c96c86541f6fa89c9f2f02495cccf4b08cd6643e26d34ee00aa586558a83382604051610852929190612a8f565b60405180910390a15050565b61087983838360405180602001604052806000815250610c48565b505050565b6060600960008381526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156108dd57602002820191906000526020600020905b8154815260200190600101908083116108c9575b50505050509050919050565b6000806108f58361183d565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610967576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095e90612c37565b60405180910390fd5b80915050919050565b60008061097d6007611587565b90506109896007611595565b61099330826115ab565b8091505090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0290612bd7565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60011515600a600084815260200190815260200160002060009054906101000a900460ff1615151415610aba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab190612cb7565b60405180910390fd5b610ac482826117c9565b3073ffffffffffffffffffffffffffffffffffffffff166323b872dd8585856040518463ffffffff1660e01b8152600401610b0193929190612a0c565b600060405180830381600087803b158015610b1b57600080fd5b505af1158015610b2f573d6000803e3d6000fd5b505050507fec61728879a33aa50b55e1f4789dcfc1c680f30a24d7b8694a9f874e242a97b4848484604051610b6693929190612a0c565b60405180910390a16001600a600084815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050565b606060018054610baf90612f35565b80601f0160208091040260200160405190810160405280929190818152602001828054610bdb90612f35565b8015610c285780601f10610bfd57610100808354040283529160200191610c28565b820191906000526020600020905b815481529060010190602001808311610c0b57829003601f168201915b5050505050905090565b610c44610c3d611137565b838361187a565b5050565b610c59610c53611137565b836111f8565b610c98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8f90612b17565b60405180910390fd5b610ca4848484846119e7565b50505050565b6060610cb5826110ec565b6000600660008481526020019081526020016000208054610cd590612f35565b80601f0160208091040260200160405190810160405280929190818152602001828054610d0190612f35565b8015610d4e5780601f10610d2357610100808354040283529160200191610d4e565b820191906000526020600020905b815481529060010190602001808311610d3157829003601f168201915b505050505090506000610d5f611a43565b9050600081511415610d75578192505050610db8565b600082511115610daa578082604051602001610d929291906129cd565b60405160208183030381529060405292505050610db8565b610db384611a5a565b925050505b919050565b6000610dc96008611587565b9050610dd56008611595565b60005b82811015610e3b576000610deb8561076d565b905060096000848152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190915055508080610e3390612f98565b915050610dd8565b507fb9144c96c86541f6fa89c9f2f02495cccf4b08cd6643e26d34ee00aa586558a83382604051610e6d929190612a8f565b60405180910390a1505050565b60011515600a600083815260200190815260200160002060009054906101000a900460ff1615151415610ee2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed990612cb7565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff166323b872dd8484846040518463ffffffff1660e01b8152600401610f1f93929190612a0c565b600060405180830381600087803b158015610f3957600080fd5b505af1158015610f4d573d6000803e3d6000fd5b505050507fec61728879a33aa50b55e1f4789dcfc1c680f30a24d7b8694a9f874e242a97b4838383604051610f8493929190612a0c565b60405180910390a16001600a600083815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6009602052816000526040600020818154811061106d57600080fd5b90600052602060002001600091509150505481565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6110f581611ac2565b611134576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112b90612c37565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166111b2836108e9565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611204836108e9565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061124657506112458185610fbd565b5b8061128457508373ffffffffffffffffffffffffffffffffffffffff1661126c846105b6565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166112ad826108e9565b73ffffffffffffffffffffffffffffffffffffffff1614611303576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112fa90612b57565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611373576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136a90612b97565b60405180910390fd5b6113808383836001611b03565b8273ffffffffffffffffffffffffffffffffffffffff166113a0826108e9565b73ffffffffffffffffffffffffffffffffffffffff16146113f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ed90612b57565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46115828383836001611c29565b505050565b600081600001549050919050565b6001816000016000828254019250508190555050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561161b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161290612c17565b60405180910390fd5b61162481611ac2565b15611664576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165b90612b77565b60405180910390fd5b611672600083836001611b03565b61167b81611ac2565b156116bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b290612b77565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46117c5600083836001611c29565b5050565b6117d282611ac2565b611811576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180890612bf7565b60405180910390fd5b80600660008481526020019081526020016000209080519060200190611838929190612144565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156118e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e090612bb7565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516119da9190612ada565b60405180910390a3505050565b6119f284848461128d565b6119fe84848484611c2f565b611a3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3490612b37565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060611a65826110ec565b6000611a6f611a43565b90506000815111611a8f5760405180602001604052806000815250611aba565b80611a9984611dc6565b604051602001611aaa9291906129cd565b6040516020818303038152906040525b915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16611ae48361183d565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6001811115611c2357600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611b975780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611b8f9190612e4b565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611c225780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c1a9190612df5565b925050819055505b5b50505050565b50505050565b6000611c508473ffffffffffffffffffffffffffffffffffffffff16611eea565b15611db9578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611c79611137565b8786866040518563ffffffff1660e01b8152600401611c9b9493929190612a43565b602060405180830381600087803b158015611cb557600080fd5b505af1925050508015611ce657506040513d601f19601f82011682018060405250810190611ce3919061256b565b60015b611d69573d8060008114611d16576040519150601f19603f3d011682016040523d82523d6000602084013e611d1b565b606091505b50600081511415611d61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5890612b37565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611dbe565b600190505b949350505050565b606060006001611dd584611f0d565b01905060008167ffffffffffffffff811115611e1a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611e4c5781602001600182028036833780820191505090505b509050600082602001820190505b600115611edf578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611ec9577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0494506000851415611eda57611edf565b611e5a565b819350505050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611f91577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611f87577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611ff4576d04ee2d6d415b85acef81000000008381611fea577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506020810190505b662386f26fc10000831061204957662386f26fc10000838161203f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506010810190505b6305f5e1008310612098576305f5e100838161208e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506008810190505b61271083106120e35761271083816120d9577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506004810190505b6064831061212c5760648381612122577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506002810190505b600a831061213b576001810190505b80915050919050565b82805461215090612f35565b90600052602060002090601f01602090048101928261217257600085556121b9565b82601f1061218b57805160ff19168380011785556121b9565b828001600101855582156121b9579182015b828111156121b857825182559160200191906001019061219d565b5b5090506121c691906121ca565b5090565b5b808211156121e35760008160009055506001016121cb565b5090565b60006121fa6121f584612d17565b612cf2565b90508281526020810184848401111561221257600080fd5b61221d848285612ef3565b509392505050565b600061223861223384612d48565b612cf2565b90508281526020810184848401111561225057600080fd5b61225b848285612ef3565b509392505050565b60008135905061227281613439565b92915050565b60008135905061228781613450565b92915050565b60008135905061229c81613467565b92915050565b6000815190506122b181613467565b92915050565b600082601f8301126122c857600080fd5b81356122d88482602086016121e7565b91505092915050565b600082601f8301126122f257600080fd5b8135612302848260208601612225565b91505092915050565b60008135905061231a8161347e565b92915050565b60006020828403121561233257600080fd5b600061234084828501612263565b91505092915050565b6000806040838503121561235c57600080fd5b600061236a85828601612263565b925050602061237b85828601612263565b9150509250929050565b60008060006060848603121561239a57600080fd5b60006123a886828701612263565b93505060206123b986828701612263565b92505060406123ca8682870161230b565b9150509250925092565b600080600080608085870312156123ea57600080fd5b60006123f887828801612263565b945050602061240987828801612263565b935050604061241a8782880161230b565b925050606085013567ffffffffffffffff81111561243757600080fd5b612443878288016122b7565b91505092959194509250565b6000806000806080858703121561246557600080fd5b600061247387828801612263565b945050602061248487828801612263565b93505060406124958782880161230b565b925050606085013567ffffffffffffffff8111156124b257600080fd5b6124be878288016122e1565b91505092959194509250565b600080604083850312156124dd57600080fd5b60006124eb85828601612263565b92505060206124fc85828601612278565b9150509250929050565b6000806040838503121561251957600080fd5b600061252785828601612263565b92505060206125388582860161230b565b9150509250929050565b60006020828403121561255457600080fd5b60006125628482850161228d565b91505092915050565b60006020828403121561257d57600080fd5b600061258b848285016122a2565b91505092915050565b6000602082840312156125a657600080fd5b600082013567ffffffffffffffff8111156125c057600080fd5b6125cc848285016122e1565b91505092915050565b600080604083850312156125e857600080fd5b600083013567ffffffffffffffff81111561260257600080fd5b61260e858286016122e1565b925050602061261f8582860161230b565b9150509250929050565b60006020828403121561263b57600080fd5b60006126498482850161230b565b91505092915050565b6000806040838503121561266557600080fd5b60006126738582860161230b565b92505060206126848582860161230b565b9150509250929050565b600061269a83836129af565b60208301905092915050565b6126af81612e7f565b82525050565b60006126c082612d89565b6126ca8185612db7565b93506126d583612d79565b8060005b838110156127065781516126ed888261268e565b97506126f883612daa565b9250506001810190506126d9565b5085935050505092915050565b61271c81612e91565b82525050565b600061272d82612d94565b6127378185612dc8565b9350612747818560208601612f02565b6127508161306e565b840191505092915050565b600061276682612d9f565b6127708185612dd9565b9350612780818560208601612f02565b6127898161306e565b840191505092915050565b600061279f82612d9f565b6127a98185612dea565b93506127b9818560208601612f02565b80840191505092915050565b60006127d2602d83612dd9565b91506127dd8261307f565b604082019050919050565b60006127f5603283612dd9565b9150612800826130ce565b604082019050919050565b6000612818602583612dd9565b91506128238261311d565b604082019050919050565b600061283b601c83612dd9565b91506128468261316c565b602082019050919050565b600061285e602483612dd9565b915061286982613195565b604082019050919050565b6000612881601983612dd9565b915061288c826131e4565b602082019050919050565b60006128a4602983612dd9565b91506128af8261320d565b604082019050919050565b60006128c7602e83612dd9565b91506128d28261325c565b604082019050919050565b60006128ea602083612dd9565b91506128f5826132ab565b602082019050919050565b600061290d601883612dd9565b9150612918826132d4565b602082019050919050565b6000612930602183612dd9565b915061293b826132fd565b604082019050919050565b6000612953603d83612dd9565b915061295e8261334c565b604082019050919050565b6000612976603183612dd9565b91506129818261339b565b604082019050919050565b6000612999602283612dd9565b91506129a4826133ea565b604082019050919050565b6129b881612ee9565b82525050565b6129c781612ee9565b82525050565b60006129d98285612794565b91506129e58284612794565b91508190509392505050565b6000602082019050612a0660008301846126a6565b92915050565b6000606082019050612a2160008301866126a6565b612a2e60208301856126a6565b612a3b60408301846129be565b949350505050565b6000608082019050612a5860008301876126a6565b612a6560208301866126a6565b612a7260408301856129be565b8181036060830152612a848184612722565b905095945050505050565b6000604082019050612aa460008301856126a6565b612ab160208301846129be565b9392505050565b60006020820190508181036000830152612ad281846126b5565b905092915050565b6000602082019050612aef6000830184612713565b92915050565b60006020820190508181036000830152612b0f818461275b565b905092915050565b60006020820190508181036000830152612b30816127c5565b9050919050565b60006020820190508181036000830152612b50816127e8565b9050919050565b60006020820190508181036000830152612b708161280b565b9050919050565b60006020820190508181036000830152612b908161282e565b9050919050565b60006020820190508181036000830152612bb081612851565b9050919050565b60006020820190508181036000830152612bd081612874565b9050919050565b60006020820190508181036000830152612bf081612897565b9050919050565b60006020820190508181036000830152612c10816128ba565b9050919050565b60006020820190508181036000830152612c30816128dd565b9050919050565b60006020820190508181036000830152612c5081612900565b9050919050565b60006020820190508181036000830152612c7081612923565b9050919050565b60006020820190508181036000830152612c9081612946565b9050919050565b60006020820190508181036000830152612cb081612969565b9050919050565b60006020820190508181036000830152612cd08161298c565b9050919050565b6000602082019050612cec60008301846129be565b92915050565b6000612cfc612d0d565b9050612d088282612f67565b919050565b6000604051905090565b600067ffffffffffffffff821115612d3257612d3161303f565b5b612d3b8261306e565b9050602081019050919050565b600067ffffffffffffffff821115612d6357612d6261303f565b5b612d6c8261306e565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000612e0082612ee9565b9150612e0b83612ee9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612e4057612e3f612fe1565b5b828201905092915050565b6000612e5682612ee9565b9150612e6183612ee9565b925082821015612e7457612e73612fe1565b5b828203905092915050565b6000612e8a82612ec9565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015612f20578082015181840152602081019050612f05565b83811115612f2f576000848401525b50505050565b60006002820490506001821680612f4d57607f821691505b60208210811415612f6157612f60613010565b5b50919050565b612f708261306e565b810181811067ffffffffffffffff82111715612f8f57612f8e61303f565b5b80604052505050565b6000612fa382612ee9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612fd657612fd5612fe1565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f5468697320746f6b656e2063616e206e6f74206265207472616e73666572726560008201527f6421000000000000000000000000000000000000000000000000000000000000602082015250565b61344281612e7f565b811461344d57600080fd5b50565b61345981612e91565b811461346457600080fd5b50565b61347081612e9d565b811461347b57600080fd5b50565b61348781612ee9565b811461349257600080fd5b5056fea2646970667358221220ca104a9eef4358d4445fbe3c5e3f2287b78831801e159281d9bfeb13ecddc0c964736f6c63430008040033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x137 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6871EE40 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x35E JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x37A JUMPI DUP1 PUSH4 0xD4D94B05 EQ PUSH2 0x3AA JUMPI DUP1 PUSH4 0xDEEB9A3F EQ PUSH2 0x3C6 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x3E2 JUMPI DUP1 PUSH4 0xEED8CC35 EQ PUSH2 0x412 JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x6871EE40 EQ PUSH2 0x2BA JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2D8 JUMPI DUP1 PUSH4 0x7B2EB35C EQ PUSH2 0x308 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x324 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x342 JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x265D9A6C GT PUSH2 0xFF JUMPI DUP1 PUSH4 0x265D9A6C EQ PUSH2 0x1F2 JUMPI DUP1 PUSH4 0x2743DFD0 EQ PUSH2 0x222 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x23E JUMPI DUP1 PUSH4 0x57991D30 EQ PUSH2 0x25A JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x28A JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x16C JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x18A JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1BA JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1D6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x156 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x151 SWAP2 SWAP1 PUSH2 0x2542 JUMP JUMPDEST PUSH2 0x442 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x163 SWAP2 SWAP1 PUSH2 0x2ADA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x174 PUSH2 0x524 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x181 SWAP2 SWAP1 PUSH2 0x2AF5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x2629 JUMP JUMPDEST PUSH2 0x5B6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B1 SWAP2 SWAP1 PUSH2 0x29F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1CF SWAP2 SWAP1 PUSH2 0x2506 JUMP JUMPDEST PUSH2 0x5FC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x2385 JUMP JUMPDEST PUSH2 0x714 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x20C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x207 SWAP2 SWAP1 PUSH2 0x2594 JUMP JUMPDEST PUSH2 0x76D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x219 SWAP2 SWAP1 PUSH2 0x2CD7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x237 SWAP2 SWAP1 PUSH2 0x2629 JUMP JUMPDEST PUSH2 0x7A3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x258 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x253 SWAP2 SWAP1 PUSH2 0x2385 JUMP JUMPDEST PUSH2 0x85E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x274 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x26F SWAP2 SWAP1 PUSH2 0x2629 JUMP JUMPDEST PUSH2 0x87E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x281 SWAP2 SWAP1 PUSH2 0x2AB8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x29F SWAP2 SWAP1 PUSH2 0x2629 JUMP JUMPDEST PUSH2 0x8E9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B1 SWAP2 SWAP1 PUSH2 0x29F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2C2 PUSH2 0x970 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2CF SWAP2 SWAP1 PUSH2 0x2CD7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2F2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2ED SWAP2 SWAP1 PUSH2 0x2320 JUMP JUMPDEST PUSH2 0x99A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2FF SWAP2 SWAP1 PUSH2 0x2CD7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x322 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x31D SWAP2 SWAP1 PUSH2 0x244F JUMP JUMPDEST PUSH2 0xA52 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x32C PUSH2 0xBA0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x339 SWAP2 SWAP1 PUSH2 0x2AF5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x35C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x357 SWAP2 SWAP1 PUSH2 0x24CA JUMP JUMPDEST PUSH2 0xC32 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x378 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x373 SWAP2 SWAP1 PUSH2 0x23D4 JUMP JUMPDEST PUSH2 0xC48 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x394 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x38F SWAP2 SWAP1 PUSH2 0x2629 JUMP JUMPDEST PUSH2 0xCAA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3A1 SWAP2 SWAP1 PUSH2 0x2AF5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3BF SWAP2 SWAP1 PUSH2 0x25D5 JUMP JUMPDEST PUSH2 0xDBD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3E0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3DB SWAP2 SWAP1 PUSH2 0x2385 JUMP JUMPDEST PUSH2 0xE7A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3FC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3F7 SWAP2 SWAP1 PUSH2 0x2349 JUMP JUMPDEST PUSH2 0xFBD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x409 SWAP2 SWAP1 PUSH2 0x2ADA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x42C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x427 SWAP2 SWAP1 PUSH2 0x2652 JUMP JUMPDEST PUSH2 0x1051 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x439 SWAP2 SWAP1 PUSH2 0x2CD7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x50D JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x51D JUMPI POP PUSH2 0x51C DUP3 PUSH2 0x1082 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x533 SWAP1 PUSH2 0x2F35 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x55F SWAP1 PUSH2 0x2F35 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x5AC JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x581 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x5AC JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x58F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5C1 DUP3 PUSH2 0x10EC JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x607 DUP3 PUSH2 0x8E9 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x678 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66F SWAP1 PUSH2 0x2C57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x697 PUSH2 0x1137 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x6C6 JUMPI POP PUSH2 0x6C5 DUP2 PUSH2 0x6C0 PUSH2 0x1137 JUMP JUMPDEST PUSH2 0xFBD JUMP JUMPDEST JUMPDEST PUSH2 0x705 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FC SWAP1 PUSH2 0x2C77 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x70F DUP4 DUP4 PUSH2 0x113F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x71E DUP4 DUP3 PUSH2 0x11F8 JUMP JUMPDEST PUSH2 0x75D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x754 SWAP1 PUSH2 0x2C97 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x768 DUP4 DUP4 DUP4 PUSH2 0x128D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x77A PUSH1 0x7 PUSH2 0x1587 JUMP JUMPDEST SWAP1 POP PUSH2 0x786 PUSH1 0x7 PUSH2 0x1595 JUMP JUMPDEST PUSH2 0x790 ADDRESS DUP3 PUSH2 0x15AB JUMP JUMPDEST PUSH2 0x79A DUP2 DUP5 PUSH2 0x17C9 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7AF PUSH1 0x8 PUSH2 0x1587 JUMP JUMPDEST SWAP1 POP PUSH2 0x7BB PUSH1 0x8 PUSH2 0x1595 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x820 JUMPI PUSH1 0x0 PUSH2 0x7D0 PUSH2 0x970 JUMP JUMPDEST SWAP1 POP PUSH1 0x9 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE POP DUP1 DUP1 PUSH2 0x818 SWAP1 PUSH2 0x2F98 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x7BE JUMP JUMPDEST POP PUSH32 0xB9144C96C86541F6FA89C9F2F02495CCCF4B08CD6643E26D34EE00AA586558A8 CALLER DUP3 PUSH1 0x40 MLOAD PUSH2 0x852 SWAP3 SWAP2 SWAP1 PUSH2 0x2A8F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x879 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xC48 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x9 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x8DD JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x8C9 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x8F5 DUP4 PUSH2 0x183D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x967 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x95E SWAP1 PUSH2 0x2C37 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x97D PUSH1 0x7 PUSH2 0x1587 JUMP JUMPDEST SWAP1 POP PUSH2 0x989 PUSH1 0x7 PUSH2 0x1595 JUMP JUMPDEST PUSH2 0x993 ADDRESS DUP3 PUSH2 0x15AB JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xA0B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA02 SWAP1 PUSH2 0x2BD7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 ISZERO ISZERO PUSH1 0xA PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ ISZERO PUSH2 0xABA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAB1 SWAP1 PUSH2 0x2CB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xAC4 DUP3 DUP3 PUSH2 0x17C9 JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB01 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A0C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB2F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH32 0xEC61728879A33AA50B55E1F4789DCFC1C680F30A24D7B8694A9F874E242A97B4 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0xB66 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x1 PUSH1 0xA PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0xBAF SWAP1 PUSH2 0x2F35 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xBDB SWAP1 PUSH2 0x2F35 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xC28 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xBFD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xC28 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xC0B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xC44 PUSH2 0xC3D PUSH2 0x1137 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x187A JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xC59 PUSH2 0xC53 PUSH2 0x1137 JUMP JUMPDEST DUP4 PUSH2 0x11F8 JUMP JUMPDEST PUSH2 0xC98 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC8F SWAP1 PUSH2 0x2B17 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xCA4 DUP5 DUP5 DUP5 DUP5 PUSH2 0x19E7 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xCB5 DUP3 PUSH2 0x10EC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH2 0xCD5 SWAP1 PUSH2 0x2F35 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xD01 SWAP1 PUSH2 0x2F35 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xD4E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xD23 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xD4E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xD31 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0xD5F PUSH2 0x1A43 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0xD75 JUMPI DUP2 SWAP3 POP POP POP PUSH2 0xDB8 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0xDAA JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xD92 SWAP3 SWAP2 SWAP1 PUSH2 0x29CD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP PUSH2 0xDB8 JUMP JUMPDEST PUSH2 0xDB3 DUP5 PUSH2 0x1A5A JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDC9 PUSH1 0x8 PUSH2 0x1587 JUMP JUMPDEST SWAP1 POP PUSH2 0xDD5 PUSH1 0x8 PUSH2 0x1595 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xE3B JUMPI PUSH1 0x0 PUSH2 0xDEB DUP6 PUSH2 0x76D JUMP JUMPDEST SWAP1 POP PUSH1 0x9 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE POP DUP1 DUP1 PUSH2 0xE33 SWAP1 PUSH2 0x2F98 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xDD8 JUMP JUMPDEST POP PUSH32 0xB9144C96C86541F6FA89C9F2F02495CCCF4B08CD6643E26D34EE00AA586558A8 CALLER DUP3 PUSH1 0x40 MLOAD PUSH2 0xE6D SWAP3 SWAP2 SWAP1 PUSH2 0x2A8F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x1 ISZERO ISZERO PUSH1 0xA PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ ISZERO PUSH2 0xEE2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xED9 SWAP1 PUSH2 0x2CB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF1F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A0C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xF4D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH32 0xEC61728879A33AA50B55E1F4789DCFC1C680F30A24D7B8694A9F874E242A97B4 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0xF84 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x1 PUSH1 0xA PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x106D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x10F5 DUP2 PUSH2 0x1AC2 JUMP JUMPDEST PUSH2 0x1134 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x112B SWAP1 PUSH2 0x2C37 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x11B2 DUP4 PUSH2 0x8E9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1204 DUP4 PUSH2 0x8E9 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x1246 JUMPI POP PUSH2 0x1245 DUP2 DUP6 PUSH2 0xFBD JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x1284 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x126C DUP5 PUSH2 0x5B6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x12AD DUP3 PUSH2 0x8E9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1303 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12FA SWAP1 PUSH2 0x2B57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1373 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x136A SWAP1 PUSH2 0x2B97 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1380 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1B03 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x13A0 DUP3 PUSH2 0x8E9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x13F6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13ED SWAP1 PUSH2 0x2B57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1582 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1C29 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x161B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1612 SWAP1 PUSH2 0x2C17 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1624 DUP2 PUSH2 0x1AC2 JUMP JUMPDEST ISZERO PUSH2 0x1664 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x165B SWAP1 PUSH2 0x2B77 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1672 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1B03 JUMP JUMPDEST PUSH2 0x167B DUP2 PUSH2 0x1AC2 JUMP JUMPDEST ISZERO PUSH2 0x16BB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16B2 SWAP1 PUSH2 0x2B77 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x17C5 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1C29 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x17D2 DUP3 PUSH2 0x1AC2 JUMP JUMPDEST PUSH2 0x1811 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1808 SWAP1 PUSH2 0x2BF7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x1838 SWAP3 SWAP2 SWAP1 PUSH2 0x2144 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x18E9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x18E0 SWAP1 PUSH2 0x2BB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x19DA SWAP2 SWAP1 PUSH2 0x2ADA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x19F2 DUP5 DUP5 DUP5 PUSH2 0x128D JUMP JUMPDEST PUSH2 0x19FE DUP5 DUP5 DUP5 DUP5 PUSH2 0x1C2F JUMP JUMPDEST PUSH2 0x1A3D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A34 SWAP1 PUSH2 0x2B37 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1A65 DUP3 PUSH2 0x10EC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A6F PUSH2 0x1A43 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x1A8F JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1ABA JUMP JUMPDEST DUP1 PUSH2 0x1A99 DUP5 PUSH2 0x1DC6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1AAA SWAP3 SWAP2 SWAP1 PUSH2 0x29CD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1AE4 DUP4 PUSH2 0x183D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1C23 JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1B97 JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1B8F SWAP2 SWAP1 PUSH2 0x2E4B JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1C22 JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1C1A SWAP2 SWAP1 PUSH2 0x2DF5 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C50 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1EEA JUMP JUMPDEST ISZERO PUSH2 0x1DB9 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1C79 PUSH2 0x1137 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C9B SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A43 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1CB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1CE6 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1CE3 SWAP2 SWAP1 PUSH2 0x256B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1D69 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1D16 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1D1B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x1D61 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D58 SWAP1 PUSH2 0x2B37 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x1DBE JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x1DD5 DUP5 PUSH2 0x1F0D JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1E1A JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1E4C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1EDF JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x1EC9 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 EQ ISZERO PUSH2 0x1EDA JUMPI PUSH2 0x1EDF JUMP JUMPDEST PUSH2 0x1E5A JUMP JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1F91 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x1F87 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x1FF4 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x1FEA JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x2049 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x203F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x2098 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x208E JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x20E3 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x20D9 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x212C JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x2122 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x213B JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x2150 SWAP1 PUSH2 0x2F35 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x2172 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x21B9 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x218B JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x21B9 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x21B9 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x21B8 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x219D JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x21C6 SWAP2 SWAP1 PUSH2 0x21CA JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x21E3 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x21CB JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21FA PUSH2 0x21F5 DUP5 PUSH2 0x2D17 JUMP JUMPDEST PUSH2 0x2CF2 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x2212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x221D DUP5 DUP3 DUP6 PUSH2 0x2EF3 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2238 PUSH2 0x2233 DUP5 PUSH2 0x2D48 JUMP JUMPDEST PUSH2 0x2CF2 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x2250 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x225B DUP5 DUP3 DUP6 PUSH2 0x2EF3 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2272 DUP2 PUSH2 0x3439 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2287 DUP2 PUSH2 0x3450 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x229C DUP2 PUSH2 0x3467 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x22B1 DUP2 PUSH2 0x3467 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x22C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x22D8 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x21E7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x22F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2302 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x2225 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x231A DUP2 PUSH2 0x347E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2332 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2340 DUP5 DUP3 DUP6 ADD PUSH2 0x2263 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x235C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x236A DUP6 DUP3 DUP7 ADD PUSH2 0x2263 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x237B DUP6 DUP3 DUP7 ADD PUSH2 0x2263 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x239A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x23A8 DUP7 DUP3 DUP8 ADD PUSH2 0x2263 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x23B9 DUP7 DUP3 DUP8 ADD PUSH2 0x2263 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x23CA DUP7 DUP3 DUP8 ADD PUSH2 0x230B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x23EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x23F8 DUP8 DUP3 DUP9 ADD PUSH2 0x2263 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x2409 DUP8 DUP3 DUP9 ADD PUSH2 0x2263 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x241A DUP8 DUP3 DUP9 ADD PUSH2 0x230B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2437 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2443 DUP8 DUP3 DUP9 ADD PUSH2 0x22B7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2465 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2473 DUP8 DUP3 DUP9 ADD PUSH2 0x2263 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x2484 DUP8 DUP3 DUP9 ADD PUSH2 0x2263 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x2495 DUP8 DUP3 DUP9 ADD PUSH2 0x230B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x24B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x24BE DUP8 DUP3 DUP9 ADD PUSH2 0x22E1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x24EB DUP6 DUP3 DUP7 ADD PUSH2 0x2263 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x24FC DUP6 DUP3 DUP7 ADD PUSH2 0x2278 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2519 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2527 DUP6 DUP3 DUP7 ADD PUSH2 0x2263 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2538 DUP6 DUP3 DUP7 ADD PUSH2 0x230B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2554 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2562 DUP5 DUP3 DUP6 ADD PUSH2 0x228D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x257D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x258B DUP5 DUP3 DUP6 ADD PUSH2 0x22A2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x25A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x25C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x25CC DUP5 DUP3 DUP6 ADD PUSH2 0x22E1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x25E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2602 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x260E DUP6 DUP3 DUP7 ADD PUSH2 0x22E1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x261F DUP6 DUP3 DUP7 ADD PUSH2 0x230B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x263B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2649 DUP5 DUP3 DUP6 ADD PUSH2 0x230B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2665 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2673 DUP6 DUP3 DUP7 ADD PUSH2 0x230B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2684 DUP6 DUP3 DUP7 ADD PUSH2 0x230B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x269A DUP4 DUP4 PUSH2 0x29AF JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x26AF DUP2 PUSH2 0x2E7F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26C0 DUP3 PUSH2 0x2D89 JUMP JUMPDEST PUSH2 0x26CA DUP2 DUP6 PUSH2 0x2DB7 JUMP JUMPDEST SWAP4 POP PUSH2 0x26D5 DUP4 PUSH2 0x2D79 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2706 JUMPI DUP2 MLOAD PUSH2 0x26ED DUP9 DUP3 PUSH2 0x268E JUMP JUMPDEST SWAP8 POP PUSH2 0x26F8 DUP4 PUSH2 0x2DAA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x26D9 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x271C DUP2 PUSH2 0x2E91 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x272D DUP3 PUSH2 0x2D94 JUMP JUMPDEST PUSH2 0x2737 DUP2 DUP6 PUSH2 0x2DC8 JUMP JUMPDEST SWAP4 POP PUSH2 0x2747 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2F02 JUMP JUMPDEST PUSH2 0x2750 DUP2 PUSH2 0x306E JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2766 DUP3 PUSH2 0x2D9F JUMP JUMPDEST PUSH2 0x2770 DUP2 DUP6 PUSH2 0x2DD9 JUMP JUMPDEST SWAP4 POP PUSH2 0x2780 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2F02 JUMP JUMPDEST PUSH2 0x2789 DUP2 PUSH2 0x306E JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x279F DUP3 PUSH2 0x2D9F JUMP JUMPDEST PUSH2 0x27A9 DUP2 DUP6 PUSH2 0x2DEA JUMP JUMPDEST SWAP4 POP PUSH2 0x27B9 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2F02 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27D2 PUSH1 0x2D DUP4 PUSH2 0x2DD9 JUMP JUMPDEST SWAP2 POP PUSH2 0x27DD DUP3 PUSH2 0x307F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27F5 PUSH1 0x32 DUP4 PUSH2 0x2DD9 JUMP JUMPDEST SWAP2 POP PUSH2 0x2800 DUP3 PUSH2 0x30CE JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2818 PUSH1 0x25 DUP4 PUSH2 0x2DD9 JUMP JUMPDEST SWAP2 POP PUSH2 0x2823 DUP3 PUSH2 0x311D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x283B PUSH1 0x1C DUP4 PUSH2 0x2DD9 JUMP JUMPDEST SWAP2 POP PUSH2 0x2846 DUP3 PUSH2 0x316C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x285E PUSH1 0x24 DUP4 PUSH2 0x2DD9 JUMP JUMPDEST SWAP2 POP PUSH2 0x2869 DUP3 PUSH2 0x3195 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2881 PUSH1 0x19 DUP4 PUSH2 0x2DD9 JUMP JUMPDEST SWAP2 POP PUSH2 0x288C DUP3 PUSH2 0x31E4 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28A4 PUSH1 0x29 DUP4 PUSH2 0x2DD9 JUMP JUMPDEST SWAP2 POP PUSH2 0x28AF DUP3 PUSH2 0x320D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28C7 PUSH1 0x2E DUP4 PUSH2 0x2DD9 JUMP JUMPDEST SWAP2 POP PUSH2 0x28D2 DUP3 PUSH2 0x325C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28EA PUSH1 0x20 DUP4 PUSH2 0x2DD9 JUMP JUMPDEST SWAP2 POP PUSH2 0x28F5 DUP3 PUSH2 0x32AB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x290D PUSH1 0x18 DUP4 PUSH2 0x2DD9 JUMP JUMPDEST SWAP2 POP PUSH2 0x2918 DUP3 PUSH2 0x32D4 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2930 PUSH1 0x21 DUP4 PUSH2 0x2DD9 JUMP JUMPDEST SWAP2 POP PUSH2 0x293B DUP3 PUSH2 0x32FD JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2953 PUSH1 0x3D DUP4 PUSH2 0x2DD9 JUMP JUMPDEST SWAP2 POP PUSH2 0x295E DUP3 PUSH2 0x334C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2976 PUSH1 0x31 DUP4 PUSH2 0x2DD9 JUMP JUMPDEST SWAP2 POP PUSH2 0x2981 DUP3 PUSH2 0x339B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2999 PUSH1 0x22 DUP4 PUSH2 0x2DD9 JUMP JUMPDEST SWAP2 POP PUSH2 0x29A4 DUP3 PUSH2 0x33EA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x29B8 DUP2 PUSH2 0x2EE9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x29C7 DUP2 PUSH2 0x2EE9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29D9 DUP3 DUP6 PUSH2 0x2794 JUMP JUMPDEST SWAP2 POP PUSH2 0x29E5 DUP3 DUP5 PUSH2 0x2794 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2A06 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x26A6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2A21 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x26A6 JUMP JUMPDEST PUSH2 0x2A2E PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x26A6 JUMP JUMPDEST PUSH2 0x2A3B PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x29BE JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2A58 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x26A6 JUMP JUMPDEST PUSH2 0x2A65 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x26A6 JUMP JUMPDEST PUSH2 0x2A72 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x29BE JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2A84 DUP2 DUP5 PUSH2 0x2722 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2AA4 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x26A6 JUMP JUMPDEST PUSH2 0x2AB1 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x29BE JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2AD2 DUP2 DUP5 PUSH2 0x26B5 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2AEF PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2713 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B0F DUP2 DUP5 PUSH2 0x275B JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B30 DUP2 PUSH2 0x27C5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B50 DUP2 PUSH2 0x27E8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B70 DUP2 PUSH2 0x280B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B90 DUP2 PUSH2 0x282E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2BB0 DUP2 PUSH2 0x2851 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2BD0 DUP2 PUSH2 0x2874 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2BF0 DUP2 PUSH2 0x2897 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C10 DUP2 PUSH2 0x28BA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C30 DUP2 PUSH2 0x28DD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C50 DUP2 PUSH2 0x2900 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C70 DUP2 PUSH2 0x2923 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C90 DUP2 PUSH2 0x2946 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2CB0 DUP2 PUSH2 0x2969 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2CD0 DUP2 PUSH2 0x298C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2CEC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x29BE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CFC PUSH2 0x2D0D JUMP JUMPDEST SWAP1 POP PUSH2 0x2D08 DUP3 DUP3 PUSH2 0x2F67 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2D32 JUMPI PUSH2 0x2D31 PUSH2 0x303F JUMP JUMPDEST JUMPDEST PUSH2 0x2D3B DUP3 PUSH2 0x306E JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2D63 JUMPI PUSH2 0x2D62 PUSH2 0x303F JUMP JUMPDEST JUMPDEST PUSH2 0x2D6C DUP3 PUSH2 0x306E JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E00 DUP3 PUSH2 0x2EE9 JUMP JUMPDEST SWAP2 POP PUSH2 0x2E0B DUP4 PUSH2 0x2EE9 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x2E40 JUMPI PUSH2 0x2E3F PUSH2 0x2FE1 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E56 DUP3 PUSH2 0x2EE9 JUMP JUMPDEST SWAP2 POP PUSH2 0x2E61 DUP4 PUSH2 0x2EE9 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x2E74 JUMPI PUSH2 0x2E73 PUSH2 0x2FE1 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E8A DUP3 PUSH2 0x2EC9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2F20 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2F05 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x2F2F JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2F4D JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x2F61 JUMPI PUSH2 0x2F60 PUSH2 0x3010 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2F70 DUP3 PUSH2 0x306E JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x2F8F JUMPI PUSH2 0x2F8E PUSH2 0x303F JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FA3 DUP3 PUSH2 0x2EE9 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x2FD6 JUMPI PUSH2 0x2FD5 PUSH2 0x2FE1 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45524337323155524953746F726167653A2055524920736574206F66206E6F6E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6578697374656E7420746F6B656E000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722063616C6C6572206973206E6F74206F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x776E6572206E6F7220617070726F766564000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x5468697320746F6B656E2063616E206E6F74206265207472616E736665727265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6421000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x3442 DUP2 PUSH2 0x2E7F JUMP JUMPDEST DUP2 EQ PUSH2 0x344D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x3459 DUP2 PUSH2 0x2E91 JUMP JUMPDEST DUP2 EQ PUSH2 0x3464 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x3470 DUP2 PUSH2 0x2E9D JUMP JUMPDEST DUP2 EQ PUSH2 0x347B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x3487 DUP2 PUSH2 0x2EE9 JUMP JUMPDEST DUP2 EQ PUSH2 0x3492 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCA LT 0x4A SWAP15 0xEF NUMBER PC 0xD4 DIFFICULTY 0x5F 0xBE EXTCODECOPY 0x5E EXTCODEHASH 0x22 DUP8 0xB7 DUP9 BALANCE DUP1 0x1E ISZERO SWAP3 DUP2 0xD9 0xBF 0xEB SGT 0xEC 0xDD 0xC0 0xC9 PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ","sourceMap":"288:2653:24:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1570:300:13;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2471:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3935:167;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3468:406;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;513:356:28;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;947:273:24;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1226:339;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5004:179:13;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1960:146:24;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2190:219:13;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;735:205:24;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1929:204:13;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2112:458:24;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2633:102:13;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4169:153;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5249:314;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;935:608:28;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1572:382:24;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2578:361;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4388:162:13;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;483:45:24;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1570:300:13;1672:4;1722:25;1707:40;;;:11;:40;;;;:104;;;;1778:33;1763:48;;;:11;:48;;;;1707:104;:156;;;;1827:36;1851:11;1827:23;:36::i;:::-;1707:156;1688:175;;1570:300;;;:::o;2471:98::-;2525:13;2557:5;2550:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:98;:::o;3935:167::-;4011:7;4030:23;4045:7;4030:14;:23::i;:::-;4071:15;:24;4087:7;4071:24;;;;;;;;;;;;;;;;;;;;;4064:31;;3935:167;;;:::o;3468:406::-;3548:13;3564:23;3579:7;3564:14;:23::i;:::-;3548:39;;3611:5;3605:11;;:2;:11;;;;3597:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;3702:5;3686:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;3711:37;3728:5;3735:12;:10;:12::i;:::-;3711:16;:37::i;:::-;3686:62;3665:170;;;;;;;;;;;;:::i;:::-;;;;;;;;;3846:21;3855:2;3859:7;3846:8;:21::i;:::-;3468:406;;;:::o;513:356:28:-;715:33;734:4;740:7;715:18;:33::i;:::-;694:129;;;;;;;;;;;;:::i;:::-;;;;;;;;;834:28;844:4;850:2;854:7;834:9;:28::i;:::-;513:356;;;:::o;947:273:24:-;1010:7;1029:15;1047:25;:15;:23;:25::i;:::-;1029:43;;1082:27;:15;:25;:27::i;:::-;1119:29;1133:4;1140:7;1119:5;:29::i;:::-;1158:31;1171:7;1180:8;1158:12;:31::i;:::-;1206:7;1199:14;;;947:273;;;:::o;1226:339::-;1285:15;1303:25;:15;:23;:25::i;:::-;1285:43;;1338:27;:15;:25;:27::i;:::-;1380:9;1375:137;1399:8;1395:1;:12;1375:137;;;1428:15;1446:10;:8;:10::i;:::-;1428:28;;1470:8;:17;1479:7;1470:17;;;;;;;;;;;1493:7;1470:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1375:137;1409:3;;;;;:::i;:::-;;;;1375:137;;;;1526:32;1538:10;1550:7;1526:32;;;;;;;:::i;:::-;;;;;;;;1226:339;;:::o;5004:179:13:-;5137:39;5154:4;5160:2;5164:7;5137:39;;;;;;;;;;;;:16;:39::i;:::-;5004:179;;;:::o;1960:146:24:-;2043:16;2082:8;:17;2091:7;2082:17;;;;;;;;;;;2075:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1960:146;;;:::o;2190:219:13:-;2262:7;2281:13;2297:17;2306:7;2297:8;:17::i;:::-;2281:33;;2349:1;2332:19;;:5;:19;;;;2324:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;2397:5;2390:12;;;2190:219;;;:::o;735:205:24:-;771:7;790:15;808:25;:15;:23;:25::i;:::-;790:43;;843:27;:15;:25;:27::i;:::-;880:29;894:4;901:7;880:5;:29::i;:::-;926:7;919:14;;;735:205;:::o;1929:204:13:-;2001:7;2045:1;2028:19;;:5;:19;;;;2020:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2110:9;:16;2120:5;2110:16;;;;;;;;;;;;;;;;2103:23;;1929:204;;;:::o;2112:458:24:-;2305:4;2278:31;;:14;:23;2293:7;2278:23;;;;;;;;;;;;;;;;;;;;;:31;;;;2257:112;;;;;;;;;;;;:::i;:::-;;;;;;;;;2379:31;2392:7;2401:8;2379:12;:31::i;:::-;2436:4;2420:35;;;2456:4;2462:2;2466:7;2420:54;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2489:34;2505:4;2511:2;2515:7;2489:34;;;;;;;;:::i;:::-;;;;;;;;2559:4;2533:14;:23;2548:7;2533:23;;;;;;;;;;;;:30;;;;;;;;;;;;;;;;;;2112:458;;;;:::o;2633:102:13:-;2689:13;2721:7;2714:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2633:102;:::o;4169:153::-;4263:52;4282:12;:10;:12::i;:::-;4296:8;4306;4263:18;:52::i;:::-;4169:153;;:::o;5249:314::-;5417:41;5436:12;:10;:12::i;:::-;5450:7;5417:18;:41::i;:::-;5409:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;5518:38;5532:4;5538:2;5542:7;5551:4;5518:13;:38::i;:::-;5249:314;;;;:::o;935:608:28:-;1008:13;1033:23;1048:7;1033:14;:23::i;:::-;1067;1093:10;:19;1104:7;1093:19;;;;;;;;;;;1067:45;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1122:18;1143:10;:8;:10::i;:::-;1122:31;;1248:1;1232:4;1226:18;:23;1222:70;;;1272:9;1265:16;;;;;;1222:70;1420:1;1400:9;1394:23;:27;1390:106;;;1468:4;1474:9;1451:33;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1437:48;;;;;;1390:106;1513:23;1528:7;1513:14;:23::i;:::-;1506:30;;;;935:608;;;;:::o;1572:382:24:-;1661:15;1679:25;:15;:23;:25::i;:::-;1661:43;;1714:27;:15;:25;:27::i;:::-;1756:9;1751:150;1775:8;1771:1;:12;1751:150;;;1804:15;1822:23;1836:8;1822:13;:23::i;:::-;1804:41;;1859:8;:17;1868:7;1859:17;;;;;;;;;;;1882:7;1859:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1751:150;1785:3;;;;;:::i;:::-;;;;1751:150;;;;1915:32;1927:10;1939:7;1915:32;;;;;;;:::i;:::-;;;;;;;;1572:382;;;:::o;2578:361::-;2715:4;2688:31;;:14;:23;2703:7;2688:23;;;;;;;;;;;;;;;;;;;;;:31;;;;2667:112;;;;;;;;;;;;:::i;:::-;;;;;;;;;2805:4;2789:35;;;2825:4;2831:2;2835:7;2789:54;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2858:34;2874:4;2880:2;2884:7;2858:34;;;;;;;;:::i;:::-;;;;;;;;2928:4;2902:14;:23;2917:7;2902:23;;;;;;;;;;;;:30;;;;;;;;;;;;;;;;;;2578:361;;;:::o;4388:162:13:-;4485:4;4508:18;:25;4527:5;4508:25;;;;;;;;;;;;;;;:35;4534:8;4508:35;;;;;;;;;;;;;;;;;;;;;;;;;4501:42;;4388:162;;;;:::o;483:45:24:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;829:155:21:-;914:4;952:25;937:40;;;:11;:40;;;;930:47;;829:155;;;:::o;13466:133:13:-;13547:16;13555:7;13547;:16::i;:::-;13539:53;;;;;;;;;;;;:::i;:::-;;;;;;;;;13466:133;:::o;640:96:18:-;693:7;719:10;712:17;;640:96;:::o;12768:171:13:-;12869:2;12842:15;:24;12858:7;12842:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;12924:7;12920:2;12886:46;;12895:23;12910:7;12895:14;:23::i;:::-;12886:46;;;;;;;;;;;;12768:171;;:::o;7540:261::-;7633:4;7649:13;7665:23;7680:7;7665:14;:23::i;:::-;7649:39;;7717:5;7706:16;;:7;:16;;;:52;;;;7726:32;7743:5;7750:7;7726:16;:32::i;:::-;7706:52;:87;;;;7786:7;7762:31;;:20;7774:7;7762:11;:20::i;:::-;:31;;;7706:87;7698:96;;;7540:261;;;;:::o;11423:1233::-;11577:4;11550:31;;:23;11565:7;11550:14;:23::i;:::-;:31;;;11542:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11655:1;11641:16;;:2;:16;;;;11633:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;11709:42;11730:4;11736:2;11740:7;11749:1;11709:20;:42::i;:::-;11878:4;11851:31;;:23;11866:7;11851:14;:23::i;:::-;:31;;;11843:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11993:15;:24;12009:7;11993:24;;;;;;;;;;;;11986:31;;;;;;;;;;;12480:1;12461:9;:15;12471:4;12461:15;;;;;;;;;;;;;;;;:20;;;;;;;;;;;12512:1;12495:9;:13;12505:2;12495:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;12552:2;12533:7;:16;12541:7;12533:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;12589:7;12585:2;12570:27;;12579:4;12570:27;;;;;;;;;;;;12608:41;12628:4;12634:2;12638:7;12647:1;12608:19;:41::i;:::-;11423:1233;;;:::o;827:112:19:-;892:7;918;:14;;;911:21;;827:112;;;:::o;945:123::-;1050:1;1032:7;:14;;;:19;;;;;;;;;;;945:123;:::o;9091:920:13:-;9184:1;9170:16;;:2;:16;;;;9162:61;;;;;;;;;;;;:::i;:::-;;;;;;;;;9242:16;9250:7;9242;:16::i;:::-;9241:17;9233:58;;;;;;;;;;;;:::i;:::-;;;;;;;;;9302:48;9331:1;9335:2;9339:7;9348:1;9302:20;:48::i;:::-;9446:16;9454:7;9446;:16::i;:::-;9445:17;9437:58;;;;;;;;;;;;:::i;:::-;;;;;;;;;9854:1;9837:9;:13;9847:2;9837:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;9895:2;9876:7;:16;9884:7;9876:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;9938:7;9934:2;9913:33;;9930:1;9913:33;;;;;;;;;;;;9957:47;9985:1;9989:2;9993:7;10002:1;9957:19;:47::i;:::-;9091:920;;:::o;1690:214:28:-;1789:16;1797:7;1789;:16::i;:::-;1781:75;;;;;;;;;;;;:::i;:::-;;;;;;;;;1888:9;1866:10;:19;1877:7;1866:19;;;;;;;;;;;:31;;;;;;;;;;;;:::i;:::-;;1690:214;;:::o;6838:115:13:-;6904:7;6930;:16;6938:7;6930:16;;;;;;;;;;;;;;;;;;;;;6923:23;;6838:115;;;:::o;13075:307::-;13225:8;13216:17;;:5;:17;;;;13208:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;13311:8;13273:18;:25;13292:5;13273:25;;;;;;;;;;;;;;;:35;13299:8;13273:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;13356:8;13334:41;;13349:5;13334:41;;;13366:8;13334:41;;;;;;:::i;:::-;;;;;;;;13075:307;;;:::o;6424:305::-;6574:28;6584:4;6590:2;6594:7;6574:9;:28::i;:::-;6620:47;6643:4;6649:2;6653:7;6662:4;6620:22;:47::i;:::-;6612:110;;;;;;;;;;;;:::i;:::-;;;;;;;;;6424:305;;;;:::o;3319:92::-;3370:13;3395:9;;;;;;;;;;;;;;3319:92;:::o;2801:276::-;2874:13;2899:23;2914:7;2899:14;:23::i;:::-;2933:21;2957:10;:8;:10::i;:::-;2933:34;;3008:1;2990:7;2984:21;:25;:86;;;;;;;;;;;;;;;;;3036:7;3045:18;:7;:16;:18::i;:::-;3019:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2984:86;2977:93;;;2801:276;;;:::o;7256:126::-;7321:4;7373:1;7344:31;;:17;7353:7;7344:8;:17::i;:::-;:31;;;;7337:38;;7256:126;;;:::o;15698:396::-;15882:1;15870:9;:13;15866:222;;;15919:1;15903:18;;:4;:18;;;15899:85;;15960:9;15941;:15;15951:4;15941:15;;;;;;;;;;;;;;;;:28;;;;;;;:::i;:::-;;;;;;;;15899:85;16015:1;16001:16;;:2;:16;;;15997:81;;16054:9;16037;:13;16047:2;16037:13;;;;;;;;;;;;;;;;:26;;;;;;;:::i;:::-;;;;;;;;15997:81;15866:222;15698:396;;;;:::o;16800:153::-;;;;;:::o;14151:831::-;14300:4;14320:15;:2;:13;;;:15::i;:::-;14316:660;;;14371:2;14355:36;;;14392:12;:10;:12::i;:::-;14406:4;14412:7;14421:4;14355:71;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;14351:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14610:1;14593:6;:13;:18;14589:321;;;14635:60;;;;;;;;;;:::i;:::-;;;;;;;;14589:321;14862:6;14856:13;14847:6;14843:2;14839:15;14832:38;14351:573;14486:41;;;14476:51;;;:6;:51;;;;14469:58;;;;;14316:660;14961:4;14954:11;;14151:831;;;;;;;:::o;415:696:20:-;471:13;520:14;557:1;537:17;548:5;537:10;:17::i;:::-;:21;520:38;;572:20;606:6;595:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;572:41;;627:11;753:6;749:2;745:15;737:6;733:28;726:35;;788:280;795:4;788:280;;;819:5;;;;;;;;958:8;953:2;946:5;942:14;937:30;932:3;924:44;1012:2;1003:11;;;;;;;;;;;;;;;;;1045:1;1036:5;:10;1032:21;;;1048:5;;1032:21;788:280;;;1088:6;1081:13;;;;;415:696;;;:::o;1175:320:17:-;1235:4;1487:1;1465:7;:19;;;:23;1458:30;;1175:320;;;:::o;9889:890:23:-;9942:7;9961:14;9978:1;9961:18;;10026:6;10017:5;:15;10013:99;;10061:6;10052:15;;;;;;;;;;;;;;;;;10095:2;10085:12;;;;10013:99;10138:6;10129:5;:15;10125:99;;10173:6;10164:15;;;;;;;;;;;;;;;;;10207:2;10197:12;;;;10125:99;10250:6;10241:5;:15;10237:99;;10285:6;10276:15;;;;;;;;;;;;;;;;;10319:2;10309:12;;;;10237:99;10362:5;10353;:14;10349:96;;10396:5;10387:14;;;;;;;;;;;;;;;;;10429:1;10419:11;;;;10349:96;10471:5;10462;:14;10458:96;;10505:5;10496:14;;;;;;;;;;;;;;;;;10538:1;10528:11;;;;10458:96;10580:5;10571;:14;10567:96;;10614:5;10605:14;;;;;;;;;;;;;;;;;10647:1;10637:11;;;;10567:96;10689:5;10680;:14;10676:64;;10724:1;10714:11;;;;10676:64;10766:6;10759:13;;;9889:890;;;:::o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:343:29:-;84:5;109:65;125:48;166:6;125:48;:::i;:::-;109:65;:::i;:::-;100:74;;197:6;190:5;183:21;235:4;228:5;224:16;273:3;264:6;259:3;255:16;252:25;249:2;;;290:1;287;280:12;249:2;303:41;337:6;332:3;327;303:41;:::i;:::-;90:260;;;;;;:::o;356:345::-;434:5;459:66;475:49;517:6;475:49;:::i;:::-;459:66;:::i;:::-;450:75;;548:6;541:5;534:21;586:4;579:5;575:16;624:3;615:6;610:3;606:16;603:25;600:2;;;641:1;638;631:12;600:2;654:41;688:6;683:3;678;654:41;:::i;:::-;440:261;;;;;;:::o;707:139::-;753:5;791:6;778:20;769:29;;807:33;834:5;807:33;:::i;:::-;759:87;;;;:::o;852:133::-;895:5;933:6;920:20;911:29;;949:30;973:5;949:30;:::i;:::-;901:84;;;;:::o;991:137::-;1036:5;1074:6;1061:20;1052:29;;1090:32;1116:5;1090:32;:::i;:::-;1042:86;;;;:::o;1134:141::-;1190:5;1221:6;1215:13;1206:22;;1237:32;1263:5;1237:32;:::i;:::-;1196:79;;;;:::o;1294:271::-;1349:5;1398:3;1391:4;1383:6;1379:17;1375:27;1365:2;;1416:1;1413;1406:12;1365:2;1456:6;1443:20;1481:78;1555:3;1547:6;1540:4;1532:6;1528:17;1481:78;:::i;:::-;1472:87;;1355:210;;;;;:::o;1585:273::-;1641:5;1690:3;1683:4;1675:6;1671:17;1667:27;1657:2;;1708:1;1705;1698:12;1657:2;1748:6;1735:20;1773:79;1848:3;1840:6;1833:4;1825:6;1821:17;1773:79;:::i;:::-;1764:88;;1647:211;;;;;:::o;1864:139::-;1910:5;1948:6;1935:20;1926:29;;1964:33;1991:5;1964:33;:::i;:::-;1916:87;;;;:::o;2009:262::-;2068:6;2117:2;2105:9;2096:7;2092:23;2088:32;2085:2;;;2133:1;2130;2123:12;2085:2;2176:1;2201:53;2246:7;2237:6;2226:9;2222:22;2201:53;:::i;:::-;2191:63;;2147:117;2075:196;;;;:::o;2277:407::-;2345:6;2353;2402:2;2390:9;2381:7;2377:23;2373:32;2370:2;;;2418:1;2415;2408:12;2370:2;2461:1;2486:53;2531:7;2522:6;2511:9;2507:22;2486:53;:::i;:::-;2476:63;;2432:117;2588:2;2614:53;2659:7;2650:6;2639:9;2635:22;2614:53;:::i;:::-;2604:63;;2559:118;2360:324;;;;;:::o;2690:552::-;2767:6;2775;2783;2832:2;2820:9;2811:7;2807:23;2803:32;2800:2;;;2848:1;2845;2838:12;2800:2;2891:1;2916:53;2961:7;2952:6;2941:9;2937:22;2916:53;:::i;:::-;2906:63;;2862:117;3018:2;3044:53;3089:7;3080:6;3069:9;3065:22;3044:53;:::i;:::-;3034:63;;2989:118;3146:2;3172:53;3217:7;3208:6;3197:9;3193:22;3172:53;:::i;:::-;3162:63;;3117:118;2790:452;;;;;:::o;3248:809::-;3343:6;3351;3359;3367;3416:3;3404:9;3395:7;3391:23;3387:33;3384:2;;;3433:1;3430;3423:12;3384:2;3476:1;3501:53;3546:7;3537:6;3526:9;3522:22;3501:53;:::i;:::-;3491:63;;3447:117;3603:2;3629:53;3674:7;3665:6;3654:9;3650:22;3629:53;:::i;:::-;3619:63;;3574:118;3731:2;3757:53;3802:7;3793:6;3782:9;3778:22;3757:53;:::i;:::-;3747:63;;3702:118;3887:2;3876:9;3872:18;3859:32;3918:18;3910:6;3907:30;3904:2;;;3950:1;3947;3940:12;3904:2;3978:62;4032:7;4023:6;4012:9;4008:22;3978:62;:::i;:::-;3968:72;;3830:220;3374:683;;;;;;;:::o;4063:811::-;4159:6;4167;4175;4183;4232:3;4220:9;4211:7;4207:23;4203:33;4200:2;;;4249:1;4246;4239:12;4200:2;4292:1;4317:53;4362:7;4353:6;4342:9;4338:22;4317:53;:::i;:::-;4307:63;;4263:117;4419:2;4445:53;4490:7;4481:6;4470:9;4466:22;4445:53;:::i;:::-;4435:63;;4390:118;4547:2;4573:53;4618:7;4609:6;4598:9;4594:22;4573:53;:::i;:::-;4563:63;;4518:118;4703:2;4692:9;4688:18;4675:32;4734:18;4726:6;4723:30;4720:2;;;4766:1;4763;4756:12;4720:2;4794:63;4849:7;4840:6;4829:9;4825:22;4794:63;:::i;:::-;4784:73;;4646:221;4190:684;;;;;;;:::o;4880:401::-;4945:6;4953;5002:2;4990:9;4981:7;4977:23;4973:32;4970:2;;;5018:1;5015;5008:12;4970:2;5061:1;5086:53;5131:7;5122:6;5111:9;5107:22;5086:53;:::i;:::-;5076:63;;5032:117;5188:2;5214:50;5256:7;5247:6;5236:9;5232:22;5214:50;:::i;:::-;5204:60;;5159:115;4960:321;;;;;:::o;5287:407::-;5355:6;5363;5412:2;5400:9;5391:7;5387:23;5383:32;5380:2;;;5428:1;5425;5418:12;5380:2;5471:1;5496:53;5541:7;5532:6;5521:9;5517:22;5496:53;:::i;:::-;5486:63;;5442:117;5598:2;5624:53;5669:7;5660:6;5649:9;5645:22;5624:53;:::i;:::-;5614:63;;5569:118;5370:324;;;;;:::o;5700:260::-;5758:6;5807:2;5795:9;5786:7;5782:23;5778:32;5775:2;;;5823:1;5820;5813:12;5775:2;5866:1;5891:52;5935:7;5926:6;5915:9;5911:22;5891:52;:::i;:::-;5881:62;;5837:116;5765:195;;;;:::o;5966:282::-;6035:6;6084:2;6072:9;6063:7;6059:23;6055:32;6052:2;;;6100:1;6097;6090:12;6052:2;6143:1;6168:63;6223:7;6214:6;6203:9;6199:22;6168:63;:::i;:::-;6158:73;;6114:127;6042:206;;;;:::o;6254:375::-;6323:6;6372:2;6360:9;6351:7;6347:23;6343:32;6340:2;;;6388:1;6385;6378:12;6340:2;6459:1;6448:9;6444:17;6431:31;6489:18;6481:6;6478:30;6475:2;;;6521:1;6518;6511:12;6475:2;6549:63;6604:7;6595:6;6584:9;6580:22;6549:63;:::i;:::-;6539:73;;6402:220;6330:299;;;;:::o;6635:520::-;6713:6;6721;6770:2;6758:9;6749:7;6745:23;6741:32;6738:2;;;6786:1;6783;6776:12;6738:2;6857:1;6846:9;6842:17;6829:31;6887:18;6879:6;6876:30;6873:2;;;6919:1;6916;6909:12;6873:2;6947:63;7002:7;6993:6;6982:9;6978:22;6947:63;:::i;:::-;6937:73;;6800:220;7059:2;7085:53;7130:7;7121:6;7110:9;7106:22;7085:53;:::i;:::-;7075:63;;7030:118;6728:427;;;;;:::o;7161:262::-;7220:6;7269:2;7257:9;7248:7;7244:23;7240:32;7237:2;;;7285:1;7282;7275:12;7237:2;7328:1;7353:53;7398:7;7389:6;7378:9;7374:22;7353:53;:::i;:::-;7343:63;;7299:117;7227:196;;;;:::o;7429:407::-;7497:6;7505;7554:2;7542:9;7533:7;7529:23;7525:32;7522:2;;;7570:1;7567;7560:12;7522:2;7613:1;7638:53;7683:7;7674:6;7663:9;7659:22;7638:53;:::i;:::-;7628:63;;7584:117;7740:2;7766:53;7811:7;7802:6;7791:9;7787:22;7766:53;:::i;:::-;7756:63;;7711:118;7512:324;;;;;:::o;7842:179::-;7911:10;7932:46;7974:3;7966:6;7932:46;:::i;:::-;8010:4;8005:3;8001:14;7987:28;;7922:99;;;;:::o;8027:118::-;8114:24;8132:5;8114:24;:::i;:::-;8109:3;8102:37;8092:53;;:::o;8181:732::-;8300:3;8329:54;8377:5;8329:54;:::i;:::-;8399:86;8478:6;8473:3;8399:86;:::i;:::-;8392:93;;8509:56;8559:5;8509:56;:::i;:::-;8588:7;8619:1;8604:284;8629:6;8626:1;8623:13;8604:284;;;8705:6;8699:13;8732:63;8791:3;8776:13;8732:63;:::i;:::-;8725:70;;8818:60;8871:6;8818:60;:::i;:::-;8808:70;;8664:224;8651:1;8648;8644:9;8639:14;;8604:284;;;8608:14;8904:3;8897:10;;8305:608;;;;;;;:::o;8919:109::-;9000:21;9015:5;9000:21;:::i;:::-;8995:3;8988:34;8978:50;;:::o;9034:360::-;9120:3;9148:38;9180:5;9148:38;:::i;:::-;9202:70;9265:6;9260:3;9202:70;:::i;:::-;9195:77;;9281:52;9326:6;9321:3;9314:4;9307:5;9303:16;9281:52;:::i;:::-;9358:29;9380:6;9358:29;:::i;:::-;9353:3;9349:39;9342:46;;9124:270;;;;;:::o;9400:364::-;9488:3;9516:39;9549:5;9516:39;:::i;:::-;9571:71;9635:6;9630:3;9571:71;:::i;:::-;9564:78;;9651:52;9696:6;9691:3;9684:4;9677:5;9673:16;9651:52;:::i;:::-;9728:29;9750:6;9728:29;:::i;:::-;9723:3;9719:39;9712:46;;9492:272;;;;;:::o;9770:377::-;9876:3;9904:39;9937:5;9904:39;:::i;:::-;9959:89;10041:6;10036:3;9959:89;:::i;:::-;9952:96;;10057:52;10102:6;10097:3;10090:4;10083:5;10079:16;10057:52;:::i;:::-;10134:6;10129:3;10125:16;10118:23;;9880:267;;;;;:::o;10153:366::-;10295:3;10316:67;10380:2;10375:3;10316:67;:::i;:::-;10309:74;;10392:93;10481:3;10392:93;:::i;:::-;10510:2;10505:3;10501:12;10494:19;;10299:220;;;:::o;10525:366::-;10667:3;10688:67;10752:2;10747:3;10688:67;:::i;:::-;10681:74;;10764:93;10853:3;10764:93;:::i;:::-;10882:2;10877:3;10873:12;10866:19;;10671:220;;;:::o;10897:366::-;11039:3;11060:67;11124:2;11119:3;11060:67;:::i;:::-;11053:74;;11136:93;11225:3;11136:93;:::i;:::-;11254:2;11249:3;11245:12;11238:19;;11043:220;;;:::o;11269:366::-;11411:3;11432:67;11496:2;11491:3;11432:67;:::i;:::-;11425:74;;11508:93;11597:3;11508:93;:::i;:::-;11626:2;11621:3;11617:12;11610:19;;11415:220;;;:::o;11641:366::-;11783:3;11804:67;11868:2;11863:3;11804:67;:::i;:::-;11797:74;;11880:93;11969:3;11880:93;:::i;:::-;11998:2;11993:3;11989:12;11982:19;;11787:220;;;:::o;12013:366::-;12155:3;12176:67;12240:2;12235:3;12176:67;:::i;:::-;12169:74;;12252:93;12341:3;12252:93;:::i;:::-;12370:2;12365:3;12361:12;12354:19;;12159:220;;;:::o;12385:366::-;12527:3;12548:67;12612:2;12607:3;12548:67;:::i;:::-;12541:74;;12624:93;12713:3;12624:93;:::i;:::-;12742:2;12737:3;12733:12;12726:19;;12531:220;;;:::o;12757:366::-;12899:3;12920:67;12984:2;12979:3;12920:67;:::i;:::-;12913:74;;12996:93;13085:3;12996:93;:::i;:::-;13114:2;13109:3;13105:12;13098:19;;12903:220;;;:::o;13129:366::-;13271:3;13292:67;13356:2;13351:3;13292:67;:::i;:::-;13285:74;;13368:93;13457:3;13368:93;:::i;:::-;13486:2;13481:3;13477:12;13470:19;;13275:220;;;:::o;13501:366::-;13643:3;13664:67;13728:2;13723:3;13664:67;:::i;:::-;13657:74;;13740:93;13829:3;13740:93;:::i;:::-;13858:2;13853:3;13849:12;13842:19;;13647:220;;;:::o;13873:366::-;14015:3;14036:67;14100:2;14095:3;14036:67;:::i;:::-;14029:74;;14112:93;14201:3;14112:93;:::i;:::-;14230:2;14225:3;14221:12;14214:19;;14019:220;;;:::o;14245:366::-;14387:3;14408:67;14472:2;14467:3;14408:67;:::i;:::-;14401:74;;14484:93;14573:3;14484:93;:::i;:::-;14602:2;14597:3;14593:12;14586:19;;14391:220;;;:::o;14617:366::-;14759:3;14780:67;14844:2;14839:3;14780:67;:::i;:::-;14773:74;;14856:93;14945:3;14856:93;:::i;:::-;14974:2;14969:3;14965:12;14958:19;;14763:220;;;:::o;14989:366::-;15131:3;15152:67;15216:2;15211:3;15152:67;:::i;:::-;15145:74;;15228:93;15317:3;15228:93;:::i;:::-;15346:2;15341:3;15337:12;15330:19;;15135:220;;;:::o;15361:108::-;15438:24;15456:5;15438:24;:::i;:::-;15433:3;15426:37;15416:53;;:::o;15475:118::-;15562:24;15580:5;15562:24;:::i;:::-;15557:3;15550:37;15540:53;;:::o;15599:435::-;15779:3;15801:95;15892:3;15883:6;15801:95;:::i;:::-;15794:102;;15913:95;16004:3;15995:6;15913:95;:::i;:::-;15906:102;;16025:3;16018:10;;15783:251;;;;;:::o;16040:222::-;16133:4;16171:2;16160:9;16156:18;16148:26;;16184:71;16252:1;16241:9;16237:17;16228:6;16184:71;:::i;:::-;16138:124;;;;:::o;16268:442::-;16417:4;16455:2;16444:9;16440:18;16432:26;;16468:71;16536:1;16525:9;16521:17;16512:6;16468:71;:::i;:::-;16549:72;16617:2;16606:9;16602:18;16593:6;16549:72;:::i;:::-;16631;16699:2;16688:9;16684:18;16675:6;16631:72;:::i;:::-;16422:288;;;;;;:::o;16716:640::-;16911:4;16949:3;16938:9;16934:19;16926:27;;16963:71;17031:1;17020:9;17016:17;17007:6;16963:71;:::i;:::-;17044:72;17112:2;17101:9;17097:18;17088:6;17044:72;:::i;:::-;17126;17194:2;17183:9;17179:18;17170:6;17126:72;:::i;:::-;17245:9;17239:4;17235:20;17230:2;17219:9;17215:18;17208:48;17273:76;17344:4;17335:6;17273:76;:::i;:::-;17265:84;;16916:440;;;;;;;:::o;17362:332::-;17483:4;17521:2;17510:9;17506:18;17498:26;;17534:71;17602:1;17591:9;17587:17;17578:6;17534:71;:::i;:::-;17615:72;17683:2;17672:9;17668:18;17659:6;17615:72;:::i;:::-;17488:206;;;;;:::o;17700:373::-;17843:4;17881:2;17870:9;17866:18;17858:26;;17930:9;17924:4;17920:20;17916:1;17905:9;17901:17;17894:47;17958:108;18061:4;18052:6;17958:108;:::i;:::-;17950:116;;17848:225;;;;:::o;18079:210::-;18166:4;18204:2;18193:9;18189:18;18181:26;;18217:65;18279:1;18268:9;18264:17;18255:6;18217:65;:::i;:::-;18171:118;;;;:::o;18295:313::-;18408:4;18446:2;18435:9;18431:18;18423:26;;18495:9;18489:4;18485:20;18481:1;18470:9;18466:17;18459:47;18523:78;18596:4;18587:6;18523:78;:::i;:::-;18515:86;;18413:195;;;;:::o;18614:419::-;18780:4;18818:2;18807:9;18803:18;18795:26;;18867:9;18861:4;18857:20;18853:1;18842:9;18838:17;18831:47;18895:131;19021:4;18895:131;:::i;:::-;18887:139;;18785:248;;;:::o;19039:419::-;19205:4;19243:2;19232:9;19228:18;19220:26;;19292:9;19286:4;19282:20;19278:1;19267:9;19263:17;19256:47;19320:131;19446:4;19320:131;:::i;:::-;19312:139;;19210:248;;;:::o;19464:419::-;19630:4;19668:2;19657:9;19653:18;19645:26;;19717:9;19711:4;19707:20;19703:1;19692:9;19688:17;19681:47;19745:131;19871:4;19745:131;:::i;:::-;19737:139;;19635:248;;;:::o;19889:419::-;20055:4;20093:2;20082:9;20078:18;20070:26;;20142:9;20136:4;20132:20;20128:1;20117:9;20113:17;20106:47;20170:131;20296:4;20170:131;:::i;:::-;20162:139;;20060:248;;;:::o;20314:419::-;20480:4;20518:2;20507:9;20503:18;20495:26;;20567:9;20561:4;20557:20;20553:1;20542:9;20538:17;20531:47;20595:131;20721:4;20595:131;:::i;:::-;20587:139;;20485:248;;;:::o;20739:419::-;20905:4;20943:2;20932:9;20928:18;20920:26;;20992:9;20986:4;20982:20;20978:1;20967:9;20963:17;20956:47;21020:131;21146:4;21020:131;:::i;:::-;21012:139;;20910:248;;;:::o;21164:419::-;21330:4;21368:2;21357:9;21353:18;21345:26;;21417:9;21411:4;21407:20;21403:1;21392:9;21388:17;21381:47;21445:131;21571:4;21445:131;:::i;:::-;21437:139;;21335:248;;;:::o;21589:419::-;21755:4;21793:2;21782:9;21778:18;21770:26;;21842:9;21836:4;21832:20;21828:1;21817:9;21813:17;21806:47;21870:131;21996:4;21870:131;:::i;:::-;21862:139;;21760:248;;;:::o;22014:419::-;22180:4;22218:2;22207:9;22203:18;22195:26;;22267:9;22261:4;22257:20;22253:1;22242:9;22238:17;22231:47;22295:131;22421:4;22295:131;:::i;:::-;22287:139;;22185:248;;;:::o;22439:419::-;22605:4;22643:2;22632:9;22628:18;22620:26;;22692:9;22686:4;22682:20;22678:1;22667:9;22663:17;22656:47;22720:131;22846:4;22720:131;:::i;:::-;22712:139;;22610:248;;;:::o;22864:419::-;23030:4;23068:2;23057:9;23053:18;23045:26;;23117:9;23111:4;23107:20;23103:1;23092:9;23088:17;23081:47;23145:131;23271:4;23145:131;:::i;:::-;23137:139;;23035:248;;;:::o;23289:419::-;23455:4;23493:2;23482:9;23478:18;23470:26;;23542:9;23536:4;23532:20;23528:1;23517:9;23513:17;23506:47;23570:131;23696:4;23570:131;:::i;:::-;23562:139;;23460:248;;;:::o;23714:419::-;23880:4;23918:2;23907:9;23903:18;23895:26;;23967:9;23961:4;23957:20;23953:1;23942:9;23938:17;23931:47;23995:131;24121:4;23995:131;:::i;:::-;23987:139;;23885:248;;;:::o;24139:419::-;24305:4;24343:2;24332:9;24328:18;24320:26;;24392:9;24386:4;24382:20;24378:1;24367:9;24363:17;24356:47;24420:131;24546:4;24420:131;:::i;:::-;24412:139;;24310:248;;;:::o;24564:222::-;24657:4;24695:2;24684:9;24680:18;24672:26;;24708:71;24776:1;24765:9;24761:17;24752:6;24708:71;:::i;:::-;24662:124;;;;:::o;24792:129::-;24826:6;24853:20;;:::i;:::-;24843:30;;24882:33;24910:4;24902:6;24882:33;:::i;:::-;24833:88;;;:::o;24927:75::-;24960:6;24993:2;24987:9;24977:19;;24967:35;:::o;25008:307::-;25069:4;25159:18;25151:6;25148:30;25145:2;;;25181:18;;:::i;:::-;25145:2;25219:29;25241:6;25219:29;:::i;:::-;25211:37;;25303:4;25297;25293:15;25285:23;;25074:241;;;:::o;25321:308::-;25383:4;25473:18;25465:6;25462:30;25459:2;;;25495:18;;:::i;:::-;25459:2;25533:29;25555:6;25533:29;:::i;:::-;25525:37;;25617:4;25611;25607:15;25599:23;;25388:241;;;:::o;25635:132::-;25702:4;25725:3;25717:11;;25755:4;25750:3;25746:14;25738:22;;25707:60;;;:::o;25773:114::-;25840:6;25874:5;25868:12;25858:22;;25847:40;;;:::o;25893:98::-;25944:6;25978:5;25972:12;25962:22;;25951:40;;;:::o;25997:99::-;26049:6;26083:5;26077:12;26067:22;;26056:40;;;:::o;26102:113::-;26172:4;26204;26199:3;26195:14;26187:22;;26177:38;;;:::o;26221:184::-;26320:11;26354:6;26349:3;26342:19;26394:4;26389:3;26385:14;26370:29;;26332:73;;;;:::o;26411:168::-;26494:11;26528:6;26523:3;26516:19;26568:4;26563:3;26559:14;26544:29;;26506:73;;;;:::o;26585:169::-;26669:11;26703:6;26698:3;26691:19;26743:4;26738:3;26734:14;26719:29;;26681:73;;;;:::o;26760:148::-;26862:11;26899:3;26884:18;;26874:34;;;;:::o;26914:305::-;26954:3;26973:20;26991:1;26973:20;:::i;:::-;26968:25;;27007:20;27025:1;27007:20;:::i;:::-;27002:25;;27161:1;27093:66;27089:74;27086:1;27083:81;27080:2;;;27167:18;;:::i;:::-;27080:2;27211:1;27208;27204:9;27197:16;;26958:261;;;;:::o;27225:191::-;27265:4;27285:20;27303:1;27285:20;:::i;:::-;27280:25;;27319:20;27337:1;27319:20;:::i;:::-;27314:25;;27358:1;27355;27352:8;27349:2;;;27363:18;;:::i;:::-;27349:2;27408:1;27405;27401:9;27393:17;;27270:146;;;;:::o;27422:96::-;27459:7;27488:24;27506:5;27488:24;:::i;:::-;27477:35;;27467:51;;;:::o;27524:90::-;27558:7;27601:5;27594:13;27587:21;27576:32;;27566:48;;;:::o;27620:149::-;27656:7;27696:66;27689:5;27685:78;27674:89;;27664:105;;;:::o;27775:126::-;27812:7;27852:42;27845:5;27841:54;27830:65;;27820:81;;;:::o;27907:77::-;27944:7;27973:5;27962:16;;27952:32;;;:::o;27990:154::-;28074:6;28069:3;28064;28051:30;28136:1;28127:6;28122:3;28118:16;28111:27;28041:103;;;:::o;28150:307::-;28218:1;28228:113;28242:6;28239:1;28236:13;28228:113;;;28327:1;28322:3;28318:11;28312:18;28308:1;28303:3;28299:11;28292:39;28264:2;28261:1;28257:10;28252:15;;28228:113;;;28359:6;28356:1;28353:13;28350:2;;;28439:1;28430:6;28425:3;28421:16;28414:27;28350:2;28199:258;;;;:::o;28463:320::-;28507:6;28544:1;28538:4;28534:12;28524:22;;28591:1;28585:4;28581:12;28612:18;28602:2;;28668:4;28660:6;28656:17;28646:27;;28602:2;28730;28722:6;28719:14;28699:18;28696:38;28693:2;;;28749:18;;:::i;:::-;28693:2;28514:269;;;;:::o;28789:281::-;28872:27;28894:4;28872:27;:::i;:::-;28864:6;28860:40;29002:6;28990:10;28987:22;28966:18;28954:10;28951:34;28948:62;28945:2;;;29013:18;;:::i;:::-;28945:2;29053:10;29049:2;29042:22;28832:238;;;:::o;29076:233::-;29115:3;29138:24;29156:5;29138:24;:::i;:::-;29129:33;;29184:66;29177:5;29174:77;29171:2;;;29254:18;;:::i;:::-;29171:2;29301:1;29294:5;29290:13;29283:20;;29119:190;;;:::o;29315:180::-;29363:77;29360:1;29353:88;29460:4;29457:1;29450:15;29484:4;29481:1;29474:15;29501:180;29549:77;29546:1;29539:88;29646:4;29643:1;29636:15;29670:4;29667:1;29660:15;29687:180;29735:77;29732:1;29725:88;29832:4;29829:1;29822:15;29856:4;29853:1;29846:15;29873:102;29914:6;29965:2;29961:7;29956:2;29949:5;29945:14;29941:28;29931:38;;29921:54;;;:::o;29981:232::-;30121:34;30117:1;30109:6;30105:14;30098:58;30190:15;30185:2;30177:6;30173:15;30166:40;30087:126;:::o;30219:237::-;30359:34;30355:1;30347:6;30343:14;30336:58;30428:20;30423:2;30415:6;30411:15;30404:45;30325:131;:::o;30462:224::-;30602:34;30598:1;30590:6;30586:14;30579:58;30671:7;30666:2;30658:6;30654:15;30647:32;30568:118;:::o;30692:178::-;30832:30;30828:1;30820:6;30816:14;30809:54;30798:72;:::o;30876:223::-;31016:34;31012:1;31004:6;31000:14;30993:58;31085:6;31080:2;31072:6;31068:15;31061:31;30982:117;:::o;31105:175::-;31245:27;31241:1;31233:6;31229:14;31222:51;31211:69;:::o;31286:228::-;31426:34;31422:1;31414:6;31410:14;31403:58;31495:11;31490:2;31482:6;31478:15;31471:36;31392:122;:::o;31520:233::-;31660:34;31656:1;31648:6;31644:14;31637:58;31729:16;31724:2;31716:6;31712:15;31705:41;31626:127;:::o;31759:182::-;31899:34;31895:1;31887:6;31883:14;31876:58;31865:76;:::o;31947:174::-;32087:26;32083:1;32075:6;32071:14;32064:50;32053:68;:::o;32127:220::-;32267:34;32263:1;32255:6;32251:14;32244:58;32336:3;32331:2;32323:6;32319:15;32312:28;32233:114;:::o;32353:248::-;32493:34;32489:1;32481:6;32477:14;32470:58;32562:31;32557:2;32549:6;32545:15;32538:56;32459:142;:::o;32607:236::-;32747:34;32743:1;32735:6;32731:14;32724:58;32816:19;32811:2;32803:6;32799:15;32792:44;32713:130;:::o;32849:221::-;32989:34;32985:1;32977:6;32973:14;32966:58;33058:4;33053:2;33045:6;33041:15;33034:29;32955:115;:::o;33076:122::-;33149:24;33167:5;33149:24;:::i;:::-;33142:5;33139:35;33129:2;;33188:1;33185;33178:12;33129:2;33119:79;:::o;33204:116::-;33274:21;33289:5;33274:21;:::i;:::-;33267:5;33264:32;33254:2;;33310:1;33307;33300:12;33254:2;33244:76;:::o;33326:120::-;33398:23;33415:5;33398:23;:::i;:::-;33391:5;33388:34;33378:2;;33436:1;33433;33426:12;33378:2;33368:78;:::o;33452:122::-;33525:24;33543:5;33525:24;:::i;:::-;33518:5;33515:35;33505:2;;33564:1;33561;33554:12;33505:2;33495:79;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"2703000","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"1624","bulkMintBadgesERC721(string,uint256)":"infinite","bulkMintERC721(uint256)":"infinite","getApproved(uint256)":"2700","getTokenIds(uint256)":"infinite","isApprovedForAll(address,address)":"infinite","name()":"infinite","ownerOf(uint256)":"1813","safeMint()":"infinite","safeMintBadge(string)":"infinite","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","supportsInterface(bytes4)":"797","symbol()":"infinite","tokenIds(uint256,uint256)":"infinite","tokenURI(uint256)":"infinite","transferBadgesToken(address,address,uint256)":"infinite","transferFrom(address,address,uint256)":"infinite","transferToken(address,address,uint256,string)":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","bulkMintBadgesERC721(string,uint256)":"d4d94b05","bulkMintERC721(uint256)":"2743dfd0","getApproved(uint256)":"081812fc","getTokenIds(uint256)":"57991d30","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeMint()":"6871ee40","safeMintBadge(string)":"265d9a6c","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenIds(uint256,uint256)":"eed8cc35","tokenURI(uint256)":"c87b56dd","transferBadgesToken(address,address,uint256)":"deeb9a3f","transferFrom(address,address,uint256)":"23b872dd","transferToken(address,address,uint256,string)":"7b2eb35c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TokenMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TokenTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"bulkMintBadgesERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"bulkMintERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"getTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"safeMintBadge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferBadgesToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Trustified-NonTransferable.sol\":\"TrustifiedNonTransferable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Trustified-NonTransferable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\nimport \\\"./comman/FERC721URIStorage.sol\\\";\\n\\ncontract TrustifiedNonTransferable is ERC721URIStorage {\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIdCounter;\\n    Counters.Counter private _eventIdCounter;\\n\\n    mapping(uint256 => uint256[]) public tokenIds;\\n\\n    mapping(uint256 => bool) private transferStatus;\\n\\n    event TokenMinted(address, uint256);\\n    event TokenTransfered(address, address, uint256);\\n\\n    constructor() ERC721(\\\"Trustified\\\", \\\"TFN\\\") {}\\n\\n    function safeMint() public returns (uint256) {\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n        _mint(address(this), tokenId);\\n        return tokenId;\\n    }\\n\\n     function safeMintBadge(string memory tokenURI) public returns (uint256) {\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n        _mint(address(this), tokenId);\\n        _setTokenURI(tokenId, tokenURI);\\n        return tokenId;\\n    }\\n\\n    function bulkMintERC721(uint256 quantity) public {\\n        uint256 eventId = _eventIdCounter.current();\\n        _eventIdCounter.increment();\\n        for (uint256 i = 0; i < quantity; i++) {\\n            uint256 tokenId = safeMint();\\n            tokenIds[eventId].push(tokenId);\\n        }\\n        emit TokenMinted(msg.sender, eventId);\\n    }\\n\\n\\n    function bulkMintBadgesERC721(string memory tokenUri, uint256 quantity) public {\\n        uint256 eventId = _eventIdCounter.current();\\n        _eventIdCounter.increment();\\n        for (uint256 i = 0; i < quantity; i++) {\\n            uint256 tokenId = safeMintBadge(tokenUri);\\n            tokenIds[eventId].push(tokenId);\\n        }\\n        emit TokenMinted(msg.sender, eventId);\\n    }\\n\\n    function getTokenIds(uint256 eventId)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return tokenIds[eventId];\\n    }\\n\\n    function transferToken(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        string memory tokenURI\\n    ) public {\\n        require(\\n            transferStatus[tokenId] != true,\\n            \\\"This token can not be transferred!\\\"\\n        );\\n        _setTokenURI(tokenId, tokenURI);\\n        IERC721(address(this)).transferFrom(from, to, tokenId);\\n        emit TokenTransfered(from, to, tokenId);\\n        transferStatus[tokenId] = true;\\n    }\\n\\n      function transferBadgesToken(address from, address to, uint256 tokenId) public {\\n        require(\\n            transferStatus[tokenId] != true,\\n            \\\"This token can not be transferred!\\\"\\n        );\\n        IERC721(address(this)).transferFrom(from, to, tokenId);\\n        emit TokenTransfered(from, to, tokenId);\\n        transferStatus[tokenId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x541355ba4627dd673f7d1d7b03bdde4cf7fe041c755379acd65bb2ccdbb98d9a\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/comman/FERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n     /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(\\n            _isApprovedOrOwner(from, tokenId),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0bf56000e946e4f517db67e7cfd33b163c947d5d7a715cf55658c338ea657d26\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1729,"contract":"contracts/Trustified-NonTransferable.sol:TrustifiedNonTransferable","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":1731,"contract":"contracts/Trustified-NonTransferable.sol:TrustifiedNonTransferable","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":1735,"contract":"contracts/Trustified-NonTransferable.sol:TrustifiedNonTransferable","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":1739,"contract":"contracts/Trustified-NonTransferable.sol:TrustifiedNonTransferable","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":1743,"contract":"contracts/Trustified-NonTransferable.sol:TrustifiedNonTransferable","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":1749,"contract":"contracts/Trustified-NonTransferable.sol:TrustifiedNonTransferable","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":5086,"contract":"contracts/Trustified-NonTransferable.sol:TrustifiedNonTransferable","label":"_tokenURIs","offset":0,"slot":"6","type":"t_mapping(t_uint256,t_string_storage)"},{"astId":4326,"contract":"contracts/Trustified-NonTransferable.sol:TrustifiedNonTransferable","label":"_tokenIdCounter","offset":0,"slot":"7","type":"t_struct(Counter)3167_storage"},{"astId":4329,"contract":"contracts/Trustified-NonTransferable.sol:TrustifiedNonTransferable","label":"_eventIdCounter","offset":0,"slot":"8","type":"t_struct(Counter)3167_storage"},{"astId":4334,"contract":"contracts/Trustified-NonTransferable.sol:TrustifiedNonTransferable","label":"tokenIds","offset":0,"slot":"9","type":"t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"},{"astId":4338,"contract":"contracts/Trustified-NonTransferable.sol:TrustifiedNonTransferable","label":"transferStatus","offset":0,"slot":"10","type":"t_mapping(t_uint256,t_bool)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)dyn_storage":{"base":"t_uint256","encoding":"dynamic_array","label":"uint256[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_array(t_uint256)dyn_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256[])","numberOfBytes":"32","value":"t_array(t_uint256)dyn_storage"},"t_mapping(t_uint256,t_bool)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Counter)3167_storage":{"encoding":"inplace","label":"struct Counters.Counter","members":[{"astId":3166,"contract":"contracts/Trustified-NonTransferable.sol:TrustifiedNonTransferable","label":"_value","offset":0,"slot":"0","type":"t_uint256"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Trustified.sol":{"Trustified":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"","type":"address"},{"indexed":false,"internalType":"uint256","name":"","type":"uint256"}],"name":"TokenMinted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"","type":"address"},{"indexed":false,"internalType":"address","name":"","type":"address"},{"indexed":false,"internalType":"uint256","name":"","type":"uint256"}],"name":"TokenTransfered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"tokenUri","type":"string"},{"internalType":"uint256","name":"quantity","type":"uint256"}],"name":"bulkMintBadgesERC721","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"quantity","type":"uint256"}],"name":"bulkMintERC721","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"eventId","type":"uint256"}],"name":"getTokenIds","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"safeMint","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"tokenURI","type":"string"}],"name":"safeMintBadge","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"tokenIds","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferBadgesToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"tokenURI","type":"string"}],"name":"transferToken","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:516:29","statements":[{"body":{"nodeType":"YulBlock","src":"58:269:29","statements":[{"nodeType":"YulAssignment","src":"68:22:29","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"82:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"88:1:29","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"78:3:29"},"nodeType":"YulFunctionCall","src":"78:12:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"68:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"99:38:29","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"129:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"135:1:29","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"125:3:29"},"nodeType":"YulFunctionCall","src":"125:12:29"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"103:18:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"176:51:29","statements":[{"nodeType":"YulAssignment","src":"190:27:29","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"204:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"212:4:29","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"200:3:29"},"nodeType":"YulFunctionCall","src":"200:17:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"190:6:29"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"156:18:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"149:6:29"},"nodeType":"YulFunctionCall","src":"149:26:29"},"nodeType":"YulIf","src":"146:2:29"},{"body":{"nodeType":"YulBlock","src":"279:42:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"293:16:29"},"nodeType":"YulFunctionCall","src":"293:18:29"},"nodeType":"YulExpressionStatement","src":"293:18:29"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"243:18:29"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"266:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"274:2:29","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"263:2:29"},"nodeType":"YulFunctionCall","src":"263:14:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"240:2:29"},"nodeType":"YulFunctionCall","src":"240:38:29"},"nodeType":"YulIf","src":"237:2:29"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"42:4:29","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"51:6:29","type":""}],"src":"7:320:29"},{"body":{"nodeType":"YulBlock","src":"361:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"378:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"381:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"371:6:29"},"nodeType":"YulFunctionCall","src":"371:88:29"},"nodeType":"YulExpressionStatement","src":"371:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"475:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"478:4:29","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"468:6:29"},"nodeType":"YulFunctionCall","src":"468:15:29"},"nodeType":"YulExpressionStatement","src":"468:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"499:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"502:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"492:6:29"},"nodeType":"YulFunctionCall","src":"492:15:29"},"nodeType":"YulExpressionStatement","src":"492:15:29"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"333:180:29"}]},"contents":"{\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n}\n","id":29,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b506040518060400160405280600a81526020017f54727573746966696564000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f54464e0000000000000000000000000000000000000000000000000000000000815250816000908051906020019062000096929190620000b8565b508060019080519060200190620000af929190620000b8565b505050620001cd565b828054620000c69062000168565b90600052602060002090601f016020900481019282620000ea576000855562000136565b82601f106200010557805160ff191683800117855562000136565b8280016001018555821562000136579182015b828111156200013557825182559160200191906001019062000118565b5b50905062000145919062000149565b5090565b5b80821115620001645760008160009055506001016200014a565b5090565b600060028204905060018216806200018157607f821691505b602082108114156200019857620001976200019e565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b61331180620001dd6000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80636871ee40116100b8578063b88d4fde1161007c578063b88d4fde1461035e578063c87b56dd1461037a578063d4d94b05146103aa578063deeb9a3f146103c6578063e985e9c5146103e2578063eed8cc351461041257610137565b80636871ee40146102ba57806370a08231146102d85780637b2eb35c1461030857806395d89b4114610324578063a22cb4651461034257610137565b8063265d9a6c116100ff578063265d9a6c146101f25780632743dfd01461022257806342842e0e1461023e57806357991d301461025a5780636352211e1461028a57610137565b806301ffc9a71461013c57806306fdde031461016c578063081812fc1461018a578063095ea7b3146101ba57806323b872dd146101d6575b600080fd5b6101566004803603810190610151919061241a565b610442565b604051610163919061298f565b60405180910390f35b610174610524565b60405161018191906129aa565b60405180910390f35b6101a4600480360381019061019f9190612501565b6105b6565b6040516101b191906128a6565b60405180910390f35b6101d460048036038101906101cf91906123de565b6105fc565b005b6101f060048036038101906101eb919061225d565b610714565b005b61020c6004803603810190610207919061246c565b61076d565b6040516102199190612b6c565b60405180910390f35b61023c60048036038101906102379190612501565b6107a3565b005b6102586004803603810190610253919061225d565b61085e565b005b610274600480360381019061026f9190612501565b61087e565b604051610281919061296d565b60405180910390f35b6102a4600480360381019061029f9190612501565b6108e9565b6040516102b191906128a6565b60405180910390f35b6102c2610970565b6040516102cf9190612b6c565b60405180910390f35b6102f260048036038101906102ed91906121f8565b61099a565b6040516102ff9190612b6c565b60405180910390f35b610322600480360381019061031d9190612327565b610a52565b005b61032c610b0c565b60405161033991906129aa565b60405180910390f35b61035c600480360381019061035791906123a2565b610b9e565b005b610378600480360381019061037391906122ac565b610bb4565b005b610394600480360381019061038f9190612501565b610c16565b6040516103a191906129aa565b60405180910390f35b6103c460048036038101906103bf91906124ad565b610d29565b005b6103e060048036038101906103db919061225d565b610de6565b005b6103fc60048036038101906103f79190612221565b610e95565b604051610409919061298f565b60405180910390f35b61042c6004803603810190610427919061252a565b610f29565b6040516104399190612b6c565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061050d57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061051d575061051c82610f5a565b5b9050919050565b60606000805461053390612dca565b80601f016020809104026020016040519081016040528092919081815260200182805461055f90612dca565b80156105ac5780601f10610581576101008083540402835291602001916105ac565b820191906000526020600020905b81548152906001019060200180831161058f57829003601f168201915b5050505050905090565b60006105c182610fc4565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610607826108e9565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610678576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066f90612b0c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661069761100f565b73ffffffffffffffffffffffffffffffffffffffff1614806106c657506106c5816106c061100f565b610e95565b5b610705576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fc90612b2c565b60405180910390fd5b61070f8383611017565b505050565b61071e83826110d0565b61075d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075490612b4c565b60405180910390fd5b610768838383611165565b505050565b60008061077a600761145f565b9050610786600761146d565b6107903082611483565b61079a81846116a1565b80915050919050565b60006107af600861145f565b90506107bb600861146d565b60005b828110156108205760006107d0610970565b90506009600084815260200190815260200160002081908060018154018082558091505060019003906000526020600020016000909190919091505550808061081890612e2d565b9150506107be565b507fb9144c96c86541f6fa89c9f2f02495cccf4b08cd6643e26d34ee00aa586558a83382604051610852929190612944565b60405180910390a15050565b61087983838360405180602001604052806000815250610bb4565b505050565b6060600960008381526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156108dd57602002820191906000526020600020905b8154815260200190600101908083116108c9575b50505050509050919050565b6000806108f583611715565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610967576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095e90612aec565b60405180910390fd5b80915050919050565b60008061097d600761145f565b9050610989600761146d565b6109933082611483565b8091505090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0290612a8c565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610a5c82826116a1565b3073ffffffffffffffffffffffffffffffffffffffff166323b872dd8585856040518463ffffffff1660e01b8152600401610a99939291906128c1565b600060405180830381600087803b158015610ab357600080fd5b505af1158015610ac7573d6000803e3d6000fd5b505050507fec61728879a33aa50b55e1f4789dcfc1c680f30a24d7b8694a9f874e242a97b4848484604051610afe939291906128c1565b60405180910390a150505050565b606060018054610b1b90612dca565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4790612dca565b8015610b945780601f10610b6957610100808354040283529160200191610b94565b820191906000526020600020905b815481529060010190602001808311610b7757829003601f168201915b5050505050905090565b610bb0610ba961100f565b8383611752565b5050565b610bc5610bbf61100f565b836110d0565b610c04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bfb906129cc565b60405180910390fd5b610c10848484846118bf565b50505050565b6060610c2182610fc4565b6000600660008481526020019081526020016000208054610c4190612dca565b80601f0160208091040260200160405190810160405280929190818152602001828054610c6d90612dca565b8015610cba5780601f10610c8f57610100808354040283529160200191610cba565b820191906000526020600020905b815481529060010190602001808311610c9d57829003601f168201915b505050505090506000610ccb61191b565b9050600081511415610ce1578192505050610d24565b600082511115610d16578082604051602001610cfe929190612882565b60405160208183030381529060405292505050610d24565b610d1f84611932565b925050505b919050565b6000610d35600861145f565b9050610d41600861146d565b60005b82811015610da7576000610d578561076d565b905060096000848152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190915055508080610d9f90612e2d565b915050610d44565b507fb9144c96c86541f6fa89c9f2f02495cccf4b08cd6643e26d34ee00aa586558a83382604051610dd9929190612944565b60405180910390a1505050565b3073ffffffffffffffffffffffffffffffffffffffff166323b872dd8484846040518463ffffffff1660e01b8152600401610e23939291906128c1565b600060405180830381600087803b158015610e3d57600080fd5b505af1158015610e51573d6000803e3d6000fd5b505050507fec61728879a33aa50b55e1f4789dcfc1c680f30a24d7b8694a9f874e242a97b4838383604051610e88939291906128c1565b60405180910390a1505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60096020528160005260406000208181548110610f4557600080fd5b90600052602060002001600091509150505481565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610fcd8161199a565b61100c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100390612aec565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661108a836108e9565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806110dc836108e9565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061111e575061111d8185610e95565b5b8061115c57508373ffffffffffffffffffffffffffffffffffffffff16611144846105b6565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611185826108e9565b73ffffffffffffffffffffffffffffffffffffffff16146111db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d290612a0c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561124b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124290612a4c565b60405180910390fd5b61125883838360016119db565b8273ffffffffffffffffffffffffffffffffffffffff16611278826108e9565b73ffffffffffffffffffffffffffffffffffffffff16146112ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c590612a0c565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461145a8383836001611b01565b505050565b600081600001549050919050565b6001816000016000828254019250508190555050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156114f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ea90612acc565b60405180910390fd5b6114fc8161199a565b1561153c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153390612a2c565b60405180910390fd5b61154a6000838360016119db565b6115538161199a565b15611593576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158a90612a2c565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461169d600083836001611b01565b5050565b6116aa8261199a565b6116e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116e090612aac565b60405180910390fd5b8060066000848152602001908152602001600020908051906020019061171092919061201c565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156117c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b890612a6c565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516118b2919061298f565b60405180910390a3505050565b6118ca848484611165565b6118d684848484611b07565b611915576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190c906129ec565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606061193d82610fc4565b600061194761191b565b905060008151116119675760405180602001604052806000815250611992565b8061197184611c9e565b604051602001611982929190612882565b6040516020818303038152906040525b915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166119bc83611715565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6001811115611afb57600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611a6f5780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a679190612ce0565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611afa5780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611af29190612c8a565b925050819055505b5b50505050565b50505050565b6000611b288473ffffffffffffffffffffffffffffffffffffffff16611dc2565b15611c91578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611b5161100f565b8786866040518563ffffffff1660e01b8152600401611b7394939291906128f8565b602060405180830381600087803b158015611b8d57600080fd5b505af1925050508015611bbe57506040513d601f19601f82011682018060405250810190611bbb9190612443565b60015b611c41573d8060008114611bee576040519150601f19603f3d011682016040523d82523d6000602084013e611bf3565b606091505b50600081511415611c39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c30906129ec565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611c96565b600190505b949350505050565b606060006001611cad84611de5565b01905060008167ffffffffffffffff811115611cf2577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611d245781602001600182028036833780820191505090505b509050600082602001820190505b600115611db7578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611da1577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0494506000851415611db257611db7565b611d32565b819350505050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611e69577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611e5f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611ecc576d04ee2d6d415b85acef81000000008381611ec2577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506020810190505b662386f26fc100008310611f2157662386f26fc100008381611f17577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506010810190505b6305f5e1008310611f70576305f5e1008381611f66577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506008810190505b6127108310611fbb576127108381611fb1577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506004810190505b606483106120045760648381611ffa577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506002810190505b600a8310612013576001810190505b80915050919050565b82805461202890612dca565b90600052602060002090601f01602090048101928261204a5760008555612091565b82601f1061206357805160ff1916838001178555612091565b82800160010185558215612091579182015b82811115612090578251825591602001919060010190612075565b5b50905061209e91906120a2565b5090565b5b808211156120bb5760008160009055506001016120a3565b5090565b60006120d26120cd84612bac565b612b87565b9050828152602081018484840111156120ea57600080fd5b6120f5848285612d88565b509392505050565b600061211061210b84612bdd565b612b87565b90508281526020810184848401111561212857600080fd5b612133848285612d88565b509392505050565b60008135905061214a8161327f565b92915050565b60008135905061215f81613296565b92915050565b600081359050612174816132ad565b92915050565b600081519050612189816132ad565b92915050565b600082601f8301126121a057600080fd5b81356121b08482602086016120bf565b91505092915050565b600082601f8301126121ca57600080fd5b81356121da8482602086016120fd565b91505092915050565b6000813590506121f2816132c4565b92915050565b60006020828403121561220a57600080fd5b60006122188482850161213b565b91505092915050565b6000806040838503121561223457600080fd5b60006122428582860161213b565b92505060206122538582860161213b565b9150509250929050565b60008060006060848603121561227257600080fd5b60006122808682870161213b565b93505060206122918682870161213b565b92505060406122a2868287016121e3565b9150509250925092565b600080600080608085870312156122c257600080fd5b60006122d08782880161213b565b94505060206122e18782880161213b565b93505060406122f2878288016121e3565b925050606085013567ffffffffffffffff81111561230f57600080fd5b61231b8782880161218f565b91505092959194509250565b6000806000806080858703121561233d57600080fd5b600061234b8782880161213b565b945050602061235c8782880161213b565b935050604061236d878288016121e3565b925050606085013567ffffffffffffffff81111561238a57600080fd5b612396878288016121b9565b91505092959194509250565b600080604083850312156123b557600080fd5b60006123c38582860161213b565b92505060206123d485828601612150565b9150509250929050565b600080604083850312156123f157600080fd5b60006123ff8582860161213b565b9250506020612410858286016121e3565b9150509250929050565b60006020828403121561242c57600080fd5b600061243a84828501612165565b91505092915050565b60006020828403121561245557600080fd5b60006124638482850161217a565b91505092915050565b60006020828403121561247e57600080fd5b600082013567ffffffffffffffff81111561249857600080fd5b6124a4848285016121b9565b91505092915050565b600080604083850312156124c057600080fd5b600083013567ffffffffffffffff8111156124da57600080fd5b6124e6858286016121b9565b92505060206124f7858286016121e3565b9150509250929050565b60006020828403121561251357600080fd5b6000612521848285016121e3565b91505092915050565b6000806040838503121561253d57600080fd5b600061254b858286016121e3565b925050602061255c858286016121e3565b9150509250929050565b60006125728383612864565b60208301905092915050565b61258781612d14565b82525050565b600061259882612c1e565b6125a28185612c4c565b93506125ad83612c0e565b8060005b838110156125de5781516125c58882612566565b97506125d083612c3f565b9250506001810190506125b1565b5085935050505092915050565b6125f481612d26565b82525050565b600061260582612c29565b61260f8185612c5d565b935061261f818560208601612d97565b61262881612f03565b840191505092915050565b600061263e82612c34565b6126488185612c6e565b9350612658818560208601612d97565b61266181612f03565b840191505092915050565b600061267782612c34565b6126818185612c7f565b9350612691818560208601612d97565b80840191505092915050565b60006126aa602d83612c6e565b91506126b582612f14565b604082019050919050565b60006126cd603283612c6e565b91506126d882612f63565b604082019050919050565b60006126f0602583612c6e565b91506126fb82612fb2565b604082019050919050565b6000612713601c83612c6e565b915061271e82613001565b602082019050919050565b6000612736602483612c6e565b91506127418261302a565b604082019050919050565b6000612759601983612c6e565b915061276482613079565b602082019050919050565b600061277c602983612c6e565b9150612787826130a2565b604082019050919050565b600061279f602e83612c6e565b91506127aa826130f1565b604082019050919050565b60006127c2602083612c6e565b91506127cd82613140565b602082019050919050565b60006127e5601883612c6e565b91506127f082613169565b602082019050919050565b6000612808602183612c6e565b915061281382613192565b604082019050919050565b600061282b603d83612c6e565b9150612836826131e1565b604082019050919050565b600061284e603183612c6e565b915061285982613230565b604082019050919050565b61286d81612d7e565b82525050565b61287c81612d7e565b82525050565b600061288e828561266c565b915061289a828461266c565b91508190509392505050565b60006020820190506128bb600083018461257e565b92915050565b60006060820190506128d6600083018661257e565b6128e3602083018561257e565b6128f06040830184612873565b949350505050565b600060808201905061290d600083018761257e565b61291a602083018661257e565b6129276040830185612873565b818103606083015261293981846125fa565b905095945050505050565b6000604082019050612959600083018561257e565b6129666020830184612873565b9392505050565b60006020820190508181036000830152612987818461258d565b905092915050565b60006020820190506129a460008301846125eb565b92915050565b600060208201905081810360008301526129c48184612633565b905092915050565b600060208201905081810360008301526129e58161269d565b9050919050565b60006020820190508181036000830152612a05816126c0565b9050919050565b60006020820190508181036000830152612a25816126e3565b9050919050565b60006020820190508181036000830152612a4581612706565b9050919050565b60006020820190508181036000830152612a6581612729565b9050919050565b60006020820190508181036000830152612a858161274c565b9050919050565b60006020820190508181036000830152612aa58161276f565b9050919050565b60006020820190508181036000830152612ac581612792565b9050919050565b60006020820190508181036000830152612ae5816127b5565b9050919050565b60006020820190508181036000830152612b05816127d8565b9050919050565b60006020820190508181036000830152612b25816127fb565b9050919050565b60006020820190508181036000830152612b458161281e565b9050919050565b60006020820190508181036000830152612b6581612841565b9050919050565b6000602082019050612b816000830184612873565b92915050565b6000612b91612ba2565b9050612b9d8282612dfc565b919050565b6000604051905090565b600067ffffffffffffffff821115612bc757612bc6612ed4565b5b612bd082612f03565b9050602081019050919050565b600067ffffffffffffffff821115612bf857612bf7612ed4565b5b612c0182612f03565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000612c9582612d7e565b9150612ca083612d7e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612cd557612cd4612e76565b5b828201905092915050565b6000612ceb82612d7e565b9150612cf683612d7e565b925082821015612d0957612d08612e76565b5b828203905092915050565b6000612d1f82612d5e565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015612db5578082015181840152602081019050612d9a565b83811115612dc4576000848401525b50505050565b60006002820490506001821680612de257607f821691505b60208210811415612df657612df5612ea5565b5b50919050565b612e0582612f03565b810181811067ffffffffffffffff82111715612e2457612e23612ed4565b5b80604052505050565b6000612e3882612d7e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612e6b57612e6a612e76565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b61328881612d14565b811461329357600080fd5b50565b61329f81612d26565b81146132aa57600080fd5b50565b6132b681612d32565b81146132c157600080fd5b50565b6132cd81612d7e565b81146132d857600080fd5b5056fea264697066735822122010ebf29840859f837bf83bb229803d468ca3125c27424a9a3513a9b7555fb6e364736f6c63430008040033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xA DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5472757374696669656400000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x54464E0000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x0 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x96 SWAP3 SWAP2 SWAP1 PUSH3 0xB8 JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0xAF SWAP3 SWAP2 SWAP1 PUSH3 0xB8 JUMP JUMPDEST POP POP POP PUSH3 0x1CD JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0xC6 SWAP1 PUSH3 0x168 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0xEA JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x136 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x105 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x136 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x136 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x135 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x118 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0x145 SWAP2 SWAP1 PUSH3 0x149 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x164 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x14A JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x181 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x198 JUMPI PUSH3 0x197 PUSH3 0x19E JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x3311 DUP1 PUSH3 0x1DD PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x137 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6871EE40 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x35E JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x37A JUMPI DUP1 PUSH4 0xD4D94B05 EQ PUSH2 0x3AA JUMPI DUP1 PUSH4 0xDEEB9A3F EQ PUSH2 0x3C6 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x3E2 JUMPI DUP1 PUSH4 0xEED8CC35 EQ PUSH2 0x412 JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x6871EE40 EQ PUSH2 0x2BA JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2D8 JUMPI DUP1 PUSH4 0x7B2EB35C EQ PUSH2 0x308 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x324 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x342 JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x265D9A6C GT PUSH2 0xFF JUMPI DUP1 PUSH4 0x265D9A6C EQ PUSH2 0x1F2 JUMPI DUP1 PUSH4 0x2743DFD0 EQ PUSH2 0x222 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x23E JUMPI DUP1 PUSH4 0x57991D30 EQ PUSH2 0x25A JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x28A JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x16C JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x18A JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1BA JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1D6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x156 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x151 SWAP2 SWAP1 PUSH2 0x241A JUMP JUMPDEST PUSH2 0x442 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x163 SWAP2 SWAP1 PUSH2 0x298F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x174 PUSH2 0x524 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x181 SWAP2 SWAP1 PUSH2 0x29AA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x2501 JUMP JUMPDEST PUSH2 0x5B6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B1 SWAP2 SWAP1 PUSH2 0x28A6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1CF SWAP2 SWAP1 PUSH2 0x23DE JUMP JUMPDEST PUSH2 0x5FC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x225D JUMP JUMPDEST PUSH2 0x714 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x20C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x207 SWAP2 SWAP1 PUSH2 0x246C JUMP JUMPDEST PUSH2 0x76D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x219 SWAP2 SWAP1 PUSH2 0x2B6C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x237 SWAP2 SWAP1 PUSH2 0x2501 JUMP JUMPDEST PUSH2 0x7A3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x258 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x253 SWAP2 SWAP1 PUSH2 0x225D JUMP JUMPDEST PUSH2 0x85E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x274 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x26F SWAP2 SWAP1 PUSH2 0x2501 JUMP JUMPDEST PUSH2 0x87E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x281 SWAP2 SWAP1 PUSH2 0x296D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x29F SWAP2 SWAP1 PUSH2 0x2501 JUMP JUMPDEST PUSH2 0x8E9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B1 SWAP2 SWAP1 PUSH2 0x28A6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2C2 PUSH2 0x970 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2CF SWAP2 SWAP1 PUSH2 0x2B6C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2F2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2ED SWAP2 SWAP1 PUSH2 0x21F8 JUMP JUMPDEST PUSH2 0x99A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2FF SWAP2 SWAP1 PUSH2 0x2B6C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x322 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x31D SWAP2 SWAP1 PUSH2 0x2327 JUMP JUMPDEST PUSH2 0xA52 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x32C PUSH2 0xB0C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x339 SWAP2 SWAP1 PUSH2 0x29AA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x35C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x357 SWAP2 SWAP1 PUSH2 0x23A2 JUMP JUMPDEST PUSH2 0xB9E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x378 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x373 SWAP2 SWAP1 PUSH2 0x22AC JUMP JUMPDEST PUSH2 0xBB4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x394 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x38F SWAP2 SWAP1 PUSH2 0x2501 JUMP JUMPDEST PUSH2 0xC16 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3A1 SWAP2 SWAP1 PUSH2 0x29AA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3BF SWAP2 SWAP1 PUSH2 0x24AD JUMP JUMPDEST PUSH2 0xD29 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3E0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3DB SWAP2 SWAP1 PUSH2 0x225D JUMP JUMPDEST PUSH2 0xDE6 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3FC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3F7 SWAP2 SWAP1 PUSH2 0x2221 JUMP JUMPDEST PUSH2 0xE95 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x409 SWAP2 SWAP1 PUSH2 0x298F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x42C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x427 SWAP2 SWAP1 PUSH2 0x252A JUMP JUMPDEST PUSH2 0xF29 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x439 SWAP2 SWAP1 PUSH2 0x2B6C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x50D JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x51D JUMPI POP PUSH2 0x51C DUP3 PUSH2 0xF5A JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x533 SWAP1 PUSH2 0x2DCA JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x55F SWAP1 PUSH2 0x2DCA JUMP JUMPDEST DUP1 ISZERO PUSH2 0x5AC JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x581 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x5AC JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x58F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5C1 DUP3 PUSH2 0xFC4 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x607 DUP3 PUSH2 0x8E9 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x678 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66F SWAP1 PUSH2 0x2B0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x697 PUSH2 0x100F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x6C6 JUMPI POP PUSH2 0x6C5 DUP2 PUSH2 0x6C0 PUSH2 0x100F JUMP JUMPDEST PUSH2 0xE95 JUMP JUMPDEST JUMPDEST PUSH2 0x705 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FC SWAP1 PUSH2 0x2B2C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x70F DUP4 DUP4 PUSH2 0x1017 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x71E DUP4 DUP3 PUSH2 0x10D0 JUMP JUMPDEST PUSH2 0x75D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x754 SWAP1 PUSH2 0x2B4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x768 DUP4 DUP4 DUP4 PUSH2 0x1165 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x77A PUSH1 0x7 PUSH2 0x145F JUMP JUMPDEST SWAP1 POP PUSH2 0x786 PUSH1 0x7 PUSH2 0x146D JUMP JUMPDEST PUSH2 0x790 ADDRESS DUP3 PUSH2 0x1483 JUMP JUMPDEST PUSH2 0x79A DUP2 DUP5 PUSH2 0x16A1 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7AF PUSH1 0x8 PUSH2 0x145F JUMP JUMPDEST SWAP1 POP PUSH2 0x7BB PUSH1 0x8 PUSH2 0x146D JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x820 JUMPI PUSH1 0x0 PUSH2 0x7D0 PUSH2 0x970 JUMP JUMPDEST SWAP1 POP PUSH1 0x9 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE POP DUP1 DUP1 PUSH2 0x818 SWAP1 PUSH2 0x2E2D JUMP JUMPDEST SWAP2 POP POP PUSH2 0x7BE JUMP JUMPDEST POP PUSH32 0xB9144C96C86541F6FA89C9F2F02495CCCF4B08CD6643E26D34EE00AA586558A8 CALLER DUP3 PUSH1 0x40 MLOAD PUSH2 0x852 SWAP3 SWAP2 SWAP1 PUSH2 0x2944 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x879 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xBB4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x9 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x8DD JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x8C9 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x8F5 DUP4 PUSH2 0x1715 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x967 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x95E SWAP1 PUSH2 0x2AEC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x97D PUSH1 0x7 PUSH2 0x145F JUMP JUMPDEST SWAP1 POP PUSH2 0x989 PUSH1 0x7 PUSH2 0x146D JUMP JUMPDEST PUSH2 0x993 ADDRESS DUP3 PUSH2 0x1483 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xA0B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA02 SWAP1 PUSH2 0x2A8C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA5C DUP3 DUP3 PUSH2 0x16A1 JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA99 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x28C1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xAC7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH32 0xEC61728879A33AA50B55E1F4789DCFC1C680F30A24D7B8694A9F874E242A97B4 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0xAFE SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x28C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0xB1B SWAP1 PUSH2 0x2DCA JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xB47 SWAP1 PUSH2 0x2DCA JUMP JUMPDEST DUP1 ISZERO PUSH2 0xB94 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xB69 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xB94 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xB77 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xBB0 PUSH2 0xBA9 PUSH2 0x100F JUMP JUMPDEST DUP4 DUP4 PUSH2 0x1752 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xBC5 PUSH2 0xBBF PUSH2 0x100F JUMP JUMPDEST DUP4 PUSH2 0x10D0 JUMP JUMPDEST PUSH2 0xC04 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBFB SWAP1 PUSH2 0x29CC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC10 DUP5 DUP5 DUP5 DUP5 PUSH2 0x18BF JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xC21 DUP3 PUSH2 0xFC4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH2 0xC41 SWAP1 PUSH2 0x2DCA JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xC6D SWAP1 PUSH2 0x2DCA JUMP JUMPDEST DUP1 ISZERO PUSH2 0xCBA JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xC8F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xCBA JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xC9D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0xCCB PUSH2 0x191B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0xCE1 JUMPI DUP2 SWAP3 POP POP POP PUSH2 0xD24 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0xD16 JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xCFE SWAP3 SWAP2 SWAP1 PUSH2 0x2882 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP PUSH2 0xD24 JUMP JUMPDEST PUSH2 0xD1F DUP5 PUSH2 0x1932 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD35 PUSH1 0x8 PUSH2 0x145F JUMP JUMPDEST SWAP1 POP PUSH2 0xD41 PUSH1 0x8 PUSH2 0x146D JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xDA7 JUMPI PUSH1 0x0 PUSH2 0xD57 DUP6 PUSH2 0x76D JUMP JUMPDEST SWAP1 POP PUSH1 0x9 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE POP DUP1 DUP1 PUSH2 0xD9F SWAP1 PUSH2 0x2E2D JUMP JUMPDEST SWAP2 POP POP PUSH2 0xD44 JUMP JUMPDEST POP PUSH32 0xB9144C96C86541F6FA89C9F2F02495CCCF4B08CD6643E26D34EE00AA586558A8 CALLER DUP3 PUSH1 0x40 MLOAD PUSH2 0xDD9 SWAP3 SWAP2 SWAP1 PUSH2 0x2944 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE23 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x28C1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xE51 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH32 0xEC61728879A33AA50B55E1F4789DCFC1C680F30A24D7B8694A9F874E242A97B4 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0xE88 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x28C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xF45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFCD DUP2 PUSH2 0x199A JUMP JUMPDEST PUSH2 0x100C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1003 SWAP1 PUSH2 0x2AEC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x108A DUP4 PUSH2 0x8E9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x10DC DUP4 PUSH2 0x8E9 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x111E JUMPI POP PUSH2 0x111D DUP2 DUP6 PUSH2 0xE95 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x115C JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1144 DUP5 PUSH2 0x5B6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1185 DUP3 PUSH2 0x8E9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x11DB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11D2 SWAP1 PUSH2 0x2A0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x124B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1242 SWAP1 PUSH2 0x2A4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1258 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x19DB JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1278 DUP3 PUSH2 0x8E9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x12CE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12C5 SWAP1 PUSH2 0x2A0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x145A DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1B01 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x14F3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14EA SWAP1 PUSH2 0x2ACC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x14FC DUP2 PUSH2 0x199A JUMP JUMPDEST ISZERO PUSH2 0x153C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1533 SWAP1 PUSH2 0x2A2C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x154A PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x19DB JUMP JUMPDEST PUSH2 0x1553 DUP2 PUSH2 0x199A JUMP JUMPDEST ISZERO PUSH2 0x1593 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x158A SWAP1 PUSH2 0x2A2C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x169D PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1B01 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x16AA DUP3 PUSH2 0x199A JUMP JUMPDEST PUSH2 0x16E9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16E0 SWAP1 PUSH2 0x2AAC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x1710 SWAP3 SWAP2 SWAP1 PUSH2 0x201C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x17C1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17B8 SWAP1 PUSH2 0x2A6C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x18B2 SWAP2 SWAP1 PUSH2 0x298F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x18CA DUP5 DUP5 DUP5 PUSH2 0x1165 JUMP JUMPDEST PUSH2 0x18D6 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1B07 JUMP JUMPDEST PUSH2 0x1915 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x190C SWAP1 PUSH2 0x29EC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x193D DUP3 PUSH2 0xFC4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1947 PUSH2 0x191B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x1967 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1992 JUMP JUMPDEST DUP1 PUSH2 0x1971 DUP5 PUSH2 0x1C9E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1982 SWAP3 SWAP2 SWAP1 PUSH2 0x2882 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x19BC DUP4 PUSH2 0x1715 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1AFB JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1A6F JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1A67 SWAP2 SWAP1 PUSH2 0x2CE0 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1AFA JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1AF2 SWAP2 SWAP1 PUSH2 0x2C8A JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B28 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1DC2 JUMP JUMPDEST ISZERO PUSH2 0x1C91 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1B51 PUSH2 0x100F JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B73 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x28F8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1BBE JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1BBB SWAP2 SWAP1 PUSH2 0x2443 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1C41 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1BEE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1BF3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x1C39 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C30 SWAP1 PUSH2 0x29EC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x1C96 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x1CAD DUP5 PUSH2 0x1DE5 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1CF2 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1D24 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1DB7 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x1DA1 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 EQ ISZERO PUSH2 0x1DB2 JUMPI PUSH2 0x1DB7 JUMP JUMPDEST PUSH2 0x1D32 JUMP JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1E69 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x1E5F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x1ECC JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x1EC2 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x1F21 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x1F17 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1F70 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x1F66 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1FBB JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x1FB1 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x2004 JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x1FFA JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x2013 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x2028 SWAP1 PUSH2 0x2DCA JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x204A JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x2091 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x2063 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x2091 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x2091 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x2090 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x2075 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x209E SWAP2 SWAP1 PUSH2 0x20A2 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x20BB JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x20A3 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20D2 PUSH2 0x20CD DUP5 PUSH2 0x2BAC JUMP JUMPDEST PUSH2 0x2B87 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x20EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x20F5 DUP5 DUP3 DUP6 PUSH2 0x2D88 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2110 PUSH2 0x210B DUP5 PUSH2 0x2BDD JUMP JUMPDEST PUSH2 0x2B87 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x2128 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2133 DUP5 DUP3 DUP6 PUSH2 0x2D88 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x214A DUP2 PUSH2 0x327F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x215F DUP2 PUSH2 0x3296 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2174 DUP2 PUSH2 0x32AD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2189 DUP2 PUSH2 0x32AD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x21A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x21B0 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x20BF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x21CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x21DA DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x20FD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x21F2 DUP2 PUSH2 0x32C4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x220A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2218 DUP5 DUP3 DUP6 ADD PUSH2 0x213B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2234 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2242 DUP6 DUP3 DUP7 ADD PUSH2 0x213B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2253 DUP6 DUP3 DUP7 ADD PUSH2 0x213B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2272 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2280 DUP7 DUP3 DUP8 ADD PUSH2 0x213B JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2291 DUP7 DUP3 DUP8 ADD PUSH2 0x213B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x22A2 DUP7 DUP3 DUP8 ADD PUSH2 0x21E3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x22C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x22D0 DUP8 DUP3 DUP9 ADD PUSH2 0x213B JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x22E1 DUP8 DUP3 DUP9 ADD PUSH2 0x213B JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x22F2 DUP8 DUP3 DUP9 ADD PUSH2 0x21E3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x230F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x231B DUP8 DUP3 DUP9 ADD PUSH2 0x218F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x233D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x234B DUP8 DUP3 DUP9 ADD PUSH2 0x213B JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x235C DUP8 DUP3 DUP9 ADD PUSH2 0x213B JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x236D DUP8 DUP3 DUP9 ADD PUSH2 0x21E3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x238A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2396 DUP8 DUP3 DUP9 ADD PUSH2 0x21B9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x23B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x23C3 DUP6 DUP3 DUP7 ADD PUSH2 0x213B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x23D4 DUP6 DUP3 DUP7 ADD PUSH2 0x2150 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x23F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x23FF DUP6 DUP3 DUP7 ADD PUSH2 0x213B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2410 DUP6 DUP3 DUP7 ADD PUSH2 0x21E3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x242C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x243A DUP5 DUP3 DUP6 ADD PUSH2 0x2165 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2455 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2463 DUP5 DUP3 DUP6 ADD PUSH2 0x217A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x247E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2498 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x24A4 DUP5 DUP3 DUP6 ADD PUSH2 0x21B9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x24DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x24E6 DUP6 DUP3 DUP7 ADD PUSH2 0x21B9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x24F7 DUP6 DUP3 DUP7 ADD PUSH2 0x21E3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2513 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2521 DUP5 DUP3 DUP6 ADD PUSH2 0x21E3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x253D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x254B DUP6 DUP3 DUP7 ADD PUSH2 0x21E3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x255C DUP6 DUP3 DUP7 ADD PUSH2 0x21E3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2572 DUP4 DUP4 PUSH2 0x2864 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2587 DUP2 PUSH2 0x2D14 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2598 DUP3 PUSH2 0x2C1E JUMP JUMPDEST PUSH2 0x25A2 DUP2 DUP6 PUSH2 0x2C4C JUMP JUMPDEST SWAP4 POP PUSH2 0x25AD DUP4 PUSH2 0x2C0E JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x25DE JUMPI DUP2 MLOAD PUSH2 0x25C5 DUP9 DUP3 PUSH2 0x2566 JUMP JUMPDEST SWAP8 POP PUSH2 0x25D0 DUP4 PUSH2 0x2C3F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x25B1 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x25F4 DUP2 PUSH2 0x2D26 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2605 DUP3 PUSH2 0x2C29 JUMP JUMPDEST PUSH2 0x260F DUP2 DUP6 PUSH2 0x2C5D JUMP JUMPDEST SWAP4 POP PUSH2 0x261F DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2D97 JUMP JUMPDEST PUSH2 0x2628 DUP2 PUSH2 0x2F03 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x263E DUP3 PUSH2 0x2C34 JUMP JUMPDEST PUSH2 0x2648 DUP2 DUP6 PUSH2 0x2C6E JUMP JUMPDEST SWAP4 POP PUSH2 0x2658 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2D97 JUMP JUMPDEST PUSH2 0x2661 DUP2 PUSH2 0x2F03 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2677 DUP3 PUSH2 0x2C34 JUMP JUMPDEST PUSH2 0x2681 DUP2 DUP6 PUSH2 0x2C7F JUMP JUMPDEST SWAP4 POP PUSH2 0x2691 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2D97 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26AA PUSH1 0x2D DUP4 PUSH2 0x2C6E JUMP JUMPDEST SWAP2 POP PUSH2 0x26B5 DUP3 PUSH2 0x2F14 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26CD PUSH1 0x32 DUP4 PUSH2 0x2C6E JUMP JUMPDEST SWAP2 POP PUSH2 0x26D8 DUP3 PUSH2 0x2F63 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26F0 PUSH1 0x25 DUP4 PUSH2 0x2C6E JUMP JUMPDEST SWAP2 POP PUSH2 0x26FB DUP3 PUSH2 0x2FB2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2713 PUSH1 0x1C DUP4 PUSH2 0x2C6E JUMP JUMPDEST SWAP2 POP PUSH2 0x271E DUP3 PUSH2 0x3001 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2736 PUSH1 0x24 DUP4 PUSH2 0x2C6E JUMP JUMPDEST SWAP2 POP PUSH2 0x2741 DUP3 PUSH2 0x302A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2759 PUSH1 0x19 DUP4 PUSH2 0x2C6E JUMP JUMPDEST SWAP2 POP PUSH2 0x2764 DUP3 PUSH2 0x3079 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x277C PUSH1 0x29 DUP4 PUSH2 0x2C6E JUMP JUMPDEST SWAP2 POP PUSH2 0x2787 DUP3 PUSH2 0x30A2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x279F PUSH1 0x2E DUP4 PUSH2 0x2C6E JUMP JUMPDEST SWAP2 POP PUSH2 0x27AA DUP3 PUSH2 0x30F1 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27C2 PUSH1 0x20 DUP4 PUSH2 0x2C6E JUMP JUMPDEST SWAP2 POP PUSH2 0x27CD DUP3 PUSH2 0x3140 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27E5 PUSH1 0x18 DUP4 PUSH2 0x2C6E JUMP JUMPDEST SWAP2 POP PUSH2 0x27F0 DUP3 PUSH2 0x3169 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2808 PUSH1 0x21 DUP4 PUSH2 0x2C6E JUMP JUMPDEST SWAP2 POP PUSH2 0x2813 DUP3 PUSH2 0x3192 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x282B PUSH1 0x3D DUP4 PUSH2 0x2C6E JUMP JUMPDEST SWAP2 POP PUSH2 0x2836 DUP3 PUSH2 0x31E1 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x284E PUSH1 0x31 DUP4 PUSH2 0x2C6E JUMP JUMPDEST SWAP2 POP PUSH2 0x2859 DUP3 PUSH2 0x3230 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x286D DUP2 PUSH2 0x2D7E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x287C DUP2 PUSH2 0x2D7E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x288E DUP3 DUP6 PUSH2 0x266C JUMP JUMPDEST SWAP2 POP PUSH2 0x289A DUP3 DUP5 PUSH2 0x266C JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x28BB PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x257E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x28D6 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x257E JUMP JUMPDEST PUSH2 0x28E3 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x257E JUMP JUMPDEST PUSH2 0x28F0 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2873 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x290D PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x257E JUMP JUMPDEST PUSH2 0x291A PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x257E JUMP JUMPDEST PUSH2 0x2927 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2873 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2939 DUP2 DUP5 PUSH2 0x25FA JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2959 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x257E JUMP JUMPDEST PUSH2 0x2966 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2873 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2987 DUP2 DUP5 PUSH2 0x258D JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x29A4 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x25EB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x29C4 DUP2 DUP5 PUSH2 0x2633 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x29E5 DUP2 PUSH2 0x269D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2A05 DUP2 PUSH2 0x26C0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2A25 DUP2 PUSH2 0x26E3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2A45 DUP2 PUSH2 0x2706 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2A65 DUP2 PUSH2 0x2729 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2A85 DUP2 PUSH2 0x274C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2AA5 DUP2 PUSH2 0x276F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2AC5 DUP2 PUSH2 0x2792 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2AE5 DUP2 PUSH2 0x27B5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B05 DUP2 PUSH2 0x27D8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B25 DUP2 PUSH2 0x27FB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B45 DUP2 PUSH2 0x281E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B65 DUP2 PUSH2 0x2841 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2B81 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2873 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B91 PUSH2 0x2BA2 JUMP JUMPDEST SWAP1 POP PUSH2 0x2B9D DUP3 DUP3 PUSH2 0x2DFC JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2BC7 JUMPI PUSH2 0x2BC6 PUSH2 0x2ED4 JUMP JUMPDEST JUMPDEST PUSH2 0x2BD0 DUP3 PUSH2 0x2F03 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2BF8 JUMPI PUSH2 0x2BF7 PUSH2 0x2ED4 JUMP JUMPDEST JUMPDEST PUSH2 0x2C01 DUP3 PUSH2 0x2F03 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C95 DUP3 PUSH2 0x2D7E JUMP JUMPDEST SWAP2 POP PUSH2 0x2CA0 DUP4 PUSH2 0x2D7E JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x2CD5 JUMPI PUSH2 0x2CD4 PUSH2 0x2E76 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CEB DUP3 PUSH2 0x2D7E JUMP JUMPDEST SWAP2 POP PUSH2 0x2CF6 DUP4 PUSH2 0x2D7E JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x2D09 JUMPI PUSH2 0x2D08 PUSH2 0x2E76 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D1F DUP3 PUSH2 0x2D5E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2DB5 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2D9A JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x2DC4 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2DE2 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x2DF6 JUMPI PUSH2 0x2DF5 PUSH2 0x2EA5 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2E05 DUP3 PUSH2 0x2F03 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x2E24 JUMPI PUSH2 0x2E23 PUSH2 0x2ED4 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E38 DUP3 PUSH2 0x2D7E JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x2E6B JUMPI PUSH2 0x2E6A PUSH2 0x2E76 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45524337323155524953746F726167653A2055524920736574206F66206E6F6E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6578697374656E7420746F6B656E000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722063616C6C6572206973206E6F74206F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x776E6572206E6F7220617070726F766564000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x3288 DUP2 PUSH2 0x2D14 JUMP JUMPDEST DUP2 EQ PUSH2 0x3293 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x329F DUP2 PUSH2 0x2D26 JUMP JUMPDEST DUP2 EQ PUSH2 0x32AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x32B6 DUP2 PUSH2 0x2D32 JUMP JUMPDEST DUP2 EQ PUSH2 0x32C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x32CD DUP2 PUSH2 0x2D7E JUMP JUMPDEST DUP2 EQ PUSH2 0x32D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LT 0xEB CALLCODE SWAP9 BLOCKHASH DUP6 SWAP16 DUP4 PUSH28 0xF83BB229803D468CA3125C27424A9A3513A9B7555FB6E364736F6C63 NUMBER STOP ADDMOD DIV STOP CALLER ","sourceMap":"288:2300:25:-:0;;;616:44;;;;;;;;;;1390:113:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1464:5;1456;:13;;;;;;;;;;;;:::i;:::-;;1489:7;1479;:17;;;;;;;;;;;;:::i;:::-;;1390:113;;288:2300:25;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:320:29:-;51:6;88:1;82:4;78:12;68:22;;135:1;129:4;125:12;156:18;146:2;;212:4;204:6;200:17;190:27;;146:2;274;266:6;263:14;243:18;240:38;237:2;;;293:18;;:::i;:::-;237:2;58:269;;;;:::o;333:180::-;381:77;378:1;371:88;478:4;475:1;468:15;502:4;499:1;492:15;288:2300:25;;;;;;;"},"deployedBytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:32553:29","statements":[{"body":{"nodeType":"YulBlock","src":"90:260:29","statements":[{"nodeType":"YulAssignment","src":"100:74:29","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"166:6:29"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"125:40:29"},"nodeType":"YulFunctionCall","src":"125:48:29"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"109:15:29"},"nodeType":"YulFunctionCall","src":"109:65:29"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"100:5:29"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"190:5:29"},{"name":"length","nodeType":"YulIdentifier","src":"197:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"183:6:29"},"nodeType":"YulFunctionCall","src":"183:21:29"},"nodeType":"YulExpressionStatement","src":"183:21:29"},{"nodeType":"YulVariableDeclaration","src":"213:27:29","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"228:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"235:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"224:3:29"},"nodeType":"YulFunctionCall","src":"224:16:29"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"217:3:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"278:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"287:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"290:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"280:6:29"},"nodeType":"YulFunctionCall","src":"280:12:29"},"nodeType":"YulExpressionStatement","src":"280:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"259:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"264:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"255:3:29"},"nodeType":"YulFunctionCall","src":"255:16:29"},{"name":"end","nodeType":"YulIdentifier","src":"273:3:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"252:2:29"},"nodeType":"YulFunctionCall","src":"252:25:29"},"nodeType":"YulIf","src":"249:2:29"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"327:3:29"},{"name":"dst","nodeType":"YulIdentifier","src":"332:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"337:6:29"}],"functionName":{"name":"copy_calldata_to_memory","nodeType":"YulIdentifier","src":"303:23:29"},"nodeType":"YulFunctionCall","src":"303:41:29"},"nodeType":"YulExpressionStatement","src":"303:41:29"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"63:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"68:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"76:3:29","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"84:5:29","type":""}],"src":"7:343:29"},{"body":{"nodeType":"YulBlock","src":"440:261:29","statements":[{"nodeType":"YulAssignment","src":"450:75:29","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"517:6:29"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"475:41:29"},"nodeType":"YulFunctionCall","src":"475:49:29"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"459:15:29"},"nodeType":"YulFunctionCall","src":"459:66:29"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"450:5:29"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"541:5:29"},{"name":"length","nodeType":"YulIdentifier","src":"548:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"534:6:29"},"nodeType":"YulFunctionCall","src":"534:21:29"},"nodeType":"YulExpressionStatement","src":"534:21:29"},{"nodeType":"YulVariableDeclaration","src":"564:27:29","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"579:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"586:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"575:3:29"},"nodeType":"YulFunctionCall","src":"575:16:29"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"568:3:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"629:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"638:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"641:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"631:6:29"},"nodeType":"YulFunctionCall","src":"631:12:29"},"nodeType":"YulExpressionStatement","src":"631:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"610:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"615:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"606:3:29"},"nodeType":"YulFunctionCall","src":"606:16:29"},{"name":"end","nodeType":"YulIdentifier","src":"624:3:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"603:2:29"},"nodeType":"YulFunctionCall","src":"603:25:29"},"nodeType":"YulIf","src":"600:2:29"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"678:3:29"},{"name":"dst","nodeType":"YulIdentifier","src":"683:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"688:6:29"}],"functionName":{"name":"copy_calldata_to_memory","nodeType":"YulIdentifier","src":"654:23:29"},"nodeType":"YulFunctionCall","src":"654:41:29"},"nodeType":"YulExpressionStatement","src":"654:41:29"}]},"name":"abi_decode_available_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"413:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"418:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"426:3:29","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"434:5:29","type":""}],"src":"356:345:29"},{"body":{"nodeType":"YulBlock","src":"759:87:29","statements":[{"nodeType":"YulAssignment","src":"769:29:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"791:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"778:12:29"},"nodeType":"YulFunctionCall","src":"778:20:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"769:5:29"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"834:5:29"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"807:26:29"},"nodeType":"YulFunctionCall","src":"807:33:29"},"nodeType":"YulExpressionStatement","src":"807:33:29"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"737:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"745:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"753:5:29","type":""}],"src":"707:139:29"},{"body":{"nodeType":"YulBlock","src":"901:84:29","statements":[{"nodeType":"YulAssignment","src":"911:29:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"933:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"920:12:29"},"nodeType":"YulFunctionCall","src":"920:20:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"911:5:29"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"973:5:29"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"949:23:29"},"nodeType":"YulFunctionCall","src":"949:30:29"},"nodeType":"YulExpressionStatement","src":"949:30:29"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"879:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"887:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"895:5:29","type":""}],"src":"852:133:29"},{"body":{"nodeType":"YulBlock","src":"1042:86:29","statements":[{"nodeType":"YulAssignment","src":"1052:29:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1074:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1061:12:29"},"nodeType":"YulFunctionCall","src":"1061:20:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1052:5:29"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1116:5:29"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"1090:25:29"},"nodeType":"YulFunctionCall","src":"1090:32:29"},"nodeType":"YulExpressionStatement","src":"1090:32:29"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1020:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"1028:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1036:5:29","type":""}],"src":"991:137:29"},{"body":{"nodeType":"YulBlock","src":"1196:79:29","statements":[{"nodeType":"YulAssignment","src":"1206:22:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1221:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1215:5:29"},"nodeType":"YulFunctionCall","src":"1215:13:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1206:5:29"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1263:5:29"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"1237:25:29"},"nodeType":"YulFunctionCall","src":"1237:32:29"},"nodeType":"YulExpressionStatement","src":"1237:32:29"}]},"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1174:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"1182:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1190:5:29","type":""}],"src":"1134:141:29"},{"body":{"nodeType":"YulBlock","src":"1355:210:29","statements":[{"body":{"nodeType":"YulBlock","src":"1404:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1413:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1416:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1406:6:29"},"nodeType":"YulFunctionCall","src":"1406:12:29"},"nodeType":"YulExpressionStatement","src":"1406:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1383:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"1391:4:29","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1379:3:29"},"nodeType":"YulFunctionCall","src":"1379:17:29"},{"name":"end","nodeType":"YulIdentifier","src":"1398:3:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1375:3:29"},"nodeType":"YulFunctionCall","src":"1375:27:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1368:6:29"},"nodeType":"YulFunctionCall","src":"1368:35:29"},"nodeType":"YulIf","src":"1365:2:29"},{"nodeType":"YulVariableDeclaration","src":"1429:34:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1456:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1443:12:29"},"nodeType":"YulFunctionCall","src":"1443:20:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1433:6:29","type":""}]},{"nodeType":"YulAssignment","src":"1472:87:29","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1532:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"1540:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1528:3:29"},"nodeType":"YulFunctionCall","src":"1528:17:29"},{"name":"length","nodeType":"YulIdentifier","src":"1547:6:29"},{"name":"end","nodeType":"YulIdentifier","src":"1555:3:29"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"1481:46:29"},"nodeType":"YulFunctionCall","src":"1481:78:29"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1472:5:29"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1333:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"1341:3:29","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1349:5:29","type":""}],"src":"1294:271:29"},{"body":{"nodeType":"YulBlock","src":"1647:211:29","statements":[{"body":{"nodeType":"YulBlock","src":"1696:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1705:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1708:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1698:6:29"},"nodeType":"YulFunctionCall","src":"1698:12:29"},"nodeType":"YulExpressionStatement","src":"1698:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1675:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"1683:4:29","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1671:3:29"},"nodeType":"YulFunctionCall","src":"1671:17:29"},{"name":"end","nodeType":"YulIdentifier","src":"1690:3:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1667:3:29"},"nodeType":"YulFunctionCall","src":"1667:27:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1660:6:29"},"nodeType":"YulFunctionCall","src":"1660:35:29"},"nodeType":"YulIf","src":"1657:2:29"},{"nodeType":"YulVariableDeclaration","src":"1721:34:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1748:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1735:12:29"},"nodeType":"YulFunctionCall","src":"1735:20:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1725:6:29","type":""}]},{"nodeType":"YulAssignment","src":"1764:88:29","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1825:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"1833:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1821:3:29"},"nodeType":"YulFunctionCall","src":"1821:17:29"},{"name":"length","nodeType":"YulIdentifier","src":"1840:6:29"},{"name":"end","nodeType":"YulIdentifier","src":"1848:3:29"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"1773:47:29"},"nodeType":"YulFunctionCall","src":"1773:79:29"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1764:5:29"}]}]},"name":"abi_decode_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1625:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"1633:3:29","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1641:5:29","type":""}],"src":"1585:273:29"},{"body":{"nodeType":"YulBlock","src":"1916:87:29","statements":[{"nodeType":"YulAssignment","src":"1926:29:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1948:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1935:12:29"},"nodeType":"YulFunctionCall","src":"1935:20:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1926:5:29"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1991:5:29"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"1964:26:29"},"nodeType":"YulFunctionCall","src":"1964:33:29"},"nodeType":"YulExpressionStatement","src":"1964:33:29"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1894:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"1902:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1910:5:29","type":""}],"src":"1864:139:29"},{"body":{"nodeType":"YulBlock","src":"2075:196:29","statements":[{"body":{"nodeType":"YulBlock","src":"2121:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2130:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2133:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2123:6:29"},"nodeType":"YulFunctionCall","src":"2123:12:29"},"nodeType":"YulExpressionStatement","src":"2123:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2096:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"2105:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2092:3:29"},"nodeType":"YulFunctionCall","src":"2092:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"2117:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2088:3:29"},"nodeType":"YulFunctionCall","src":"2088:32:29"},"nodeType":"YulIf","src":"2085:2:29"},{"nodeType":"YulBlock","src":"2147:117:29","statements":[{"nodeType":"YulVariableDeclaration","src":"2162:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"2176:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2166:6:29","type":""}]},{"nodeType":"YulAssignment","src":"2191:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2226:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"2237:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2222:3:29"},"nodeType":"YulFunctionCall","src":"2222:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2246:7:29"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2201:20:29"},"nodeType":"YulFunctionCall","src":"2201:53:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2191:6:29"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2045:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2056:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2068:6:29","type":""}],"src":"2009:262:29"},{"body":{"nodeType":"YulBlock","src":"2360:324:29","statements":[{"body":{"nodeType":"YulBlock","src":"2406:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2415:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2418:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2408:6:29"},"nodeType":"YulFunctionCall","src":"2408:12:29"},"nodeType":"YulExpressionStatement","src":"2408:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2381:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"2390:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2377:3:29"},"nodeType":"YulFunctionCall","src":"2377:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"2402:2:29","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2373:3:29"},"nodeType":"YulFunctionCall","src":"2373:32:29"},"nodeType":"YulIf","src":"2370:2:29"},{"nodeType":"YulBlock","src":"2432:117:29","statements":[{"nodeType":"YulVariableDeclaration","src":"2447:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"2461:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2451:6:29","type":""}]},{"nodeType":"YulAssignment","src":"2476:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2511:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"2522:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2507:3:29"},"nodeType":"YulFunctionCall","src":"2507:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2531:7:29"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2486:20:29"},"nodeType":"YulFunctionCall","src":"2486:53:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2476:6:29"}]}]},{"nodeType":"YulBlock","src":"2559:118:29","statements":[{"nodeType":"YulVariableDeclaration","src":"2574:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"2588:2:29","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2578:6:29","type":""}]},{"nodeType":"YulAssignment","src":"2604:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2639:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"2650:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2635:3:29"},"nodeType":"YulFunctionCall","src":"2635:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2659:7:29"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2614:20:29"},"nodeType":"YulFunctionCall","src":"2614:53:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2604:6:29"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2322:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2333:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2345:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2353:6:29","type":""}],"src":"2277:407:29"},{"body":{"nodeType":"YulBlock","src":"2790:452:29","statements":[{"body":{"nodeType":"YulBlock","src":"2836:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2845:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2848:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2838:6:29"},"nodeType":"YulFunctionCall","src":"2838:12:29"},"nodeType":"YulExpressionStatement","src":"2838:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2811:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"2820:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2807:3:29"},"nodeType":"YulFunctionCall","src":"2807:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"2832:2:29","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2803:3:29"},"nodeType":"YulFunctionCall","src":"2803:32:29"},"nodeType":"YulIf","src":"2800:2:29"},{"nodeType":"YulBlock","src":"2862:117:29","statements":[{"nodeType":"YulVariableDeclaration","src":"2877:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"2891:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2881:6:29","type":""}]},{"nodeType":"YulAssignment","src":"2906:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2941:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"2952:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2937:3:29"},"nodeType":"YulFunctionCall","src":"2937:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2961:7:29"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2916:20:29"},"nodeType":"YulFunctionCall","src":"2916:53:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2906:6:29"}]}]},{"nodeType":"YulBlock","src":"2989:118:29","statements":[{"nodeType":"YulVariableDeclaration","src":"3004:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"3018:2:29","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3008:6:29","type":""}]},{"nodeType":"YulAssignment","src":"3034:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3069:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"3080:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3065:3:29"},"nodeType":"YulFunctionCall","src":"3065:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3089:7:29"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3044:20:29"},"nodeType":"YulFunctionCall","src":"3044:53:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3034:6:29"}]}]},{"nodeType":"YulBlock","src":"3117:118:29","statements":[{"nodeType":"YulVariableDeclaration","src":"3132:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"3146:2:29","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3136:6:29","type":""}]},{"nodeType":"YulAssignment","src":"3162:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3197:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"3208:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3193:3:29"},"nodeType":"YulFunctionCall","src":"3193:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3217:7:29"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3172:20:29"},"nodeType":"YulFunctionCall","src":"3172:53:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3162:6:29"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2744:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2755:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2767:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2775:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2783:6:29","type":""}],"src":"2690:552:29"},{"body":{"nodeType":"YulBlock","src":"3374:683:29","statements":[{"body":{"nodeType":"YulBlock","src":"3421:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3430:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3433:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3423:6:29"},"nodeType":"YulFunctionCall","src":"3423:12:29"},"nodeType":"YulExpressionStatement","src":"3423:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3395:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"3404:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3391:3:29"},"nodeType":"YulFunctionCall","src":"3391:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"3416:3:29","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3387:3:29"},"nodeType":"YulFunctionCall","src":"3387:33:29"},"nodeType":"YulIf","src":"3384:2:29"},{"nodeType":"YulBlock","src":"3447:117:29","statements":[{"nodeType":"YulVariableDeclaration","src":"3462:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"3476:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3466:6:29","type":""}]},{"nodeType":"YulAssignment","src":"3491:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3526:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"3537:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3522:3:29"},"nodeType":"YulFunctionCall","src":"3522:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3546:7:29"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3501:20:29"},"nodeType":"YulFunctionCall","src":"3501:53:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3491:6:29"}]}]},{"nodeType":"YulBlock","src":"3574:118:29","statements":[{"nodeType":"YulVariableDeclaration","src":"3589:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"3603:2:29","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3593:6:29","type":""}]},{"nodeType":"YulAssignment","src":"3619:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3654:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"3665:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3650:3:29"},"nodeType":"YulFunctionCall","src":"3650:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3674:7:29"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3629:20:29"},"nodeType":"YulFunctionCall","src":"3629:53:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3619:6:29"}]}]},{"nodeType":"YulBlock","src":"3702:118:29","statements":[{"nodeType":"YulVariableDeclaration","src":"3717:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"3731:2:29","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3721:6:29","type":""}]},{"nodeType":"YulAssignment","src":"3747:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3782:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"3793:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3778:3:29"},"nodeType":"YulFunctionCall","src":"3778:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3802:7:29"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3757:20:29"},"nodeType":"YulFunctionCall","src":"3757:53:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3747:6:29"}]}]},{"nodeType":"YulBlock","src":"3830:220:29","statements":[{"nodeType":"YulVariableDeclaration","src":"3845:46:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3876:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"3887:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3872:3:29"},"nodeType":"YulFunctionCall","src":"3872:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3859:12:29"},"nodeType":"YulFunctionCall","src":"3859:32:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3849:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"3938:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3947:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3950:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3940:6:29"},"nodeType":"YulFunctionCall","src":"3940:12:29"},"nodeType":"YulExpressionStatement","src":"3940:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3910:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"3918:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3907:2:29"},"nodeType":"YulFunctionCall","src":"3907:30:29"},"nodeType":"YulIf","src":"3904:2:29"},{"nodeType":"YulAssignment","src":"3968:72:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4012:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"4023:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4008:3:29"},"nodeType":"YulFunctionCall","src":"4008:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4032:7:29"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"3978:29:29"},"nodeType":"YulFunctionCall","src":"3978:62:29"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"3968:6:29"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3320:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3331:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3343:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3351:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3359:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3367:6:29","type":""}],"src":"3248:809:29"},{"body":{"nodeType":"YulBlock","src":"4190:684:29","statements":[{"body":{"nodeType":"YulBlock","src":"4237:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4246:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4249:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4239:6:29"},"nodeType":"YulFunctionCall","src":"4239:12:29"},"nodeType":"YulExpressionStatement","src":"4239:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4211:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"4220:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4207:3:29"},"nodeType":"YulFunctionCall","src":"4207:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"4232:3:29","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4203:3:29"},"nodeType":"YulFunctionCall","src":"4203:33:29"},"nodeType":"YulIf","src":"4200:2:29"},{"nodeType":"YulBlock","src":"4263:117:29","statements":[{"nodeType":"YulVariableDeclaration","src":"4278:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"4292:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4282:6:29","type":""}]},{"nodeType":"YulAssignment","src":"4307:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4342:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"4353:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4338:3:29"},"nodeType":"YulFunctionCall","src":"4338:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4362:7:29"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4317:20:29"},"nodeType":"YulFunctionCall","src":"4317:53:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4307:6:29"}]}]},{"nodeType":"YulBlock","src":"4390:118:29","statements":[{"nodeType":"YulVariableDeclaration","src":"4405:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"4419:2:29","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4409:6:29","type":""}]},{"nodeType":"YulAssignment","src":"4435:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4470:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"4481:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4466:3:29"},"nodeType":"YulFunctionCall","src":"4466:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4490:7:29"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4445:20:29"},"nodeType":"YulFunctionCall","src":"4445:53:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4435:6:29"}]}]},{"nodeType":"YulBlock","src":"4518:118:29","statements":[{"nodeType":"YulVariableDeclaration","src":"4533:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"4547:2:29","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4537:6:29","type":""}]},{"nodeType":"YulAssignment","src":"4563:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4598:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"4609:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4594:3:29"},"nodeType":"YulFunctionCall","src":"4594:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4618:7:29"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4573:20:29"},"nodeType":"YulFunctionCall","src":"4573:53:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4563:6:29"}]}]},{"nodeType":"YulBlock","src":"4646:221:29","statements":[{"nodeType":"YulVariableDeclaration","src":"4661:46:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4692:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"4703:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4688:3:29"},"nodeType":"YulFunctionCall","src":"4688:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4675:12:29"},"nodeType":"YulFunctionCall","src":"4675:32:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4665:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"4754:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4763:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4766:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4756:6:29"},"nodeType":"YulFunctionCall","src":"4756:12:29"},"nodeType":"YulExpressionStatement","src":"4756:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4726:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"4734:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4723:2:29"},"nodeType":"YulFunctionCall","src":"4723:30:29"},"nodeType":"YulIf","src":"4720:2:29"},{"nodeType":"YulAssignment","src":"4784:73:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4829:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"4840:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4825:3:29"},"nodeType":"YulFunctionCall","src":"4825:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4849:7:29"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"4794:30:29"},"nodeType":"YulFunctionCall","src":"4794:63:29"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4784:6:29"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4136:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4147:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4159:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4167:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4175:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4183:6:29","type":""}],"src":"4063:811:29"},{"body":{"nodeType":"YulBlock","src":"4960:321:29","statements":[{"body":{"nodeType":"YulBlock","src":"5006:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5015:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5018:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5008:6:29"},"nodeType":"YulFunctionCall","src":"5008:12:29"},"nodeType":"YulExpressionStatement","src":"5008:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4981:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"4990:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4977:3:29"},"nodeType":"YulFunctionCall","src":"4977:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"5002:2:29","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4973:3:29"},"nodeType":"YulFunctionCall","src":"4973:32:29"},"nodeType":"YulIf","src":"4970:2:29"},{"nodeType":"YulBlock","src":"5032:117:29","statements":[{"nodeType":"YulVariableDeclaration","src":"5047:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"5061:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5051:6:29","type":""}]},{"nodeType":"YulAssignment","src":"5076:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5111:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"5122:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5107:3:29"},"nodeType":"YulFunctionCall","src":"5107:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5131:7:29"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5086:20:29"},"nodeType":"YulFunctionCall","src":"5086:53:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5076:6:29"}]}]},{"nodeType":"YulBlock","src":"5159:115:29","statements":[{"nodeType":"YulVariableDeclaration","src":"5174:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"5188:2:29","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5178:6:29","type":""}]},{"nodeType":"YulAssignment","src":"5204:60:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5236:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"5247:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5232:3:29"},"nodeType":"YulFunctionCall","src":"5232:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5256:7:29"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"5214:17:29"},"nodeType":"YulFunctionCall","src":"5214:50:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5204:6:29"}]}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4922:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4933:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4945:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4953:6:29","type":""}],"src":"4880:401:29"},{"body":{"nodeType":"YulBlock","src":"5370:324:29","statements":[{"body":{"nodeType":"YulBlock","src":"5416:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5425:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5428:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5418:6:29"},"nodeType":"YulFunctionCall","src":"5418:12:29"},"nodeType":"YulExpressionStatement","src":"5418:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5391:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"5400:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5387:3:29"},"nodeType":"YulFunctionCall","src":"5387:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"5412:2:29","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5383:3:29"},"nodeType":"YulFunctionCall","src":"5383:32:29"},"nodeType":"YulIf","src":"5380:2:29"},{"nodeType":"YulBlock","src":"5442:117:29","statements":[{"nodeType":"YulVariableDeclaration","src":"5457:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"5471:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5461:6:29","type":""}]},{"nodeType":"YulAssignment","src":"5486:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5521:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"5532:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5517:3:29"},"nodeType":"YulFunctionCall","src":"5517:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5541:7:29"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5496:20:29"},"nodeType":"YulFunctionCall","src":"5496:53:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5486:6:29"}]}]},{"nodeType":"YulBlock","src":"5569:118:29","statements":[{"nodeType":"YulVariableDeclaration","src":"5584:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"5598:2:29","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5588:6:29","type":""}]},{"nodeType":"YulAssignment","src":"5614:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5649:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"5660:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5645:3:29"},"nodeType":"YulFunctionCall","src":"5645:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5669:7:29"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5624:20:29"},"nodeType":"YulFunctionCall","src":"5624:53:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5614:6:29"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5332:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5343:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5355:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5363:6:29","type":""}],"src":"5287:407:29"},{"body":{"nodeType":"YulBlock","src":"5765:195:29","statements":[{"body":{"nodeType":"YulBlock","src":"5811:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5820:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5823:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5813:6:29"},"nodeType":"YulFunctionCall","src":"5813:12:29"},"nodeType":"YulExpressionStatement","src":"5813:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5786:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"5795:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5782:3:29"},"nodeType":"YulFunctionCall","src":"5782:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"5807:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5778:3:29"},"nodeType":"YulFunctionCall","src":"5778:32:29"},"nodeType":"YulIf","src":"5775:2:29"},{"nodeType":"YulBlock","src":"5837:116:29","statements":[{"nodeType":"YulVariableDeclaration","src":"5852:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"5866:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5856:6:29","type":""}]},{"nodeType":"YulAssignment","src":"5881:62:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5915:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"5926:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5911:3:29"},"nodeType":"YulFunctionCall","src":"5911:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5935:7:29"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"5891:19:29"},"nodeType":"YulFunctionCall","src":"5891:52:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5881:6:29"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5735:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5746:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5758:6:29","type":""}],"src":"5700:260:29"},{"body":{"nodeType":"YulBlock","src":"6042:206:29","statements":[{"body":{"nodeType":"YulBlock","src":"6088:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6097:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6100:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6090:6:29"},"nodeType":"YulFunctionCall","src":"6090:12:29"},"nodeType":"YulExpressionStatement","src":"6090:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6063:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"6072:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6059:3:29"},"nodeType":"YulFunctionCall","src":"6059:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"6084:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6055:3:29"},"nodeType":"YulFunctionCall","src":"6055:32:29"},"nodeType":"YulIf","src":"6052:2:29"},{"nodeType":"YulBlock","src":"6114:127:29","statements":[{"nodeType":"YulVariableDeclaration","src":"6129:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"6143:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6133:6:29","type":""}]},{"nodeType":"YulAssignment","src":"6158:73:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6203:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"6214:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6199:3:29"},"nodeType":"YulFunctionCall","src":"6199:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6223:7:29"}],"functionName":{"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulIdentifier","src":"6168:30:29"},"nodeType":"YulFunctionCall","src":"6168:63:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6158:6:29"}]}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6012:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6023:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6035:6:29","type":""}],"src":"5966:282:29"},{"body":{"nodeType":"YulBlock","src":"6330:299:29","statements":[{"body":{"nodeType":"YulBlock","src":"6376:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6385:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6388:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6378:6:29"},"nodeType":"YulFunctionCall","src":"6378:12:29"},"nodeType":"YulExpressionStatement","src":"6378:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6351:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"6360:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6347:3:29"},"nodeType":"YulFunctionCall","src":"6347:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"6372:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6343:3:29"},"nodeType":"YulFunctionCall","src":"6343:32:29"},"nodeType":"YulIf","src":"6340:2:29"},{"nodeType":"YulBlock","src":"6402:220:29","statements":[{"nodeType":"YulVariableDeclaration","src":"6417:45:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6448:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6459:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6444:3:29"},"nodeType":"YulFunctionCall","src":"6444:17:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6431:12:29"},"nodeType":"YulFunctionCall","src":"6431:31:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6421:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"6509:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6518:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6521:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6511:6:29"},"nodeType":"YulFunctionCall","src":"6511:12:29"},"nodeType":"YulExpressionStatement","src":"6511:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6481:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"6489:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6478:2:29"},"nodeType":"YulFunctionCall","src":"6478:30:29"},"nodeType":"YulIf","src":"6475:2:29"},{"nodeType":"YulAssignment","src":"6539:73:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6584:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"6595:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6580:3:29"},"nodeType":"YulFunctionCall","src":"6580:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6604:7:29"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"6549:30:29"},"nodeType":"YulFunctionCall","src":"6549:63:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6539:6:29"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6300:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6311:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6323:6:29","type":""}],"src":"6254:375:29"},{"body":{"nodeType":"YulBlock","src":"6728:427:29","statements":[{"body":{"nodeType":"YulBlock","src":"6774:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6783:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6786:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6776:6:29"},"nodeType":"YulFunctionCall","src":"6776:12:29"},"nodeType":"YulExpressionStatement","src":"6776:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6749:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"6758:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6745:3:29"},"nodeType":"YulFunctionCall","src":"6745:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"6770:2:29","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6741:3:29"},"nodeType":"YulFunctionCall","src":"6741:32:29"},"nodeType":"YulIf","src":"6738:2:29"},{"nodeType":"YulBlock","src":"6800:220:29","statements":[{"nodeType":"YulVariableDeclaration","src":"6815:45:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6846:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6857:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6842:3:29"},"nodeType":"YulFunctionCall","src":"6842:17:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6829:12:29"},"nodeType":"YulFunctionCall","src":"6829:31:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6819:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"6907:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6916:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6919:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6909:6:29"},"nodeType":"YulFunctionCall","src":"6909:12:29"},"nodeType":"YulExpressionStatement","src":"6909:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6879:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"6887:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6876:2:29"},"nodeType":"YulFunctionCall","src":"6876:30:29"},"nodeType":"YulIf","src":"6873:2:29"},{"nodeType":"YulAssignment","src":"6937:73:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6982:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"6993:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6978:3:29"},"nodeType":"YulFunctionCall","src":"6978:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7002:7:29"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"6947:30:29"},"nodeType":"YulFunctionCall","src":"6947:63:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6937:6:29"}]}]},{"nodeType":"YulBlock","src":"7030:118:29","statements":[{"nodeType":"YulVariableDeclaration","src":"7045:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"7059:2:29","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7049:6:29","type":""}]},{"nodeType":"YulAssignment","src":"7075:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7110:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"7121:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7106:3:29"},"nodeType":"YulFunctionCall","src":"7106:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7130:7:29"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"7085:20:29"},"nodeType":"YulFunctionCall","src":"7085:53:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7075:6:29"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6690:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6701:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6713:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6721:6:29","type":""}],"src":"6635:520:29"},{"body":{"nodeType":"YulBlock","src":"7227:196:29","statements":[{"body":{"nodeType":"YulBlock","src":"7273:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7282:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7285:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7275:6:29"},"nodeType":"YulFunctionCall","src":"7275:12:29"},"nodeType":"YulExpressionStatement","src":"7275:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7248:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"7257:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7244:3:29"},"nodeType":"YulFunctionCall","src":"7244:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"7269:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7240:3:29"},"nodeType":"YulFunctionCall","src":"7240:32:29"},"nodeType":"YulIf","src":"7237:2:29"},{"nodeType":"YulBlock","src":"7299:117:29","statements":[{"nodeType":"YulVariableDeclaration","src":"7314:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"7328:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7318:6:29","type":""}]},{"nodeType":"YulAssignment","src":"7343:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7378:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"7389:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7374:3:29"},"nodeType":"YulFunctionCall","src":"7374:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7398:7:29"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"7353:20:29"},"nodeType":"YulFunctionCall","src":"7353:53:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7343:6:29"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7197:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7208:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7220:6:29","type":""}],"src":"7161:262:29"},{"body":{"nodeType":"YulBlock","src":"7512:324:29","statements":[{"body":{"nodeType":"YulBlock","src":"7558:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7567:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7570:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7560:6:29"},"nodeType":"YulFunctionCall","src":"7560:12:29"},"nodeType":"YulExpressionStatement","src":"7560:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7533:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"7542:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7529:3:29"},"nodeType":"YulFunctionCall","src":"7529:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"7554:2:29","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7525:3:29"},"nodeType":"YulFunctionCall","src":"7525:32:29"},"nodeType":"YulIf","src":"7522:2:29"},{"nodeType":"YulBlock","src":"7584:117:29","statements":[{"nodeType":"YulVariableDeclaration","src":"7599:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"7613:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7603:6:29","type":""}]},{"nodeType":"YulAssignment","src":"7628:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7663:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"7674:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7659:3:29"},"nodeType":"YulFunctionCall","src":"7659:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7683:7:29"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"7638:20:29"},"nodeType":"YulFunctionCall","src":"7638:53:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7628:6:29"}]}]},{"nodeType":"YulBlock","src":"7711:118:29","statements":[{"nodeType":"YulVariableDeclaration","src":"7726:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"7740:2:29","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7730:6:29","type":""}]},{"nodeType":"YulAssignment","src":"7756:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7791:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"7802:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7787:3:29"},"nodeType":"YulFunctionCall","src":"7787:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7811:7:29"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"7766:20:29"},"nodeType":"YulFunctionCall","src":"7766:53:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7756:6:29"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7474:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7485:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7497:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7505:6:29","type":""}],"src":"7429:407:29"},{"body":{"nodeType":"YulBlock","src":"7922:99:29","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7966:6:29"},{"name":"pos","nodeType":"YulIdentifier","src":"7974:3:29"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"7932:33:29"},"nodeType":"YulFunctionCall","src":"7932:46:29"},"nodeType":"YulExpressionStatement","src":"7932:46:29"},{"nodeType":"YulAssignment","src":"7987:28:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8005:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"8010:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8001:3:29"},"nodeType":"YulFunctionCall","src":"8001:14:29"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"7987:10:29"}]}]},"name":"abi_encodeUpdatedPos_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"7895:6:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7903:3:29","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"7911:10:29","type":""}],"src":"7842:179:29"},{"body":{"nodeType":"YulBlock","src":"8092:53:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8109:3:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8132:5:29"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"8114:17:29"},"nodeType":"YulFunctionCall","src":"8114:24:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8102:6:29"},"nodeType":"YulFunctionCall","src":"8102:37:29"},"nodeType":"YulExpressionStatement","src":"8102:37:29"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8080:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"8087:3:29","type":""}],"src":"8027:118:29"},{"body":{"nodeType":"YulBlock","src":"8305:608:29","statements":[{"nodeType":"YulVariableDeclaration","src":"8315:68:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8377:5:29"}],"functionName":{"name":"array_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"8329:47:29"},"nodeType":"YulFunctionCall","src":"8329:54:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8319:6:29","type":""}]},{"nodeType":"YulAssignment","src":"8392:93:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8473:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"8478:6:29"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8399:73:29"},"nodeType":"YulFunctionCall","src":"8399:86:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8392:3:29"}]},{"nodeType":"YulVariableDeclaration","src":"8494:71:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8559:5:29"}],"functionName":{"name":"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"8509:49:29"},"nodeType":"YulFunctionCall","src":"8509:56:29"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"8498:7:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8574:21:29","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"8588:7:29"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"8578:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"8664:224:29","statements":[{"nodeType":"YulVariableDeclaration","src":"8678:34:29","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"8705:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8699:5:29"},"nodeType":"YulFunctionCall","src":"8699:13:29"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"8682:13:29","type":""}]},{"nodeType":"YulAssignment","src":"8725:70:29","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"8776:13:29"},{"name":"pos","nodeType":"YulIdentifier","src":"8791:3:29"}],"functionName":{"name":"abi_encodeUpdatedPos_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"8732:43:29"},"nodeType":"YulFunctionCall","src":"8732:63:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8725:3:29"}]},{"nodeType":"YulAssignment","src":"8808:70:29","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"8871:6:29"}],"functionName":{"name":"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"8818:52:29"},"nodeType":"YulFunctionCall","src":"8818:60:29"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"8808:6:29"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8626:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"8629:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8623:2:29"},"nodeType":"YulFunctionCall","src":"8623:13:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"8637:18:29","statements":[{"nodeType":"YulAssignment","src":"8639:14:29","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8648:1:29"},{"kind":"number","nodeType":"YulLiteral","src":"8651:1:29","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8644:3:29"},"nodeType":"YulFunctionCall","src":"8644:9:29"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"8639:1:29"}]}]},"pre":{"nodeType":"YulBlock","src":"8608:14:29","statements":[{"nodeType":"YulVariableDeclaration","src":"8610:10:29","value":{"kind":"number","nodeType":"YulLiteral","src":"8619:1:29","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"8614:1:29","type":""}]}]},"src":"8604:284:29"},{"nodeType":"YulAssignment","src":"8897:10:29","value":{"name":"pos","nodeType":"YulIdentifier","src":"8904:3:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8897:3:29"}]}]},"name":"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8284:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"8291:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8300:3:29","type":""}],"src":"8181:732:29"},{"body":{"nodeType":"YulBlock","src":"8978:50:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8995:3:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9015:5:29"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"9000:14:29"},"nodeType":"YulFunctionCall","src":"9000:21:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8988:6:29"},"nodeType":"YulFunctionCall","src":"8988:34:29"},"nodeType":"YulExpressionStatement","src":"8988:34:29"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8966:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"8973:3:29","type":""}],"src":"8919:109:29"},{"body":{"nodeType":"YulBlock","src":"9124:270:29","statements":[{"nodeType":"YulVariableDeclaration","src":"9134:52:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9180:5:29"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"9148:31:29"},"nodeType":"YulFunctionCall","src":"9148:38:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"9138:6:29","type":""}]},{"nodeType":"YulAssignment","src":"9195:77:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9260:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"9265:6:29"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9202:57:29"},"nodeType":"YulFunctionCall","src":"9202:70:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9195:3:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9307:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"9314:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9303:3:29"},"nodeType":"YulFunctionCall","src":"9303:16:29"},{"name":"pos","nodeType":"YulIdentifier","src":"9321:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"9326:6:29"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"9281:21:29"},"nodeType":"YulFunctionCall","src":"9281:52:29"},"nodeType":"YulExpressionStatement","src":"9281:52:29"},{"nodeType":"YulAssignment","src":"9342:46:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9353:3:29"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9380:6:29"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"9358:21:29"},"nodeType":"YulFunctionCall","src":"9358:29:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9349:3:29"},"nodeType":"YulFunctionCall","src":"9349:39:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9342:3:29"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9105:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9112:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9120:3:29","type":""}],"src":"9034:360:29"},{"body":{"nodeType":"YulBlock","src":"9492:272:29","statements":[{"nodeType":"YulVariableDeclaration","src":"9502:53:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9549:5:29"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"9516:32:29"},"nodeType":"YulFunctionCall","src":"9516:39:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"9506:6:29","type":""}]},{"nodeType":"YulAssignment","src":"9564:78:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9630:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"9635:6:29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9571:58:29"},"nodeType":"YulFunctionCall","src":"9571:71:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9564:3:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9677:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"9684:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9673:3:29"},"nodeType":"YulFunctionCall","src":"9673:16:29"},{"name":"pos","nodeType":"YulIdentifier","src":"9691:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"9696:6:29"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"9651:21:29"},"nodeType":"YulFunctionCall","src":"9651:52:29"},"nodeType":"YulExpressionStatement","src":"9651:52:29"},{"nodeType":"YulAssignment","src":"9712:46:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9723:3:29"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9750:6:29"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"9728:21:29"},"nodeType":"YulFunctionCall","src":"9728:29:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9719:3:29"},"nodeType":"YulFunctionCall","src":"9719:39:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9712:3:29"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9473:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9480:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9488:3:29","type":""}],"src":"9400:364:29"},{"body":{"nodeType":"YulBlock","src":"9880:267:29","statements":[{"nodeType":"YulVariableDeclaration","src":"9890:53:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9937:5:29"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"9904:32:29"},"nodeType":"YulFunctionCall","src":"9904:39:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"9894:6:29","type":""}]},{"nodeType":"YulAssignment","src":"9952:96:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10036:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"10041:6:29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"9959:76:29"},"nodeType":"YulFunctionCall","src":"9959:89:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9952:3:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10083:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"10090:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10079:3:29"},"nodeType":"YulFunctionCall","src":"10079:16:29"},{"name":"pos","nodeType":"YulIdentifier","src":"10097:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"10102:6:29"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"10057:21:29"},"nodeType":"YulFunctionCall","src":"10057:52:29"},"nodeType":"YulExpressionStatement","src":"10057:52:29"},{"nodeType":"YulAssignment","src":"10118:23:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10129:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"10134:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10125:3:29"},"nodeType":"YulFunctionCall","src":"10125:16:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10118:3:29"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9861:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9868:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9876:3:29","type":""}],"src":"9770:377:29"},{"body":{"nodeType":"YulBlock","src":"10299:220:29","statements":[{"nodeType":"YulAssignment","src":"10309:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10375:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"10380:2:29","type":"","value":"45"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10316:58:29"},"nodeType":"YulFunctionCall","src":"10316:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10309:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10481:3:29"}],"functionName":{"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulIdentifier","src":"10392:88:29"},"nodeType":"YulFunctionCall","src":"10392:93:29"},"nodeType":"YulExpressionStatement","src":"10392:93:29"},{"nodeType":"YulAssignment","src":"10494:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10505:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"10510:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10501:3:29"},"nodeType":"YulFunctionCall","src":"10501:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10494:3:29"}]}]},"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10287:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10295:3:29","type":""}],"src":"10153:366:29"},{"body":{"nodeType":"YulBlock","src":"10671:220:29","statements":[{"nodeType":"YulAssignment","src":"10681:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10747:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"10752:2:29","type":"","value":"50"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10688:58:29"},"nodeType":"YulFunctionCall","src":"10688:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10681:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10853:3:29"}],"functionName":{"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulIdentifier","src":"10764:88:29"},"nodeType":"YulFunctionCall","src":"10764:93:29"},"nodeType":"YulExpressionStatement","src":"10764:93:29"},{"nodeType":"YulAssignment","src":"10866:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10877:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"10882:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10873:3:29"},"nodeType":"YulFunctionCall","src":"10873:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10866:3:29"}]}]},"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10659:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10667:3:29","type":""}],"src":"10525:366:29"},{"body":{"nodeType":"YulBlock","src":"11043:220:29","statements":[{"nodeType":"YulAssignment","src":"11053:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11119:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"11124:2:29","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11060:58:29"},"nodeType":"YulFunctionCall","src":"11060:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11053:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11225:3:29"}],"functionName":{"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulIdentifier","src":"11136:88:29"},"nodeType":"YulFunctionCall","src":"11136:93:29"},"nodeType":"YulExpressionStatement","src":"11136:93:29"},{"nodeType":"YulAssignment","src":"11238:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11249:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"11254:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11245:3:29"},"nodeType":"YulFunctionCall","src":"11245:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11238:3:29"}]}]},"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11031:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11039:3:29","type":""}],"src":"10897:366:29"},{"body":{"nodeType":"YulBlock","src":"11415:220:29","statements":[{"nodeType":"YulAssignment","src":"11425:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11491:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"11496:2:29","type":"","value":"28"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11432:58:29"},"nodeType":"YulFunctionCall","src":"11432:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11425:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11597:3:29"}],"functionName":{"name":"store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","nodeType":"YulIdentifier","src":"11508:88:29"},"nodeType":"YulFunctionCall","src":"11508:93:29"},"nodeType":"YulExpressionStatement","src":"11508:93:29"},{"nodeType":"YulAssignment","src":"11610:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11621:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"11626:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11617:3:29"},"nodeType":"YulFunctionCall","src":"11617:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11610:3:29"}]}]},"name":"abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11403:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11411:3:29","type":""}],"src":"11269:366:29"},{"body":{"nodeType":"YulBlock","src":"11787:220:29","statements":[{"nodeType":"YulAssignment","src":"11797:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11863:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"11868:2:29","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11804:58:29"},"nodeType":"YulFunctionCall","src":"11804:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11797:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11969:3:29"}],"functionName":{"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulIdentifier","src":"11880:88:29"},"nodeType":"YulFunctionCall","src":"11880:93:29"},"nodeType":"YulExpressionStatement","src":"11880:93:29"},{"nodeType":"YulAssignment","src":"11982:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11993:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"11998:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11989:3:29"},"nodeType":"YulFunctionCall","src":"11989:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11982:3:29"}]}]},"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11775:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11783:3:29","type":""}],"src":"11641:366:29"},{"body":{"nodeType":"YulBlock","src":"12159:220:29","statements":[{"nodeType":"YulAssignment","src":"12169:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12235:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"12240:2:29","type":"","value":"25"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12176:58:29"},"nodeType":"YulFunctionCall","src":"12176:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12169:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12341:3:29"}],"functionName":{"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulIdentifier","src":"12252:88:29"},"nodeType":"YulFunctionCall","src":"12252:93:29"},"nodeType":"YulExpressionStatement","src":"12252:93:29"},{"nodeType":"YulAssignment","src":"12354:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12365:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"12370:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12361:3:29"},"nodeType":"YulFunctionCall","src":"12361:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12354:3:29"}]}]},"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12147:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12155:3:29","type":""}],"src":"12013:366:29"},{"body":{"nodeType":"YulBlock","src":"12531:220:29","statements":[{"nodeType":"YulAssignment","src":"12541:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12607:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"12612:2:29","type":"","value":"41"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12548:58:29"},"nodeType":"YulFunctionCall","src":"12548:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12541:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12713:3:29"}],"functionName":{"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulIdentifier","src":"12624:88:29"},"nodeType":"YulFunctionCall","src":"12624:93:29"},"nodeType":"YulExpressionStatement","src":"12624:93:29"},{"nodeType":"YulAssignment","src":"12726:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12737:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"12742:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12733:3:29"},"nodeType":"YulFunctionCall","src":"12733:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12726:3:29"}]}]},"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12519:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12527:3:29","type":""}],"src":"12385:366:29"},{"body":{"nodeType":"YulBlock","src":"12903:220:29","statements":[{"nodeType":"YulAssignment","src":"12913:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12979:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"12984:2:29","type":"","value":"46"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12920:58:29"},"nodeType":"YulFunctionCall","src":"12920:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12913:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13085:3:29"}],"functionName":{"name":"store_literal_in_memory_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4","nodeType":"YulIdentifier","src":"12996:88:29"},"nodeType":"YulFunctionCall","src":"12996:93:29"},"nodeType":"YulExpressionStatement","src":"12996:93:29"},{"nodeType":"YulAssignment","src":"13098:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13109:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"13114:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13105:3:29"},"nodeType":"YulFunctionCall","src":"13105:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13098:3:29"}]}]},"name":"abi_encode_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12891:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12899:3:29","type":""}],"src":"12757:366:29"},{"body":{"nodeType":"YulBlock","src":"13275:220:29","statements":[{"nodeType":"YulAssignment","src":"13285:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13351:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"13356:2:29","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13292:58:29"},"nodeType":"YulFunctionCall","src":"13292:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13285:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13457:3:29"}],"functionName":{"name":"store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","nodeType":"YulIdentifier","src":"13368:88:29"},"nodeType":"YulFunctionCall","src":"13368:93:29"},"nodeType":"YulExpressionStatement","src":"13368:93:29"},{"nodeType":"YulAssignment","src":"13470:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13481:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"13486:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13477:3:29"},"nodeType":"YulFunctionCall","src":"13477:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13470:3:29"}]}]},"name":"abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13263:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13271:3:29","type":""}],"src":"13129:366:29"},{"body":{"nodeType":"YulBlock","src":"13647:220:29","statements":[{"nodeType":"YulAssignment","src":"13657:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13723:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"13728:2:29","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13664:58:29"},"nodeType":"YulFunctionCall","src":"13664:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13657:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13829:3:29"}],"functionName":{"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulIdentifier","src":"13740:88:29"},"nodeType":"YulFunctionCall","src":"13740:93:29"},"nodeType":"YulExpressionStatement","src":"13740:93:29"},{"nodeType":"YulAssignment","src":"13842:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13853:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"13858:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13849:3:29"},"nodeType":"YulFunctionCall","src":"13849:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13842:3:29"}]}]},"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13635:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13643:3:29","type":""}],"src":"13501:366:29"},{"body":{"nodeType":"YulBlock","src":"14019:220:29","statements":[{"nodeType":"YulAssignment","src":"14029:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14095:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"14100:2:29","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14036:58:29"},"nodeType":"YulFunctionCall","src":"14036:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14029:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14201:3:29"}],"functionName":{"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulIdentifier","src":"14112:88:29"},"nodeType":"YulFunctionCall","src":"14112:93:29"},"nodeType":"YulExpressionStatement","src":"14112:93:29"},{"nodeType":"YulAssignment","src":"14214:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14225:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"14230:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14221:3:29"},"nodeType":"YulFunctionCall","src":"14221:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14214:3:29"}]}]},"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14007:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14015:3:29","type":""}],"src":"13873:366:29"},{"body":{"nodeType":"YulBlock","src":"14391:220:29","statements":[{"nodeType":"YulAssignment","src":"14401:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14467:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"14472:2:29","type":"","value":"61"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14408:58:29"},"nodeType":"YulFunctionCall","src":"14408:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14401:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14573:3:29"}],"functionName":{"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulIdentifier","src":"14484:88:29"},"nodeType":"YulFunctionCall","src":"14484:93:29"},"nodeType":"YulExpressionStatement","src":"14484:93:29"},{"nodeType":"YulAssignment","src":"14586:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14597:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"14602:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14593:3:29"},"nodeType":"YulFunctionCall","src":"14593:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14586:3:29"}]}]},"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14379:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14387:3:29","type":""}],"src":"14245:366:29"},{"body":{"nodeType":"YulBlock","src":"14763:220:29","statements":[{"nodeType":"YulAssignment","src":"14773:74:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14839:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"14844:2:29","type":"","value":"49"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14780:58:29"},"nodeType":"YulFunctionCall","src":"14780:67:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14773:3:29"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14945:3:29"}],"functionName":{"name":"store_literal_in_memory_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2","nodeType":"YulIdentifier","src":"14856:88:29"},"nodeType":"YulFunctionCall","src":"14856:93:29"},"nodeType":"YulExpressionStatement","src":"14856:93:29"},{"nodeType":"YulAssignment","src":"14958:19:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14969:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"14974:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14965:3:29"},"nodeType":"YulFunctionCall","src":"14965:12:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14958:3:29"}]}]},"name":"abi_encode_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14751:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14759:3:29","type":""}],"src":"14617:366:29"},{"body":{"nodeType":"YulBlock","src":"15044:53:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15061:3:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15084:5:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"15066:17:29"},"nodeType":"YulFunctionCall","src":"15066:24:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15054:6:29"},"nodeType":"YulFunctionCall","src":"15054:37:29"},"nodeType":"YulExpressionStatement","src":"15054:37:29"}]},"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15032:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"15039:3:29","type":""}],"src":"14989:108:29"},{"body":{"nodeType":"YulBlock","src":"15168:53:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15185:3:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15208:5:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"15190:17:29"},"nodeType":"YulFunctionCall","src":"15190:24:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15178:6:29"},"nodeType":"YulFunctionCall","src":"15178:37:29"},"nodeType":"YulExpressionStatement","src":"15178:37:29"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15156:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"15163:3:29","type":""}],"src":"15103:118:29"},{"body":{"nodeType":"YulBlock","src":"15411:251:29","statements":[{"nodeType":"YulAssignment","src":"15422:102:29","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15511:6:29"},{"name":"pos","nodeType":"YulIdentifier","src":"15520:3:29"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"15429:81:29"},"nodeType":"YulFunctionCall","src":"15429:95:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15422:3:29"}]},{"nodeType":"YulAssignment","src":"15534:102:29","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"15623:6:29"},{"name":"pos","nodeType":"YulIdentifier","src":"15632:3:29"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"15541:81:29"},"nodeType":"YulFunctionCall","src":"15541:95:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15534:3:29"}]},{"nodeType":"YulAssignment","src":"15646:10:29","value":{"name":"pos","nodeType":"YulIdentifier","src":"15653:3:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15646:3:29"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15382:3:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15388:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15396:6:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15407:3:29","type":""}],"src":"15227:435:29"},{"body":{"nodeType":"YulBlock","src":"15766:124:29","statements":[{"nodeType":"YulAssignment","src":"15776:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15788:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"15799:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15784:3:29"},"nodeType":"YulFunctionCall","src":"15784:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15776:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15856:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15869:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"15880:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15865:3:29"},"nodeType":"YulFunctionCall","src":"15865:17:29"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"15812:43:29"},"nodeType":"YulFunctionCall","src":"15812:71:29"},"nodeType":"YulExpressionStatement","src":"15812:71:29"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15738:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15750:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15761:4:29","type":""}],"src":"15668:222:29"},{"body":{"nodeType":"YulBlock","src":"16050:288:29","statements":[{"nodeType":"YulAssignment","src":"16060:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16072:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16083:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16068:3:29"},"nodeType":"YulFunctionCall","src":"16068:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16060:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16140:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16153:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16164:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16149:3:29"},"nodeType":"YulFunctionCall","src":"16149:17:29"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"16096:43:29"},"nodeType":"YulFunctionCall","src":"16096:71:29"},"nodeType":"YulExpressionStatement","src":"16096:71:29"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"16221:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16234:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16245:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16230:3:29"},"nodeType":"YulFunctionCall","src":"16230:18:29"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"16177:43:29"},"nodeType":"YulFunctionCall","src":"16177:72:29"},"nodeType":"YulExpressionStatement","src":"16177:72:29"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"16303:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16316:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16327:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16312:3:29"},"nodeType":"YulFunctionCall","src":"16312:18:29"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"16259:43:29"},"nodeType":"YulFunctionCall","src":"16259:72:29"},"nodeType":"YulExpressionStatement","src":"16259:72:29"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16006:9:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"16018:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16026:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16034:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16045:4:29","type":""}],"src":"15896:442:29"},{"body":{"nodeType":"YulBlock","src":"16544:440:29","statements":[{"nodeType":"YulAssignment","src":"16554:27:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16566:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16577:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16562:3:29"},"nodeType":"YulFunctionCall","src":"16562:19:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16554:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16635:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16648:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16659:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16644:3:29"},"nodeType":"YulFunctionCall","src":"16644:17:29"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"16591:43:29"},"nodeType":"YulFunctionCall","src":"16591:71:29"},"nodeType":"YulExpressionStatement","src":"16591:71:29"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"16716:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16729:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16740:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16725:3:29"},"nodeType":"YulFunctionCall","src":"16725:18:29"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"16672:43:29"},"nodeType":"YulFunctionCall","src":"16672:72:29"},"nodeType":"YulExpressionStatement","src":"16672:72:29"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"16798:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16811:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16822:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16807:3:29"},"nodeType":"YulFunctionCall","src":"16807:18:29"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"16754:43:29"},"nodeType":"YulFunctionCall","src":"16754:72:29"},"nodeType":"YulExpressionStatement","src":"16754:72:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16847:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16858:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16843:3:29"},"nodeType":"YulFunctionCall","src":"16843:18:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16867:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"16873:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16863:3:29"},"nodeType":"YulFunctionCall","src":"16863:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16836:6:29"},"nodeType":"YulFunctionCall","src":"16836:48:29"},"nodeType":"YulExpressionStatement","src":"16836:48:29"},{"nodeType":"YulAssignment","src":"16893:84:29","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"16963:6:29"},{"name":"tail","nodeType":"YulIdentifier","src":"16972:4:29"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16901:61:29"},"nodeType":"YulFunctionCall","src":"16901:76:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16893:4:29"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16492:9:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"16504:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"16512:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16520:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16528:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16539:4:29","type":""}],"src":"16344:640:29"},{"body":{"nodeType":"YulBlock","src":"17116:206:29","statements":[{"nodeType":"YulAssignment","src":"17126:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17138:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"17149:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17134:3:29"},"nodeType":"YulFunctionCall","src":"17134:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17126:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17206:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17219:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"17230:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17215:3:29"},"nodeType":"YulFunctionCall","src":"17215:17:29"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"17162:43:29"},"nodeType":"YulFunctionCall","src":"17162:71:29"},"nodeType":"YulExpressionStatement","src":"17162:71:29"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"17287:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17300:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"17311:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17296:3:29"},"nodeType":"YulFunctionCall","src":"17296:18:29"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"17243:43:29"},"nodeType":"YulFunctionCall","src":"17243:72:29"},"nodeType":"YulExpressionStatement","src":"17243:72:29"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17080:9:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"17092:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17100:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17111:4:29","type":""}],"src":"16990:332:29"},{"body":{"nodeType":"YulBlock","src":"17476:225:29","statements":[{"nodeType":"YulAssignment","src":"17486:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17498:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"17509:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17494:3:29"},"nodeType":"YulFunctionCall","src":"17494:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17486:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17533:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"17544:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17529:3:29"},"nodeType":"YulFunctionCall","src":"17529:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17552:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"17558:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17548:3:29"},"nodeType":"YulFunctionCall","src":"17548:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17522:6:29"},"nodeType":"YulFunctionCall","src":"17522:47:29"},"nodeType":"YulExpressionStatement","src":"17522:47:29"},{"nodeType":"YulAssignment","src":"17578:116:29","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17680:6:29"},{"name":"tail","nodeType":"YulIdentifier","src":"17689:4:29"}],"functionName":{"name":"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17586:93:29"},"nodeType":"YulFunctionCall","src":"17586:108:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17578:4:29"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17448:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17460:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17471:4:29","type":""}],"src":"17328:373:29"},{"body":{"nodeType":"YulBlock","src":"17799:118:29","statements":[{"nodeType":"YulAssignment","src":"17809:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17821:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"17832:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17817:3:29"},"nodeType":"YulFunctionCall","src":"17817:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17809:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17883:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17896:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"17907:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17892:3:29"},"nodeType":"YulFunctionCall","src":"17892:17:29"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"17845:37:29"},"nodeType":"YulFunctionCall","src":"17845:65:29"},"nodeType":"YulExpressionStatement","src":"17845:65:29"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17771:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17783:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17794:4:29","type":""}],"src":"17707:210:29"},{"body":{"nodeType":"YulBlock","src":"18041:195:29","statements":[{"nodeType":"YulAssignment","src":"18051:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18063:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"18074:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18059:3:29"},"nodeType":"YulFunctionCall","src":"18059:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18051:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18098:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"18109:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18094:3:29"},"nodeType":"YulFunctionCall","src":"18094:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18117:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"18123:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18113:3:29"},"nodeType":"YulFunctionCall","src":"18113:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18087:6:29"},"nodeType":"YulFunctionCall","src":"18087:47:29"},"nodeType":"YulExpressionStatement","src":"18087:47:29"},{"nodeType":"YulAssignment","src":"18143:86:29","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18215:6:29"},{"name":"tail","nodeType":"YulIdentifier","src":"18224:4:29"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18151:63:29"},"nodeType":"YulFunctionCall","src":"18151:78:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18143:4:29"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18013:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18025:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18036:4:29","type":""}],"src":"17923:313:29"},{"body":{"nodeType":"YulBlock","src":"18413:248:29","statements":[{"nodeType":"YulAssignment","src":"18423:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18435:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"18446:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18431:3:29"},"nodeType":"YulFunctionCall","src":"18431:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18423:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18470:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"18481:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18466:3:29"},"nodeType":"YulFunctionCall","src":"18466:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18489:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"18495:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18485:3:29"},"nodeType":"YulFunctionCall","src":"18485:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18459:6:29"},"nodeType":"YulFunctionCall","src":"18459:47:29"},"nodeType":"YulExpressionStatement","src":"18459:47:29"},{"nodeType":"YulAssignment","src":"18515:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18649:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18523:124:29"},"nodeType":"YulFunctionCall","src":"18523:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18515:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18393:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18408:4:29","type":""}],"src":"18242:419:29"},{"body":{"nodeType":"YulBlock","src":"18838:248:29","statements":[{"nodeType":"YulAssignment","src":"18848:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18860:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"18871:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18856:3:29"},"nodeType":"YulFunctionCall","src":"18856:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18848:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18895:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"18906:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18891:3:29"},"nodeType":"YulFunctionCall","src":"18891:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18914:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"18920:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18910:3:29"},"nodeType":"YulFunctionCall","src":"18910:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18884:6:29"},"nodeType":"YulFunctionCall","src":"18884:47:29"},"nodeType":"YulExpressionStatement","src":"18884:47:29"},{"nodeType":"YulAssignment","src":"18940:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19074:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18948:124:29"},"nodeType":"YulFunctionCall","src":"18948:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18940:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18818:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18833:4:29","type":""}],"src":"18667:419:29"},{"body":{"nodeType":"YulBlock","src":"19263:248:29","statements":[{"nodeType":"YulAssignment","src":"19273:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19285:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"19296:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19281:3:29"},"nodeType":"YulFunctionCall","src":"19281:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19273:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19320:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"19331:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19316:3:29"},"nodeType":"YulFunctionCall","src":"19316:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19339:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"19345:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19335:3:29"},"nodeType":"YulFunctionCall","src":"19335:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19309:6:29"},"nodeType":"YulFunctionCall","src":"19309:47:29"},"nodeType":"YulExpressionStatement","src":"19309:47:29"},{"nodeType":"YulAssignment","src":"19365:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19499:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19373:124:29"},"nodeType":"YulFunctionCall","src":"19373:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19365:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19243:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19258:4:29","type":""}],"src":"19092:419:29"},{"body":{"nodeType":"YulBlock","src":"19688:248:29","statements":[{"nodeType":"YulAssignment","src":"19698:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19710:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"19721:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19706:3:29"},"nodeType":"YulFunctionCall","src":"19706:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19698:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19745:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"19756:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19741:3:29"},"nodeType":"YulFunctionCall","src":"19741:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19764:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"19770:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19760:3:29"},"nodeType":"YulFunctionCall","src":"19760:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19734:6:29"},"nodeType":"YulFunctionCall","src":"19734:47:29"},"nodeType":"YulExpressionStatement","src":"19734:47:29"},{"nodeType":"YulAssignment","src":"19790:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19924:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19798:124:29"},"nodeType":"YulFunctionCall","src":"19798:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19790:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19668:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19683:4:29","type":""}],"src":"19517:419:29"},{"body":{"nodeType":"YulBlock","src":"20113:248:29","statements":[{"nodeType":"YulAssignment","src":"20123:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20135:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"20146:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20131:3:29"},"nodeType":"YulFunctionCall","src":"20131:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20123:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20170:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"20181:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20166:3:29"},"nodeType":"YulFunctionCall","src":"20166:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20189:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"20195:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20185:3:29"},"nodeType":"YulFunctionCall","src":"20185:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20159:6:29"},"nodeType":"YulFunctionCall","src":"20159:47:29"},"nodeType":"YulExpressionStatement","src":"20159:47:29"},{"nodeType":"YulAssignment","src":"20215:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20349:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20223:124:29"},"nodeType":"YulFunctionCall","src":"20223:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20215:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20093:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20108:4:29","type":""}],"src":"19942:419:29"},{"body":{"nodeType":"YulBlock","src":"20538:248:29","statements":[{"nodeType":"YulAssignment","src":"20548:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20560:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"20571:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20556:3:29"},"nodeType":"YulFunctionCall","src":"20556:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20548:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20595:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"20606:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20591:3:29"},"nodeType":"YulFunctionCall","src":"20591:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20614:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"20620:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20610:3:29"},"nodeType":"YulFunctionCall","src":"20610:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20584:6:29"},"nodeType":"YulFunctionCall","src":"20584:47:29"},"nodeType":"YulExpressionStatement","src":"20584:47:29"},{"nodeType":"YulAssignment","src":"20640:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20774:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20648:124:29"},"nodeType":"YulFunctionCall","src":"20648:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20640:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20518:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20533:4:29","type":""}],"src":"20367:419:29"},{"body":{"nodeType":"YulBlock","src":"20963:248:29","statements":[{"nodeType":"YulAssignment","src":"20973:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20985:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"20996:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20981:3:29"},"nodeType":"YulFunctionCall","src":"20981:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20973:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21020:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"21031:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21016:3:29"},"nodeType":"YulFunctionCall","src":"21016:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21039:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"21045:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21035:3:29"},"nodeType":"YulFunctionCall","src":"21035:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21009:6:29"},"nodeType":"YulFunctionCall","src":"21009:47:29"},"nodeType":"YulExpressionStatement","src":"21009:47:29"},{"nodeType":"YulAssignment","src":"21065:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21199:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21073:124:29"},"nodeType":"YulFunctionCall","src":"21073:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21065:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20943:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20958:4:29","type":""}],"src":"20792:419:29"},{"body":{"nodeType":"YulBlock","src":"21388:248:29","statements":[{"nodeType":"YulAssignment","src":"21398:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21410:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"21421:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21406:3:29"},"nodeType":"YulFunctionCall","src":"21406:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21398:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21445:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"21456:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21441:3:29"},"nodeType":"YulFunctionCall","src":"21441:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21464:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"21470:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21460:3:29"},"nodeType":"YulFunctionCall","src":"21460:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21434:6:29"},"nodeType":"YulFunctionCall","src":"21434:47:29"},"nodeType":"YulExpressionStatement","src":"21434:47:29"},{"nodeType":"YulAssignment","src":"21490:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21624:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21498:124:29"},"nodeType":"YulFunctionCall","src":"21498:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21490:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21368:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21383:4:29","type":""}],"src":"21217:419:29"},{"body":{"nodeType":"YulBlock","src":"21813:248:29","statements":[{"nodeType":"YulAssignment","src":"21823:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21835:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"21846:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21831:3:29"},"nodeType":"YulFunctionCall","src":"21831:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21823:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21870:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"21881:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21866:3:29"},"nodeType":"YulFunctionCall","src":"21866:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21889:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"21895:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21885:3:29"},"nodeType":"YulFunctionCall","src":"21885:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21859:6:29"},"nodeType":"YulFunctionCall","src":"21859:47:29"},"nodeType":"YulExpressionStatement","src":"21859:47:29"},{"nodeType":"YulAssignment","src":"21915:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22049:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21923:124:29"},"nodeType":"YulFunctionCall","src":"21923:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21915:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21793:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21808:4:29","type":""}],"src":"21642:419:29"},{"body":{"nodeType":"YulBlock","src":"22238:248:29","statements":[{"nodeType":"YulAssignment","src":"22248:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22260:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"22271:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22256:3:29"},"nodeType":"YulFunctionCall","src":"22256:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22248:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22295:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"22306:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22291:3:29"},"nodeType":"YulFunctionCall","src":"22291:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22314:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"22320:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22310:3:29"},"nodeType":"YulFunctionCall","src":"22310:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22284:6:29"},"nodeType":"YulFunctionCall","src":"22284:47:29"},"nodeType":"YulExpressionStatement","src":"22284:47:29"},{"nodeType":"YulAssignment","src":"22340:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22474:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22348:124:29"},"nodeType":"YulFunctionCall","src":"22348:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22340:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22218:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22233:4:29","type":""}],"src":"22067:419:29"},{"body":{"nodeType":"YulBlock","src":"22663:248:29","statements":[{"nodeType":"YulAssignment","src":"22673:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22685:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"22696:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22681:3:29"},"nodeType":"YulFunctionCall","src":"22681:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22673:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22720:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"22731:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22716:3:29"},"nodeType":"YulFunctionCall","src":"22716:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22739:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"22745:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22735:3:29"},"nodeType":"YulFunctionCall","src":"22735:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22709:6:29"},"nodeType":"YulFunctionCall","src":"22709:47:29"},"nodeType":"YulExpressionStatement","src":"22709:47:29"},{"nodeType":"YulAssignment","src":"22765:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22899:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22773:124:29"},"nodeType":"YulFunctionCall","src":"22773:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22765:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22643:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22658:4:29","type":""}],"src":"22492:419:29"},{"body":{"nodeType":"YulBlock","src":"23088:248:29","statements":[{"nodeType":"YulAssignment","src":"23098:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23110:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"23121:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23106:3:29"},"nodeType":"YulFunctionCall","src":"23106:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23098:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23145:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"23156:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23141:3:29"},"nodeType":"YulFunctionCall","src":"23141:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23164:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"23170:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23160:3:29"},"nodeType":"YulFunctionCall","src":"23160:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23134:6:29"},"nodeType":"YulFunctionCall","src":"23134:47:29"},"nodeType":"YulExpressionStatement","src":"23134:47:29"},{"nodeType":"YulAssignment","src":"23190:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23324:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23198:124:29"},"nodeType":"YulFunctionCall","src":"23198:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23190:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23068:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23083:4:29","type":""}],"src":"22917:419:29"},{"body":{"nodeType":"YulBlock","src":"23513:248:29","statements":[{"nodeType":"YulAssignment","src":"23523:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23535:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"23546:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23531:3:29"},"nodeType":"YulFunctionCall","src":"23531:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23523:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23570:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"23581:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23566:3:29"},"nodeType":"YulFunctionCall","src":"23566:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23589:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"23595:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23585:3:29"},"nodeType":"YulFunctionCall","src":"23585:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23559:6:29"},"nodeType":"YulFunctionCall","src":"23559:47:29"},"nodeType":"YulExpressionStatement","src":"23559:47:29"},{"nodeType":"YulAssignment","src":"23615:139:29","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23749:4:29"}],"functionName":{"name":"abi_encode_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23623:124:29"},"nodeType":"YulFunctionCall","src":"23623:131:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23615:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23493:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23508:4:29","type":""}],"src":"23342:419:29"},{"body":{"nodeType":"YulBlock","src":"23865:124:29","statements":[{"nodeType":"YulAssignment","src":"23875:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23887:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"23898:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23883:3:29"},"nodeType":"YulFunctionCall","src":"23883:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23875:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"23955:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23968:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"23979:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23964:3:29"},"nodeType":"YulFunctionCall","src":"23964:17:29"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"23911:43:29"},"nodeType":"YulFunctionCall","src":"23911:71:29"},"nodeType":"YulExpressionStatement","src":"23911:71:29"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23837:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"23849:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23860:4:29","type":""}],"src":"23767:222:29"},{"body":{"nodeType":"YulBlock","src":"24036:88:29","statements":[{"nodeType":"YulAssignment","src":"24046:30:29","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"24056:18:29"},"nodeType":"YulFunctionCall","src":"24056:20:29"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24046:6:29"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24105:6:29"},{"name":"size","nodeType":"YulIdentifier","src":"24113:4:29"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"24085:19:29"},"nodeType":"YulFunctionCall","src":"24085:33:29"},"nodeType":"YulExpressionStatement","src":"24085:33:29"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"24020:4:29","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"24029:6:29","type":""}],"src":"23995:129:29"},{"body":{"nodeType":"YulBlock","src":"24170:35:29","statements":[{"nodeType":"YulAssignment","src":"24180:19:29","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24196:2:29","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24190:5:29"},"nodeType":"YulFunctionCall","src":"24190:9:29"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24180:6:29"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"24163:6:29","type":""}],"src":"24130:75:29"},{"body":{"nodeType":"YulBlock","src":"24277:241:29","statements":[{"body":{"nodeType":"YulBlock","src":"24382:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"24384:16:29"},"nodeType":"YulFunctionCall","src":"24384:18:29"},"nodeType":"YulExpressionStatement","src":"24384:18:29"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"24354:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"24362:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"24351:2:29"},"nodeType":"YulFunctionCall","src":"24351:30:29"},"nodeType":"YulIf","src":"24348:2:29"},{"nodeType":"YulAssignment","src":"24414:37:29","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"24444:6:29"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"24422:21:29"},"nodeType":"YulFunctionCall","src":"24422:29:29"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"24414:4:29"}]},{"nodeType":"YulAssignment","src":"24488:23:29","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"24500:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"24506:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24496:3:29"},"nodeType":"YulFunctionCall","src":"24496:15:29"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"24488:4:29"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"24261:6:29","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"24272:4:29","type":""}],"src":"24211:307:29"},{"body":{"nodeType":"YulBlock","src":"24591:241:29","statements":[{"body":{"nodeType":"YulBlock","src":"24696:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"24698:16:29"},"nodeType":"YulFunctionCall","src":"24698:18:29"},"nodeType":"YulExpressionStatement","src":"24698:18:29"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"24668:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"24676:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"24665:2:29"},"nodeType":"YulFunctionCall","src":"24665:30:29"},"nodeType":"YulIf","src":"24662:2:29"},{"nodeType":"YulAssignment","src":"24728:37:29","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"24758:6:29"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"24736:21:29"},"nodeType":"YulFunctionCall","src":"24736:29:29"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"24728:4:29"}]},{"nodeType":"YulAssignment","src":"24802:23:29","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"24814:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"24820:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24810:3:29"},"nodeType":"YulFunctionCall","src":"24810:15:29"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"24802:4:29"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"24575:6:29","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"24586:4:29","type":""}],"src":"24524:308:29"},{"body":{"nodeType":"YulBlock","src":"24910:60:29","statements":[{"nodeType":"YulAssignment","src":"24920:11:29","value":{"name":"ptr","nodeType":"YulIdentifier","src":"24928:3:29"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"24920:4:29"}]},{"nodeType":"YulAssignment","src":"24941:22:29","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"24953:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"24958:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24949:3:29"},"nodeType":"YulFunctionCall","src":"24949:14:29"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"24941:4:29"}]}]},"name":"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"24897:3:29","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"24905:4:29","type":""}],"src":"24838:132:29"},{"body":{"nodeType":"YulBlock","src":"25050:40:29","statements":[{"nodeType":"YulAssignment","src":"25061:22:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25077:5:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"25071:5:29"},"nodeType":"YulFunctionCall","src":"25071:12:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"25061:6:29"}]}]},"name":"array_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"25033:5:29","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"25043:6:29","type":""}],"src":"24976:114:29"},{"body":{"nodeType":"YulBlock","src":"25154:40:29","statements":[{"nodeType":"YulAssignment","src":"25165:22:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25181:5:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"25175:5:29"},"nodeType":"YulFunctionCall","src":"25175:12:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"25165:6:29"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"25137:5:29","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"25147:6:29","type":""}],"src":"25096:98:29"},{"body":{"nodeType":"YulBlock","src":"25259:40:29","statements":[{"nodeType":"YulAssignment","src":"25270:22:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25286:5:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"25280:5:29"},"nodeType":"YulFunctionCall","src":"25280:12:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"25270:6:29"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"25242:5:29","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"25252:6:29","type":""}],"src":"25200:99:29"},{"body":{"nodeType":"YulBlock","src":"25380:38:29","statements":[{"nodeType":"YulAssignment","src":"25390:22:29","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"25402:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"25407:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25398:3:29"},"nodeType":"YulFunctionCall","src":"25398:14:29"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"25390:4:29"}]}]},"name":"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"25367:3:29","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"25375:4:29","type":""}],"src":"25305:113:29"},{"body":{"nodeType":"YulBlock","src":"25535:73:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25552:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"25557:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25545:6:29"},"nodeType":"YulFunctionCall","src":"25545:19:29"},"nodeType":"YulExpressionStatement","src":"25545:19:29"},{"nodeType":"YulAssignment","src":"25573:29:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25592:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"25597:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25588:3:29"},"nodeType":"YulFunctionCall","src":"25588:14:29"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"25573:11:29"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"25507:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"25512:6:29","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"25523:11:29","type":""}],"src":"25424:184:29"},{"body":{"nodeType":"YulBlock","src":"25709:73:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25726:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"25731:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25719:6:29"},"nodeType":"YulFunctionCall","src":"25719:19:29"},"nodeType":"YulExpressionStatement","src":"25719:19:29"},{"nodeType":"YulAssignment","src":"25747:29:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25766:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"25771:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25762:3:29"},"nodeType":"YulFunctionCall","src":"25762:14:29"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"25747:11:29"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"25681:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"25686:6:29","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"25697:11:29","type":""}],"src":"25614:168:29"},{"body":{"nodeType":"YulBlock","src":"25884:73:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25901:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"25906:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25894:6:29"},"nodeType":"YulFunctionCall","src":"25894:19:29"},"nodeType":"YulExpressionStatement","src":"25894:19:29"},{"nodeType":"YulAssignment","src":"25922:29:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25941:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"25946:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25937:3:29"},"nodeType":"YulFunctionCall","src":"25937:14:29"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"25922:11:29"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"25856:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"25861:6:29","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"25872:11:29","type":""}],"src":"25788:169:29"},{"body":{"nodeType":"YulBlock","src":"26077:34:29","statements":[{"nodeType":"YulAssignment","src":"26087:18:29","value":{"name":"pos","nodeType":"YulIdentifier","src":"26102:3:29"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"26087:11:29"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"26049:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"26054:6:29","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"26065:11:29","type":""}],"src":"25963:148:29"},{"body":{"nodeType":"YulBlock","src":"26161:261:29","statements":[{"nodeType":"YulAssignment","src":"26171:25:29","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"26194:1:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"26176:17:29"},"nodeType":"YulFunctionCall","src":"26176:20:29"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"26171:1:29"}]},{"nodeType":"YulAssignment","src":"26205:25:29","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"26228:1:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"26210:17:29"},"nodeType":"YulFunctionCall","src":"26210:20:29"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"26205:1:29"}]},{"body":{"nodeType":"YulBlock","src":"26368:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"26370:16:29"},"nodeType":"YulFunctionCall","src":"26370:18:29"},"nodeType":"YulExpressionStatement","src":"26370:18:29"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"26289:1:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26296:66:29","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"y","nodeType":"YulIdentifier","src":"26364:1:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26292:3:29"},"nodeType":"YulFunctionCall","src":"26292:74:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"26286:2:29"},"nodeType":"YulFunctionCall","src":"26286:81:29"},"nodeType":"YulIf","src":"26283:2:29"},{"nodeType":"YulAssignment","src":"26400:16:29","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"26411:1:29"},{"name":"y","nodeType":"YulIdentifier","src":"26414:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26407:3:29"},"nodeType":"YulFunctionCall","src":"26407:9:29"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"26400:3:29"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"26148:1:29","type":""},{"name":"y","nodeType":"YulTypedName","src":"26151:1:29","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"26157:3:29","type":""}],"src":"26117:305:29"},{"body":{"nodeType":"YulBlock","src":"26473:146:29","statements":[{"nodeType":"YulAssignment","src":"26483:25:29","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"26506:1:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"26488:17:29"},"nodeType":"YulFunctionCall","src":"26488:20:29"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"26483:1:29"}]},{"nodeType":"YulAssignment","src":"26517:25:29","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"26540:1:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"26522:17:29"},"nodeType":"YulFunctionCall","src":"26522:20:29"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"26517:1:29"}]},{"body":{"nodeType":"YulBlock","src":"26564:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"26566:16:29"},"nodeType":"YulFunctionCall","src":"26566:18:29"},"nodeType":"YulExpressionStatement","src":"26566:18:29"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"26558:1:29"},{"name":"y","nodeType":"YulIdentifier","src":"26561:1:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"26555:2:29"},"nodeType":"YulFunctionCall","src":"26555:8:29"},"nodeType":"YulIf","src":"26552:2:29"},{"nodeType":"YulAssignment","src":"26596:17:29","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"26608:1:29"},{"name":"y","nodeType":"YulIdentifier","src":"26611:1:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26604:3:29"},"nodeType":"YulFunctionCall","src":"26604:9:29"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"26596:4:29"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"26459:1:29","type":""},{"name":"y","nodeType":"YulTypedName","src":"26462:1:29","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"26468:4:29","type":""}],"src":"26428:191:29"},{"body":{"nodeType":"YulBlock","src":"26670:51:29","statements":[{"nodeType":"YulAssignment","src":"26680:35:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26709:5:29"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"26691:17:29"},"nodeType":"YulFunctionCall","src":"26691:24:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"26680:7:29"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"26652:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"26662:7:29","type":""}],"src":"26625:96:29"},{"body":{"nodeType":"YulBlock","src":"26769:48:29","statements":[{"nodeType":"YulAssignment","src":"26779:32:29","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26804:5:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"26797:6:29"},"nodeType":"YulFunctionCall","src":"26797:13:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"26790:6:29"},"nodeType":"YulFunctionCall","src":"26790:21:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"26779:7:29"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"26751:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"26761:7:29","type":""}],"src":"26727:90:29"},{"body":{"nodeType":"YulBlock","src":"26867:105:29","statements":[{"nodeType":"YulAssignment","src":"26877:89:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26892:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"26899:66:29","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"26888:3:29"},"nodeType":"YulFunctionCall","src":"26888:78:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"26877:7:29"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"26849:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"26859:7:29","type":""}],"src":"26823:149:29"},{"body":{"nodeType":"YulBlock","src":"27023:81:29","statements":[{"nodeType":"YulAssignment","src":"27033:65:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27048:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"27055:42:29","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"27044:3:29"},"nodeType":"YulFunctionCall","src":"27044:54:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"27033:7:29"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"27005:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"27015:7:29","type":""}],"src":"26978:126:29"},{"body":{"nodeType":"YulBlock","src":"27155:32:29","statements":[{"nodeType":"YulAssignment","src":"27165:16:29","value":{"name":"value","nodeType":"YulIdentifier","src":"27176:5:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"27165:7:29"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"27137:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"27147:7:29","type":""}],"src":"27110:77:29"},{"body":{"nodeType":"YulBlock","src":"27244:103:29","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"27267:3:29"},{"name":"src","nodeType":"YulIdentifier","src":"27272:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"27277:6:29"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"27254:12:29"},"nodeType":"YulFunctionCall","src":"27254:30:29"},"nodeType":"YulExpressionStatement","src":"27254:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"27325:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"27330:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27321:3:29"},"nodeType":"YulFunctionCall","src":"27321:16:29"},{"kind":"number","nodeType":"YulLiteral","src":"27339:1:29","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27314:6:29"},"nodeType":"YulFunctionCall","src":"27314:27:29"},"nodeType":"YulExpressionStatement","src":"27314:27:29"}]},"name":"copy_calldata_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"27226:3:29","type":""},{"name":"dst","nodeType":"YulTypedName","src":"27231:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"27236:6:29","type":""}],"src":"27193:154:29"},{"body":{"nodeType":"YulBlock","src":"27402:258:29","statements":[{"nodeType":"YulVariableDeclaration","src":"27412:10:29","value":{"kind":"number","nodeType":"YulLiteral","src":"27421:1:29","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"27416:1:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"27481:63:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"27506:3:29"},{"name":"i","nodeType":"YulIdentifier","src":"27511:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27502:3:29"},"nodeType":"YulFunctionCall","src":"27502:11:29"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"27525:3:29"},{"name":"i","nodeType":"YulIdentifier","src":"27530:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27521:3:29"},"nodeType":"YulFunctionCall","src":"27521:11:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"27515:5:29"},"nodeType":"YulFunctionCall","src":"27515:18:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27495:6:29"},"nodeType":"YulFunctionCall","src":"27495:39:29"},"nodeType":"YulExpressionStatement","src":"27495:39:29"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"27442:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"27445:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"27439:2:29"},"nodeType":"YulFunctionCall","src":"27439:13:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"27453:19:29","statements":[{"nodeType":"YulAssignment","src":"27455:15:29","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"27464:1:29"},{"kind":"number","nodeType":"YulLiteral","src":"27467:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27460:3:29"},"nodeType":"YulFunctionCall","src":"27460:10:29"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"27455:1:29"}]}]},"pre":{"nodeType":"YulBlock","src":"27435:3:29","statements":[]},"src":"27431:113:29"},{"body":{"nodeType":"YulBlock","src":"27578:76:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"27628:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"27633:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27624:3:29"},"nodeType":"YulFunctionCall","src":"27624:16:29"},{"kind":"number","nodeType":"YulLiteral","src":"27642:1:29","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27617:6:29"},"nodeType":"YulFunctionCall","src":"27617:27:29"},"nodeType":"YulExpressionStatement","src":"27617:27:29"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"27559:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"27562:6:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"27556:2:29"},"nodeType":"YulFunctionCall","src":"27556:13:29"},"nodeType":"YulIf","src":"27553:2:29"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"27384:3:29","type":""},{"name":"dst","nodeType":"YulTypedName","src":"27389:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"27394:6:29","type":""}],"src":"27353:307:29"},{"body":{"nodeType":"YulBlock","src":"27717:269:29","statements":[{"nodeType":"YulAssignment","src":"27727:22:29","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"27741:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"27747:1:29","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"27737:3:29"},"nodeType":"YulFunctionCall","src":"27737:12:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"27727:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"27758:38:29","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"27788:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"27794:1:29","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"27784:3:29"},"nodeType":"YulFunctionCall","src":"27784:12:29"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"27762:18:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"27835:51:29","statements":[{"nodeType":"YulAssignment","src":"27849:27:29","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"27863:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"27871:4:29","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"27859:3:29"},"nodeType":"YulFunctionCall","src":"27859:17:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"27849:6:29"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"27815:18:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"27808:6:29"},"nodeType":"YulFunctionCall","src":"27808:26:29"},"nodeType":"YulIf","src":"27805:2:29"},{"body":{"nodeType":"YulBlock","src":"27938:42:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"27952:16:29"},"nodeType":"YulFunctionCall","src":"27952:18:29"},"nodeType":"YulExpressionStatement","src":"27952:18:29"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"27902:18:29"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"27925:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"27933:2:29","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"27922:2:29"},"nodeType":"YulFunctionCall","src":"27922:14:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"27899:2:29"},"nodeType":"YulFunctionCall","src":"27899:38:29"},"nodeType":"YulIf","src":"27896:2:29"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"27701:4:29","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"27710:6:29","type":""}],"src":"27666:320:29"},{"body":{"nodeType":"YulBlock","src":"28035:238:29","statements":[{"nodeType":"YulVariableDeclaration","src":"28045:58:29","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"28067:6:29"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"28097:4:29"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"28075:21:29"},"nodeType":"YulFunctionCall","src":"28075:27:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28063:3:29"},"nodeType":"YulFunctionCall","src":"28063:40:29"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"28049:10:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"28214:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"28216:16:29"},"nodeType":"YulFunctionCall","src":"28216:18:29"},"nodeType":"YulExpressionStatement","src":"28216:18:29"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"28157:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"28169:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"28154:2:29"},"nodeType":"YulFunctionCall","src":"28154:34:29"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"28193:10:29"},{"name":"memPtr","nodeType":"YulIdentifier","src":"28205:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"28190:2:29"},"nodeType":"YulFunctionCall","src":"28190:22:29"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"28151:2:29"},"nodeType":"YulFunctionCall","src":"28151:62:29"},"nodeType":"YulIf","src":"28148:2:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28252:2:29","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"28256:10:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28245:6:29"},"nodeType":"YulFunctionCall","src":"28245:22:29"},"nodeType":"YulExpressionStatement","src":"28245:22:29"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"28021:6:29","type":""},{"name":"size","nodeType":"YulTypedName","src":"28029:4:29","type":""}],"src":"27992:281:29"},{"body":{"nodeType":"YulBlock","src":"28322:190:29","statements":[{"nodeType":"YulAssignment","src":"28332:33:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28359:5:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"28341:17:29"},"nodeType":"YulFunctionCall","src":"28341:24:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"28332:5:29"}]},{"body":{"nodeType":"YulBlock","src":"28455:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"28457:16:29"},"nodeType":"YulFunctionCall","src":"28457:18:29"},"nodeType":"YulExpressionStatement","src":"28457:18:29"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28380:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"28387:66:29","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"28377:2:29"},"nodeType":"YulFunctionCall","src":"28377:77:29"},"nodeType":"YulIf","src":"28374:2:29"},{"nodeType":"YulAssignment","src":"28486:20:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28497:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"28504:1:29","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28493:3:29"},"nodeType":"YulFunctionCall","src":"28493:13:29"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"28486:3:29"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28308:5:29","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"28318:3:29","type":""}],"src":"28279:233:29"},{"body":{"nodeType":"YulBlock","src":"28546:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28563:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"28566:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28556:6:29"},"nodeType":"YulFunctionCall","src":"28556:88:29"},"nodeType":"YulExpressionStatement","src":"28556:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28660:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"28663:4:29","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28653:6:29"},"nodeType":"YulFunctionCall","src":"28653:15:29"},"nodeType":"YulExpressionStatement","src":"28653:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28684:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"28687:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"28677:6:29"},"nodeType":"YulFunctionCall","src":"28677:15:29"},"nodeType":"YulExpressionStatement","src":"28677:15:29"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"28518:180:29"},{"body":{"nodeType":"YulBlock","src":"28732:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28749:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"28752:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28742:6:29"},"nodeType":"YulFunctionCall","src":"28742:88:29"},"nodeType":"YulExpressionStatement","src":"28742:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28846:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"28849:4:29","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28839:6:29"},"nodeType":"YulFunctionCall","src":"28839:15:29"},"nodeType":"YulExpressionStatement","src":"28839:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28870:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"28873:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"28863:6:29"},"nodeType":"YulFunctionCall","src":"28863:15:29"},"nodeType":"YulExpressionStatement","src":"28863:15:29"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"28704:180:29"},{"body":{"nodeType":"YulBlock","src":"28918:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28935:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"28938:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28928:6:29"},"nodeType":"YulFunctionCall","src":"28928:88:29"},"nodeType":"YulExpressionStatement","src":"28928:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29032:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"29035:4:29","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29025:6:29"},"nodeType":"YulFunctionCall","src":"29025:15:29"},"nodeType":"YulExpressionStatement","src":"29025:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29056:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"29059:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"29049:6:29"},"nodeType":"YulFunctionCall","src":"29049:15:29"},"nodeType":"YulExpressionStatement","src":"29049:15:29"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"28890:180:29"},{"body":{"nodeType":"YulBlock","src":"29124:54:29","statements":[{"nodeType":"YulAssignment","src":"29134:38:29","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29152:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"29159:2:29","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29148:3:29"},"nodeType":"YulFunctionCall","src":"29148:14:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29168:2:29","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"29164:3:29"},"nodeType":"YulFunctionCall","src":"29164:7:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"29144:3:29"},"nodeType":"YulFunctionCall","src":"29144:28:29"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"29134:6:29"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"29107:5:29","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"29117:6:29","type":""}],"src":"29076:102:29"},{"body":{"nodeType":"YulBlock","src":"29290:126:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"29312:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"29320:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29308:3:29"},"nodeType":"YulFunctionCall","src":"29308:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"29324:34:29","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29301:6:29"},"nodeType":"YulFunctionCall","src":"29301:58:29"},"nodeType":"YulExpressionStatement","src":"29301:58:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"29380:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"29388:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29376:3:29"},"nodeType":"YulFunctionCall","src":"29376:15:29"},{"kind":"string","nodeType":"YulLiteral","src":"29393:15:29","type":"","value":"r or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29369:6:29"},"nodeType":"YulFunctionCall","src":"29369:40:29"},"nodeType":"YulExpressionStatement","src":"29369:40:29"}]},"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"29282:6:29","type":""}],"src":"29184:232:29"},{"body":{"nodeType":"YulBlock","src":"29528:131:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"29550:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"29558:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29546:3:29"},"nodeType":"YulFunctionCall","src":"29546:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"29562:34:29","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29539:6:29"},"nodeType":"YulFunctionCall","src":"29539:58:29"},"nodeType":"YulExpressionStatement","src":"29539:58:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"29618:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"29626:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29614:3:29"},"nodeType":"YulFunctionCall","src":"29614:15:29"},{"kind":"string","nodeType":"YulLiteral","src":"29631:20:29","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29607:6:29"},"nodeType":"YulFunctionCall","src":"29607:45:29"},"nodeType":"YulExpressionStatement","src":"29607:45:29"}]},"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"29520:6:29","type":""}],"src":"29422:237:29"},{"body":{"nodeType":"YulBlock","src":"29771:118:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"29793:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"29801:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29789:3:29"},"nodeType":"YulFunctionCall","src":"29789:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"29805:34:29","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29782:6:29"},"nodeType":"YulFunctionCall","src":"29782:58:29"},"nodeType":"YulExpressionStatement","src":"29782:58:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"29861:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"29869:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29857:3:29"},"nodeType":"YulFunctionCall","src":"29857:15:29"},{"kind":"string","nodeType":"YulLiteral","src":"29874:7:29","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29850:6:29"},"nodeType":"YulFunctionCall","src":"29850:32:29"},"nodeType":"YulExpressionStatement","src":"29850:32:29"}]},"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"29763:6:29","type":""}],"src":"29665:224:29"},{"body":{"nodeType":"YulBlock","src":"30001:72:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30023:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"30031:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30019:3:29"},"nodeType":"YulFunctionCall","src":"30019:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"30035:30:29","type":"","value":"ERC721: token already minted"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30012:6:29"},"nodeType":"YulFunctionCall","src":"30012:54:29"},"nodeType":"YulExpressionStatement","src":"30012:54:29"}]},"name":"store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"29993:6:29","type":""}],"src":"29895:178:29"},{"body":{"nodeType":"YulBlock","src":"30185:117:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30207:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"30215:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30203:3:29"},"nodeType":"YulFunctionCall","src":"30203:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"30219:34:29","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30196:6:29"},"nodeType":"YulFunctionCall","src":"30196:58:29"},"nodeType":"YulExpressionStatement","src":"30196:58:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30275:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"30283:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30271:3:29"},"nodeType":"YulFunctionCall","src":"30271:15:29"},{"kind":"string","nodeType":"YulLiteral","src":"30288:6:29","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30264:6:29"},"nodeType":"YulFunctionCall","src":"30264:31:29"},"nodeType":"YulExpressionStatement","src":"30264:31:29"}]},"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"30177:6:29","type":""}],"src":"30079:223:29"},{"body":{"nodeType":"YulBlock","src":"30414:69:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30436:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"30444:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30432:3:29"},"nodeType":"YulFunctionCall","src":"30432:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"30448:27:29","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30425:6:29"},"nodeType":"YulFunctionCall","src":"30425:51:29"},"nodeType":"YulExpressionStatement","src":"30425:51:29"}]},"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"30406:6:29","type":""}],"src":"30308:175:29"},{"body":{"nodeType":"YulBlock","src":"30595:122:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30617:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"30625:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30613:3:29"},"nodeType":"YulFunctionCall","src":"30613:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"30629:34:29","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30606:6:29"},"nodeType":"YulFunctionCall","src":"30606:58:29"},"nodeType":"YulExpressionStatement","src":"30606:58:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30685:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"30693:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30681:3:29"},"nodeType":"YulFunctionCall","src":"30681:15:29"},{"kind":"string","nodeType":"YulLiteral","src":"30698:11:29","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30674:6:29"},"nodeType":"YulFunctionCall","src":"30674:36:29"},"nodeType":"YulExpressionStatement","src":"30674:36:29"}]},"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"30587:6:29","type":""}],"src":"30489:228:29"},{"body":{"nodeType":"YulBlock","src":"30829:127:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30851:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"30859:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30847:3:29"},"nodeType":"YulFunctionCall","src":"30847:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"30863:34:29","type":"","value":"ERC721URIStorage: URI set of non"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30840:6:29"},"nodeType":"YulFunctionCall","src":"30840:58:29"},"nodeType":"YulExpressionStatement","src":"30840:58:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30919:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"30927:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30915:3:29"},"nodeType":"YulFunctionCall","src":"30915:15:29"},{"kind":"string","nodeType":"YulLiteral","src":"30932:16:29","type":"","value":"existent token"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30908:6:29"},"nodeType":"YulFunctionCall","src":"30908:41:29"},"nodeType":"YulExpressionStatement","src":"30908:41:29"}]},"name":"store_literal_in_memory_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"30821:6:29","type":""}],"src":"30723:233:29"},{"body":{"nodeType":"YulBlock","src":"31068:76:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31090:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"31098:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31086:3:29"},"nodeType":"YulFunctionCall","src":"31086:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"31102:34:29","type":"","value":"ERC721: mint to the zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31079:6:29"},"nodeType":"YulFunctionCall","src":"31079:58:29"},"nodeType":"YulExpressionStatement","src":"31079:58:29"}]},"name":"store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"31060:6:29","type":""}],"src":"30962:182:29"},{"body":{"nodeType":"YulBlock","src":"31256:68:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31278:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"31286:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31274:3:29"},"nodeType":"YulFunctionCall","src":"31274:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"31290:26:29","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31267:6:29"},"nodeType":"YulFunctionCall","src":"31267:50:29"},"nodeType":"YulExpressionStatement","src":"31267:50:29"}]},"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"31248:6:29","type":""}],"src":"31150:174:29"},{"body":{"nodeType":"YulBlock","src":"31436:114:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31458:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"31466:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31454:3:29"},"nodeType":"YulFunctionCall","src":"31454:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"31470:34:29","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31447:6:29"},"nodeType":"YulFunctionCall","src":"31447:58:29"},"nodeType":"YulExpressionStatement","src":"31447:58:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31526:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"31534:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31522:3:29"},"nodeType":"YulFunctionCall","src":"31522:15:29"},{"kind":"string","nodeType":"YulLiteral","src":"31539:3:29","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31515:6:29"},"nodeType":"YulFunctionCall","src":"31515:28:29"},"nodeType":"YulExpressionStatement","src":"31515:28:29"}]},"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"31428:6:29","type":""}],"src":"31330:220:29"},{"body":{"nodeType":"YulBlock","src":"31662:142:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31684:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"31692:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31680:3:29"},"nodeType":"YulFunctionCall","src":"31680:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"31696:34:29","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31673:6:29"},"nodeType":"YulFunctionCall","src":"31673:58:29"},"nodeType":"YulExpressionStatement","src":"31673:58:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31752:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"31760:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31748:3:29"},"nodeType":"YulFunctionCall","src":"31748:15:29"},{"kind":"string","nodeType":"YulLiteral","src":"31765:31:29","type":"","value":"ken owner or approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31741:6:29"},"nodeType":"YulFunctionCall","src":"31741:56:29"},"nodeType":"YulExpressionStatement","src":"31741:56:29"}]},"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"31654:6:29","type":""}],"src":"31556:248:29"},{"body":{"nodeType":"YulBlock","src":"31916:130:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31938:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"31946:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31934:3:29"},"nodeType":"YulFunctionCall","src":"31934:14:29"},{"kind":"string","nodeType":"YulLiteral","src":"31950:34:29","type":"","value":"ERC721: transfer caller is not o"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31927:6:29"},"nodeType":"YulFunctionCall","src":"31927:58:29"},"nodeType":"YulExpressionStatement","src":"31927:58:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"32006:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"32014:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32002:3:29"},"nodeType":"YulFunctionCall","src":"32002:15:29"},{"kind":"string","nodeType":"YulLiteral","src":"32019:19:29","type":"","value":"wner nor approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31995:6:29"},"nodeType":"YulFunctionCall","src":"31995:44:29"},"nodeType":"YulExpressionStatement","src":"31995:44:29"}]},"name":"store_literal_in_memory_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"31908:6:29","type":""}],"src":"31810:236:29"},{"body":{"nodeType":"YulBlock","src":"32095:79:29","statements":[{"body":{"nodeType":"YulBlock","src":"32152:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32161:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"32164:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"32154:6:29"},"nodeType":"YulFunctionCall","src":"32154:12:29"},"nodeType":"YulExpressionStatement","src":"32154:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32118:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32143:5:29"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"32125:17:29"},"nodeType":"YulFunctionCall","src":"32125:24:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"32115:2:29"},"nodeType":"YulFunctionCall","src":"32115:35:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"32108:6:29"},"nodeType":"YulFunctionCall","src":"32108:43:29"},"nodeType":"YulIf","src":"32105:2:29"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"32088:5:29","type":""}],"src":"32052:122:29"},{"body":{"nodeType":"YulBlock","src":"32220:76:29","statements":[{"body":{"nodeType":"YulBlock","src":"32274:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32283:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"32286:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"32276:6:29"},"nodeType":"YulFunctionCall","src":"32276:12:29"},"nodeType":"YulExpressionStatement","src":"32276:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32243:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32265:5:29"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"32250:14:29"},"nodeType":"YulFunctionCall","src":"32250:21:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"32240:2:29"},"nodeType":"YulFunctionCall","src":"32240:32:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"32233:6:29"},"nodeType":"YulFunctionCall","src":"32233:40:29"},"nodeType":"YulIf","src":"32230:2:29"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"32213:5:29","type":""}],"src":"32180:116:29"},{"body":{"nodeType":"YulBlock","src":"32344:78:29","statements":[{"body":{"nodeType":"YulBlock","src":"32400:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32409:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"32412:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"32402:6:29"},"nodeType":"YulFunctionCall","src":"32402:12:29"},"nodeType":"YulExpressionStatement","src":"32402:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32367:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32391:5:29"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"32374:16:29"},"nodeType":"YulFunctionCall","src":"32374:23:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"32364:2:29"},"nodeType":"YulFunctionCall","src":"32364:34:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"32357:6:29"},"nodeType":"YulFunctionCall","src":"32357:42:29"},"nodeType":"YulIf","src":"32354:2:29"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"32337:5:29","type":""}],"src":"32302:120:29"},{"body":{"nodeType":"YulBlock","src":"32471:79:29","statements":[{"body":{"nodeType":"YulBlock","src":"32528:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32537:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"32540:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"32530:6:29"},"nodeType":"YulFunctionCall","src":"32530:12:29"},"nodeType":"YulExpressionStatement","src":"32530:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32494:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32519:5:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"32501:17:29"},"nodeType":"YulFunctionCall","src":"32501:24:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"32491:2:29"},"nodeType":"YulFunctionCall","src":"32491:35:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"32484:6:29"},"nodeType":"YulFunctionCall","src":"32484:43:29"},"nodeType":"YulIf","src":"32481:2:29"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"32464:5:29","type":""}],"src":"32428:122:29"}]},"contents":"{\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert(0, 0) }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert(0, 0) }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_string_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value3 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value0 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value0 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encodeUpdatedPos_t_uint256_to_t_uint256(value0, pos) -> updatedPos {\n        abi_encode_t_uint256_to_t_uint256(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    // uint256[] -> uint256[]\n    function abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_uint256_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_uint256_to_t_uint256(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 45)\n        store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 50)\n        store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 28)\n        store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n        store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)\n        store_literal_in_memory_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 61)\n        store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 49)\n        store_literal_in_memory_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function array_length_t_array$_t_uint256_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        if lt(x, y) { panic_error_0x11() }\n\n        diff := sub(x, y)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: caller is not token owne\")\n\n        mstore(add(memPtr, 32), \"r or approved\")\n\n    }\n\n    function store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to non ERC721Re\")\n\n        mstore(add(memPtr, 32), \"ceiver implementer\")\n\n    }\n\n    function store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer from incorrect \")\n\n        mstore(add(memPtr, 32), \"owner\")\n\n    }\n\n    function store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: token already minted\")\n\n    }\n\n    function store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve to caller\")\n\n    }\n\n    function store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: address zero is not a va\")\n\n        mstore(add(memPtr, 32), \"lid owner\")\n\n    }\n\n    function store_literal_in_memory_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721URIStorage: URI set of non\")\n\n        mstore(add(memPtr, 32), \"existent token\")\n\n    }\n\n    function store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: mint to the zero address\")\n\n    }\n\n    function store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: invalid token ID\")\n\n    }\n\n    function store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approval to current owne\")\n\n        mstore(add(memPtr, 32), \"r\")\n\n    }\n\n    function store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve caller is not to\")\n\n        mstore(add(memPtr, 32), \"ken owner or approved for all\")\n\n    }\n\n    function store_literal_in_memory_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer caller is not o\")\n\n        mstore(add(memPtr, 32), \"wner nor approved\")\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n","id":29,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101375760003560e01c80636871ee40116100b8578063b88d4fde1161007c578063b88d4fde1461035e578063c87b56dd1461037a578063d4d94b05146103aa578063deeb9a3f146103c6578063e985e9c5146103e2578063eed8cc351461041257610137565b80636871ee40146102ba57806370a08231146102d85780637b2eb35c1461030857806395d89b4114610324578063a22cb4651461034257610137565b8063265d9a6c116100ff578063265d9a6c146101f25780632743dfd01461022257806342842e0e1461023e57806357991d301461025a5780636352211e1461028a57610137565b806301ffc9a71461013c57806306fdde031461016c578063081812fc1461018a578063095ea7b3146101ba57806323b872dd146101d6575b600080fd5b6101566004803603810190610151919061241a565b610442565b604051610163919061298f565b60405180910390f35b610174610524565b60405161018191906129aa565b60405180910390f35b6101a4600480360381019061019f9190612501565b6105b6565b6040516101b191906128a6565b60405180910390f35b6101d460048036038101906101cf91906123de565b6105fc565b005b6101f060048036038101906101eb919061225d565b610714565b005b61020c6004803603810190610207919061246c565b61076d565b6040516102199190612b6c565b60405180910390f35b61023c60048036038101906102379190612501565b6107a3565b005b6102586004803603810190610253919061225d565b61085e565b005b610274600480360381019061026f9190612501565b61087e565b604051610281919061296d565b60405180910390f35b6102a4600480360381019061029f9190612501565b6108e9565b6040516102b191906128a6565b60405180910390f35b6102c2610970565b6040516102cf9190612b6c565b60405180910390f35b6102f260048036038101906102ed91906121f8565b61099a565b6040516102ff9190612b6c565b60405180910390f35b610322600480360381019061031d9190612327565b610a52565b005b61032c610b0c565b60405161033991906129aa565b60405180910390f35b61035c600480360381019061035791906123a2565b610b9e565b005b610378600480360381019061037391906122ac565b610bb4565b005b610394600480360381019061038f9190612501565b610c16565b6040516103a191906129aa565b60405180910390f35b6103c460048036038101906103bf91906124ad565b610d29565b005b6103e060048036038101906103db919061225d565b610de6565b005b6103fc60048036038101906103f79190612221565b610e95565b604051610409919061298f565b60405180910390f35b61042c6004803603810190610427919061252a565b610f29565b6040516104399190612b6c565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061050d57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061051d575061051c82610f5a565b5b9050919050565b60606000805461053390612dca565b80601f016020809104026020016040519081016040528092919081815260200182805461055f90612dca565b80156105ac5780601f10610581576101008083540402835291602001916105ac565b820191906000526020600020905b81548152906001019060200180831161058f57829003601f168201915b5050505050905090565b60006105c182610fc4565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610607826108e9565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610678576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066f90612b0c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661069761100f565b73ffffffffffffffffffffffffffffffffffffffff1614806106c657506106c5816106c061100f565b610e95565b5b610705576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fc90612b2c565b60405180910390fd5b61070f8383611017565b505050565b61071e83826110d0565b61075d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075490612b4c565b60405180910390fd5b610768838383611165565b505050565b60008061077a600761145f565b9050610786600761146d565b6107903082611483565b61079a81846116a1565b80915050919050565b60006107af600861145f565b90506107bb600861146d565b60005b828110156108205760006107d0610970565b90506009600084815260200190815260200160002081908060018154018082558091505060019003906000526020600020016000909190919091505550808061081890612e2d565b9150506107be565b507fb9144c96c86541f6fa89c9f2f02495cccf4b08cd6643e26d34ee00aa586558a83382604051610852929190612944565b60405180910390a15050565b61087983838360405180602001604052806000815250610bb4565b505050565b6060600960008381526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156108dd57602002820191906000526020600020905b8154815260200190600101908083116108c9575b50505050509050919050565b6000806108f583611715565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610967576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095e90612aec565b60405180910390fd5b80915050919050565b60008061097d600761145f565b9050610989600761146d565b6109933082611483565b8091505090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0290612a8c565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610a5c82826116a1565b3073ffffffffffffffffffffffffffffffffffffffff166323b872dd8585856040518463ffffffff1660e01b8152600401610a99939291906128c1565b600060405180830381600087803b158015610ab357600080fd5b505af1158015610ac7573d6000803e3d6000fd5b505050507fec61728879a33aa50b55e1f4789dcfc1c680f30a24d7b8694a9f874e242a97b4848484604051610afe939291906128c1565b60405180910390a150505050565b606060018054610b1b90612dca565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4790612dca565b8015610b945780601f10610b6957610100808354040283529160200191610b94565b820191906000526020600020905b815481529060010190602001808311610b7757829003601f168201915b5050505050905090565b610bb0610ba961100f565b8383611752565b5050565b610bc5610bbf61100f565b836110d0565b610c04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bfb906129cc565b60405180910390fd5b610c10848484846118bf565b50505050565b6060610c2182610fc4565b6000600660008481526020019081526020016000208054610c4190612dca565b80601f0160208091040260200160405190810160405280929190818152602001828054610c6d90612dca565b8015610cba5780601f10610c8f57610100808354040283529160200191610cba565b820191906000526020600020905b815481529060010190602001808311610c9d57829003601f168201915b505050505090506000610ccb61191b565b9050600081511415610ce1578192505050610d24565b600082511115610d16578082604051602001610cfe929190612882565b60405160208183030381529060405292505050610d24565b610d1f84611932565b925050505b919050565b6000610d35600861145f565b9050610d41600861146d565b60005b82811015610da7576000610d578561076d565b905060096000848152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190915055508080610d9f90612e2d565b915050610d44565b507fb9144c96c86541f6fa89c9f2f02495cccf4b08cd6643e26d34ee00aa586558a83382604051610dd9929190612944565b60405180910390a1505050565b3073ffffffffffffffffffffffffffffffffffffffff166323b872dd8484846040518463ffffffff1660e01b8152600401610e23939291906128c1565b600060405180830381600087803b158015610e3d57600080fd5b505af1158015610e51573d6000803e3d6000fd5b505050507fec61728879a33aa50b55e1f4789dcfc1c680f30a24d7b8694a9f874e242a97b4838383604051610e88939291906128c1565b60405180910390a1505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60096020528160005260406000208181548110610f4557600080fd5b90600052602060002001600091509150505481565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610fcd8161199a565b61100c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100390612aec565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661108a836108e9565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806110dc836108e9565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061111e575061111d8185610e95565b5b8061115c57508373ffffffffffffffffffffffffffffffffffffffff16611144846105b6565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611185826108e9565b73ffffffffffffffffffffffffffffffffffffffff16146111db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d290612a0c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561124b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124290612a4c565b60405180910390fd5b61125883838360016119db565b8273ffffffffffffffffffffffffffffffffffffffff16611278826108e9565b73ffffffffffffffffffffffffffffffffffffffff16146112ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c590612a0c565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461145a8383836001611b01565b505050565b600081600001549050919050565b6001816000016000828254019250508190555050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156114f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ea90612acc565b60405180910390fd5b6114fc8161199a565b1561153c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153390612a2c565b60405180910390fd5b61154a6000838360016119db565b6115538161199a565b15611593576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158a90612a2c565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461169d600083836001611b01565b5050565b6116aa8261199a565b6116e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116e090612aac565b60405180910390fd5b8060066000848152602001908152602001600020908051906020019061171092919061201c565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156117c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b890612a6c565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516118b2919061298f565b60405180910390a3505050565b6118ca848484611165565b6118d684848484611b07565b611915576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190c906129ec565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606061193d82610fc4565b600061194761191b565b905060008151116119675760405180602001604052806000815250611992565b8061197184611c9e565b604051602001611982929190612882565b6040516020818303038152906040525b915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166119bc83611715565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6001811115611afb57600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611a6f5780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a679190612ce0565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611afa5780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611af29190612c8a565b925050819055505b5b50505050565b50505050565b6000611b288473ffffffffffffffffffffffffffffffffffffffff16611dc2565b15611c91578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611b5161100f565b8786866040518563ffffffff1660e01b8152600401611b7394939291906128f8565b602060405180830381600087803b158015611b8d57600080fd5b505af1925050508015611bbe57506040513d601f19601f82011682018060405250810190611bbb9190612443565b60015b611c41573d8060008114611bee576040519150601f19603f3d011682016040523d82523d6000602084013e611bf3565b606091505b50600081511415611c39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c30906129ec565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611c96565b600190505b949350505050565b606060006001611cad84611de5565b01905060008167ffffffffffffffff811115611cf2577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611d245781602001600182028036833780820191505090505b509050600082602001820190505b600115611db7578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611da1577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0494506000851415611db257611db7565b611d32565b819350505050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611e69577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611e5f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611ecc576d04ee2d6d415b85acef81000000008381611ec2577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506020810190505b662386f26fc100008310611f2157662386f26fc100008381611f17577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506010810190505b6305f5e1008310611f70576305f5e1008381611f66577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506008810190505b6127108310611fbb576127108381611fb1577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506004810190505b606483106120045760648381611ffa577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492506002810190505b600a8310612013576001810190505b80915050919050565b82805461202890612dca565b90600052602060002090601f01602090048101928261204a5760008555612091565b82601f1061206357805160ff1916838001178555612091565b82800160010185558215612091579182015b82811115612090578251825591602001919060010190612075565b5b50905061209e91906120a2565b5090565b5b808211156120bb5760008160009055506001016120a3565b5090565b60006120d26120cd84612bac565b612b87565b9050828152602081018484840111156120ea57600080fd5b6120f5848285612d88565b509392505050565b600061211061210b84612bdd565b612b87565b90508281526020810184848401111561212857600080fd5b612133848285612d88565b509392505050565b60008135905061214a8161327f565b92915050565b60008135905061215f81613296565b92915050565b600081359050612174816132ad565b92915050565b600081519050612189816132ad565b92915050565b600082601f8301126121a057600080fd5b81356121b08482602086016120bf565b91505092915050565b600082601f8301126121ca57600080fd5b81356121da8482602086016120fd565b91505092915050565b6000813590506121f2816132c4565b92915050565b60006020828403121561220a57600080fd5b60006122188482850161213b565b91505092915050565b6000806040838503121561223457600080fd5b60006122428582860161213b565b92505060206122538582860161213b565b9150509250929050565b60008060006060848603121561227257600080fd5b60006122808682870161213b565b93505060206122918682870161213b565b92505060406122a2868287016121e3565b9150509250925092565b600080600080608085870312156122c257600080fd5b60006122d08782880161213b565b94505060206122e18782880161213b565b93505060406122f2878288016121e3565b925050606085013567ffffffffffffffff81111561230f57600080fd5b61231b8782880161218f565b91505092959194509250565b6000806000806080858703121561233d57600080fd5b600061234b8782880161213b565b945050602061235c8782880161213b565b935050604061236d878288016121e3565b925050606085013567ffffffffffffffff81111561238a57600080fd5b612396878288016121b9565b91505092959194509250565b600080604083850312156123b557600080fd5b60006123c38582860161213b565b92505060206123d485828601612150565b9150509250929050565b600080604083850312156123f157600080fd5b60006123ff8582860161213b565b9250506020612410858286016121e3565b9150509250929050565b60006020828403121561242c57600080fd5b600061243a84828501612165565b91505092915050565b60006020828403121561245557600080fd5b60006124638482850161217a565b91505092915050565b60006020828403121561247e57600080fd5b600082013567ffffffffffffffff81111561249857600080fd5b6124a4848285016121b9565b91505092915050565b600080604083850312156124c057600080fd5b600083013567ffffffffffffffff8111156124da57600080fd5b6124e6858286016121b9565b92505060206124f7858286016121e3565b9150509250929050565b60006020828403121561251357600080fd5b6000612521848285016121e3565b91505092915050565b6000806040838503121561253d57600080fd5b600061254b858286016121e3565b925050602061255c858286016121e3565b9150509250929050565b60006125728383612864565b60208301905092915050565b61258781612d14565b82525050565b600061259882612c1e565b6125a28185612c4c565b93506125ad83612c0e565b8060005b838110156125de5781516125c58882612566565b97506125d083612c3f565b9250506001810190506125b1565b5085935050505092915050565b6125f481612d26565b82525050565b600061260582612c29565b61260f8185612c5d565b935061261f818560208601612d97565b61262881612f03565b840191505092915050565b600061263e82612c34565b6126488185612c6e565b9350612658818560208601612d97565b61266181612f03565b840191505092915050565b600061267782612c34565b6126818185612c7f565b9350612691818560208601612d97565b80840191505092915050565b60006126aa602d83612c6e565b91506126b582612f14565b604082019050919050565b60006126cd603283612c6e565b91506126d882612f63565b604082019050919050565b60006126f0602583612c6e565b91506126fb82612fb2565b604082019050919050565b6000612713601c83612c6e565b915061271e82613001565b602082019050919050565b6000612736602483612c6e565b91506127418261302a565b604082019050919050565b6000612759601983612c6e565b915061276482613079565b602082019050919050565b600061277c602983612c6e565b9150612787826130a2565b604082019050919050565b600061279f602e83612c6e565b91506127aa826130f1565b604082019050919050565b60006127c2602083612c6e565b91506127cd82613140565b602082019050919050565b60006127e5601883612c6e565b91506127f082613169565b602082019050919050565b6000612808602183612c6e565b915061281382613192565b604082019050919050565b600061282b603d83612c6e565b9150612836826131e1565b604082019050919050565b600061284e603183612c6e565b915061285982613230565b604082019050919050565b61286d81612d7e565b82525050565b61287c81612d7e565b82525050565b600061288e828561266c565b915061289a828461266c565b91508190509392505050565b60006020820190506128bb600083018461257e565b92915050565b60006060820190506128d6600083018661257e565b6128e3602083018561257e565b6128f06040830184612873565b949350505050565b600060808201905061290d600083018761257e565b61291a602083018661257e565b6129276040830185612873565b818103606083015261293981846125fa565b905095945050505050565b6000604082019050612959600083018561257e565b6129666020830184612873565b9392505050565b60006020820190508181036000830152612987818461258d565b905092915050565b60006020820190506129a460008301846125eb565b92915050565b600060208201905081810360008301526129c48184612633565b905092915050565b600060208201905081810360008301526129e58161269d565b9050919050565b60006020820190508181036000830152612a05816126c0565b9050919050565b60006020820190508181036000830152612a25816126e3565b9050919050565b60006020820190508181036000830152612a4581612706565b9050919050565b60006020820190508181036000830152612a6581612729565b9050919050565b60006020820190508181036000830152612a858161274c565b9050919050565b60006020820190508181036000830152612aa58161276f565b9050919050565b60006020820190508181036000830152612ac581612792565b9050919050565b60006020820190508181036000830152612ae5816127b5565b9050919050565b60006020820190508181036000830152612b05816127d8565b9050919050565b60006020820190508181036000830152612b25816127fb565b9050919050565b60006020820190508181036000830152612b458161281e565b9050919050565b60006020820190508181036000830152612b6581612841565b9050919050565b6000602082019050612b816000830184612873565b92915050565b6000612b91612ba2565b9050612b9d8282612dfc565b919050565b6000604051905090565b600067ffffffffffffffff821115612bc757612bc6612ed4565b5b612bd082612f03565b9050602081019050919050565b600067ffffffffffffffff821115612bf857612bf7612ed4565b5b612c0182612f03565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000612c9582612d7e565b9150612ca083612d7e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612cd557612cd4612e76565b5b828201905092915050565b6000612ceb82612d7e565b9150612cf683612d7e565b925082821015612d0957612d08612e76565b5b828203905092915050565b6000612d1f82612d5e565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015612db5578082015181840152602081019050612d9a565b83811115612dc4576000848401525b50505050565b60006002820490506001821680612de257607f821691505b60208210811415612df657612df5612ea5565b5b50919050565b612e0582612f03565b810181811067ffffffffffffffff82111715612e2457612e23612ed4565b5b80604052505050565b6000612e3882612d7e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612e6b57612e6a612e76565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b61328881612d14565b811461329357600080fd5b50565b61329f81612d26565b81146132aa57600080fd5b50565b6132b681612d32565b81146132c157600080fd5b50565b6132cd81612d7e565b81146132d857600080fd5b5056fea264697066735822122010ebf29840859f837bf83bb229803d468ca3125c27424a9a3513a9b7555fb6e364736f6c63430008040033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x137 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6871EE40 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x35E JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x37A JUMPI DUP1 PUSH4 0xD4D94B05 EQ PUSH2 0x3AA JUMPI DUP1 PUSH4 0xDEEB9A3F EQ PUSH2 0x3C6 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x3E2 JUMPI DUP1 PUSH4 0xEED8CC35 EQ PUSH2 0x412 JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x6871EE40 EQ PUSH2 0x2BA JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2D8 JUMPI DUP1 PUSH4 0x7B2EB35C EQ PUSH2 0x308 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x324 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x342 JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x265D9A6C GT PUSH2 0xFF JUMPI DUP1 PUSH4 0x265D9A6C EQ PUSH2 0x1F2 JUMPI DUP1 PUSH4 0x2743DFD0 EQ PUSH2 0x222 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x23E JUMPI DUP1 PUSH4 0x57991D30 EQ PUSH2 0x25A JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x28A JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x16C JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x18A JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1BA JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1D6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x156 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x151 SWAP2 SWAP1 PUSH2 0x241A JUMP JUMPDEST PUSH2 0x442 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x163 SWAP2 SWAP1 PUSH2 0x298F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x174 PUSH2 0x524 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x181 SWAP2 SWAP1 PUSH2 0x29AA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x2501 JUMP JUMPDEST PUSH2 0x5B6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B1 SWAP2 SWAP1 PUSH2 0x28A6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1CF SWAP2 SWAP1 PUSH2 0x23DE JUMP JUMPDEST PUSH2 0x5FC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x225D JUMP JUMPDEST PUSH2 0x714 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x20C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x207 SWAP2 SWAP1 PUSH2 0x246C JUMP JUMPDEST PUSH2 0x76D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x219 SWAP2 SWAP1 PUSH2 0x2B6C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x237 SWAP2 SWAP1 PUSH2 0x2501 JUMP JUMPDEST PUSH2 0x7A3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x258 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x253 SWAP2 SWAP1 PUSH2 0x225D JUMP JUMPDEST PUSH2 0x85E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x274 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x26F SWAP2 SWAP1 PUSH2 0x2501 JUMP JUMPDEST PUSH2 0x87E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x281 SWAP2 SWAP1 PUSH2 0x296D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x29F SWAP2 SWAP1 PUSH2 0x2501 JUMP JUMPDEST PUSH2 0x8E9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B1 SWAP2 SWAP1 PUSH2 0x28A6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2C2 PUSH2 0x970 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2CF SWAP2 SWAP1 PUSH2 0x2B6C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2F2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2ED SWAP2 SWAP1 PUSH2 0x21F8 JUMP JUMPDEST PUSH2 0x99A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2FF SWAP2 SWAP1 PUSH2 0x2B6C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x322 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x31D SWAP2 SWAP1 PUSH2 0x2327 JUMP JUMPDEST PUSH2 0xA52 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x32C PUSH2 0xB0C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x339 SWAP2 SWAP1 PUSH2 0x29AA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x35C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x357 SWAP2 SWAP1 PUSH2 0x23A2 JUMP JUMPDEST PUSH2 0xB9E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x378 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x373 SWAP2 SWAP1 PUSH2 0x22AC JUMP JUMPDEST PUSH2 0xBB4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x394 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x38F SWAP2 SWAP1 PUSH2 0x2501 JUMP JUMPDEST PUSH2 0xC16 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3A1 SWAP2 SWAP1 PUSH2 0x29AA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3BF SWAP2 SWAP1 PUSH2 0x24AD JUMP JUMPDEST PUSH2 0xD29 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3E0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3DB SWAP2 SWAP1 PUSH2 0x225D JUMP JUMPDEST PUSH2 0xDE6 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3FC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3F7 SWAP2 SWAP1 PUSH2 0x2221 JUMP JUMPDEST PUSH2 0xE95 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x409 SWAP2 SWAP1 PUSH2 0x298F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x42C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x427 SWAP2 SWAP1 PUSH2 0x252A JUMP JUMPDEST PUSH2 0xF29 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x439 SWAP2 SWAP1 PUSH2 0x2B6C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x50D JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x51D JUMPI POP PUSH2 0x51C DUP3 PUSH2 0xF5A JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x533 SWAP1 PUSH2 0x2DCA JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x55F SWAP1 PUSH2 0x2DCA JUMP JUMPDEST DUP1 ISZERO PUSH2 0x5AC JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x581 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x5AC JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x58F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5C1 DUP3 PUSH2 0xFC4 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x607 DUP3 PUSH2 0x8E9 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x678 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66F SWAP1 PUSH2 0x2B0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x697 PUSH2 0x100F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x6C6 JUMPI POP PUSH2 0x6C5 DUP2 PUSH2 0x6C0 PUSH2 0x100F JUMP JUMPDEST PUSH2 0xE95 JUMP JUMPDEST JUMPDEST PUSH2 0x705 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FC SWAP1 PUSH2 0x2B2C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x70F DUP4 DUP4 PUSH2 0x1017 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x71E DUP4 DUP3 PUSH2 0x10D0 JUMP JUMPDEST PUSH2 0x75D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x754 SWAP1 PUSH2 0x2B4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x768 DUP4 DUP4 DUP4 PUSH2 0x1165 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x77A PUSH1 0x7 PUSH2 0x145F JUMP JUMPDEST SWAP1 POP PUSH2 0x786 PUSH1 0x7 PUSH2 0x146D JUMP JUMPDEST PUSH2 0x790 ADDRESS DUP3 PUSH2 0x1483 JUMP JUMPDEST PUSH2 0x79A DUP2 DUP5 PUSH2 0x16A1 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7AF PUSH1 0x8 PUSH2 0x145F JUMP JUMPDEST SWAP1 POP PUSH2 0x7BB PUSH1 0x8 PUSH2 0x146D JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x820 JUMPI PUSH1 0x0 PUSH2 0x7D0 PUSH2 0x970 JUMP JUMPDEST SWAP1 POP PUSH1 0x9 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE POP DUP1 DUP1 PUSH2 0x818 SWAP1 PUSH2 0x2E2D JUMP JUMPDEST SWAP2 POP POP PUSH2 0x7BE JUMP JUMPDEST POP PUSH32 0xB9144C96C86541F6FA89C9F2F02495CCCF4B08CD6643E26D34EE00AA586558A8 CALLER DUP3 PUSH1 0x40 MLOAD PUSH2 0x852 SWAP3 SWAP2 SWAP1 PUSH2 0x2944 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x879 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xBB4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x9 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x8DD JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x8C9 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x8F5 DUP4 PUSH2 0x1715 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x967 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x95E SWAP1 PUSH2 0x2AEC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x97D PUSH1 0x7 PUSH2 0x145F JUMP JUMPDEST SWAP1 POP PUSH2 0x989 PUSH1 0x7 PUSH2 0x146D JUMP JUMPDEST PUSH2 0x993 ADDRESS DUP3 PUSH2 0x1483 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xA0B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA02 SWAP1 PUSH2 0x2A8C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA5C DUP3 DUP3 PUSH2 0x16A1 JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA99 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x28C1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xAC7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH32 0xEC61728879A33AA50B55E1F4789DCFC1C680F30A24D7B8694A9F874E242A97B4 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0xAFE SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x28C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0xB1B SWAP1 PUSH2 0x2DCA JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xB47 SWAP1 PUSH2 0x2DCA JUMP JUMPDEST DUP1 ISZERO PUSH2 0xB94 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xB69 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xB94 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xB77 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xBB0 PUSH2 0xBA9 PUSH2 0x100F JUMP JUMPDEST DUP4 DUP4 PUSH2 0x1752 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xBC5 PUSH2 0xBBF PUSH2 0x100F JUMP JUMPDEST DUP4 PUSH2 0x10D0 JUMP JUMPDEST PUSH2 0xC04 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBFB SWAP1 PUSH2 0x29CC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC10 DUP5 DUP5 DUP5 DUP5 PUSH2 0x18BF JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xC21 DUP3 PUSH2 0xFC4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH2 0xC41 SWAP1 PUSH2 0x2DCA JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xC6D SWAP1 PUSH2 0x2DCA JUMP JUMPDEST DUP1 ISZERO PUSH2 0xCBA JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xC8F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xCBA JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xC9D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0xCCB PUSH2 0x191B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0xCE1 JUMPI DUP2 SWAP3 POP POP POP PUSH2 0xD24 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0xD16 JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xCFE SWAP3 SWAP2 SWAP1 PUSH2 0x2882 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP PUSH2 0xD24 JUMP JUMPDEST PUSH2 0xD1F DUP5 PUSH2 0x1932 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD35 PUSH1 0x8 PUSH2 0x145F JUMP JUMPDEST SWAP1 POP PUSH2 0xD41 PUSH1 0x8 PUSH2 0x146D JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xDA7 JUMPI PUSH1 0x0 PUSH2 0xD57 DUP6 PUSH2 0x76D JUMP JUMPDEST SWAP1 POP PUSH1 0x9 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE POP DUP1 DUP1 PUSH2 0xD9F SWAP1 PUSH2 0x2E2D JUMP JUMPDEST SWAP2 POP POP PUSH2 0xD44 JUMP JUMPDEST POP PUSH32 0xB9144C96C86541F6FA89C9F2F02495CCCF4B08CD6643E26D34EE00AA586558A8 CALLER DUP3 PUSH1 0x40 MLOAD PUSH2 0xDD9 SWAP3 SWAP2 SWAP1 PUSH2 0x2944 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE23 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x28C1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xE51 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH32 0xEC61728879A33AA50B55E1F4789DCFC1C680F30A24D7B8694A9F874E242A97B4 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0xE88 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x28C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xF45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFCD DUP2 PUSH2 0x199A JUMP JUMPDEST PUSH2 0x100C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1003 SWAP1 PUSH2 0x2AEC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x108A DUP4 PUSH2 0x8E9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x10DC DUP4 PUSH2 0x8E9 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x111E JUMPI POP PUSH2 0x111D DUP2 DUP6 PUSH2 0xE95 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x115C JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1144 DUP5 PUSH2 0x5B6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1185 DUP3 PUSH2 0x8E9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x11DB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11D2 SWAP1 PUSH2 0x2A0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x124B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1242 SWAP1 PUSH2 0x2A4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1258 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x19DB JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1278 DUP3 PUSH2 0x8E9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x12CE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12C5 SWAP1 PUSH2 0x2A0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x145A DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1B01 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x14F3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14EA SWAP1 PUSH2 0x2ACC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x14FC DUP2 PUSH2 0x199A JUMP JUMPDEST ISZERO PUSH2 0x153C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1533 SWAP1 PUSH2 0x2A2C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x154A PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x19DB JUMP JUMPDEST PUSH2 0x1553 DUP2 PUSH2 0x199A JUMP JUMPDEST ISZERO PUSH2 0x1593 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x158A SWAP1 PUSH2 0x2A2C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x169D PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1B01 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x16AA DUP3 PUSH2 0x199A JUMP JUMPDEST PUSH2 0x16E9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16E0 SWAP1 PUSH2 0x2AAC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x1710 SWAP3 SWAP2 SWAP1 PUSH2 0x201C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x17C1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17B8 SWAP1 PUSH2 0x2A6C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x18B2 SWAP2 SWAP1 PUSH2 0x298F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x18CA DUP5 DUP5 DUP5 PUSH2 0x1165 JUMP JUMPDEST PUSH2 0x18D6 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1B07 JUMP JUMPDEST PUSH2 0x1915 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x190C SWAP1 PUSH2 0x29EC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x193D DUP3 PUSH2 0xFC4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1947 PUSH2 0x191B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x1967 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1992 JUMP JUMPDEST DUP1 PUSH2 0x1971 DUP5 PUSH2 0x1C9E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1982 SWAP3 SWAP2 SWAP1 PUSH2 0x2882 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x19BC DUP4 PUSH2 0x1715 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1AFB JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1A6F JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1A67 SWAP2 SWAP1 PUSH2 0x2CE0 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1AFA JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1AF2 SWAP2 SWAP1 PUSH2 0x2C8A JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B28 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1DC2 JUMP JUMPDEST ISZERO PUSH2 0x1C91 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1B51 PUSH2 0x100F JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B73 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x28F8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1BBE JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1BBB SWAP2 SWAP1 PUSH2 0x2443 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1C41 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1BEE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1BF3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x1C39 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C30 SWAP1 PUSH2 0x29EC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x1C96 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x1CAD DUP5 PUSH2 0x1DE5 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1CF2 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1D24 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1DB7 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x1DA1 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 EQ ISZERO PUSH2 0x1DB2 JUMPI PUSH2 0x1DB7 JUMP JUMPDEST PUSH2 0x1D32 JUMP JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1E69 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x1E5F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x1ECC JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x1EC2 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x1F21 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x1F17 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1F70 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x1F66 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1FBB JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x1FB1 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x2004 JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x1FFA JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x2013 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x2028 SWAP1 PUSH2 0x2DCA JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x204A JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x2091 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x2063 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x2091 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x2091 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x2090 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x2075 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x209E SWAP2 SWAP1 PUSH2 0x20A2 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x20BB JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x20A3 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20D2 PUSH2 0x20CD DUP5 PUSH2 0x2BAC JUMP JUMPDEST PUSH2 0x2B87 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x20EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x20F5 DUP5 DUP3 DUP6 PUSH2 0x2D88 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2110 PUSH2 0x210B DUP5 PUSH2 0x2BDD JUMP JUMPDEST PUSH2 0x2B87 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x2128 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2133 DUP5 DUP3 DUP6 PUSH2 0x2D88 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x214A DUP2 PUSH2 0x327F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x215F DUP2 PUSH2 0x3296 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2174 DUP2 PUSH2 0x32AD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2189 DUP2 PUSH2 0x32AD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x21A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x21B0 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x20BF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x21CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x21DA DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x20FD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x21F2 DUP2 PUSH2 0x32C4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x220A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2218 DUP5 DUP3 DUP6 ADD PUSH2 0x213B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2234 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2242 DUP6 DUP3 DUP7 ADD PUSH2 0x213B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2253 DUP6 DUP3 DUP7 ADD PUSH2 0x213B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2272 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2280 DUP7 DUP3 DUP8 ADD PUSH2 0x213B JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2291 DUP7 DUP3 DUP8 ADD PUSH2 0x213B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x22A2 DUP7 DUP3 DUP8 ADD PUSH2 0x21E3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x22C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x22D0 DUP8 DUP3 DUP9 ADD PUSH2 0x213B JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x22E1 DUP8 DUP3 DUP9 ADD PUSH2 0x213B JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x22F2 DUP8 DUP3 DUP9 ADD PUSH2 0x21E3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x230F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x231B DUP8 DUP3 DUP9 ADD PUSH2 0x218F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x233D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x234B DUP8 DUP3 DUP9 ADD PUSH2 0x213B JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x235C DUP8 DUP3 DUP9 ADD PUSH2 0x213B JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x236D DUP8 DUP3 DUP9 ADD PUSH2 0x21E3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x238A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2396 DUP8 DUP3 DUP9 ADD PUSH2 0x21B9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x23B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x23C3 DUP6 DUP3 DUP7 ADD PUSH2 0x213B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x23D4 DUP6 DUP3 DUP7 ADD PUSH2 0x2150 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x23F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x23FF DUP6 DUP3 DUP7 ADD PUSH2 0x213B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2410 DUP6 DUP3 DUP7 ADD PUSH2 0x21E3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x242C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x243A DUP5 DUP3 DUP6 ADD PUSH2 0x2165 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2455 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2463 DUP5 DUP3 DUP6 ADD PUSH2 0x217A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x247E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2498 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x24A4 DUP5 DUP3 DUP6 ADD PUSH2 0x21B9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x24DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x24E6 DUP6 DUP3 DUP7 ADD PUSH2 0x21B9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x24F7 DUP6 DUP3 DUP7 ADD PUSH2 0x21E3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2513 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2521 DUP5 DUP3 DUP6 ADD PUSH2 0x21E3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x253D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x254B DUP6 DUP3 DUP7 ADD PUSH2 0x21E3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x255C DUP6 DUP3 DUP7 ADD PUSH2 0x21E3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2572 DUP4 DUP4 PUSH2 0x2864 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2587 DUP2 PUSH2 0x2D14 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2598 DUP3 PUSH2 0x2C1E JUMP JUMPDEST PUSH2 0x25A2 DUP2 DUP6 PUSH2 0x2C4C JUMP JUMPDEST SWAP4 POP PUSH2 0x25AD DUP4 PUSH2 0x2C0E JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x25DE JUMPI DUP2 MLOAD PUSH2 0x25C5 DUP9 DUP3 PUSH2 0x2566 JUMP JUMPDEST SWAP8 POP PUSH2 0x25D0 DUP4 PUSH2 0x2C3F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x25B1 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x25F4 DUP2 PUSH2 0x2D26 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2605 DUP3 PUSH2 0x2C29 JUMP JUMPDEST PUSH2 0x260F DUP2 DUP6 PUSH2 0x2C5D JUMP JUMPDEST SWAP4 POP PUSH2 0x261F DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2D97 JUMP JUMPDEST PUSH2 0x2628 DUP2 PUSH2 0x2F03 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x263E DUP3 PUSH2 0x2C34 JUMP JUMPDEST PUSH2 0x2648 DUP2 DUP6 PUSH2 0x2C6E JUMP JUMPDEST SWAP4 POP PUSH2 0x2658 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2D97 JUMP JUMPDEST PUSH2 0x2661 DUP2 PUSH2 0x2F03 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2677 DUP3 PUSH2 0x2C34 JUMP JUMPDEST PUSH2 0x2681 DUP2 DUP6 PUSH2 0x2C7F JUMP JUMPDEST SWAP4 POP PUSH2 0x2691 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2D97 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26AA PUSH1 0x2D DUP4 PUSH2 0x2C6E JUMP JUMPDEST SWAP2 POP PUSH2 0x26B5 DUP3 PUSH2 0x2F14 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26CD PUSH1 0x32 DUP4 PUSH2 0x2C6E JUMP JUMPDEST SWAP2 POP PUSH2 0x26D8 DUP3 PUSH2 0x2F63 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26F0 PUSH1 0x25 DUP4 PUSH2 0x2C6E JUMP JUMPDEST SWAP2 POP PUSH2 0x26FB DUP3 PUSH2 0x2FB2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2713 PUSH1 0x1C DUP4 PUSH2 0x2C6E JUMP JUMPDEST SWAP2 POP PUSH2 0x271E DUP3 PUSH2 0x3001 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2736 PUSH1 0x24 DUP4 PUSH2 0x2C6E JUMP JUMPDEST SWAP2 POP PUSH2 0x2741 DUP3 PUSH2 0x302A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2759 PUSH1 0x19 DUP4 PUSH2 0x2C6E JUMP JUMPDEST SWAP2 POP PUSH2 0x2764 DUP3 PUSH2 0x3079 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x277C PUSH1 0x29 DUP4 PUSH2 0x2C6E JUMP JUMPDEST SWAP2 POP PUSH2 0x2787 DUP3 PUSH2 0x30A2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x279F PUSH1 0x2E DUP4 PUSH2 0x2C6E JUMP JUMPDEST SWAP2 POP PUSH2 0x27AA DUP3 PUSH2 0x30F1 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27C2 PUSH1 0x20 DUP4 PUSH2 0x2C6E JUMP JUMPDEST SWAP2 POP PUSH2 0x27CD DUP3 PUSH2 0x3140 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27E5 PUSH1 0x18 DUP4 PUSH2 0x2C6E JUMP JUMPDEST SWAP2 POP PUSH2 0x27F0 DUP3 PUSH2 0x3169 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2808 PUSH1 0x21 DUP4 PUSH2 0x2C6E JUMP JUMPDEST SWAP2 POP PUSH2 0x2813 DUP3 PUSH2 0x3192 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x282B PUSH1 0x3D DUP4 PUSH2 0x2C6E JUMP JUMPDEST SWAP2 POP PUSH2 0x2836 DUP3 PUSH2 0x31E1 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x284E PUSH1 0x31 DUP4 PUSH2 0x2C6E JUMP JUMPDEST SWAP2 POP PUSH2 0x2859 DUP3 PUSH2 0x3230 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x286D DUP2 PUSH2 0x2D7E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x287C DUP2 PUSH2 0x2D7E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x288E DUP3 DUP6 PUSH2 0x266C JUMP JUMPDEST SWAP2 POP PUSH2 0x289A DUP3 DUP5 PUSH2 0x266C JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x28BB PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x257E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x28D6 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x257E JUMP JUMPDEST PUSH2 0x28E3 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x257E JUMP JUMPDEST PUSH2 0x28F0 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2873 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x290D PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x257E JUMP JUMPDEST PUSH2 0x291A PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x257E JUMP JUMPDEST PUSH2 0x2927 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2873 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2939 DUP2 DUP5 PUSH2 0x25FA JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2959 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x257E JUMP JUMPDEST PUSH2 0x2966 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2873 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2987 DUP2 DUP5 PUSH2 0x258D JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x29A4 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x25EB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x29C4 DUP2 DUP5 PUSH2 0x2633 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x29E5 DUP2 PUSH2 0x269D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2A05 DUP2 PUSH2 0x26C0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2A25 DUP2 PUSH2 0x26E3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2A45 DUP2 PUSH2 0x2706 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2A65 DUP2 PUSH2 0x2729 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2A85 DUP2 PUSH2 0x274C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2AA5 DUP2 PUSH2 0x276F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2AC5 DUP2 PUSH2 0x2792 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2AE5 DUP2 PUSH2 0x27B5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B05 DUP2 PUSH2 0x27D8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B25 DUP2 PUSH2 0x27FB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B45 DUP2 PUSH2 0x281E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B65 DUP2 PUSH2 0x2841 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2B81 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2873 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B91 PUSH2 0x2BA2 JUMP JUMPDEST SWAP1 POP PUSH2 0x2B9D DUP3 DUP3 PUSH2 0x2DFC JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2BC7 JUMPI PUSH2 0x2BC6 PUSH2 0x2ED4 JUMP JUMPDEST JUMPDEST PUSH2 0x2BD0 DUP3 PUSH2 0x2F03 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2BF8 JUMPI PUSH2 0x2BF7 PUSH2 0x2ED4 JUMP JUMPDEST JUMPDEST PUSH2 0x2C01 DUP3 PUSH2 0x2F03 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C95 DUP3 PUSH2 0x2D7E JUMP JUMPDEST SWAP2 POP PUSH2 0x2CA0 DUP4 PUSH2 0x2D7E JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x2CD5 JUMPI PUSH2 0x2CD4 PUSH2 0x2E76 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CEB DUP3 PUSH2 0x2D7E JUMP JUMPDEST SWAP2 POP PUSH2 0x2CF6 DUP4 PUSH2 0x2D7E JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x2D09 JUMPI PUSH2 0x2D08 PUSH2 0x2E76 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D1F DUP3 PUSH2 0x2D5E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2DB5 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2D9A JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x2DC4 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2DE2 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x2DF6 JUMPI PUSH2 0x2DF5 PUSH2 0x2EA5 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2E05 DUP3 PUSH2 0x2F03 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x2E24 JUMPI PUSH2 0x2E23 PUSH2 0x2ED4 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E38 DUP3 PUSH2 0x2D7E JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x2E6B JUMPI PUSH2 0x2E6A PUSH2 0x2E76 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45524337323155524953746F726167653A2055524920736574206F66206E6F6E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6578697374656E7420746F6B656E000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722063616C6C6572206973206E6F74206F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x776E6572206E6F7220617070726F766564000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x3288 DUP2 PUSH2 0x2D14 JUMP JUMPDEST DUP2 EQ PUSH2 0x3293 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x329F DUP2 PUSH2 0x2D26 JUMP JUMPDEST DUP2 EQ PUSH2 0x32AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x32B6 DUP2 PUSH2 0x2D32 JUMP JUMPDEST DUP2 EQ PUSH2 0x32C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x32CD DUP2 PUSH2 0x2D7E JUMP JUMPDEST DUP2 EQ PUSH2 0x32D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LT 0xEB CALLCODE SWAP9 BLOCKHASH DUP6 SWAP16 DUP4 PUSH28 0xF83BB229803D468CA3125C27424A9A3513A9B7555FB6E364736F6C63 NUMBER STOP ADDMOD DIV STOP CALLER ","sourceMap":"288:2300:25:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1570:300:13;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2471:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3935:167;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3468:406;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;513:356:28;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;879:273:25;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1159:339;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5004:179:13;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1894:146:25;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2190:219:13;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;666:206:25;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1929:204:13;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2046:303:25;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2633:102:13;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4169:153;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5249:314;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;935:608:28;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1506:382:25;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2357:229;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4388:162:13;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;468:45:25;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1570:300:13;1672:4;1722:25;1707:40;;;:11;:40;;;;:104;;;;1778:33;1763:48;;;:11;:48;;;;1707:104;:156;;;;1827:36;1851:11;1827:23;:36::i;:::-;1707:156;1688:175;;1570:300;;;:::o;2471:98::-;2525:13;2557:5;2550:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:98;:::o;3935:167::-;4011:7;4030:23;4045:7;4030:14;:23::i;:::-;4071:15;:24;4087:7;4071:24;;;;;;;;;;;;;;;;;;;;;4064:31;;3935:167;;;:::o;3468:406::-;3548:13;3564:23;3579:7;3564:14;:23::i;:::-;3548:39;;3611:5;3605:11;;:2;:11;;;;3597:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;3702:5;3686:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;3711:37;3728:5;3735:12;:10;:12::i;:::-;3711:16;:37::i;:::-;3686:62;3665:170;;;;;;;;;;;;:::i;:::-;;;;;;;;;3846:21;3855:2;3859:7;3846:8;:21::i;:::-;3468:406;;;:::o;513:356:28:-;715:33;734:4;740:7;715:18;:33::i;:::-;694:129;;;;;;;;;;;;:::i;:::-;;;;;;;;;834:28;844:4;850:2;854:7;834:9;:28::i;:::-;513:356;;;:::o;879:273:25:-;942:7;961:15;979:25;:15;:23;:25::i;:::-;961:43;;1014:27;:15;:25;:27::i;:::-;1051:29;1065:4;1072:7;1051:5;:29::i;:::-;1090:31;1103:7;1112:8;1090:12;:31::i;:::-;1138:7;1131:14;;;879:273;;;:::o;1159:339::-;1218:15;1236:25;:15;:23;:25::i;:::-;1218:43;;1271:27;:15;:25;:27::i;:::-;1313:9;1308:137;1332:8;1328:1;:12;1308:137;;;1361:15;1379:10;:8;:10::i;:::-;1361:28;;1403:8;:17;1412:7;1403:17;;;;;;;;;;;1426:7;1403:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1308:137;1342:3;;;;;:::i;:::-;;;;1308:137;;;;1459:32;1471:10;1483:7;1459:32;;;;;;;:::i;:::-;;;;;;;;1159:339;;:::o;5004:179:13:-;5137:39;5154:4;5160:2;5164:7;5137:39;;;;;;;;;;;;:16;:39::i;:::-;5004:179;;;:::o;1894:146:25:-;1977:16;2016:8;:17;2025:7;2016:17;;;;;;;;;;;2009:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1894:146;;;:::o;2190:219:13:-;2262:7;2281:13;2297:17;2306:7;2297:8;:17::i;:::-;2281:33;;2349:1;2332:19;;:5;:19;;;;2324:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;2397:5;2390:12;;;2190:219;;;:::o;666:206:25:-;702:7;721:15;739:25;:15;:23;:25::i;:::-;721:43;;774:27;:15;:25;:27::i;:::-;811:29;825:4;832:7;811:5;:29::i;:::-;858:7;851:14;;;666:206;:::o;1929:204:13:-;2001:7;2045:1;2028:19;;:5;:19;;;;2020:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2110:9;:16;2120:5;2110:16;;;;;;;;;;;;;;;;2103:23;;1929:204;;;:::o;2046:303:25:-;2191:31;2204:7;2213:8;2191:12;:31::i;:::-;2248:4;2232:35;;;2268:4;2274:2;2278:7;2232:54;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2308:34;2324:4;2330:2;2334:7;2308:34;;;;;;;;:::i;:::-;;;;;;;;2046:303;;;;:::o;2633:102:13:-;2689:13;2721:7;2714:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2633:102;:::o;4169:153::-;4263:52;4282:12;:10;:12::i;:::-;4296:8;4306;4263:18;:52::i;:::-;4169:153;;:::o;5249:314::-;5417:41;5436:12;:10;:12::i;:::-;5450:7;5417:18;:41::i;:::-;5409:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;5518:38;5532:4;5538:2;5542:7;5551:4;5518:13;:38::i;:::-;5249:314;;;;:::o;935:608:28:-;1008:13;1033:23;1048:7;1033:14;:23::i;:::-;1067;1093:10;:19;1104:7;1093:19;;;;;;;;;;;1067:45;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1122:18;1143:10;:8;:10::i;:::-;1122:31;;1248:1;1232:4;1226:18;:23;1222:70;;;1272:9;1265:16;;;;;;1222:70;1420:1;1400:9;1394:23;:27;1390:106;;;1468:4;1474:9;1451:33;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1437:48;;;;;;1390:106;1513:23;1528:7;1513:14;:23::i;:::-;1506:30;;;;935:608;;;;:::o;1506:382:25:-;1595:15;1613:25;:15;:23;:25::i;:::-;1595:43;;1648:27;:15;:25;:27::i;:::-;1690:9;1685:150;1709:8;1705:1;:12;1685:150;;;1738:15;1756:23;1770:8;1756:13;:23::i;:::-;1738:41;;1793:8;:17;1802:7;1793:17;;;;;;;;;;;1816:7;1793:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1685:150;1719:3;;;;;:::i;:::-;;;;1685:150;;;;1849:32;1861:10;1873:7;1849:32;;;;;;;:::i;:::-;;;;;;;;1506:382;;;:::o;2357:229::-;2492:4;2476:35;;;2512:4;2518:2;2522:7;2476:54;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2545:34;2561:4;2567:2;2571:7;2545:34;;;;;;;;:::i;:::-;;;;;;;;2357:229;;;:::o;4388:162:13:-;4485:4;4508:18;:25;4527:5;4508:25;;;;;;;;;;;;;;;:35;4534:8;4508:35;;;;;;;;;;;;;;;;;;;;;;;;;4501:42;;4388:162;;;;:::o;468:45:25:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;829:155:21:-;914:4;952:25;937:40;;;:11;:40;;;;930:47;;829:155;;;:::o;13466:133:13:-;13547:16;13555:7;13547;:16::i;:::-;13539:53;;;;;;;;;;;;:::i;:::-;;;;;;;;;13466:133;:::o;640:96:18:-;693:7;719:10;712:17;;640:96;:::o;12768:171:13:-;12869:2;12842:15;:24;12858:7;12842:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;12924:7;12920:2;12886:46;;12895:23;12910:7;12895:14;:23::i;:::-;12886:46;;;;;;;;;;;;12768:171;;:::o;7540:261::-;7633:4;7649:13;7665:23;7680:7;7665:14;:23::i;:::-;7649:39;;7717:5;7706:16;;:7;:16;;;:52;;;;7726:32;7743:5;7750:7;7726:16;:32::i;:::-;7706:52;:87;;;;7786:7;7762:31;;:20;7774:7;7762:11;:20::i;:::-;:31;;;7706:87;7698:96;;;7540:261;;;;:::o;11423:1233::-;11577:4;11550:31;;:23;11565:7;11550:14;:23::i;:::-;:31;;;11542:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11655:1;11641:16;;:2;:16;;;;11633:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;11709:42;11730:4;11736:2;11740:7;11749:1;11709:20;:42::i;:::-;11878:4;11851:31;;:23;11866:7;11851:14;:23::i;:::-;:31;;;11843:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11993:15;:24;12009:7;11993:24;;;;;;;;;;;;11986:31;;;;;;;;;;;12480:1;12461:9;:15;12471:4;12461:15;;;;;;;;;;;;;;;;:20;;;;;;;;;;;12512:1;12495:9;:13;12505:2;12495:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;12552:2;12533:7;:16;12541:7;12533:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;12589:7;12585:2;12570:27;;12579:4;12570:27;;;;;;;;;;;;12608:41;12628:4;12634:2;12638:7;12647:1;12608:19;:41::i;:::-;11423:1233;;;:::o;827:112:19:-;892:7;918;:14;;;911:21;;827:112;;;:::o;945:123::-;1050:1;1032:7;:14;;;:19;;;;;;;;;;;945:123;:::o;9091:920:13:-;9184:1;9170:16;;:2;:16;;;;9162:61;;;;;;;;;;;;:::i;:::-;;;;;;;;;9242:16;9250:7;9242;:16::i;:::-;9241:17;9233:58;;;;;;;;;;;;:::i;:::-;;;;;;;;;9302:48;9331:1;9335:2;9339:7;9348:1;9302:20;:48::i;:::-;9446:16;9454:7;9446;:16::i;:::-;9445:17;9437:58;;;;;;;;;;;;:::i;:::-;;;;;;;;;9854:1;9837:9;:13;9847:2;9837:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;9895:2;9876:7;:16;9884:7;9876:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;9938:7;9934:2;9913:33;;9930:1;9913:33;;;;;;;;;;;;9957:47;9985:1;9989:2;9993:7;10002:1;9957:19;:47::i;:::-;9091:920;;:::o;1690:214:28:-;1789:16;1797:7;1789;:16::i;:::-;1781:75;;;;;;;;;;;;:::i;:::-;;;;;;;;;1888:9;1866:10;:19;1877:7;1866:19;;;;;;;;;;;:31;;;;;;;;;;;;:::i;:::-;;1690:214;;:::o;6838:115:13:-;6904:7;6930;:16;6938:7;6930:16;;;;;;;;;;;;;;;;;;;;;6923:23;;6838:115;;;:::o;13075:307::-;13225:8;13216:17;;:5;:17;;;;13208:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;13311:8;13273:18;:25;13292:5;13273:25;;;;;;;;;;;;;;;:35;13299:8;13273:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;13356:8;13334:41;;13349:5;13334:41;;;13366:8;13334:41;;;;;;:::i;:::-;;;;;;;;13075:307;;;:::o;6424:305::-;6574:28;6584:4;6590:2;6594:7;6574:9;:28::i;:::-;6620:47;6643:4;6649:2;6653:7;6662:4;6620:22;:47::i;:::-;6612:110;;;;;;;;;;;;:::i;:::-;;;;;;;;;6424:305;;;;:::o;3319:92::-;3370:13;3395:9;;;;;;;;;;;;;;3319:92;:::o;2801:276::-;2874:13;2899:23;2914:7;2899:14;:23::i;:::-;2933:21;2957:10;:8;:10::i;:::-;2933:34;;3008:1;2990:7;2984:21;:25;:86;;;;;;;;;;;;;;;;;3036:7;3045:18;:7;:16;:18::i;:::-;3019:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2984:86;2977:93;;;2801:276;;;:::o;7256:126::-;7321:4;7373:1;7344:31;;:17;7353:7;7344:8;:17::i;:::-;:31;;;;7337:38;;7256:126;;;:::o;15698:396::-;15882:1;15870:9;:13;15866:222;;;15919:1;15903:18;;:4;:18;;;15899:85;;15960:9;15941;:15;15951:4;15941:15;;;;;;;;;;;;;;;;:28;;;;;;;:::i;:::-;;;;;;;;15899:85;16015:1;16001:16;;:2;:16;;;15997:81;;16054:9;16037;:13;16047:2;16037:13;;;;;;;;;;;;;;;;:26;;;;;;;:::i;:::-;;;;;;;;15997:81;15866:222;15698:396;;;;:::o;16800:153::-;;;;;:::o;14151:831::-;14300:4;14320:15;:2;:13;;;:15::i;:::-;14316:660;;;14371:2;14355:36;;;14392:12;:10;:12::i;:::-;14406:4;14412:7;14421:4;14355:71;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;14351:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14610:1;14593:6;:13;:18;14589:321;;;14635:60;;;;;;;;;;:::i;:::-;;;;;;;;14589:321;14862:6;14856:13;14847:6;14843:2;14839:15;14832:38;14351:573;14486:41;;;14476:51;;;:6;:51;;;;14469:58;;;;;14316:660;14961:4;14954:11;;14151:831;;;;;;;:::o;415:696:20:-;471:13;520:14;557:1;537:17;548:5;537:10;:17::i;:::-;:21;520:38;;572:20;606:6;595:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;572:41;;627:11;753:6;749:2;745:15;737:6;733:28;726:35;;788:280;795:4;788:280;;;819:5;;;;;;;;958:8;953:2;946:5;942:14;937:30;932:3;924:44;1012:2;1003:11;;;;;;;;;;;;;;;;;1045:1;1036:5;:10;1032:21;;;1048:5;;1032:21;788:280;;;1088:6;1081:13;;;;;415:696;;;:::o;1175:320:17:-;1235:4;1487:1;1465:7;:19;;;:23;1458:30;;1175:320;;;:::o;9889:890:23:-;9942:7;9961:14;9978:1;9961:18;;10026:6;10017:5;:15;10013:99;;10061:6;10052:15;;;;;;;;;;;;;;;;;10095:2;10085:12;;;;10013:99;10138:6;10129:5;:15;10125:99;;10173:6;10164:15;;;;;;;;;;;;;;;;;10207:2;10197:12;;;;10125:99;10250:6;10241:5;:15;10237:99;;10285:6;10276:15;;;;;;;;;;;;;;;;;10319:2;10309:12;;;;10237:99;10362:5;10353;:14;10349:96;;10396:5;10387:14;;;;;;;;;;;;;;;;;10429:1;10419:11;;;;10349:96;10471:5;10462;:14;10458:96;;10505:5;10496:14;;;;;;;;;;;;;;;;;10538:1;10528:11;;;;10458:96;10580:5;10571;:14;10567:96;;10614:5;10605:14;;;;;;;;;;;;;;;;;10647:1;10637:11;;;;10567:96;10689:5;10680;:14;10676:64;;10724:1;10714:11;;;;10676:64;10766:6;10759:13;;;9889:890;;;:::o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:343:29:-;84:5;109:65;125:48;166:6;125:48;:::i;:::-;109:65;:::i;:::-;100:74;;197:6;190:5;183:21;235:4;228:5;224:16;273:3;264:6;259:3;255:16;252:25;249:2;;;290:1;287;280:12;249:2;303:41;337:6;332:3;327;303:41;:::i;:::-;90:260;;;;;;:::o;356:345::-;434:5;459:66;475:49;517:6;475:49;:::i;:::-;459:66;:::i;:::-;450:75;;548:6;541:5;534:21;586:4;579:5;575:16;624:3;615:6;610:3;606:16;603:25;600:2;;;641:1;638;631:12;600:2;654:41;688:6;683:3;678;654:41;:::i;:::-;440:261;;;;;;:::o;707:139::-;753:5;791:6;778:20;769:29;;807:33;834:5;807:33;:::i;:::-;759:87;;;;:::o;852:133::-;895:5;933:6;920:20;911:29;;949:30;973:5;949:30;:::i;:::-;901:84;;;;:::o;991:137::-;1036:5;1074:6;1061:20;1052:29;;1090:32;1116:5;1090:32;:::i;:::-;1042:86;;;;:::o;1134:141::-;1190:5;1221:6;1215:13;1206:22;;1237:32;1263:5;1237:32;:::i;:::-;1196:79;;;;:::o;1294:271::-;1349:5;1398:3;1391:4;1383:6;1379:17;1375:27;1365:2;;1416:1;1413;1406:12;1365:2;1456:6;1443:20;1481:78;1555:3;1547:6;1540:4;1532:6;1528:17;1481:78;:::i;:::-;1472:87;;1355:210;;;;;:::o;1585:273::-;1641:5;1690:3;1683:4;1675:6;1671:17;1667:27;1657:2;;1708:1;1705;1698:12;1657:2;1748:6;1735:20;1773:79;1848:3;1840:6;1833:4;1825:6;1821:17;1773:79;:::i;:::-;1764:88;;1647:211;;;;;:::o;1864:139::-;1910:5;1948:6;1935:20;1926:29;;1964:33;1991:5;1964:33;:::i;:::-;1916:87;;;;:::o;2009:262::-;2068:6;2117:2;2105:9;2096:7;2092:23;2088:32;2085:2;;;2133:1;2130;2123:12;2085:2;2176:1;2201:53;2246:7;2237:6;2226:9;2222:22;2201:53;:::i;:::-;2191:63;;2147:117;2075:196;;;;:::o;2277:407::-;2345:6;2353;2402:2;2390:9;2381:7;2377:23;2373:32;2370:2;;;2418:1;2415;2408:12;2370:2;2461:1;2486:53;2531:7;2522:6;2511:9;2507:22;2486:53;:::i;:::-;2476:63;;2432:117;2588:2;2614:53;2659:7;2650:6;2639:9;2635:22;2614:53;:::i;:::-;2604:63;;2559:118;2360:324;;;;;:::o;2690:552::-;2767:6;2775;2783;2832:2;2820:9;2811:7;2807:23;2803:32;2800:2;;;2848:1;2845;2838:12;2800:2;2891:1;2916:53;2961:7;2952:6;2941:9;2937:22;2916:53;:::i;:::-;2906:63;;2862:117;3018:2;3044:53;3089:7;3080:6;3069:9;3065:22;3044:53;:::i;:::-;3034:63;;2989:118;3146:2;3172:53;3217:7;3208:6;3197:9;3193:22;3172:53;:::i;:::-;3162:63;;3117:118;2790:452;;;;;:::o;3248:809::-;3343:6;3351;3359;3367;3416:3;3404:9;3395:7;3391:23;3387:33;3384:2;;;3433:1;3430;3423:12;3384:2;3476:1;3501:53;3546:7;3537:6;3526:9;3522:22;3501:53;:::i;:::-;3491:63;;3447:117;3603:2;3629:53;3674:7;3665:6;3654:9;3650:22;3629:53;:::i;:::-;3619:63;;3574:118;3731:2;3757:53;3802:7;3793:6;3782:9;3778:22;3757:53;:::i;:::-;3747:63;;3702:118;3887:2;3876:9;3872:18;3859:32;3918:18;3910:6;3907:30;3904:2;;;3950:1;3947;3940:12;3904:2;3978:62;4032:7;4023:6;4012:9;4008:22;3978:62;:::i;:::-;3968:72;;3830:220;3374:683;;;;;;;:::o;4063:811::-;4159:6;4167;4175;4183;4232:3;4220:9;4211:7;4207:23;4203:33;4200:2;;;4249:1;4246;4239:12;4200:2;4292:1;4317:53;4362:7;4353:6;4342:9;4338:22;4317:53;:::i;:::-;4307:63;;4263:117;4419:2;4445:53;4490:7;4481:6;4470:9;4466:22;4445:53;:::i;:::-;4435:63;;4390:118;4547:2;4573:53;4618:7;4609:6;4598:9;4594:22;4573:53;:::i;:::-;4563:63;;4518:118;4703:2;4692:9;4688:18;4675:32;4734:18;4726:6;4723:30;4720:2;;;4766:1;4763;4756:12;4720:2;4794:63;4849:7;4840:6;4829:9;4825:22;4794:63;:::i;:::-;4784:73;;4646:221;4190:684;;;;;;;:::o;4880:401::-;4945:6;4953;5002:2;4990:9;4981:7;4977:23;4973:32;4970:2;;;5018:1;5015;5008:12;4970:2;5061:1;5086:53;5131:7;5122:6;5111:9;5107:22;5086:53;:::i;:::-;5076:63;;5032:117;5188:2;5214:50;5256:7;5247:6;5236:9;5232:22;5214:50;:::i;:::-;5204:60;;5159:115;4960:321;;;;;:::o;5287:407::-;5355:6;5363;5412:2;5400:9;5391:7;5387:23;5383:32;5380:2;;;5428:1;5425;5418:12;5380:2;5471:1;5496:53;5541:7;5532:6;5521:9;5517:22;5496:53;:::i;:::-;5486:63;;5442:117;5598:2;5624:53;5669:7;5660:6;5649:9;5645:22;5624:53;:::i;:::-;5614:63;;5569:118;5370:324;;;;;:::o;5700:260::-;5758:6;5807:2;5795:9;5786:7;5782:23;5778:32;5775:2;;;5823:1;5820;5813:12;5775:2;5866:1;5891:52;5935:7;5926:6;5915:9;5911:22;5891:52;:::i;:::-;5881:62;;5837:116;5765:195;;;;:::o;5966:282::-;6035:6;6084:2;6072:9;6063:7;6059:23;6055:32;6052:2;;;6100:1;6097;6090:12;6052:2;6143:1;6168:63;6223:7;6214:6;6203:9;6199:22;6168:63;:::i;:::-;6158:73;;6114:127;6042:206;;;;:::o;6254:375::-;6323:6;6372:2;6360:9;6351:7;6347:23;6343:32;6340:2;;;6388:1;6385;6378:12;6340:2;6459:1;6448:9;6444:17;6431:31;6489:18;6481:6;6478:30;6475:2;;;6521:1;6518;6511:12;6475:2;6549:63;6604:7;6595:6;6584:9;6580:22;6549:63;:::i;:::-;6539:73;;6402:220;6330:299;;;;:::o;6635:520::-;6713:6;6721;6770:2;6758:9;6749:7;6745:23;6741:32;6738:2;;;6786:1;6783;6776:12;6738:2;6857:1;6846:9;6842:17;6829:31;6887:18;6879:6;6876:30;6873:2;;;6919:1;6916;6909:12;6873:2;6947:63;7002:7;6993:6;6982:9;6978:22;6947:63;:::i;:::-;6937:73;;6800:220;7059:2;7085:53;7130:7;7121:6;7110:9;7106:22;7085:53;:::i;:::-;7075:63;;7030:118;6728:427;;;;;:::o;7161:262::-;7220:6;7269:2;7257:9;7248:7;7244:23;7240:32;7237:2;;;7285:1;7282;7275:12;7237:2;7328:1;7353:53;7398:7;7389:6;7378:9;7374:22;7353:53;:::i;:::-;7343:63;;7299:117;7227:196;;;;:::o;7429:407::-;7497:6;7505;7554:2;7542:9;7533:7;7529:23;7525:32;7522:2;;;7570:1;7567;7560:12;7522:2;7613:1;7638:53;7683:7;7674:6;7663:9;7659:22;7638:53;:::i;:::-;7628:63;;7584:117;7740:2;7766:53;7811:7;7802:6;7791:9;7787:22;7766:53;:::i;:::-;7756:63;;7711:118;7512:324;;;;;:::o;7842:179::-;7911:10;7932:46;7974:3;7966:6;7932:46;:::i;:::-;8010:4;8005:3;8001:14;7987:28;;7922:99;;;;:::o;8027:118::-;8114:24;8132:5;8114:24;:::i;:::-;8109:3;8102:37;8092:53;;:::o;8181:732::-;8300:3;8329:54;8377:5;8329:54;:::i;:::-;8399:86;8478:6;8473:3;8399:86;:::i;:::-;8392:93;;8509:56;8559:5;8509:56;:::i;:::-;8588:7;8619:1;8604:284;8629:6;8626:1;8623:13;8604:284;;;8705:6;8699:13;8732:63;8791:3;8776:13;8732:63;:::i;:::-;8725:70;;8818:60;8871:6;8818:60;:::i;:::-;8808:70;;8664:224;8651:1;8648;8644:9;8639:14;;8604:284;;;8608:14;8904:3;8897:10;;8305:608;;;;;;;:::o;8919:109::-;9000:21;9015:5;9000:21;:::i;:::-;8995:3;8988:34;8978:50;;:::o;9034:360::-;9120:3;9148:38;9180:5;9148:38;:::i;:::-;9202:70;9265:6;9260:3;9202:70;:::i;:::-;9195:77;;9281:52;9326:6;9321:3;9314:4;9307:5;9303:16;9281:52;:::i;:::-;9358:29;9380:6;9358:29;:::i;:::-;9353:3;9349:39;9342:46;;9124:270;;;;;:::o;9400:364::-;9488:3;9516:39;9549:5;9516:39;:::i;:::-;9571:71;9635:6;9630:3;9571:71;:::i;:::-;9564:78;;9651:52;9696:6;9691:3;9684:4;9677:5;9673:16;9651:52;:::i;:::-;9728:29;9750:6;9728:29;:::i;:::-;9723:3;9719:39;9712:46;;9492:272;;;;;:::o;9770:377::-;9876:3;9904:39;9937:5;9904:39;:::i;:::-;9959:89;10041:6;10036:3;9959:89;:::i;:::-;9952:96;;10057:52;10102:6;10097:3;10090:4;10083:5;10079:16;10057:52;:::i;:::-;10134:6;10129:3;10125:16;10118:23;;9880:267;;;;;:::o;10153:366::-;10295:3;10316:67;10380:2;10375:3;10316:67;:::i;:::-;10309:74;;10392:93;10481:3;10392:93;:::i;:::-;10510:2;10505:3;10501:12;10494:19;;10299:220;;;:::o;10525:366::-;10667:3;10688:67;10752:2;10747:3;10688:67;:::i;:::-;10681:74;;10764:93;10853:3;10764:93;:::i;:::-;10882:2;10877:3;10873:12;10866:19;;10671:220;;;:::o;10897:366::-;11039:3;11060:67;11124:2;11119:3;11060:67;:::i;:::-;11053:74;;11136:93;11225:3;11136:93;:::i;:::-;11254:2;11249:3;11245:12;11238:19;;11043:220;;;:::o;11269:366::-;11411:3;11432:67;11496:2;11491:3;11432:67;:::i;:::-;11425:74;;11508:93;11597:3;11508:93;:::i;:::-;11626:2;11621:3;11617:12;11610:19;;11415:220;;;:::o;11641:366::-;11783:3;11804:67;11868:2;11863:3;11804:67;:::i;:::-;11797:74;;11880:93;11969:3;11880:93;:::i;:::-;11998:2;11993:3;11989:12;11982:19;;11787:220;;;:::o;12013:366::-;12155:3;12176:67;12240:2;12235:3;12176:67;:::i;:::-;12169:74;;12252:93;12341:3;12252:93;:::i;:::-;12370:2;12365:3;12361:12;12354:19;;12159:220;;;:::o;12385:366::-;12527:3;12548:67;12612:2;12607:3;12548:67;:::i;:::-;12541:74;;12624:93;12713:3;12624:93;:::i;:::-;12742:2;12737:3;12733:12;12726:19;;12531:220;;;:::o;12757:366::-;12899:3;12920:67;12984:2;12979:3;12920:67;:::i;:::-;12913:74;;12996:93;13085:3;12996:93;:::i;:::-;13114:2;13109:3;13105:12;13098:19;;12903:220;;;:::o;13129:366::-;13271:3;13292:67;13356:2;13351:3;13292:67;:::i;:::-;13285:74;;13368:93;13457:3;13368:93;:::i;:::-;13486:2;13481:3;13477:12;13470:19;;13275:220;;;:::o;13501:366::-;13643:3;13664:67;13728:2;13723:3;13664:67;:::i;:::-;13657:74;;13740:93;13829:3;13740:93;:::i;:::-;13858:2;13853:3;13849:12;13842:19;;13647:220;;;:::o;13873:366::-;14015:3;14036:67;14100:2;14095:3;14036:67;:::i;:::-;14029:74;;14112:93;14201:3;14112:93;:::i;:::-;14230:2;14225:3;14221:12;14214:19;;14019:220;;;:::o;14245:366::-;14387:3;14408:67;14472:2;14467:3;14408:67;:::i;:::-;14401:74;;14484:93;14573:3;14484:93;:::i;:::-;14602:2;14597:3;14593:12;14586:19;;14391:220;;;:::o;14617:366::-;14759:3;14780:67;14844:2;14839:3;14780:67;:::i;:::-;14773:74;;14856:93;14945:3;14856:93;:::i;:::-;14974:2;14969:3;14965:12;14958:19;;14763:220;;;:::o;14989:108::-;15066:24;15084:5;15066:24;:::i;:::-;15061:3;15054:37;15044:53;;:::o;15103:118::-;15190:24;15208:5;15190:24;:::i;:::-;15185:3;15178:37;15168:53;;:::o;15227:435::-;15407:3;15429:95;15520:3;15511:6;15429:95;:::i;:::-;15422:102;;15541:95;15632:3;15623:6;15541:95;:::i;:::-;15534:102;;15653:3;15646:10;;15411:251;;;;;:::o;15668:222::-;15761:4;15799:2;15788:9;15784:18;15776:26;;15812:71;15880:1;15869:9;15865:17;15856:6;15812:71;:::i;:::-;15766:124;;;;:::o;15896:442::-;16045:4;16083:2;16072:9;16068:18;16060:26;;16096:71;16164:1;16153:9;16149:17;16140:6;16096:71;:::i;:::-;16177:72;16245:2;16234:9;16230:18;16221:6;16177:72;:::i;:::-;16259;16327:2;16316:9;16312:18;16303:6;16259:72;:::i;:::-;16050:288;;;;;;:::o;16344:640::-;16539:4;16577:3;16566:9;16562:19;16554:27;;16591:71;16659:1;16648:9;16644:17;16635:6;16591:71;:::i;:::-;16672:72;16740:2;16729:9;16725:18;16716:6;16672:72;:::i;:::-;16754;16822:2;16811:9;16807:18;16798:6;16754:72;:::i;:::-;16873:9;16867:4;16863:20;16858:2;16847:9;16843:18;16836:48;16901:76;16972:4;16963:6;16901:76;:::i;:::-;16893:84;;16544:440;;;;;;;:::o;16990:332::-;17111:4;17149:2;17138:9;17134:18;17126:26;;17162:71;17230:1;17219:9;17215:17;17206:6;17162:71;:::i;:::-;17243:72;17311:2;17300:9;17296:18;17287:6;17243:72;:::i;:::-;17116:206;;;;;:::o;17328:373::-;17471:4;17509:2;17498:9;17494:18;17486:26;;17558:9;17552:4;17548:20;17544:1;17533:9;17529:17;17522:47;17586:108;17689:4;17680:6;17586:108;:::i;:::-;17578:116;;17476:225;;;;:::o;17707:210::-;17794:4;17832:2;17821:9;17817:18;17809:26;;17845:65;17907:1;17896:9;17892:17;17883:6;17845:65;:::i;:::-;17799:118;;;;:::o;17923:313::-;18036:4;18074:2;18063:9;18059:18;18051:26;;18123:9;18117:4;18113:20;18109:1;18098:9;18094:17;18087:47;18151:78;18224:4;18215:6;18151:78;:::i;:::-;18143:86;;18041:195;;;;:::o;18242:419::-;18408:4;18446:2;18435:9;18431:18;18423:26;;18495:9;18489:4;18485:20;18481:1;18470:9;18466:17;18459:47;18523:131;18649:4;18523:131;:::i;:::-;18515:139;;18413:248;;;:::o;18667:419::-;18833:4;18871:2;18860:9;18856:18;18848:26;;18920:9;18914:4;18910:20;18906:1;18895:9;18891:17;18884:47;18948:131;19074:4;18948:131;:::i;:::-;18940:139;;18838:248;;;:::o;19092:419::-;19258:4;19296:2;19285:9;19281:18;19273:26;;19345:9;19339:4;19335:20;19331:1;19320:9;19316:17;19309:47;19373:131;19499:4;19373:131;:::i;:::-;19365:139;;19263:248;;;:::o;19517:419::-;19683:4;19721:2;19710:9;19706:18;19698:26;;19770:9;19764:4;19760:20;19756:1;19745:9;19741:17;19734:47;19798:131;19924:4;19798:131;:::i;:::-;19790:139;;19688:248;;;:::o;19942:419::-;20108:4;20146:2;20135:9;20131:18;20123:26;;20195:9;20189:4;20185:20;20181:1;20170:9;20166:17;20159:47;20223:131;20349:4;20223:131;:::i;:::-;20215:139;;20113:248;;;:::o;20367:419::-;20533:4;20571:2;20560:9;20556:18;20548:26;;20620:9;20614:4;20610:20;20606:1;20595:9;20591:17;20584:47;20648:131;20774:4;20648:131;:::i;:::-;20640:139;;20538:248;;;:::o;20792:419::-;20958:4;20996:2;20985:9;20981:18;20973:26;;21045:9;21039:4;21035:20;21031:1;21020:9;21016:17;21009:47;21073:131;21199:4;21073:131;:::i;:::-;21065:139;;20963:248;;;:::o;21217:419::-;21383:4;21421:2;21410:9;21406:18;21398:26;;21470:9;21464:4;21460:20;21456:1;21445:9;21441:17;21434:47;21498:131;21624:4;21498:131;:::i;:::-;21490:139;;21388:248;;;:::o;21642:419::-;21808:4;21846:2;21835:9;21831:18;21823:26;;21895:9;21889:4;21885:20;21881:1;21870:9;21866:17;21859:47;21923:131;22049:4;21923:131;:::i;:::-;21915:139;;21813:248;;;:::o;22067:419::-;22233:4;22271:2;22260:9;22256:18;22248:26;;22320:9;22314:4;22310:20;22306:1;22295:9;22291:17;22284:47;22348:131;22474:4;22348:131;:::i;:::-;22340:139;;22238:248;;;:::o;22492:419::-;22658:4;22696:2;22685:9;22681:18;22673:26;;22745:9;22739:4;22735:20;22731:1;22720:9;22716:17;22709:47;22773:131;22899:4;22773:131;:::i;:::-;22765:139;;22663:248;;;:::o;22917:419::-;23083:4;23121:2;23110:9;23106:18;23098:26;;23170:9;23164:4;23160:20;23156:1;23145:9;23141:17;23134:47;23198:131;23324:4;23198:131;:::i;:::-;23190:139;;23088:248;;;:::o;23342:419::-;23508:4;23546:2;23535:9;23531:18;23523:26;;23595:9;23589:4;23585:20;23581:1;23570:9;23566:17;23559:47;23623:131;23749:4;23623:131;:::i;:::-;23615:139;;23513:248;;;:::o;23767:222::-;23860:4;23898:2;23887:9;23883:18;23875:26;;23911:71;23979:1;23968:9;23964:17;23955:6;23911:71;:::i;:::-;23865:124;;;;:::o;23995:129::-;24029:6;24056:20;;:::i;:::-;24046:30;;24085:33;24113:4;24105:6;24085:33;:::i;:::-;24036:88;;;:::o;24130:75::-;24163:6;24196:2;24190:9;24180:19;;24170:35;:::o;24211:307::-;24272:4;24362:18;24354:6;24351:30;24348:2;;;24384:18;;:::i;:::-;24348:2;24422:29;24444:6;24422:29;:::i;:::-;24414:37;;24506:4;24500;24496:15;24488:23;;24277:241;;;:::o;24524:308::-;24586:4;24676:18;24668:6;24665:30;24662:2;;;24698:18;;:::i;:::-;24662:2;24736:29;24758:6;24736:29;:::i;:::-;24728:37;;24820:4;24814;24810:15;24802:23;;24591:241;;;:::o;24838:132::-;24905:4;24928:3;24920:11;;24958:4;24953:3;24949:14;24941:22;;24910:60;;;:::o;24976:114::-;25043:6;25077:5;25071:12;25061:22;;25050:40;;;:::o;25096:98::-;25147:6;25181:5;25175:12;25165:22;;25154:40;;;:::o;25200:99::-;25252:6;25286:5;25280:12;25270:22;;25259:40;;;:::o;25305:113::-;25375:4;25407;25402:3;25398:14;25390:22;;25380:38;;;:::o;25424:184::-;25523:11;25557:6;25552:3;25545:19;25597:4;25592:3;25588:14;25573:29;;25535:73;;;;:::o;25614:168::-;25697:11;25731:6;25726:3;25719:19;25771:4;25766:3;25762:14;25747:29;;25709:73;;;;:::o;25788:169::-;25872:11;25906:6;25901:3;25894:19;25946:4;25941:3;25937:14;25922:29;;25884:73;;;;:::o;25963:148::-;26065:11;26102:3;26087:18;;26077:34;;;;:::o;26117:305::-;26157:3;26176:20;26194:1;26176:20;:::i;:::-;26171:25;;26210:20;26228:1;26210:20;:::i;:::-;26205:25;;26364:1;26296:66;26292:74;26289:1;26286:81;26283:2;;;26370:18;;:::i;:::-;26283:2;26414:1;26411;26407:9;26400:16;;26161:261;;;;:::o;26428:191::-;26468:4;26488:20;26506:1;26488:20;:::i;:::-;26483:25;;26522:20;26540:1;26522:20;:::i;:::-;26517:25;;26561:1;26558;26555:8;26552:2;;;26566:18;;:::i;:::-;26552:2;26611:1;26608;26604:9;26596:17;;26473:146;;;;:::o;26625:96::-;26662:7;26691:24;26709:5;26691:24;:::i;:::-;26680:35;;26670:51;;;:::o;26727:90::-;26761:7;26804:5;26797:13;26790:21;26779:32;;26769:48;;;:::o;26823:149::-;26859:7;26899:66;26892:5;26888:78;26877:89;;26867:105;;;:::o;26978:126::-;27015:7;27055:42;27048:5;27044:54;27033:65;;27023:81;;;:::o;27110:77::-;27147:7;27176:5;27165:16;;27155:32;;;:::o;27193:154::-;27277:6;27272:3;27267;27254:30;27339:1;27330:6;27325:3;27321:16;27314:27;27244:103;;;:::o;27353:307::-;27421:1;27431:113;27445:6;27442:1;27439:13;27431:113;;;27530:1;27525:3;27521:11;27515:18;27511:1;27506:3;27502:11;27495:39;27467:2;27464:1;27460:10;27455:15;;27431:113;;;27562:6;27559:1;27556:13;27553:2;;;27642:1;27633:6;27628:3;27624:16;27617:27;27553:2;27402:258;;;;:::o;27666:320::-;27710:6;27747:1;27741:4;27737:12;27727:22;;27794:1;27788:4;27784:12;27815:18;27805:2;;27871:4;27863:6;27859:17;27849:27;;27805:2;27933;27925:6;27922:14;27902:18;27899:38;27896:2;;;27952:18;;:::i;:::-;27896:2;27717:269;;;;:::o;27992:281::-;28075:27;28097:4;28075:27;:::i;:::-;28067:6;28063:40;28205:6;28193:10;28190:22;28169:18;28157:10;28154:34;28151:62;28148:2;;;28216:18;;:::i;:::-;28148:2;28256:10;28252:2;28245:22;28035:238;;;:::o;28279:233::-;28318:3;28341:24;28359:5;28341:24;:::i;:::-;28332:33;;28387:66;28380:5;28377:77;28374:2;;;28457:18;;:::i;:::-;28374:2;28504:1;28497:5;28493:13;28486:20;;28322:190;;;:::o;28518:180::-;28566:77;28563:1;28556:88;28663:4;28660:1;28653:15;28687:4;28684:1;28677:15;28704:180;28752:77;28749:1;28742:88;28849:4;28846:1;28839:15;28873:4;28870:1;28863:15;28890:180;28938:77;28935:1;28928:88;29035:4;29032:1;29025:15;29059:4;29056:1;29049:15;29076:102;29117:6;29168:2;29164:7;29159:2;29152:5;29148:14;29144:28;29134:38;;29124:54;;;:::o;29184:232::-;29324:34;29320:1;29312:6;29308:14;29301:58;29393:15;29388:2;29380:6;29376:15;29369:40;29290:126;:::o;29422:237::-;29562:34;29558:1;29550:6;29546:14;29539:58;29631:20;29626:2;29618:6;29614:15;29607:45;29528:131;:::o;29665:224::-;29805:34;29801:1;29793:6;29789:14;29782:58;29874:7;29869:2;29861:6;29857:15;29850:32;29771:118;:::o;29895:178::-;30035:30;30031:1;30023:6;30019:14;30012:54;30001:72;:::o;30079:223::-;30219:34;30215:1;30207:6;30203:14;30196:58;30288:6;30283:2;30275:6;30271:15;30264:31;30185:117;:::o;30308:175::-;30448:27;30444:1;30436:6;30432:14;30425:51;30414:69;:::o;30489:228::-;30629:34;30625:1;30617:6;30613:14;30606:58;30698:11;30693:2;30685:6;30681:15;30674:36;30595:122;:::o;30723:233::-;30863:34;30859:1;30851:6;30847:14;30840:58;30932:16;30927:2;30919:6;30915:15;30908:41;30829:127;:::o;30962:182::-;31102:34;31098:1;31090:6;31086:14;31079:58;31068:76;:::o;31150:174::-;31290:26;31286:1;31278:6;31274:14;31267:50;31256:68;:::o;31330:220::-;31470:34;31466:1;31458:6;31454:14;31447:58;31539:3;31534:2;31526:6;31522:15;31515:28;31436:114;:::o;31556:248::-;31696:34;31692:1;31684:6;31680:14;31673:58;31765:31;31760:2;31752:6;31748:15;31741:56;31662:142;:::o;31810:236::-;31950:34;31946:1;31938:6;31934:14;31927:58;32019:19;32014:2;32006:6;32002:15;31995:44;31916:130;:::o;32052:122::-;32125:24;32143:5;32125:24;:::i;:::-;32118:5;32115:35;32105:2;;32164:1;32161;32154:12;32105:2;32095:79;:::o;32180:116::-;32250:21;32265:5;32250:21;:::i;:::-;32243:5;32240:32;32230:2;;32286:1;32283;32276:12;32230:2;32220:76;:::o;32302:120::-;32374:23;32391:5;32374:23;:::i;:::-;32367:5;32364:34;32354:2;;32412:1;32409;32402:12;32354:2;32344:78;:::o;32428:122::-;32501:24;32519:5;32501:24;:::i;:::-;32494:5;32491:35;32481:2;;32540:1;32537;32530:12;32481:2;32471:79;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"2614600","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"1624","bulkMintBadgesERC721(string,uint256)":"infinite","bulkMintERC721(uint256)":"infinite","getApproved(uint256)":"2700","getTokenIds(uint256)":"infinite","isApprovedForAll(address,address)":"infinite","name()":"infinite","ownerOf(uint256)":"1813","safeMint()":"infinite","safeMintBadge(string)":"infinite","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","supportsInterface(bytes4)":"797","symbol()":"infinite","tokenIds(uint256,uint256)":"infinite","tokenURI(uint256)":"infinite","transferBadgesToken(address,address,uint256)":"infinite","transferFrom(address,address,uint256)":"infinite","transferToken(address,address,uint256,string)":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","bulkMintBadgesERC721(string,uint256)":"d4d94b05","bulkMintERC721(uint256)":"2743dfd0","getApproved(uint256)":"081812fc","getTokenIds(uint256)":"57991d30","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeMint()":"6871ee40","safeMintBadge(string)":"265d9a6c","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenIds(uint256,uint256)":"eed8cc35","tokenURI(uint256)":"c87b56dd","transferBadgesToken(address,address,uint256)":"deeb9a3f","transferFrom(address,address,uint256)":"23b872dd","transferToken(address,address,uint256,string)":"7b2eb35c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TokenMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TokenTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"bulkMintBadgesERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"bulkMintERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"getTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"safeMintBadge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferBadgesToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Trustified.sol\":\"Trustified\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Trustified.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\nimport \\\"./comman/FERC721URIStorage.sol\\\";\\n\\ncontract Trustified is ERC721URIStorage {\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIdCounter;\\n    Counters.Counter private _eventIdCounter;\\n\\n    mapping(uint256 => uint256[]) public tokenIds;\\n\\n    event TokenMinted(address, uint256);\\n    event TokenTransfered(address, address, uint256);\\n\\n    constructor() ERC721(\\\"Trustified\\\", \\\"TFN\\\") {}\\n\\n    function safeMint() public returns (uint256) {\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n        _mint(address(this), tokenId);\\n\\n        return tokenId;\\n    }\\n\\n     function safeMintBadge(string memory tokenURI) public returns (uint256) {\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n        _mint(address(this), tokenId);\\n        _setTokenURI(tokenId, tokenURI);\\n        return tokenId;\\n    }\\n\\n\\n    function bulkMintERC721(uint256 quantity) public {\\n        uint256 eventId = _eventIdCounter.current();\\n        _eventIdCounter.increment();\\n        for (uint256 i = 0; i < quantity; i++) {\\n            uint256 tokenId = safeMint();\\n            tokenIds[eventId].push(tokenId);\\n        }\\n        emit TokenMinted(msg.sender, eventId);\\n    }\\n\\n      function bulkMintBadgesERC721(string memory tokenUri, uint256 quantity) public {\\n        uint256 eventId = _eventIdCounter.current();\\n        _eventIdCounter.increment();\\n        for (uint256 i = 0; i < quantity; i++) {\\n            uint256 tokenId = safeMintBadge(tokenUri);\\n            tokenIds[eventId].push(tokenId);\\n        }\\n        emit TokenMinted(msg.sender, eventId);\\n    }\\n\\n    function getTokenIds(uint256 eventId)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return tokenIds[eventId];\\n    }\\n\\n    function transferToken(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        string memory tokenURI\\n    ) public {\\n        _setTokenURI(tokenId, tokenURI);\\n        IERC721(address(this)).transferFrom(from, to, tokenId);       \\n        emit TokenTransfered(from, to, tokenId);\\n    }\\n\\n      function transferBadgesToken(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public {\\n        IERC721(address(this)).transferFrom(from, to, tokenId);\\n        emit TokenTransfered(from, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xe2df96ce4b5964a626fab4ffbe7486ba763405ba8cfa852b46b8041ea7d87040\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/comman/FERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n     /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(\\n            _isApprovedOrOwner(from, tokenId),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0bf56000e946e4f517db67e7cfd33b163c947d5d7a715cf55658c338ea657d26\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1729,"contract":"contracts/Trustified.sol:Trustified","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":1731,"contract":"contracts/Trustified.sol:Trustified","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":1735,"contract":"contracts/Trustified.sol:Trustified","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":1739,"contract":"contracts/Trustified.sol:Trustified","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":1743,"contract":"contracts/Trustified.sol:Trustified","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":1749,"contract":"contracts/Trustified.sol:Trustified","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":5086,"contract":"contracts/Trustified.sol:Trustified","label":"_tokenURIs","offset":0,"slot":"6","type":"t_mapping(t_uint256,t_string_storage)"},{"astId":4640,"contract":"contracts/Trustified.sol:Trustified","label":"_tokenIdCounter","offset":0,"slot":"7","type":"t_struct(Counter)3167_storage"},{"astId":4643,"contract":"contracts/Trustified.sol:Trustified","label":"_eventIdCounter","offset":0,"slot":"8","type":"t_struct(Counter)3167_storage"},{"astId":4648,"contract":"contracts/Trustified.sol:Trustified","label":"tokenIds","offset":0,"slot":"9","type":"t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)dyn_storage":{"base":"t_uint256","encoding":"dynamic_array","label":"uint256[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_array(t_uint256)dyn_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256[])","numberOfBytes":"32","value":"t_array(t_uint256)dyn_storage"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Counter)3167_storage":{"encoding":"inplace","label":"struct Counters.Counter","members":[{"astId":3166,"contract":"contracts/Trustified.sol:Trustified","label":"_value","offset":0,"slot":"0","type":"t_uint256"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/TrustifiedCred.sol":{"TrustifiedCred":{"abi":[{"inputs":[{"components":[{"internalType":"address","name":"contractAddress","type":"address"},{"internalType":"uint256","name":"merkleTreeDepth","type":"uint256"}],"internalType":"struct ICredential.Verifier[]","name":"_verifiers","type":"tuple[]"},{"internalType":"address","name":"_issuer","type":"address"},{"internalType":"string","name":"_issuerName","type":"string"},{"internalType":"string","name":"_issuerSymbol","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"Credential__CallerIsNotTheCredIssuer","type":"error"},{"inputs":[],"name":"Credential__CredAlreadyExists","type":"error"},{"inputs":[],"name":"Credential__CredDoesNotExist","type":"error"},{"inputs":[],"name":"Credential__CredIdIsNotLessThanSnarkScalarField","type":"error"},{"inputs":[],"name":"Credential__MerkleTreeDepthIsNotSupported","type":"error"},{"inputs":[],"name":"Credential__MerkleTreeRootIsExpired","type":"error"},{"inputs":[],"name":"Credential__MerkleTreeRootIsNotPartOfTheCred","type":"error"},{"inputs":[],"name":"Credential__YouAreUsingTheSameNillifierTwice","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"","type":"address"},{"indexed":false,"internalType":"uint256","name":"","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"","type":"uint256"},{"indexed":false,"internalType":"string","name":"","type":"string"}],"name":"CredCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"issuer","type":"address"},{"indexed":true,"internalType":"uint256","name":"credId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"merkleTreeDepth","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"zeroValue","type":"uint256"}],"name":"CredCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"credId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"index","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"identityCommitment","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"merkleTreeRoot","type":"uint256"}],"name":"IdentityAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"credId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"index","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"identityCommitment","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"merkleTreeRoot","type":"uint256"}],"name":"IdentityRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"credId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"index","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"identityCommitment","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newIdentityCommitment","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"merkleTreeRoot","type":"uint256"}],"name":"IdentityUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"","type":"address"},{"indexed":false,"internalType":"uint256","name":"","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"","type":"uint256"}],"name":"IssueCred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"nullifierHash","type":"uint256"}],"name":"NullifierHashAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"credId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"merkleTreeRoot","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"externalNullifier","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"nullifierHash","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"signal","type":"bytes32"}],"name":"ProofVerified","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"issuerAddress","type":"address"},{"indexed":true,"internalType":"string","name":"issuerName","type":"string"},{"indexed":true,"internalType":"string","name":"issuerSymbol","type":"string"}],"name":"issuerRegistered","type":"event"},{"inputs":[{"internalType":"uint256","name":"credId","type":"uint256"},{"internalType":"uint256","name":"identityCommitment","type":"uint256"}],"name":"claimCredToTrustifiedIssuer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"creds","outputs":[{"internalType":"address","name":"admin","type":"address"},{"internalType":"string","name":"credURI","type":"string"},{"internalType":"uint256","name":"merkleRootDuration","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"credsIssuedCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"credsIssuer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"credsProtocolRegistry","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"credID","type":"uint256"}],"name":"getMerkleTreeDepth","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"credID","type":"uint256"}],"name":"getMerkleTreeRoot","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"credID","type":"uint256"}],"name":"getNumberOfMerkleTreeLeaves","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"merkleTreeDepth","type":"uint256"},{"internalType":"uint256","name":"zeroValue","type":"uint256"},{"internalType":"string","name":"credURI","type":"string"}],"name":"issueCred","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"issuerName","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"issuerSymbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"verifiers","outputs":[{"internalType":"contract IVerifier","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"getMerkleTreeDepth(uint256)":{"details":"See {ICredentialCreds-getMerkleTreeDepth}."},"getMerkleTreeRoot(uint256)":{"details":"See {ICredentialCreds-getMerkleTreeRoot}."},"getNumberOfMerkleTreeLeaves(uint256)":{"details":"See {ICredentialCreds-getNumberOfMerkleTreeLeaves}."}},"version":1},"evm":{"bytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:8172:29","statements":[{"body":{"nodeType":"YulBlock","src":"182:614:29","statements":[{"nodeType":"YulAssignment","src":"192:115:29","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"299:6:29"}],"functionName":{"name":"array_allocation_size_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"217:81:29"},"nodeType":"YulFunctionCall","src":"217:89:29"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"201:15:29"},"nodeType":"YulFunctionCall","src":"201:106:29"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"192:5:29"}]},{"nodeType":"YulVariableDeclaration","src":"316:16:29","value":{"name":"array","nodeType":"YulIdentifier","src":"327:5:29"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"320:3:29","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"349:5:29"},{"name":"length","nodeType":"YulIdentifier","src":"356:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"342:6:29"},"nodeType":"YulFunctionCall","src":"342:21:29"},"nodeType":"YulExpressionStatement","src":"342:21:29"},{"nodeType":"YulAssignment","src":"372:23:29","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"383:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"390:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"379:3:29"},"nodeType":"YulFunctionCall","src":"379:16:29"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"372:3:29"}]},{"nodeType":"YulVariableDeclaration","src":"405:17:29","value":{"name":"offset","nodeType":"YulIdentifier","src":"416:6:29"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"409:3:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"471:36:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"492:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"495:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"485:6:29"},"nodeType":"YulFunctionCall","src":"485:12:29"},"nodeType":"YulExpressionStatement","src":"485:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"441:3:29"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"450:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"458:4:29","type":"","value":"0x40"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"446:3:29"},"nodeType":"YulFunctionCall","src":"446:17:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"437:3:29"},"nodeType":"YulFunctionCall","src":"437:27:29"},{"name":"end","nodeType":"YulIdentifier","src":"466:3:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"434:2:29"},"nodeType":"YulFunctionCall","src":"434:36:29"},"nodeType":"YulIf","src":"431:2:29"},{"body":{"nodeType":"YulBlock","src":"576:214:29","statements":[{"nodeType":"YulVariableDeclaration","src":"591:21:29","value":{"name":"src","nodeType":"YulIdentifier","src":"609:3:29"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"595:10:29","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"633:3:29"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"695:10:29"},{"name":"end","nodeType":"YulIdentifier","src":"707:3:29"}],"functionName":{"name":"abi_decode_t_struct$_Verifier_$993_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"638:56:29"},"nodeType":"YulFunctionCall","src":"638:73:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"626:6:29"},"nodeType":"YulFunctionCall","src":"626:86:29"},"nodeType":"YulExpressionStatement","src":"626:86:29"},{"nodeType":"YulAssignment","src":"725:21:29","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"736:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"741:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"732:3:29"},"nodeType":"YulFunctionCall","src":"732:14:29"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"725:3:29"}]},{"nodeType":"YulAssignment","src":"759:21:29","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"770:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"775:4:29","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"766:3:29"},"nodeType":"YulFunctionCall","src":"766:14:29"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"759:3:29"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"538:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"541:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"535:2:29"},"nodeType":"YulFunctionCall","src":"535:13:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"549:18:29","statements":[{"nodeType":"YulAssignment","src":"551:14:29","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"560:1:29"},{"kind":"number","nodeType":"YulLiteral","src":"563:1:29","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"556:3:29"},"nodeType":"YulFunctionCall","src":"556:9:29"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"551:1:29"}]}]},"pre":{"nodeType":"YulBlock","src":"520:14:29","statements":[{"nodeType":"YulVariableDeclaration","src":"522:10:29","value":{"kind":"number","nodeType":"YulLiteral","src":"531:1:29","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"526:1:29","type":""}]}]},"src":"516:274:29"}]},"name":"abi_decode_available_length_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"152:6:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"160:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"168:3:29","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"176:5:29","type":""}],"src":"44:752:29"},{"body":{"nodeType":"YulBlock","src":"897:259:29","statements":[{"nodeType":"YulAssignment","src":"907:75:29","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"974:6:29"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"932:41:29"},"nodeType":"YulFunctionCall","src":"932:49:29"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"916:15:29"},"nodeType":"YulFunctionCall","src":"916:66:29"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"907:5:29"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"998:5:29"},{"name":"length","nodeType":"YulIdentifier","src":"1005:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"991:6:29"},"nodeType":"YulFunctionCall","src":"991:21:29"},"nodeType":"YulExpressionStatement","src":"991:21:29"},{"nodeType":"YulVariableDeclaration","src":"1021:27:29","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"1036:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"1043:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1032:3:29"},"nodeType":"YulFunctionCall","src":"1032:16:29"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"1025:3:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"1086:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1095:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1098:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1088:6:29"},"nodeType":"YulFunctionCall","src":"1088:12:29"},"nodeType":"YulExpressionStatement","src":"1088:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1067:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"1072:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1063:3:29"},"nodeType":"YulFunctionCall","src":"1063:16:29"},{"name":"end","nodeType":"YulIdentifier","src":"1081:3:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1060:2:29"},"nodeType":"YulFunctionCall","src":"1060:25:29"},"nodeType":"YulIf","src":"1057:2:29"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1133:3:29"},{"name":"dst","nodeType":"YulIdentifier","src":"1138:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"1143:6:29"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"1111:21:29"},"nodeType":"YulFunctionCall","src":"1111:39:29"},"nodeType":"YulExpressionStatement","src":"1111:39:29"}]},"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"870:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"875:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"883:3:29","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"891:5:29","type":""}],"src":"802:354:29"},{"body":{"nodeType":"YulBlock","src":"1225:80:29","statements":[{"nodeType":"YulAssignment","src":"1235:22:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1250:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1244:5:29"},"nodeType":"YulFunctionCall","src":"1244:13:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1235:5:29"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1293:5:29"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1266:26:29"},"nodeType":"YulFunctionCall","src":"1266:33:29"},"nodeType":"YulExpressionStatement","src":"1266:33:29"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1203:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"1211:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1219:5:29","type":""}],"src":"1162:143:29"},{"body":{"nodeType":"YulBlock","src":"1461:255:29","statements":[{"body":{"nodeType":"YulBlock","src":"1510:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1519:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1522:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1512:6:29"},"nodeType":"YulFunctionCall","src":"1512:12:29"},"nodeType":"YulExpressionStatement","src":"1512:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1489:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"1497:4:29","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1485:3:29"},"nodeType":"YulFunctionCall","src":"1485:17:29"},{"name":"end","nodeType":"YulIdentifier","src":"1504:3:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1481:3:29"},"nodeType":"YulFunctionCall","src":"1481:27:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1474:6:29"},"nodeType":"YulFunctionCall","src":"1474:35:29"},"nodeType":"YulIf","src":"1471:2:29"},{"nodeType":"YulVariableDeclaration","src":"1535:27:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1555:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1549:5:29"},"nodeType":"YulFunctionCall","src":"1549:13:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1539:6:29","type":""}]},{"nodeType":"YulAssignment","src":"1571:139:29","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1683:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"1691:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1679:3:29"},"nodeType":"YulFunctionCall","src":"1679:17:29"},{"name":"length","nodeType":"YulIdentifier","src":"1698:6:29"},{"name":"end","nodeType":"YulIdentifier","src":"1706:3:29"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"1580:98:29"},"nodeType":"YulFunctionCall","src":"1580:130:29"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1571:5:29"}]}]},"name":"abi_decode_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1439:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"1447:3:29","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1455:5:29","type":""}],"src":"1348:368:29"},{"body":{"nodeType":"YulBlock","src":"1809:215:29","statements":[{"body":{"nodeType":"YulBlock","src":"1858:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1867:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1870:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1860:6:29"},"nodeType":"YulFunctionCall","src":"1860:12:29"},"nodeType":"YulExpressionStatement","src":"1860:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1837:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"1845:4:29","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1833:3:29"},"nodeType":"YulFunctionCall","src":"1833:17:29"},{"name":"end","nodeType":"YulIdentifier","src":"1852:3:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1829:3:29"},"nodeType":"YulFunctionCall","src":"1829:27:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1822:6:29"},"nodeType":"YulFunctionCall","src":"1822:35:29"},"nodeType":"YulIf","src":"1819:2:29"},{"nodeType":"YulVariableDeclaration","src":"1883:27:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1903:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1897:5:29"},"nodeType":"YulFunctionCall","src":"1897:13:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1887:6:29","type":""}]},{"nodeType":"YulAssignment","src":"1919:99:29","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1991:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"1999:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1987:3:29"},"nodeType":"YulFunctionCall","src":"1987:17:29"},{"name":"length","nodeType":"YulIdentifier","src":"2006:6:29"},{"name":"end","nodeType":"YulIdentifier","src":"2014:3:29"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"1928:58:29"},"nodeType":"YulFunctionCall","src":"1928:90:29"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1919:5:29"}]}]},"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1787:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"1795:3:29","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1803:5:29","type":""}],"src":"1736:288:29"},{"body":{"nodeType":"YulBlock","src":"2156:471:29","statements":[{"body":{"nodeType":"YulBlock","src":"2200:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2209:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2212:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2202:6:29"},"nodeType":"YulFunctionCall","src":"2202:12:29"},"nodeType":"YulExpressionStatement","src":"2202:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"2177:3:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"2182:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2173:3:29"},"nodeType":"YulFunctionCall","src":"2173:19:29"},{"kind":"number","nodeType":"YulLiteral","src":"2194:4:29","type":"","value":"0x40"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2169:3:29"},"nodeType":"YulFunctionCall","src":"2169:30:29"},"nodeType":"YulIf","src":"2166:2:29"},{"nodeType":"YulAssignment","src":"2225:30:29","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2250:4:29","type":"","value":"0x40"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2234:15:29"},"nodeType":"YulFunctionCall","src":"2234:21:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2225:5:29"}]},{"nodeType":"YulBlock","src":"2265:172:29","statements":[{"nodeType":"YulVariableDeclaration","src":"2311:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"2325:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2315:6:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2351:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"2358:4:29","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2347:3:29"},"nodeType":"YulFunctionCall","src":"2347:16:29"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2401:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"2412:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2397:3:29"},"nodeType":"YulFunctionCall","src":"2397:22:29"},{"name":"end","nodeType":"YulIdentifier","src":"2421:3:29"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"2365:31:29"},"nodeType":"YulFunctionCall","src":"2365:60:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2340:6:29"},"nodeType":"YulFunctionCall","src":"2340:86:29"},"nodeType":"YulExpressionStatement","src":"2340:86:29"}]},{"nodeType":"YulBlock","src":"2447:173:29","statements":[{"nodeType":"YulVariableDeclaration","src":"2493:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"2507:2:29","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2497:6:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2534:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"2541:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2530:3:29"},"nodeType":"YulFunctionCall","src":"2530:16:29"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2584:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"2595:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2580:3:29"},"nodeType":"YulFunctionCall","src":"2580:22:29"},{"name":"end","nodeType":"YulIdentifier","src":"2604:3:29"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"2548:31:29"},"nodeType":"YulFunctionCall","src":"2548:60:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2523:6:29"},"nodeType":"YulFunctionCall","src":"2523:86:29"},"nodeType":"YulExpressionStatement","src":"2523:86:29"}]}]},"name":"abi_decode_t_struct$_Verifier_$993_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2131:9:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"2142:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2150:5:29","type":""}],"src":"2065:562:29"},{"body":{"nodeType":"YulBlock","src":"2696:80:29","statements":[{"nodeType":"YulAssignment","src":"2706:22:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2721:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2715:5:29"},"nodeType":"YulFunctionCall","src":"2715:13:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2706:5:29"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2764:5:29"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"2737:26:29"},"nodeType":"YulFunctionCall","src":"2737:33:29"},"nodeType":"YulExpressionStatement","src":"2737:33:29"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2674:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"2682:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2690:5:29","type":""}],"src":"2633:143:29"},{"body":{"nodeType":"YulBlock","src":"2980:953:29","statements":[{"body":{"nodeType":"YulBlock","src":"3027:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3036:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3039:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3029:6:29"},"nodeType":"YulFunctionCall","src":"3029:12:29"},"nodeType":"YulExpressionStatement","src":"3029:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3001:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"3010:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2997:3:29"},"nodeType":"YulFunctionCall","src":"2997:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"3022:3:29","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2993:3:29"},"nodeType":"YulFunctionCall","src":"2993:33:29"},"nodeType":"YulIf","src":"2990:2:29"},{"nodeType":"YulBlock","src":"3053:264:29","statements":[{"nodeType":"YulVariableDeclaration","src":"3068:38:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3092:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"3103:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3088:3:29"},"nodeType":"YulFunctionCall","src":"3088:17:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3082:5:29"},"nodeType":"YulFunctionCall","src":"3082:24:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3072:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"3153:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3162:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3165:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3155:6:29"},"nodeType":"YulFunctionCall","src":"3155:12:29"},"nodeType":"YulExpressionStatement","src":"3155:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3125:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"3133:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3122:2:29"},"nodeType":"YulFunctionCall","src":"3122:30:29"},"nodeType":"YulIf","src":"3119:2:29"},{"nodeType":"YulAssignment","src":"3183:124:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3279:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"3290:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3275:3:29"},"nodeType":"YulFunctionCall","src":"3275:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3299:7:29"}],"functionName":{"name":"abi_decode_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3193:81:29"},"nodeType":"YulFunctionCall","src":"3193:114:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3183:6:29"}]}]},{"nodeType":"YulBlock","src":"3327:129:29","statements":[{"nodeType":"YulVariableDeclaration","src":"3342:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"3356:2:29","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3346:6:29","type":""}]},{"nodeType":"YulAssignment","src":"3372:74:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3418:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"3429:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3414:3:29"},"nodeType":"YulFunctionCall","src":"3414:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3438:7:29"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"3382:31:29"},"nodeType":"YulFunctionCall","src":"3382:64:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3372:6:29"}]}]},{"nodeType":"YulBlock","src":"3466:225:29","statements":[{"nodeType":"YulVariableDeclaration","src":"3481:39:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3505:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"3516:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3501:3:29"},"nodeType":"YulFunctionCall","src":"3501:18:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3495:5:29"},"nodeType":"YulFunctionCall","src":"3495:25:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3485:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"3567:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3576:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3579:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3569:6:29"},"nodeType":"YulFunctionCall","src":"3569:12:29"},"nodeType":"YulExpressionStatement","src":"3569:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3539:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"3547:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3536:2:29"},"nodeType":"YulFunctionCall","src":"3536:30:29"},"nodeType":"YulIf","src":"3533:2:29"},{"nodeType":"YulAssignment","src":"3597:84:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3653:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"3664:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3649:3:29"},"nodeType":"YulFunctionCall","src":"3649:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3673:7:29"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3607:41:29"},"nodeType":"YulFunctionCall","src":"3607:74:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3597:6:29"}]}]},{"nodeType":"YulBlock","src":"3701:225:29","statements":[{"nodeType":"YulVariableDeclaration","src":"3716:39:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3740:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"3751:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3736:3:29"},"nodeType":"YulFunctionCall","src":"3736:18:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3730:5:29"},"nodeType":"YulFunctionCall","src":"3730:25:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3720:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"3802:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3811:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3814:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3804:6:29"},"nodeType":"YulFunctionCall","src":"3804:12:29"},"nodeType":"YulExpressionStatement","src":"3804:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3774:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"3782:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3771:2:29"},"nodeType":"YulFunctionCall","src":"3771:30:29"},"nodeType":"YulIf","src":"3768:2:29"},{"nodeType":"YulAssignment","src":"3832:84:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3888:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"3899:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3884:3:29"},"nodeType":"YulFunctionCall","src":"3884:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3908:7:29"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3842:41:29"},"nodeType":"YulFunctionCall","src":"3842:74:29"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"3832:6:29"}]}]}]},"name":"abi_decode_tuple_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptrt_addresst_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2926:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2937:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2949:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2957:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2965:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2973:6:29","type":""}],"src":"2782:1151:29"},{"body":{"nodeType":"YulBlock","src":"4004:53:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4021:3:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4044:5:29"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"4026:17:29"},"nodeType":"YulFunctionCall","src":"4026:24:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4014:6:29"},"nodeType":"YulFunctionCall","src":"4014:37:29"},"nodeType":"YulExpressionStatement","src":"4014:37:29"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3992:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3999:3:29","type":""}],"src":"3939:118:29"},{"body":{"nodeType":"YulBlock","src":"4173:267:29","statements":[{"nodeType":"YulVariableDeclaration","src":"4183:53:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4230:5:29"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"4197:32:29"},"nodeType":"YulFunctionCall","src":"4197:39:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"4187:6:29","type":""}]},{"nodeType":"YulAssignment","src":"4245:96:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4329:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"4334:6:29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"4252:76:29"},"nodeType":"YulFunctionCall","src":"4252:89:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"4245:3:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4376:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"4383:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4372:3:29"},"nodeType":"YulFunctionCall","src":"4372:16:29"},{"name":"pos","nodeType":"YulIdentifier","src":"4390:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"4395:6:29"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"4350:21:29"},"nodeType":"YulFunctionCall","src":"4350:52:29"},"nodeType":"YulExpressionStatement","src":"4350:52:29"},{"nodeType":"YulAssignment","src":"4411:23:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4422:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"4427:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4418:3:29"},"nodeType":"YulFunctionCall","src":"4418:16:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4411:3:29"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4154:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4161:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4169:3:29","type":""}],"src":"4063:377:29"},{"body":{"nodeType":"YulBlock","src":"4582:139:29","statements":[{"nodeType":"YulAssignment","src":"4593:102:29","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4682:6:29"},{"name":"pos","nodeType":"YulIdentifier","src":"4691:3:29"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"4600:81:29"},"nodeType":"YulFunctionCall","src":"4600:95:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"4593:3:29"}]},{"nodeType":"YulAssignment","src":"4705:10:29","value":{"name":"pos","nodeType":"YulIdentifier","src":"4712:3:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4705:3:29"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"4561:3:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4567:6:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4578:3:29","type":""}],"src":"4446:275:29"},{"body":{"nodeType":"YulBlock","src":"4853:206:29","statements":[{"nodeType":"YulAssignment","src":"4863:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4875:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"4886:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4871:3:29"},"nodeType":"YulFunctionCall","src":"4871:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4863:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4943:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4956:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"4967:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4952:3:29"},"nodeType":"YulFunctionCall","src":"4952:17:29"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"4899:43:29"},"nodeType":"YulFunctionCall","src":"4899:71:29"},"nodeType":"YulExpressionStatement","src":"4899:71:29"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5024:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5037:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"5048:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5033:3:29"},"nodeType":"YulFunctionCall","src":"5033:18:29"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"4980:43:29"},"nodeType":"YulFunctionCall","src":"4980:72:29"},"nodeType":"YulExpressionStatement","src":"4980:72:29"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4817:9:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4829:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4837:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4848:4:29","type":""}],"src":"4727:332:29"},{"body":{"nodeType":"YulBlock","src":"5106:88:29","statements":[{"nodeType":"YulAssignment","src":"5116:30:29","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"5126:18:29"},"nodeType":"YulFunctionCall","src":"5126:20:29"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5116:6:29"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5175:6:29"},{"name":"size","nodeType":"YulIdentifier","src":"5183:4:29"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"5155:19:29"},"nodeType":"YulFunctionCall","src":"5155:33:29"},"nodeType":"YulExpressionStatement","src":"5155:33:29"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"5090:4:29","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"5099:6:29","type":""}],"src":"5065:129:29"},{"body":{"nodeType":"YulBlock","src":"5240:35:29","statements":[{"nodeType":"YulAssignment","src":"5250:19:29","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5266:2:29","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5260:5:29"},"nodeType":"YulFunctionCall","src":"5260:9:29"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5250:6:29"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"5233:6:29","type":""}],"src":"5200:75:29"},{"body":{"nodeType":"YulBlock","src":"5388:229:29","statements":[{"body":{"nodeType":"YulBlock","src":"5493:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"5495:16:29"},"nodeType":"YulFunctionCall","src":"5495:18:29"},"nodeType":"YulExpressionStatement","src":"5495:18:29"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5465:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"5473:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5462:2:29"},"nodeType":"YulFunctionCall","src":"5462:30:29"},"nodeType":"YulIf","src":"5459:2:29"},{"nodeType":"YulAssignment","src":"5525:25:29","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5537:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"5545:4:29","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"5533:3:29"},"nodeType":"YulFunctionCall","src":"5533:17:29"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"5525:4:29"}]},{"nodeType":"YulAssignment","src":"5587:23:29","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"5599:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"5605:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5595:3:29"},"nodeType":"YulFunctionCall","src":"5595:15:29"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"5587:4:29"}]}]},"name":"array_allocation_size_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"5372:6:29","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"5383:4:29","type":""}],"src":"5281:336:29"},{"body":{"nodeType":"YulBlock","src":"5690:241:29","statements":[{"body":{"nodeType":"YulBlock","src":"5795:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"5797:16:29"},"nodeType":"YulFunctionCall","src":"5797:18:29"},"nodeType":"YulExpressionStatement","src":"5797:18:29"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5767:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"5775:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5764:2:29"},"nodeType":"YulFunctionCall","src":"5764:30:29"},"nodeType":"YulIf","src":"5761:2:29"},{"nodeType":"YulAssignment","src":"5827:37:29","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5857:6:29"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"5835:21:29"},"nodeType":"YulFunctionCall","src":"5835:29:29"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"5827:4:29"}]},{"nodeType":"YulAssignment","src":"5901:23:29","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"5913:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"5919:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5909:3:29"},"nodeType":"YulFunctionCall","src":"5909:15:29"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"5901:4:29"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"5674:6:29","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"5685:4:29","type":""}],"src":"5623:308:29"},{"body":{"nodeType":"YulBlock","src":"5996:40:29","statements":[{"nodeType":"YulAssignment","src":"6007:22:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6023:5:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6017:5:29"},"nodeType":"YulFunctionCall","src":"6017:12:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6007:6:29"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5979:5:29","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"5989:6:29","type":""}],"src":"5937:99:29"},{"body":{"nodeType":"YulBlock","src":"6156:34:29","statements":[{"nodeType":"YulAssignment","src":"6166:18:29","value":{"name":"pos","nodeType":"YulIdentifier","src":"6181:3:29"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"6166:11:29"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6128:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"6133:6:29","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"6144:11:29","type":""}],"src":"6042:148:29"},{"body":{"nodeType":"YulBlock","src":"6241:51:29","statements":[{"nodeType":"YulAssignment","src":"6251:35:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6280:5:29"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"6262:17:29"},"nodeType":"YulFunctionCall","src":"6262:24:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"6251:7:29"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6223:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"6233:7:29","type":""}],"src":"6196:96:29"},{"body":{"nodeType":"YulBlock","src":"6343:81:29","statements":[{"nodeType":"YulAssignment","src":"6353:65:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6368:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"6375:42:29","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6364:3:29"},"nodeType":"YulFunctionCall","src":"6364:54:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"6353:7:29"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6325:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"6335:7:29","type":""}],"src":"6298:126:29"},{"body":{"nodeType":"YulBlock","src":"6475:32:29","statements":[{"nodeType":"YulAssignment","src":"6485:16:29","value":{"name":"value","nodeType":"YulIdentifier","src":"6496:5:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"6485:7:29"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6457:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"6467:7:29","type":""}],"src":"6430:77:29"},{"body":{"nodeType":"YulBlock","src":"6562:258:29","statements":[{"nodeType":"YulVariableDeclaration","src":"6572:10:29","value":{"kind":"number","nodeType":"YulLiteral","src":"6581:1:29","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"6576:1:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"6641:63:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6666:3:29"},{"name":"i","nodeType":"YulIdentifier","src":"6671:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6662:3:29"},"nodeType":"YulFunctionCall","src":"6662:11:29"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6685:3:29"},{"name":"i","nodeType":"YulIdentifier","src":"6690:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6681:3:29"},"nodeType":"YulFunctionCall","src":"6681:11:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6675:5:29"},"nodeType":"YulFunctionCall","src":"6675:18:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6655:6:29"},"nodeType":"YulFunctionCall","src":"6655:39:29"},"nodeType":"YulExpressionStatement","src":"6655:39:29"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6602:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"6605:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6599:2:29"},"nodeType":"YulFunctionCall","src":"6599:13:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"6613:19:29","statements":[{"nodeType":"YulAssignment","src":"6615:15:29","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6624:1:29"},{"kind":"number","nodeType":"YulLiteral","src":"6627:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6620:3:29"},"nodeType":"YulFunctionCall","src":"6620:10:29"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"6615:1:29"}]}]},"pre":{"nodeType":"YulBlock","src":"6595:3:29","statements":[]},"src":"6591:113:29"},{"body":{"nodeType":"YulBlock","src":"6738:76:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6788:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"6793:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6784:3:29"},"nodeType":"YulFunctionCall","src":"6784:16:29"},{"kind":"number","nodeType":"YulLiteral","src":"6802:1:29","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6777:6:29"},"nodeType":"YulFunctionCall","src":"6777:27:29"},"nodeType":"YulExpressionStatement","src":"6777:27:29"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6719:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"6722:6:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6716:2:29"},"nodeType":"YulFunctionCall","src":"6716:13:29"},"nodeType":"YulIf","src":"6713:2:29"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"6544:3:29","type":""},{"name":"dst","nodeType":"YulTypedName","src":"6549:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"6554:6:29","type":""}],"src":"6513:307:29"},{"body":{"nodeType":"YulBlock","src":"6877:269:29","statements":[{"nodeType":"YulAssignment","src":"6887:22:29","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"6901:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"6907:1:29","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6897:3:29"},"nodeType":"YulFunctionCall","src":"6897:12:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6887:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"6918:38:29","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"6948:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"6954:1:29","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6944:3:29"},"nodeType":"YulFunctionCall","src":"6944:12:29"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"6922:18:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"6995:51:29","statements":[{"nodeType":"YulAssignment","src":"7009:27:29","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7023:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"7031:4:29","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7019:3:29"},"nodeType":"YulFunctionCall","src":"7019:17:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"7009:6:29"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"6975:18:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6968:6:29"},"nodeType":"YulFunctionCall","src":"6968:26:29"},"nodeType":"YulIf","src":"6965:2:29"},{"body":{"nodeType":"YulBlock","src":"7098:42:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"7112:16:29"},"nodeType":"YulFunctionCall","src":"7112:18:29"},"nodeType":"YulExpressionStatement","src":"7112:18:29"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"7062:18:29"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7085:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"7093:2:29","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7082:2:29"},"nodeType":"YulFunctionCall","src":"7082:14:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7059:2:29"},"nodeType":"YulFunctionCall","src":"7059:38:29"},"nodeType":"YulIf","src":"7056:2:29"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"6861:4:29","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"6870:6:29","type":""}],"src":"6826:320:29"},{"body":{"nodeType":"YulBlock","src":"7195:238:29","statements":[{"nodeType":"YulVariableDeclaration","src":"7205:58:29","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7227:6:29"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"7257:4:29"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"7235:21:29"},"nodeType":"YulFunctionCall","src":"7235:27:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7223:3:29"},"nodeType":"YulFunctionCall","src":"7223:40:29"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"7209:10:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"7374:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7376:16:29"},"nodeType":"YulFunctionCall","src":"7376:18:29"},"nodeType":"YulExpressionStatement","src":"7376:18:29"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7317:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"7329:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7314:2:29"},"nodeType":"YulFunctionCall","src":"7314:34:29"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7353:10:29"},{"name":"memPtr","nodeType":"YulIdentifier","src":"7365:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7350:2:29"},"nodeType":"YulFunctionCall","src":"7350:22:29"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7311:2:29"},"nodeType":"YulFunctionCall","src":"7311:62:29"},"nodeType":"YulIf","src":"7308:2:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7412:2:29","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7416:10:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7405:6:29"},"nodeType":"YulFunctionCall","src":"7405:22:29"},"nodeType":"YulExpressionStatement","src":"7405:22:29"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7181:6:29","type":""},{"name":"size","nodeType":"YulTypedName","src":"7189:4:29","type":""}],"src":"7152:281:29"},{"body":{"nodeType":"YulBlock","src":"7467:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7484:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7487:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7477:6:29"},"nodeType":"YulFunctionCall","src":"7477:88:29"},"nodeType":"YulExpressionStatement","src":"7477:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7581:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"7584:4:29","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7574:6:29"},"nodeType":"YulFunctionCall","src":"7574:15:29"},"nodeType":"YulExpressionStatement","src":"7574:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7605:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7608:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7598:6:29"},"nodeType":"YulFunctionCall","src":"7598:15:29"},"nodeType":"YulExpressionStatement","src":"7598:15:29"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"7439:180:29"},{"body":{"nodeType":"YulBlock","src":"7653:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7670:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7673:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7663:6:29"},"nodeType":"YulFunctionCall","src":"7663:88:29"},"nodeType":"YulExpressionStatement","src":"7663:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7767:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"7770:4:29","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7760:6:29"},"nodeType":"YulFunctionCall","src":"7760:15:29"},"nodeType":"YulExpressionStatement","src":"7760:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7791:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7794:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7784:6:29"},"nodeType":"YulFunctionCall","src":"7784:15:29"},"nodeType":"YulExpressionStatement","src":"7784:15:29"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"7625:180:29"},{"body":{"nodeType":"YulBlock","src":"7859:54:29","statements":[{"nodeType":"YulAssignment","src":"7869:38:29","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7887:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"7894:2:29","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7883:3:29"},"nodeType":"YulFunctionCall","src":"7883:14:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7903:2:29","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"7899:3:29"},"nodeType":"YulFunctionCall","src":"7899:7:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7879:3:29"},"nodeType":"YulFunctionCall","src":"7879:28:29"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"7869:6:29"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7842:5:29","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"7852:6:29","type":""}],"src":"7811:102:29"},{"body":{"nodeType":"YulBlock","src":"7962:79:29","statements":[{"body":{"nodeType":"YulBlock","src":"8019:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8028:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8031:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8021:6:29"},"nodeType":"YulFunctionCall","src":"8021:12:29"},"nodeType":"YulExpressionStatement","src":"8021:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7985:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8010:5:29"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"7992:17:29"},"nodeType":"YulFunctionCall","src":"7992:24:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7982:2:29"},"nodeType":"YulFunctionCall","src":"7982:35:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7975:6:29"},"nodeType":"YulFunctionCall","src":"7975:43:29"},"nodeType":"YulIf","src":"7972:2:29"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7955:5:29","type":""}],"src":"7919:122:29"},{"body":{"nodeType":"YulBlock","src":"8090:79:29","statements":[{"body":{"nodeType":"YulBlock","src":"8147:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8156:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8159:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8149:6:29"},"nodeType":"YulFunctionCall","src":"8149:12:29"},"nodeType":"YulExpressionStatement","src":"8149:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8113:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8138:5:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"8120:17:29"},"nodeType":"YulFunctionCall","src":"8120:24:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"8110:2:29"},"nodeType":"YulFunctionCall","src":"8110:35:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8103:6:29"},"nodeType":"YulFunctionCall","src":"8103:43:29"},"nodeType":"YulIf","src":"8100:2:29"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8083:5:29","type":""}],"src":"8047:122:29"}]},"contents":"{\n\n    // struct ICredential.Verifier[]\n    function abi_decode_available_length_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr_fromMemory(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let src := offset\n        if gt(add(src, mul(length, 0x40)), end) {\n            revert(0, 0)\n        }\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_struct$_Verifier_$993_memory_ptr_fromMemory(elementPos, end))\n            dst := add(dst, 0x20)\n            src := add(src, 0x40)\n        }\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert(0, 0) }\n        copy_memory_to_memory(src, dst, length)\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    // struct ICredential.Verifier[]\n    function abi_decode_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    // struct ICredential.Verifier\n    function abi_decode_t_struct$_Verifier_$993_memory_ptr_fromMemory(headStart, end) -> value {\n        if slt(sub(end, headStart), 0x40) { revert(0, 0) }\n        value := allocate_memory(0x40)\n\n        {\n            // contractAddress\n\n            let offset := 0\n\n            mstore(add(value, 0x00), abi_decode_t_address_fromMemory(add(headStart, offset), end))\n\n        }\n\n        {\n            // merkleTreeDepth\n\n            let offset := 32\n\n            mstore(add(value, 0x20), abi_decode_t_uint256_fromMemory(add(headStart, offset), end))\n\n        }\n\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptrt_addresst_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n\n        {\n\n            let offset := mload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value0 := abi_decode_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value2 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value3 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n","id":29,"language":"Yul","name":"#utility.yul"}],"linkReferences":{"@creds-protocol/contracts/zk-kit/incremental-merkle-tree.sol/IncrementalBinaryTree.sol":{"IncrementalBinaryTree":[{"length":20,"start":4467},{"length":20,"start":4747}]}},"object":"608060405273414b893562f46f5180971c3389784a447581b2d3600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200006657600080fd5b5060405162001a7a38038062001a7a83398181016040528101906200008c91906200055b565b8383838360005b84518160ff1610156200018e57848160ff1681518110620000dd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000015160066000878460ff16815181106200012a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160200151815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600101905062000093565b5082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160029080519060200190620001e892919062000316565b5080600390805190602001906200020192919062000316565b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c2551c8284306040518363ffffffff1660e01b81526004016200026192919062000673565b600060405180830381600087803b1580156200027c57600080fd5b505af115801562000291573d6000803e3d6000fd5b5050505080604051620002a591906200065a565b604051809103902082604051620002bd91906200065a565b60405180910390208473ffffffffffffffffffffffffffffffffffffffff167ff51d47712d8574bf3715cf1db64ebb5a5c264fe57ff450433484f786f742ecec60405160405180910390a45050505050505050620008c7565b8280546200032490620007b8565b90600052602060002090601f01602090048101928262000348576000855562000394565b82601f106200036357805160ff191683800117855562000394565b8280016001018555821562000394579182015b828111156200039357825182559160200191906001019062000376565b5b509050620003a39190620003a7565b5090565b5b80821115620003c2576000816000905550600101620003a8565b5090565b6000620003dd620003d784620006c9565b620006a0565b90508083825260208201905082856040860282011115620003fd57600080fd5b60005b85811015620004315781620004168882620004f1565b84526020840193506040830192505060018101905062000400565b5050509392505050565b6000620004526200044c84620006f8565b620006a0565b9050828152602081018484840111156200046b57600080fd5b6200047884828562000782565b509392505050565b600081519050620004918162000893565b92915050565b600082601f830112620004a957600080fd5b8151620004bb848260208601620003c6565b91505092915050565b600082601f830112620004d657600080fd5b8151620004e88482602086016200043b565b91505092915050565b6000604082840312156200050457600080fd5b620005106040620006a0565b90506000620005228482850162000480565b6000830152506020620005388482850162000544565b60208301525092915050565b6000815190506200055581620008ad565b92915050565b600080600080608085870312156200057257600080fd5b600085015167ffffffffffffffff8111156200058d57600080fd5b6200059b8782880162000497565b9450506020620005ae8782880162000480565b935050604085015167ffffffffffffffff811115620005cc57600080fd5b620005da87828801620004c4565b925050606085015167ffffffffffffffff811115620005f857600080fd5b6200060687828801620004c4565b91505092959194509250565b6200061d8162000744565b82525050565b600062000630826200072e565b6200063c818562000739565b93506200064e81856020860162000782565b80840191505092915050565b600062000668828462000623565b915081905092915050565b60006040820190506200068a600083018562000612565b62000699602083018462000612565b9392505050565b6000620006ac620006bf565b9050620006ba8282620007ee565b919050565b6000604051905090565b600067ffffffffffffffff821115620006e757620006e662000853565b5b602082029050602081019050919050565b600067ffffffffffffffff82111562000716576200071562000853565b5b620007218262000882565b9050602081019050919050565b600081519050919050565b600081905092915050565b6000620007518262000758565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015620007a257808201518184015260208101905062000785565b83811115620007b2576000848401525b50505050565b60006002820490506001821680620007d157607f821691505b60208210811415620007e857620007e762000824565b5b50919050565b620007f98262000882565b810181811067ffffffffffffffff821117156200081b576200081a62000853565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6200089e8162000744565b8114620008aa57600080fd5b50565b620008b88162000778565b8114620008c457600080fd5b50565b6111a380620008d76000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063c308dd5b11610066578063c308dd5b1461022a578063dabc4d5114610248578063e69743cd14610278578063eb49610614610294576100cf565b80638da5cb5b146101c0578063909d9ef7146101de578063ac1eff68146101fa576100cf565b80632e9868f8146100d4578063439d7275146100f25780634ce39ead14610110578063638480be1461012e5780636389e1071461015e57806381cc7a451461018e575b600080fd5b6100dc6102b2565b6040516100e99190610dba565b60405180910390f35b6100fa610340565b6040516101079190610dba565b60405180910390f35b6101186103ce565b6040516101259190610cec565b60405180910390f35b61014860048036038101906101439190610ba4565b6103f4565b6040516101559190610e3c565b60405180910390f35b61017860048036038101906101739190610ba4565b610413565b6040516101859190610e3c565b60405180910390f35b6101a860048036038101906101a39190610ba4565b610432565b6040516101b793929190610d07565b60405180910390f35b6101c8610504565b6040516101d59190610cec565b60405180910390f35b6101f860048036038101906101f39190610c09565b61052a565b005b610214600480360381019061020f9190610ba4565b610594565b6040516102219190610d9f565b60405180910390f35b6102326105c7565b60405161023f9190610cec565b60405180910390f35b610262600480360381019061025d9190610ba4565b6105ed565b60405161026f9190610e3c565b60405180910390f35b610292600480360381019061028d9190610bcd565b61060c565b005b61029c61061a565b6040516102a99190610e3c565b60405180910390f35b600280546102bf90611055565b80601f01602080910402602001604051908101604052809291908181526020018280546102eb90611055565b80156103385780601f1061030d57610100808354040283529160200191610338565b820191906000526020600020905b81548152906001019060200180831161031b57829003601f168201915b505050505081565b6003805461034d90611055565b80601f016020809104026020016040519081016040528092919081815260200182805461037990611055565b80156103c65780601f1061039b576101008083540402835291602001916103c6565b820191906000526020600020905b8154815290600101906020018083116103a957829003601f168201915b505050505081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000838152602001908152602001600020600201549050919050565b6000806000838152602001908152602001600020600001549050919050565b60076020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101805461047b90611055565b80601f01602080910402602001604051908101604052809291908181526020018280546104a790611055565b80156104f45780601f106104c9576101008083540402835291602001916104f4565b820191906000526020600020905b8154815290600101906020018083116104d757829003601f168201915b5050505050908060020154905083565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006105366008610620565b9050610542600861062e565b61054f8185853386610644565b7f2ed4f0a950535d9dbe363dbcdaedbbdf03aa9f33d5b1b70b74554debef4d10f43382868686604051610586959493929190610d45565b60405180910390a150505050565b60066020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000838152602001908152602001600020600101549050919050565b61061682826107a5565b5050565b60045481565b600081600001549050919050565b6001816000016000828254019250508190555050565b83600073ffffffffffffffffffffffffffffffffffffffff166006600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156106df576040517f679101ad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106eb338787876107ed565b826007600088815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160076000888152602001908152602001600020600101908051906020019061076a929190610a84565b50610e10600760008881526020019081526020016000206002018190555060016004546107979190610f29565b600481905550505050505050565b6107af828261095d565b60006107ba836105ed565b90504260076000858152602001908152602001600020600301600083815260200190815260200160002081905550505050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018310610846576040517fe730108f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061085184610413565b14610888576040517f632ab44600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008084815260200190815260200160002073__$fb9ee77876a75724f11f9f12d9558a3f31$__631095fbb4909184846040518463ffffffff1660e01b81526004016108d693929190610e05565b60006040518083038186803b1580156108ee57600080fd5b505af4158015610902573d6000803e3d6000fd5b50505050828473ffffffffffffffffffffffffffffffffffffffff167f8cd7e348e0ad6531fc8e95ec90286ba9246aa70c3d94d7fca9eb8afd6e78c35e848460405161094f929190610e57565b60405180910390a350505050565b600061096883610413565b14156109a0576040517f84124a0d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008083815260200190815260200160002073__$fb9ee77876a75724f11f9f12d9558a3f31$__63168703fa9091836040518363ffffffff1660e01b81526004016109ec929190610ddc565b60006040518083038186803b158015610a0457600080fd5b505af4158015610a18573d6000803e3d6000fd5b505050506000610a27836105ed565b905060006001610a36856103f4565b610a409190610f7f565b9050837fe5b5631e8acf74ed776b8262e656d2b63e56882d6eb3e7d6e8b8c09661f2ca03828585604051610a7693929190610e80565b60405180910390a250505050565b828054610a9090611055565b90600052602060002090601f016020900481019282610ab25760008555610af9565b82601f10610acb57805160ff1916838001178555610af9565b82800160010185558215610af9579182015b82811115610af8578251825591602001919060010190610add565b5b509050610b069190610b0a565b5090565b5b80821115610b23576000816000905550600101610b0b565b5090565b6000610b3a610b3584610edc565b610eb7565b905082815260208101848484011115610b5257600080fd5b610b5d848285611013565b509392505050565b600082601f830112610b7657600080fd5b8135610b86848260208601610b27565b91505092915050565b600081359050610b9e81611156565b92915050565b600060208284031215610bb657600080fd5b6000610bc484828501610b8f565b91505092915050565b60008060408385031215610be057600080fd5b6000610bee85828601610b8f565b9250506020610bff85828601610b8f565b9150509250929050565b600080600060608486031215610c1e57600080fd5b6000610c2c86828701610b8f565b9350506020610c3d86828701610b8f565b925050604084013567ffffffffffffffff811115610c5a57600080fd5b610c6686828701610b65565b9150509250925092565b610c7981610fb3565b82525050565b610c8881610fef565b82525050565b6000610c9982610f0d565b610ca38185610f18565b9350610cb3818560208601611022565b610cbc81611145565b840191505092915050565b8082525050565b610cd781610fe5565b82525050565b610ce681610fe5565b82525050565b6000602082019050610d016000830184610c70565b92915050565b6000606082019050610d1c6000830186610c70565b8181036020830152610d2e8185610c8e565b9050610d3d6040830184610cce565b949350505050565b600060a082019050610d5a6000830188610c70565b610d676020830187610cce565b610d746040830186610cce565b610d816060830185610cce565b8181036080830152610d938184610c8e565b90509695505050505050565b6000602082019050610db46000830184610c7f565b92915050565b60006020820190508181036000830152610dd48184610c8e565b905092915050565b6000604082019050610df16000830185610cc7565b610dfe6020830184610cdd565b9392505050565b6000606082019050610e1a6000830186610cc7565b610e276020830185610cdd565b610e346040830184610cdd565b949350505050565b6000602082019050610e516000830184610cce565b92915050565b6000604082019050610e6c6000830185610cce565b610e796020830184610cce565b9392505050565b6000606082019050610e956000830186610cce565b610ea26020830185610cce565b610eaf6040830184610cce565b949350505050565b6000610ec1610ed2565b9050610ecd8282611087565b919050565b6000604051905090565b600067ffffffffffffffff821115610ef757610ef6611116565b5b610f0082611145565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000610f3482610fe5565b9150610f3f83610fe5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610f7457610f736110b8565b5b828201905092915050565b6000610f8a82610fe5565b9150610f9583610fe5565b925082821015610fa857610fa76110b8565b5b828203905092915050565b6000610fbe82610fc5565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610ffa82611001565b9050919050565b600061100c82610fc5565b9050919050565b82818337600083830152505050565b60005b83811015611040578082015181840152602081019050611025565b8381111561104f576000848401525b50505050565b6000600282049050600182168061106d57607f821691505b60208210811415611081576110806110e7565b5b50919050565b61109082611145565b810181811067ffffffffffffffff821117156110af576110ae611116565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b61115f81610fe5565b811461116a57600080fd5b5056fea2646970667358221220dd2571cc5f732723909b8df8a96a3e9c98a295162094be23a0e6494c2d49a4d764736f6c63430008040033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH20 0x414B893562F46F5180971C3389784A447581B2D3 PUSH1 0x5 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLVALUE DUP1 ISZERO PUSH3 0x66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1A7A CODESIZE SUB DUP1 PUSH3 0x1A7A DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x8C SWAP2 SWAP1 PUSH3 0x55B JUMP JUMPDEST DUP4 DUP4 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 PUSH1 0xFF AND LT ISZERO PUSH3 0x18E JUMPI DUP5 DUP2 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH3 0xDD JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x6 PUSH1 0x0 DUP8 DUP5 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH3 0x12A JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH3 0x93 JUMP JUMPDEST POP DUP3 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0x2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x1E8 SWAP3 SWAP2 SWAP1 PUSH3 0x316 JUMP JUMPDEST POP DUP1 PUSH1 0x3 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x201 SWAP3 SWAP2 SWAP1 PUSH3 0x316 JUMP JUMPDEST POP PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xC2551C82 DUP5 ADDRESS PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x261 SWAP3 SWAP2 SWAP1 PUSH3 0x673 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x27C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x291 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH1 0x40 MLOAD PUSH3 0x2A5 SWAP2 SWAP1 PUSH3 0x65A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP3 PUSH1 0x40 MLOAD PUSH3 0x2BD SWAP2 SWAP1 PUSH3 0x65A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF51D47712D8574BF3715CF1DB64EBB5A5C264FE57FF450433484F786F742ECEC PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP POP PUSH3 0x8C7 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x324 SWAP1 PUSH3 0x7B8 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x348 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x394 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x363 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x394 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x394 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x393 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x376 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0x3A3 SWAP2 SWAP1 PUSH3 0x3A7 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x3C2 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x3A8 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x3DD PUSH3 0x3D7 DUP5 PUSH3 0x6C9 JUMP JUMPDEST PUSH3 0x6A0 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP DUP3 DUP6 PUSH1 0x40 DUP7 MUL DUP3 ADD GT ISZERO PUSH3 0x3FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH3 0x431 JUMPI DUP2 PUSH3 0x416 DUP9 DUP3 PUSH3 0x4F1 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x40 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x400 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x452 PUSH3 0x44C DUP5 PUSH3 0x6F8 JUMP JUMPDEST PUSH3 0x6A0 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x46B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x478 DUP5 DUP3 DUP6 PUSH3 0x782 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x491 DUP2 PUSH3 0x893 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x4A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x4BB DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x3C6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x4D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x4E8 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x43B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x504 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x510 PUSH1 0x40 PUSH3 0x6A0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH3 0x522 DUP5 DUP3 DUP6 ADD PUSH3 0x480 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH3 0x538 DUP5 DUP3 DUP6 ADD PUSH3 0x544 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x555 DUP2 PUSH3 0x8AD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x572 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP6 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x58D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x59B DUP8 DUP3 DUP9 ADD PUSH3 0x497 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH3 0x5AE DUP8 DUP3 DUP9 ADD PUSH3 0x480 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x5CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x5DA DUP8 DUP3 DUP9 ADD PUSH3 0x4C4 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x5F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x606 DUP8 DUP3 DUP9 ADD PUSH3 0x4C4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH3 0x61D DUP2 PUSH3 0x744 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x630 DUP3 PUSH3 0x72E JUMP JUMPDEST PUSH3 0x63C DUP2 DUP6 PUSH3 0x739 JUMP JUMPDEST SWAP4 POP PUSH3 0x64E DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH3 0x782 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x668 DUP3 DUP5 PUSH3 0x623 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH3 0x68A PUSH1 0x0 DUP4 ADD DUP6 PUSH3 0x612 JUMP JUMPDEST PUSH3 0x699 PUSH1 0x20 DUP4 ADD DUP5 PUSH3 0x612 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x6AC PUSH3 0x6BF JUMP JUMPDEST SWAP1 POP PUSH3 0x6BA DUP3 DUP3 PUSH3 0x7EE JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x6E7 JUMPI PUSH3 0x6E6 PUSH3 0x853 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x716 JUMPI PUSH3 0x715 PUSH3 0x853 JUMP JUMPDEST JUMPDEST PUSH3 0x721 DUP3 PUSH3 0x882 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x751 DUP3 PUSH3 0x758 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x7A2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x785 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x7B2 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x7D1 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x7E8 JUMPI PUSH3 0x7E7 PUSH3 0x824 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x7F9 DUP3 PUSH3 0x882 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x81B JUMPI PUSH3 0x81A PUSH3 0x853 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x89E DUP2 PUSH3 0x744 JUMP JUMPDEST DUP2 EQ PUSH3 0x8AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0x8B8 DUP2 PUSH3 0x778 JUMP JUMPDEST DUP2 EQ PUSH3 0x8C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x11A3 DUP1 PUSH3 0x8D7 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xC308DD5B GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xC308DD5B EQ PUSH2 0x22A JUMPI DUP1 PUSH4 0xDABC4D51 EQ PUSH2 0x248 JUMPI DUP1 PUSH4 0xE69743CD EQ PUSH2 0x278 JUMPI DUP1 PUSH4 0xEB496106 EQ PUSH2 0x294 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1C0 JUMPI DUP1 PUSH4 0x909D9EF7 EQ PUSH2 0x1DE JUMPI DUP1 PUSH4 0xAC1EFF68 EQ PUSH2 0x1FA JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x2E9868F8 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x439D7275 EQ PUSH2 0xF2 JUMPI DUP1 PUSH4 0x4CE39EAD EQ PUSH2 0x110 JUMPI DUP1 PUSH4 0x638480BE EQ PUSH2 0x12E JUMPI DUP1 PUSH4 0x6389E107 EQ PUSH2 0x15E JUMPI DUP1 PUSH4 0x81CC7A45 EQ PUSH2 0x18E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDC PUSH2 0x2B2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0xDBA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFA PUSH2 0x340 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x107 SWAP2 SWAP1 PUSH2 0xDBA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x118 PUSH2 0x3CE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x125 SWAP2 SWAP1 PUSH2 0xCEC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x148 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x143 SWAP2 SWAP1 PUSH2 0xBA4 JUMP JUMPDEST PUSH2 0x3F4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x155 SWAP2 SWAP1 PUSH2 0xE3C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x178 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x173 SWAP2 SWAP1 PUSH2 0xBA4 JUMP JUMPDEST PUSH2 0x413 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x185 SWAP2 SWAP1 PUSH2 0xE3C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1A3 SWAP2 SWAP1 PUSH2 0xBA4 JUMP JUMPDEST PUSH2 0x432 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xD07 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C8 PUSH2 0x504 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D5 SWAP2 SWAP1 PUSH2 0xCEC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F3 SWAP2 SWAP1 PUSH2 0xC09 JUMP JUMPDEST PUSH2 0x52A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x214 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x20F SWAP2 SWAP1 PUSH2 0xBA4 JUMP JUMPDEST PUSH2 0x594 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x221 SWAP2 SWAP1 PUSH2 0xD9F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x232 PUSH2 0x5C7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23F SWAP2 SWAP1 PUSH2 0xCEC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x262 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x25D SWAP2 SWAP1 PUSH2 0xBA4 JUMP JUMPDEST PUSH2 0x5ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26F SWAP2 SWAP1 PUSH2 0xE3C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x292 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x28D SWAP2 SWAP1 PUSH2 0xBCD JUMP JUMPDEST PUSH2 0x60C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x29C PUSH2 0x61A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A9 SWAP2 SWAP1 PUSH2 0xE3C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH2 0x2BF SWAP1 PUSH2 0x1055 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2EB SWAP1 PUSH2 0x1055 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x338 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x30D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x338 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x31B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH2 0x34D SWAP1 PUSH2 0x1055 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x379 SWAP1 PUSH2 0x1055 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3C6 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x39B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3C6 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3A9 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x47B SWAP1 PUSH2 0x1055 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x4A7 SWAP1 PUSH2 0x1055 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4F4 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4C9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x4F4 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x4D7 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 POP DUP4 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x536 PUSH1 0x8 PUSH2 0x620 JUMP JUMPDEST SWAP1 POP PUSH2 0x542 PUSH1 0x8 PUSH2 0x62E JUMP JUMPDEST PUSH2 0x54F DUP2 DUP6 DUP6 CALLER DUP7 PUSH2 0x644 JUMP JUMPDEST PUSH32 0x2ED4F0A950535D9DBE363DBCDAEDBBDF03AA9F33D5B1B70B74554DEBEF4D10F4 CALLER DUP3 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x586 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xD45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x616 DUP3 DUP3 PUSH2 0x7A5 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST DUP4 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x6 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x6DF JUMPI PUSH1 0x40 MLOAD PUSH32 0x679101AD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x6EB CALLER DUP8 DUP8 DUP8 PUSH2 0x7ED JUMP JUMPDEST DUP3 PUSH1 0x7 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0x7 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x76A SWAP3 SWAP2 SWAP1 PUSH2 0xA84 JUMP JUMPDEST POP PUSH2 0xE10 PUSH1 0x7 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x4 SLOAD PUSH2 0x797 SWAP2 SWAP1 PUSH2 0xF29 JUMP JUMPDEST PUSH1 0x4 DUP2 SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x7AF DUP3 DUP3 PUSH2 0x95D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7BA DUP4 PUSH2 0x5ED JUMP JUMPDEST SWAP1 POP TIMESTAMP PUSH1 0x7 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH32 0x30644E72E131A029B85045B68181585D2833E84879B9709143E1F593F0000001 DUP4 LT PUSH2 0x846 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE730108F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x851 DUP5 PUSH2 0x413 JUMP JUMPDEST EQ PUSH2 0x888 JUMPI PUSH1 0x40 MLOAD PUSH32 0x632AB44600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH20 0x0 PUSH4 0x1095FBB4 SWAP1 SWAP2 DUP5 DUP5 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D6 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xE05 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x902 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP3 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8CD7E348E0AD6531FC8E95EC90286BA9246AA70C3D94D7FCA9EB8AFD6E78C35E DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x94F SWAP3 SWAP2 SWAP1 PUSH2 0xE57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x968 DUP4 PUSH2 0x413 JUMP JUMPDEST EQ ISZERO PUSH2 0x9A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x84124A0D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH20 0x0 PUSH4 0x168703FA SWAP1 SWAP2 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9EC SWAP3 SWAP2 SWAP1 PUSH2 0xDDC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA04 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xA18 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 PUSH2 0xA27 DUP4 PUSH2 0x5ED JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH2 0xA36 DUP6 PUSH2 0x3F4 JUMP JUMPDEST PUSH2 0xA40 SWAP2 SWAP1 PUSH2 0xF7F JUMP JUMPDEST SWAP1 POP DUP4 PUSH32 0xE5B5631E8ACF74ED776B8262E656D2B63E56882D6EB3E7D6E8B8C09661F2CA03 DUP3 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0xA76 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xE80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0xA90 SWAP1 PUSH2 0x1055 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0xAB2 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0xAF9 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0xACB JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0xAF9 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0xAF9 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0xAF8 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xADD JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0xB06 SWAP2 SWAP1 PUSH2 0xB0A JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0xB23 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0xB0B JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB3A PUSH2 0xB35 DUP5 PUSH2 0xEDC JUMP JUMPDEST PUSH2 0xEB7 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0xB52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB5D DUP5 DUP3 DUP6 PUSH2 0x1013 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xB76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xB86 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xB27 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB9E DUP2 PUSH2 0x1156 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBB6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBC4 DUP5 DUP3 DUP6 ADD PUSH2 0xB8F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBE0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBEE DUP6 DUP3 DUP7 ADD PUSH2 0xB8F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xBFF DUP6 DUP3 DUP7 ADD PUSH2 0xB8F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xC2C DUP7 DUP3 DUP8 ADD PUSH2 0xB8F JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xC3D DUP7 DUP3 DUP8 ADD PUSH2 0xB8F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC66 DUP7 DUP3 DUP8 ADD PUSH2 0xB65 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0xC79 DUP2 PUSH2 0xFB3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xC88 DUP2 PUSH2 0xFEF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC99 DUP3 PUSH2 0xF0D JUMP JUMPDEST PUSH2 0xCA3 DUP2 DUP6 PUSH2 0xF18 JUMP JUMPDEST SWAP4 POP PUSH2 0xCB3 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1022 JUMP JUMPDEST PUSH2 0xCBC DUP2 PUSH2 0x1145 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xCD7 DUP2 PUSH2 0xFE5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xCE6 DUP2 PUSH2 0xFE5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xD01 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC70 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xD1C PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xC70 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xD2E DUP2 DUP6 PUSH2 0xC8E JUMP JUMPDEST SWAP1 POP PUSH2 0xD3D PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xCCE JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0xD5A PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0xC70 JUMP JUMPDEST PUSH2 0xD67 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0xCCE JUMP JUMPDEST PUSH2 0xD74 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0xCCE JUMP JUMPDEST PUSH2 0xD81 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0xCCE JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0xD93 DUP2 DUP5 PUSH2 0xC8E JUMP JUMPDEST SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xDB4 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC7F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xDD4 DUP2 DUP5 PUSH2 0xC8E JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xDF1 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xCC7 JUMP JUMPDEST PUSH2 0xDFE PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xCDD JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xE1A PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xCC7 JUMP JUMPDEST PUSH2 0xE27 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xCDD JUMP JUMPDEST PUSH2 0xE34 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xCDD JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE51 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCCE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xE6C PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xCCE JUMP JUMPDEST PUSH2 0xE79 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xCCE JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xE95 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xCCE JUMP JUMPDEST PUSH2 0xEA2 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xCCE JUMP JUMPDEST PUSH2 0xEAF PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xCCE JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEC1 PUSH2 0xED2 JUMP JUMPDEST SWAP1 POP PUSH2 0xECD DUP3 DUP3 PUSH2 0x1087 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xEF7 JUMPI PUSH2 0xEF6 PUSH2 0x1116 JUMP JUMPDEST JUMPDEST PUSH2 0xF00 DUP3 PUSH2 0x1145 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF34 DUP3 PUSH2 0xFE5 JUMP JUMPDEST SWAP2 POP PUSH2 0xF3F DUP4 PUSH2 0xFE5 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0xF74 JUMPI PUSH2 0xF73 PUSH2 0x10B8 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF8A DUP3 PUSH2 0xFE5 JUMP JUMPDEST SWAP2 POP PUSH2 0xF95 DUP4 PUSH2 0xFE5 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0xFA8 JUMPI PUSH2 0xFA7 PUSH2 0x10B8 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFBE DUP3 PUSH2 0xFC5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFA DUP3 PUSH2 0x1001 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100C DUP3 PUSH2 0xFC5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1040 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1025 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x104F JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x106D JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1081 JUMPI PUSH2 0x1080 PUSH2 0x10E7 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1090 DUP3 PUSH2 0x1145 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x10AF JUMPI PUSH2 0x10AE PUSH2 0x1116 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x115F DUP2 PUSH2 0xFE5 JUMP JUMPDEST DUP2 EQ PUSH2 0x116A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDD 0x25 PUSH18 0xCC5F732723909B8DF8A96A3E9C98A2951620 SWAP5 0xBE 0x23 LOG0 0xE6 0x49 0x4C 0x2D 0x49 LOG4 0xD7 PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ","sourceMap":"177:1103:26:-:0;;;523:42:0;484:81;;;;;;;;;;;;;;;;;;;;446:216:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;611:10;623:7;632:11;645:13;1726:7:0;1721:211;1743:10;:17;1739:1;:21;;;1721:211;;;1831:10;1842:1;1831:13;;;;;;;;;;;;;;;;;;;;;;;;:29;;;1778:9;:40;1788:10;1799:1;1788:13;;;;;;;;;;;;;;;;;;;;;;;;:29;;;1778:40;;;;;;;;;;;;:83;;;;;;;;;;;;;;;;;;1904:3;;;;;1721:211;;;;1955:7;1941:11;;:21;;;;;;;;;;;;;;;;;;1984:11;1972:10;:23;;;;;;;;;;;;:::i;:::-;;2019:13;2005:12;:27;;;;;;;;;;;;:::i;:::-;;2065:21;;;;;;;;;;;2043:59;;;2103:7;2120:4;2043:83;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2180:13;2141:53;;;;;;:::i;:::-;;;;;;;;2167:11;2141:53;;;;;;:::i;:::-;;;;;;;;2158:7;2141:53;;;;;;;;;;;;1558:643;;;;446:216:26;;;;177:1103;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;44:752:29:-;176:5;201:106;217:89;299:6;217:89;:::i;:::-;201:106;:::i;:::-;192:115;;327:5;356:6;349:5;342:21;390:4;383:5;379:16;372:23;;416:6;466:3;458:4;450:6;446:17;441:3;437:27;434:36;431:2;;;495:1;492;485:12;431:2;531:1;516:274;541:6;538:1;535:13;516:274;;;609:3;638:73;707:3;695:10;638:73;:::i;:::-;633:3;626:86;741:4;736:3;732:14;725:21;;775:4;770:3;766:14;759:21;;576:214;563:1;560;556:9;551:14;;516:274;;;520:14;182:614;;;;;;;:::o;802:354::-;891:5;916:66;932:49;974:6;932:49;:::i;:::-;916:66;:::i;:::-;907:75;;1005:6;998:5;991:21;1043:4;1036:5;1032:16;1081:3;1072:6;1067:3;1063:16;1060:25;1057:2;;;1098:1;1095;1088:12;1057:2;1111:39;1143:6;1138:3;1133;1111:39;:::i;:::-;897:259;;;;;;:::o;1162:143::-;1219:5;1250:6;1244:13;1235:22;;1266:33;1293:5;1266:33;:::i;:::-;1225:80;;;;:::o;1348:368::-;1455:5;1504:3;1497:4;1489:6;1485:17;1481:27;1471:2;;1522:1;1519;1512:12;1471:2;1555:6;1549:13;1580:130;1706:3;1698:6;1691:4;1683:6;1679:17;1580:130;:::i;:::-;1571:139;;1461:255;;;;;:::o;1736:288::-;1803:5;1852:3;1845:4;1837:6;1833:17;1829:27;1819:2;;1870:1;1867;1860:12;1819:2;1903:6;1897:13;1928:90;2014:3;2006:6;1999:4;1991:6;1987:17;1928:90;:::i;:::-;1919:99;;1809:215;;;;;:::o;2065:562::-;2150:5;2194:4;2182:9;2177:3;2173:19;2169:30;2166:2;;;2212:1;2209;2202:12;2166:2;2234:21;2250:4;2234:21;:::i;:::-;2225:30;;2325:1;2365:60;2421:3;2412:6;2401:9;2397:22;2365:60;:::i;:::-;2358:4;2351:5;2347:16;2340:86;2265:172;2507:2;2548:60;2604:3;2595:6;2584:9;2580:22;2548:60;:::i;:::-;2541:4;2534:5;2530:16;2523:86;2447:173;2156:471;;;;:::o;2633:143::-;2690:5;2721:6;2715:13;2706:22;;2737:33;2764:5;2737:33;:::i;:::-;2696:80;;;;:::o;2782:1151::-;2949:6;2957;2965;2973;3022:3;3010:9;3001:7;2997:23;2993:33;2990:2;;;3039:1;3036;3029:12;2990:2;3103:1;3092:9;3088:17;3082:24;3133:18;3125:6;3122:30;3119:2;;;3165:1;3162;3155:12;3119:2;3193:114;3299:7;3290:6;3279:9;3275:22;3193:114;:::i;:::-;3183:124;;3053:264;3356:2;3382:64;3438:7;3429:6;3418:9;3414:22;3382:64;:::i;:::-;3372:74;;3327:129;3516:2;3505:9;3501:18;3495:25;3547:18;3539:6;3536:30;3533:2;;;3579:1;3576;3569:12;3533:2;3607:74;3673:7;3664:6;3653:9;3649:22;3607:74;:::i;:::-;3597:84;;3466:225;3751:2;3740:9;3736:18;3730:25;3782:18;3774:6;3771:30;3768:2;;;3814:1;3811;3804:12;3768:2;3842:74;3908:7;3899:6;3888:9;3884:22;3842:74;:::i;:::-;3832:84;;3701:225;2980:953;;;;;;;:::o;3939:118::-;4026:24;4044:5;4026:24;:::i;:::-;4021:3;4014:37;4004:53;;:::o;4063:377::-;4169:3;4197:39;4230:5;4197:39;:::i;:::-;4252:89;4334:6;4329:3;4252:89;:::i;:::-;4245:96;;4350:52;4395:6;4390:3;4383:4;4376:5;4372:16;4350:52;:::i;:::-;4427:6;4422:3;4418:16;4411:23;;4173:267;;;;;:::o;4446:275::-;4578:3;4600:95;4691:3;4682:6;4600:95;:::i;:::-;4593:102;;4712:3;4705:10;;4582:139;;;;:::o;4727:332::-;4848:4;4886:2;4875:9;4871:18;4863:26;;4899:71;4967:1;4956:9;4952:17;4943:6;4899:71;:::i;:::-;4980:72;5048:2;5037:9;5033:18;5024:6;4980:72;:::i;:::-;4853:206;;;;;:::o;5065:129::-;5099:6;5126:20;;:::i;:::-;5116:30;;5155:33;5183:4;5175:6;5155:33;:::i;:::-;5106:88;;;:::o;5200:75::-;5233:6;5266:2;5260:9;5250:19;;5240:35;:::o;5281:336::-;5383:4;5473:18;5465:6;5462:30;5459:2;;;5495:18;;:::i;:::-;5459:2;5545:4;5537:6;5533:17;5525:25;;5605:4;5599;5595:15;5587:23;;5388:229;;;:::o;5623:308::-;5685:4;5775:18;5767:6;5764:30;5761:2;;;5797:18;;:::i;:::-;5761:2;5835:29;5857:6;5835:29;:::i;:::-;5827:37;;5919:4;5913;5909:15;5901:23;;5690:241;;;:::o;5937:99::-;5989:6;6023:5;6017:12;6007:22;;5996:40;;;:::o;6042:148::-;6144:11;6181:3;6166:18;;6156:34;;;;:::o;6196:96::-;6233:7;6262:24;6280:5;6262:24;:::i;:::-;6251:35;;6241:51;;;:::o;6298:126::-;6335:7;6375:42;6368:5;6364:54;6353:65;;6343:81;;;:::o;6430:77::-;6467:7;6496:5;6485:16;;6475:32;;;:::o;6513:307::-;6581:1;6591:113;6605:6;6602:1;6599:13;6591:113;;;6690:1;6685:3;6681:11;6675:18;6671:1;6666:3;6662:11;6655:39;6627:2;6624:1;6620:10;6615:15;;6591:113;;;6722:6;6719:1;6716:13;6713:2;;;6802:1;6793:6;6788:3;6784:16;6777:27;6713:2;6562:258;;;;:::o;6826:320::-;6870:6;6907:1;6901:4;6897:12;6887:22;;6954:1;6948:4;6944:12;6975:18;6965:2;;7031:4;7023:6;7019:17;7009:27;;6965:2;7093;7085:6;7082:14;7062:18;7059:38;7056:2;;;7112:18;;:::i;:::-;7056:2;6877:269;;;;:::o;7152:281::-;7235:27;7257:4;7235:27;:::i;:::-;7227:6;7223:40;7365:6;7353:10;7350:22;7329:18;7317:10;7314:34;7311:62;7308:2;;;7376:18;;:::i;:::-;7308:2;7416:10;7412:2;7405:22;7195:238;;;:::o;7439:180::-;7487:77;7484:1;7477:88;7584:4;7581:1;7574:15;7608:4;7605:1;7598:15;7625:180;7673:77;7670:1;7663:88;7770:4;7767:1;7760:15;7794:4;7791:1;7784:15;7811:102;7852:6;7903:2;7899:7;7894:2;7887:5;7883:14;7879:28;7869:38;;7859:54;;;:::o;7919:122::-;7992:24;8010:5;7992:24;:::i;:::-;7985:5;7982:35;7972:2;;8031:1;8028;8021:12;7972:2;7962:79;:::o;8047:122::-;8120:24;8138:5;8120:24;:::i;:::-;8113:5;8110:35;8100:2;;8159:1;8156;8149:12;8100:2;8090:79;:::o;177:1103:26:-;;;;;;;"},"deployedBytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:11158:29","statements":[{"body":{"nodeType":"YulBlock","src":"91:261:29","statements":[{"nodeType":"YulAssignment","src":"101:75:29","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"168:6:29"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"126:41:29"},"nodeType":"YulFunctionCall","src":"126:49:29"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"110:15:29"},"nodeType":"YulFunctionCall","src":"110:66:29"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"101:5:29"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"192:5:29"},{"name":"length","nodeType":"YulIdentifier","src":"199:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"185:6:29"},"nodeType":"YulFunctionCall","src":"185:21:29"},"nodeType":"YulExpressionStatement","src":"185:21:29"},{"nodeType":"YulVariableDeclaration","src":"215:27:29","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"230:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"237:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"226:3:29"},"nodeType":"YulFunctionCall","src":"226:16:29"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"219:3:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"280:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"289:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"292:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"282:6:29"},"nodeType":"YulFunctionCall","src":"282:12:29"},"nodeType":"YulExpressionStatement","src":"282:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"261:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"266:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"257:3:29"},"nodeType":"YulFunctionCall","src":"257:16:29"},{"name":"end","nodeType":"YulIdentifier","src":"275:3:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"254:2:29"},"nodeType":"YulFunctionCall","src":"254:25:29"},"nodeType":"YulIf","src":"251:2:29"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"329:3:29"},{"name":"dst","nodeType":"YulIdentifier","src":"334:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"339:6:29"}],"functionName":{"name":"copy_calldata_to_memory","nodeType":"YulIdentifier","src":"305:23:29"},"nodeType":"YulFunctionCall","src":"305:41:29"},"nodeType":"YulExpressionStatement","src":"305:41:29"}]},"name":"abi_decode_available_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"64:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"69:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"77:3:29","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"85:5:29","type":""}],"src":"7:345:29"},{"body":{"nodeType":"YulBlock","src":"434:211:29","statements":[{"body":{"nodeType":"YulBlock","src":"483:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"492:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"495:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"485:6:29"},"nodeType":"YulFunctionCall","src":"485:12:29"},"nodeType":"YulExpressionStatement","src":"485:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"462:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"470:4:29","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"458:3:29"},"nodeType":"YulFunctionCall","src":"458:17:29"},{"name":"end","nodeType":"YulIdentifier","src":"477:3:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"454:3:29"},"nodeType":"YulFunctionCall","src":"454:27:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"447:6:29"},"nodeType":"YulFunctionCall","src":"447:35:29"},"nodeType":"YulIf","src":"444:2:29"},{"nodeType":"YulVariableDeclaration","src":"508:34:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"535:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"522:12:29"},"nodeType":"YulFunctionCall","src":"522:20:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"512:6:29","type":""}]},{"nodeType":"YulAssignment","src":"551:88:29","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"612:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"620:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"608:3:29"},"nodeType":"YulFunctionCall","src":"608:17:29"},{"name":"length","nodeType":"YulIdentifier","src":"627:6:29"},{"name":"end","nodeType":"YulIdentifier","src":"635:3:29"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"560:47:29"},"nodeType":"YulFunctionCall","src":"560:79:29"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"551:5:29"}]}]},"name":"abi_decode_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"412:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"420:3:29","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"428:5:29","type":""}],"src":"372:273:29"},{"body":{"nodeType":"YulBlock","src":"703:87:29","statements":[{"nodeType":"YulAssignment","src":"713:29:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"735:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"722:12:29"},"nodeType":"YulFunctionCall","src":"722:20:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"713:5:29"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"778:5:29"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"751:26:29"},"nodeType":"YulFunctionCall","src":"751:33:29"},"nodeType":"YulExpressionStatement","src":"751:33:29"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"681:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"689:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"697:5:29","type":""}],"src":"651:139:29"},{"body":{"nodeType":"YulBlock","src":"862:196:29","statements":[{"body":{"nodeType":"YulBlock","src":"908:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"917:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"920:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"910:6:29"},"nodeType":"YulFunctionCall","src":"910:12:29"},"nodeType":"YulExpressionStatement","src":"910:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"883:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"892:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"879:3:29"},"nodeType":"YulFunctionCall","src":"879:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"904:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"875:3:29"},"nodeType":"YulFunctionCall","src":"875:32:29"},"nodeType":"YulIf","src":"872:2:29"},{"nodeType":"YulBlock","src":"934:117:29","statements":[{"nodeType":"YulVariableDeclaration","src":"949:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"963:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"953:6:29","type":""}]},{"nodeType":"YulAssignment","src":"978:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1013:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"1024:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1009:3:29"},"nodeType":"YulFunctionCall","src":"1009:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1033:7:29"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"988:20:29"},"nodeType":"YulFunctionCall","src":"988:53:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"978:6:29"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"832:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"843:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"855:6:29","type":""}],"src":"796:262:29"},{"body":{"nodeType":"YulBlock","src":"1147:324:29","statements":[{"body":{"nodeType":"YulBlock","src":"1193:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1202:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1205:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1195:6:29"},"nodeType":"YulFunctionCall","src":"1195:12:29"},"nodeType":"YulExpressionStatement","src":"1195:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1168:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"1177:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1164:3:29"},"nodeType":"YulFunctionCall","src":"1164:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"1189:2:29","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1160:3:29"},"nodeType":"YulFunctionCall","src":"1160:32:29"},"nodeType":"YulIf","src":"1157:2:29"},{"nodeType":"YulBlock","src":"1219:117:29","statements":[{"nodeType":"YulVariableDeclaration","src":"1234:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"1248:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1238:6:29","type":""}]},{"nodeType":"YulAssignment","src":"1263:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1298:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"1309:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1294:3:29"},"nodeType":"YulFunctionCall","src":"1294:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1318:7:29"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"1273:20:29"},"nodeType":"YulFunctionCall","src":"1273:53:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1263:6:29"}]}]},{"nodeType":"YulBlock","src":"1346:118:29","statements":[{"nodeType":"YulVariableDeclaration","src":"1361:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"1375:2:29","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1365:6:29","type":""}]},{"nodeType":"YulAssignment","src":"1391:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1426:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"1437:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1422:3:29"},"nodeType":"YulFunctionCall","src":"1422:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1446:7:29"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"1401:20:29"},"nodeType":"YulFunctionCall","src":"1401:53:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1391:6:29"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1109:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1120:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1132:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1140:6:29","type":""}],"src":"1064:407:29"},{"body":{"nodeType":"YulBlock","src":"1587:555:29","statements":[{"body":{"nodeType":"YulBlock","src":"1633:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1642:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1645:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1635:6:29"},"nodeType":"YulFunctionCall","src":"1635:12:29"},"nodeType":"YulExpressionStatement","src":"1635:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1608:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"1617:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1604:3:29"},"nodeType":"YulFunctionCall","src":"1604:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"1629:2:29","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1600:3:29"},"nodeType":"YulFunctionCall","src":"1600:32:29"},"nodeType":"YulIf","src":"1597:2:29"},{"nodeType":"YulBlock","src":"1659:117:29","statements":[{"nodeType":"YulVariableDeclaration","src":"1674:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"1688:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1678:6:29","type":""}]},{"nodeType":"YulAssignment","src":"1703:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1738:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"1749:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1734:3:29"},"nodeType":"YulFunctionCall","src":"1734:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1758:7:29"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"1713:20:29"},"nodeType":"YulFunctionCall","src":"1713:53:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1703:6:29"}]}]},{"nodeType":"YulBlock","src":"1786:118:29","statements":[{"nodeType":"YulVariableDeclaration","src":"1801:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"1815:2:29","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1805:6:29","type":""}]},{"nodeType":"YulAssignment","src":"1831:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1866:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"1877:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1862:3:29"},"nodeType":"YulFunctionCall","src":"1862:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1886:7:29"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"1841:20:29"},"nodeType":"YulFunctionCall","src":"1841:53:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1831:6:29"}]}]},{"nodeType":"YulBlock","src":"1914:221:29","statements":[{"nodeType":"YulVariableDeclaration","src":"1929:46:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1960:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1971:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1956:3:29"},"nodeType":"YulFunctionCall","src":"1956:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1943:12:29"},"nodeType":"YulFunctionCall","src":"1943:32:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1933:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"2022:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2031:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2034:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2024:6:29"},"nodeType":"YulFunctionCall","src":"2024:12:29"},"nodeType":"YulExpressionStatement","src":"2024:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1994:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"2002:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1991:2:29"},"nodeType":"YulFunctionCall","src":"1991:30:29"},"nodeType":"YulIf","src":"1988:2:29"},{"nodeType":"YulAssignment","src":"2052:73:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2097:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"2108:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2093:3:29"},"nodeType":"YulFunctionCall","src":"2093:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2117:7:29"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"2062:30:29"},"nodeType":"YulFunctionCall","src":"2062:63:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2052:6:29"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1541:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1552:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1564:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1572:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1580:6:29","type":""}],"src":"1477:665:29"},{"body":{"nodeType":"YulBlock","src":"2213:53:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2230:3:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2253:5:29"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"2235:17:29"},"nodeType":"YulFunctionCall","src":"2235:24:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2223:6:29"},"nodeType":"YulFunctionCall","src":"2223:37:29"},"nodeType":"YulExpressionStatement","src":"2223:37:29"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2201:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2208:3:29","type":""}],"src":"2148:118:29"},{"body":{"nodeType":"YulBlock","src":"2355:84:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2372:3:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2426:5:29"}],"functionName":{"name":"convert_t_contract$_IVerifier_$1130_to_t_address","nodeType":"YulIdentifier","src":"2377:48:29"},"nodeType":"YulFunctionCall","src":"2377:55:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2365:6:29"},"nodeType":"YulFunctionCall","src":"2365:68:29"},"nodeType":"YulExpressionStatement","src":"2365:68:29"}]},"name":"abi_encode_t_contract$_IVerifier_$1130_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2343:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2350:3:29","type":""}],"src":"2272:167:29"},{"body":{"nodeType":"YulBlock","src":"2537:272:29","statements":[{"nodeType":"YulVariableDeclaration","src":"2547:53:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2594:5:29"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"2561:32:29"},"nodeType":"YulFunctionCall","src":"2561:39:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2551:6:29","type":""}]},{"nodeType":"YulAssignment","src":"2609:78:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2675:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"2680:6:29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2616:58:29"},"nodeType":"YulFunctionCall","src":"2616:71:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2609:3:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2722:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"2729:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2718:3:29"},"nodeType":"YulFunctionCall","src":"2718:16:29"},{"name":"pos","nodeType":"YulIdentifier","src":"2736:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"2741:6:29"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"2696:21:29"},"nodeType":"YulFunctionCall","src":"2696:52:29"},"nodeType":"YulExpressionStatement","src":"2696:52:29"},{"nodeType":"YulAssignment","src":"2757:46:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2768:3:29"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2795:6:29"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2773:21:29"},"nodeType":"YulFunctionCall","src":"2773:29:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2764:3:29"},"nodeType":"YulFunctionCall","src":"2764:39:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2757:3:29"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2518:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2525:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2533:3:29","type":""}],"src":"2445:364:29"},{"body":{"nodeType":"YulBlock","src":"2926:34:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2943:3:29"},{"name":"value","nodeType":"YulIdentifier","src":"2948:5:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2936:6:29"},"nodeType":"YulFunctionCall","src":"2936:18:29"},"nodeType":"YulExpressionStatement","src":"2936:18:29"}]},"name":"abi_encode_t_struct$_IncrementalTreeData_$1197_storage_ptr_to_t_uint256_fromStack_library","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2914:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2921:3:29","type":""}],"src":"2815:145:29"},{"body":{"nodeType":"YulBlock","src":"3031:53:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3048:3:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3071:5:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3053:17:29"},"nodeType":"YulFunctionCall","src":"3053:24:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3041:6:29"},"nodeType":"YulFunctionCall","src":"3041:37:29"},"nodeType":"YulExpressionStatement","src":"3041:37:29"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3019:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3026:3:29","type":""}],"src":"2966:118:29"},{"body":{"nodeType":"YulBlock","src":"3163:53:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3180:3:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3203:5:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3185:17:29"},"nodeType":"YulFunctionCall","src":"3185:24:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3173:6:29"},"nodeType":"YulFunctionCall","src":"3173:37:29"},"nodeType":"YulExpressionStatement","src":"3173:37:29"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack_library","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3151:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3158:3:29","type":""}],"src":"3090:126:29"},{"body":{"nodeType":"YulBlock","src":"3320:124:29","statements":[{"nodeType":"YulAssignment","src":"3330:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3342:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"3353:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3338:3:29"},"nodeType":"YulFunctionCall","src":"3338:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3330:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3410:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3423:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"3434:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3419:3:29"},"nodeType":"YulFunctionCall","src":"3419:17:29"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"3366:43:29"},"nodeType":"YulFunctionCall","src":"3366:71:29"},"nodeType":"YulExpressionStatement","src":"3366:71:29"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3292:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3304:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3315:4:29","type":""}],"src":"3222:222:29"},{"body":{"nodeType":"YulBlock","src":"3624:359:29","statements":[{"nodeType":"YulAssignment","src":"3634:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3646:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"3657:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3642:3:29"},"nodeType":"YulFunctionCall","src":"3642:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3634:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3714:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3727:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"3738:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3723:3:29"},"nodeType":"YulFunctionCall","src":"3723:17:29"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"3670:43:29"},"nodeType":"YulFunctionCall","src":"3670:71:29"},"nodeType":"YulExpressionStatement","src":"3670:71:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3762:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"3773:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3758:3:29"},"nodeType":"YulFunctionCall","src":"3758:18:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"3782:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"3788:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3778:3:29"},"nodeType":"YulFunctionCall","src":"3778:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3751:6:29"},"nodeType":"YulFunctionCall","src":"3751:48:29"},"nodeType":"YulExpressionStatement","src":"3751:48:29"},{"nodeType":"YulAssignment","src":"3808:86:29","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"3880:6:29"},{"name":"tail","nodeType":"YulIdentifier","src":"3889:4:29"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"3816:63:29"},"nodeType":"YulFunctionCall","src":"3816:78:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3808:4:29"}]},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"3948:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3961:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"3972:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3957:3:29"},"nodeType":"YulFunctionCall","src":"3957:18:29"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"3904:43:29"},"nodeType":"YulFunctionCall","src":"3904:72:29"},"nodeType":"YulExpressionStatement","src":"3904:72:29"}]},"name":"abi_encode_tuple_t_address_t_string_memory_ptr_t_uint256__to_t_address_t_string_memory_ptr_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3580:9:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3592:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3600:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3608:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3619:4:29","type":""}],"src":"3450:533:29"},{"body":{"nodeType":"YulBlock","src":"4219:525:29","statements":[{"nodeType":"YulAssignment","src":"4229:27:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4241:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"4252:3:29","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4237:3:29"},"nodeType":"YulFunctionCall","src":"4237:19:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4229:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4310:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4323:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"4334:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4319:3:29"},"nodeType":"YulFunctionCall","src":"4319:17:29"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"4266:43:29"},"nodeType":"YulFunctionCall","src":"4266:71:29"},"nodeType":"YulExpressionStatement","src":"4266:71:29"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"4391:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4404:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"4415:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4400:3:29"},"nodeType":"YulFunctionCall","src":"4400:18:29"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"4347:43:29"},"nodeType":"YulFunctionCall","src":"4347:72:29"},"nodeType":"YulExpressionStatement","src":"4347:72:29"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"4473:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4486:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"4497:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4482:3:29"},"nodeType":"YulFunctionCall","src":"4482:18:29"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"4429:43:29"},"nodeType":"YulFunctionCall","src":"4429:72:29"},"nodeType":"YulExpressionStatement","src":"4429:72:29"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"4555:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4568:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"4579:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4564:3:29"},"nodeType":"YulFunctionCall","src":"4564:18:29"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"4511:43:29"},"nodeType":"YulFunctionCall","src":"4511:72:29"},"nodeType":"YulExpressionStatement","src":"4511:72:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4604:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"4615:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4600:3:29"},"nodeType":"YulFunctionCall","src":"4600:19:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"4625:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"4631:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4621:3:29"},"nodeType":"YulFunctionCall","src":"4621:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4593:6:29"},"nodeType":"YulFunctionCall","src":"4593:49:29"},"nodeType":"YulExpressionStatement","src":"4593:49:29"},{"nodeType":"YulAssignment","src":"4651:86:29","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"4723:6:29"},{"name":"tail","nodeType":"YulIdentifier","src":"4732:4:29"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4659:63:29"},"nodeType":"YulFunctionCall","src":"4659:78:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4651:4:29"}]}]},"name":"abi_encode_tuple_t_address_t_uint256_t_uint256_t_uint256_t_string_memory_ptr__to_t_address_t_uint256_t_uint256_t_uint256_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4159:9:29","type":""},{"name":"value4","nodeType":"YulTypedName","src":"4171:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4179:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4187:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4195:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4203:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4214:4:29","type":""}],"src":"3989:755:29"},{"body":{"nodeType":"YulBlock","src":"4866:142:29","statements":[{"nodeType":"YulAssignment","src":"4876:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4888:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"4899:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4884:3:29"},"nodeType":"YulFunctionCall","src":"4884:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4876:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4974:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4987:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"4998:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4983:3:29"},"nodeType":"YulFunctionCall","src":"4983:17:29"}],"functionName":{"name":"abi_encode_t_contract$_IVerifier_$1130_to_t_address_fromStack","nodeType":"YulIdentifier","src":"4912:61:29"},"nodeType":"YulFunctionCall","src":"4912:89:29"},"nodeType":"YulExpressionStatement","src":"4912:89:29"}]},"name":"abi_encode_tuple_t_contract$_IVerifier_$1130__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4838:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4850:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4861:4:29","type":""}],"src":"4750:258:29"},{"body":{"nodeType":"YulBlock","src":"5132:195:29","statements":[{"nodeType":"YulAssignment","src":"5142:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5154:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"5165:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5150:3:29"},"nodeType":"YulFunctionCall","src":"5150:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5142:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5189:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"5200:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5185:3:29"},"nodeType":"YulFunctionCall","src":"5185:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"5208:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"5214:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5204:3:29"},"nodeType":"YulFunctionCall","src":"5204:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5178:6:29"},"nodeType":"YulFunctionCall","src":"5178:47:29"},"nodeType":"YulExpressionStatement","src":"5178:47:29"},{"nodeType":"YulAssignment","src":"5234:86:29","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5306:6:29"},{"name":"tail","nodeType":"YulIdentifier","src":"5315:4:29"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"5242:63:29"},"nodeType":"YulFunctionCall","src":"5242:78:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5234:4:29"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5104:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5116:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5127:4:29","type":""}],"src":"5014:313:29"},{"body":{"nodeType":"YulBlock","src":"5505:260:29","statements":[{"nodeType":"YulAssignment","src":"5515:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5527:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"5538:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5523:3:29"},"nodeType":"YulFunctionCall","src":"5523:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5515:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5641:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5654:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"5665:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5650:3:29"},"nodeType":"YulFunctionCall","src":"5650:17:29"}],"functionName":{"name":"abi_encode_t_struct$_IncrementalTreeData_$1197_storage_ptr_to_t_uint256_fromStack_library","nodeType":"YulIdentifier","src":"5551:89:29"},"nodeType":"YulFunctionCall","src":"5551:117:29"},"nodeType":"YulExpressionStatement","src":"5551:117:29"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5730:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5743:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"5754:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5739:3:29"},"nodeType":"YulFunctionCall","src":"5739:18:29"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack_library","nodeType":"YulIdentifier","src":"5678:51:29"},"nodeType":"YulFunctionCall","src":"5678:80:29"},"nodeType":"YulExpressionStatement","src":"5678:80:29"}]},"name":"abi_encode_tuple_t_struct$_IncrementalTreeData_$1197_storage_ptr_t_uint256__to_t_uint256_t_uint256__fromStack_library_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5469:9:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5481:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5489:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5500:4:29","type":""}],"src":"5333:432:29"},{"body":{"nodeType":"YulBlock","src":"5971:350:29","statements":[{"nodeType":"YulAssignment","src":"5981:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5993:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6004:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5989:3:29"},"nodeType":"YulFunctionCall","src":"5989:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5981:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6107:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6120:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6131:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6116:3:29"},"nodeType":"YulFunctionCall","src":"6116:17:29"}],"functionName":{"name":"abi_encode_t_struct$_IncrementalTreeData_$1197_storage_ptr_to_t_uint256_fromStack_library","nodeType":"YulIdentifier","src":"6017:89:29"},"nodeType":"YulFunctionCall","src":"6017:117:29"},"nodeType":"YulExpressionStatement","src":"6017:117:29"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"6196:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6209:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6220:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6205:3:29"},"nodeType":"YulFunctionCall","src":"6205:18:29"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack_library","nodeType":"YulIdentifier","src":"6144:51:29"},"nodeType":"YulFunctionCall","src":"6144:80:29"},"nodeType":"YulExpressionStatement","src":"6144:80:29"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"6286:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6299:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6310:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6295:3:29"},"nodeType":"YulFunctionCall","src":"6295:18:29"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack_library","nodeType":"YulIdentifier","src":"6234:51:29"},"nodeType":"YulFunctionCall","src":"6234:80:29"},"nodeType":"YulExpressionStatement","src":"6234:80:29"}]},"name":"abi_encode_tuple_t_struct$_IncrementalTreeData_$1197_storage_ptr_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_library_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5927:9:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5939:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5947:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5955:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5966:4:29","type":""}],"src":"5771:550:29"},{"body":{"nodeType":"YulBlock","src":"6425:124:29","statements":[{"nodeType":"YulAssignment","src":"6435:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6447:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6458:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6443:3:29"},"nodeType":"YulFunctionCall","src":"6443:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6435:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6515:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6528:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6539:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6524:3:29"},"nodeType":"YulFunctionCall","src":"6524:17:29"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"6471:43:29"},"nodeType":"YulFunctionCall","src":"6471:71:29"},"nodeType":"YulExpressionStatement","src":"6471:71:29"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6397:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6409:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6420:4:29","type":""}],"src":"6327:222:29"},{"body":{"nodeType":"YulBlock","src":"6681:206:29","statements":[{"nodeType":"YulAssignment","src":"6691:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6703:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6714:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6699:3:29"},"nodeType":"YulFunctionCall","src":"6699:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6691:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6771:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6784:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6795:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6780:3:29"},"nodeType":"YulFunctionCall","src":"6780:17:29"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"6727:43:29"},"nodeType":"YulFunctionCall","src":"6727:71:29"},"nodeType":"YulExpressionStatement","src":"6727:71:29"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"6852:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6865:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6876:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6861:3:29"},"nodeType":"YulFunctionCall","src":"6861:18:29"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"6808:43:29"},"nodeType":"YulFunctionCall","src":"6808:72:29"},"nodeType":"YulExpressionStatement","src":"6808:72:29"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6645:9:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6657:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6665:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6676:4:29","type":""}],"src":"6555:332:29"},{"body":{"nodeType":"YulBlock","src":"7047:288:29","statements":[{"nodeType":"YulAssignment","src":"7057:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7069:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"7080:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7065:3:29"},"nodeType":"YulFunctionCall","src":"7065:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7057:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7137:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7150:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"7161:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7146:3:29"},"nodeType":"YulFunctionCall","src":"7146:17:29"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"7093:43:29"},"nodeType":"YulFunctionCall","src":"7093:71:29"},"nodeType":"YulExpressionStatement","src":"7093:71:29"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7218:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7231:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"7242:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7227:3:29"},"nodeType":"YulFunctionCall","src":"7227:18:29"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"7174:43:29"},"nodeType":"YulFunctionCall","src":"7174:72:29"},"nodeType":"YulExpressionStatement","src":"7174:72:29"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"7300:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7313:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"7324:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7309:3:29"},"nodeType":"YulFunctionCall","src":"7309:18:29"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"7256:43:29"},"nodeType":"YulFunctionCall","src":"7256:72:29"},"nodeType":"YulExpressionStatement","src":"7256:72:29"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7003:9:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7015:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7023:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7031:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7042:4:29","type":""}],"src":"6893:442:29"},{"body":{"nodeType":"YulBlock","src":"7382:88:29","statements":[{"nodeType":"YulAssignment","src":"7392:30:29","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"7402:18:29"},"nodeType":"YulFunctionCall","src":"7402:20:29"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7392:6:29"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7451:6:29"},{"name":"size","nodeType":"YulIdentifier","src":"7459:4:29"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"7431:19:29"},"nodeType":"YulFunctionCall","src":"7431:33:29"},"nodeType":"YulExpressionStatement","src":"7431:33:29"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"7366:4:29","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"7375:6:29","type":""}],"src":"7341:129:29"},{"body":{"nodeType":"YulBlock","src":"7516:35:29","statements":[{"nodeType":"YulAssignment","src":"7526:19:29","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7542:2:29","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7536:5:29"},"nodeType":"YulFunctionCall","src":"7536:9:29"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7526:6:29"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"7509:6:29","type":""}],"src":"7476:75:29"},{"body":{"nodeType":"YulBlock","src":"7624:241:29","statements":[{"body":{"nodeType":"YulBlock","src":"7729:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7731:16:29"},"nodeType":"YulFunctionCall","src":"7731:18:29"},"nodeType":"YulExpressionStatement","src":"7731:18:29"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7701:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"7709:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7698:2:29"},"nodeType":"YulFunctionCall","src":"7698:30:29"},"nodeType":"YulIf","src":"7695:2:29"},{"nodeType":"YulAssignment","src":"7761:37:29","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7791:6:29"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"7769:21:29"},"nodeType":"YulFunctionCall","src":"7769:29:29"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"7761:4:29"}]},{"nodeType":"YulAssignment","src":"7835:23:29","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"7847:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"7853:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7843:3:29"},"nodeType":"YulFunctionCall","src":"7843:15:29"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"7835:4:29"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"7608:6:29","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"7619:4:29","type":""}],"src":"7557:308:29"},{"body":{"nodeType":"YulBlock","src":"7930:40:29","statements":[{"nodeType":"YulAssignment","src":"7941:22:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7957:5:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7951:5:29"},"nodeType":"YulFunctionCall","src":"7951:12:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"7941:6:29"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7913:5:29","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"7923:6:29","type":""}],"src":"7871:99:29"},{"body":{"nodeType":"YulBlock","src":"8072:73:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8089:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"8094:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8082:6:29"},"nodeType":"YulFunctionCall","src":"8082:19:29"},"nodeType":"YulExpressionStatement","src":"8082:19:29"},{"nodeType":"YulAssignment","src":"8110:29:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8129:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"8134:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8125:3:29"},"nodeType":"YulFunctionCall","src":"8125:14:29"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"8110:11:29"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8044:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"8049:6:29","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"8060:11:29","type":""}],"src":"7976:169:29"},{"body":{"nodeType":"YulBlock","src":"8195:261:29","statements":[{"nodeType":"YulAssignment","src":"8205:25:29","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"8228:1:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"8210:17:29"},"nodeType":"YulFunctionCall","src":"8210:20:29"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"8205:1:29"}]},{"nodeType":"YulAssignment","src":"8239:25:29","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"8262:1:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"8244:17:29"},"nodeType":"YulFunctionCall","src":"8244:20:29"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"8239:1:29"}]},{"body":{"nodeType":"YulBlock","src":"8402:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"8404:16:29"},"nodeType":"YulFunctionCall","src":"8404:18:29"},"nodeType":"YulExpressionStatement","src":"8404:18:29"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"8323:1:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8330:66:29","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"y","nodeType":"YulIdentifier","src":"8398:1:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8326:3:29"},"nodeType":"YulFunctionCall","src":"8326:74:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8320:2:29"},"nodeType":"YulFunctionCall","src":"8320:81:29"},"nodeType":"YulIf","src":"8317:2:29"},{"nodeType":"YulAssignment","src":"8434:16:29","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"8445:1:29"},{"name":"y","nodeType":"YulIdentifier","src":"8448:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8441:3:29"},"nodeType":"YulFunctionCall","src":"8441:9:29"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"8434:3:29"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"8182:1:29","type":""},{"name":"y","nodeType":"YulTypedName","src":"8185:1:29","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"8191:3:29","type":""}],"src":"8151:305:29"},{"body":{"nodeType":"YulBlock","src":"8507:146:29","statements":[{"nodeType":"YulAssignment","src":"8517:25:29","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"8540:1:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"8522:17:29"},"nodeType":"YulFunctionCall","src":"8522:20:29"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"8517:1:29"}]},{"nodeType":"YulAssignment","src":"8551:25:29","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"8574:1:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"8556:17:29"},"nodeType":"YulFunctionCall","src":"8556:20:29"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"8551:1:29"}]},{"body":{"nodeType":"YulBlock","src":"8598:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"8600:16:29"},"nodeType":"YulFunctionCall","src":"8600:18:29"},"nodeType":"YulExpressionStatement","src":"8600:18:29"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"8592:1:29"},{"name":"y","nodeType":"YulIdentifier","src":"8595:1:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8589:2:29"},"nodeType":"YulFunctionCall","src":"8589:8:29"},"nodeType":"YulIf","src":"8586:2:29"},{"nodeType":"YulAssignment","src":"8630:17:29","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"8642:1:29"},{"name":"y","nodeType":"YulIdentifier","src":"8645:1:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8638:3:29"},"nodeType":"YulFunctionCall","src":"8638:9:29"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"8630:4:29"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"8493:1:29","type":""},{"name":"y","nodeType":"YulTypedName","src":"8496:1:29","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"8502:4:29","type":""}],"src":"8462:191:29"},{"body":{"nodeType":"YulBlock","src":"8704:51:29","statements":[{"nodeType":"YulAssignment","src":"8714:35:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8743:5:29"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"8725:17:29"},"nodeType":"YulFunctionCall","src":"8725:24:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"8714:7:29"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8686:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"8696:7:29","type":""}],"src":"8659:96:29"},{"body":{"nodeType":"YulBlock","src":"8806:81:29","statements":[{"nodeType":"YulAssignment","src":"8816:65:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8831:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"8838:42:29","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8827:3:29"},"nodeType":"YulFunctionCall","src":"8827:54:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"8816:7:29"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8788:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"8798:7:29","type":""}],"src":"8761:126:29"},{"body":{"nodeType":"YulBlock","src":"8938:32:29","statements":[{"nodeType":"YulAssignment","src":"8948:16:29","value":{"name":"value","nodeType":"YulIdentifier","src":"8959:5:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"8948:7:29"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8920:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"8930:7:29","type":""}],"src":"8893:77:29"},{"body":{"nodeType":"YulBlock","src":"9054:84:29","statements":[{"nodeType":"YulAssignment","src":"9064:68:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9126:5:29"}],"functionName":{"name":"convert_t_contract$_IVerifier_$1130_to_t_uint160","nodeType":"YulIdentifier","src":"9077:48:29"},"nodeType":"YulFunctionCall","src":"9077:55:29"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"9064:9:29"}]}]},"name":"convert_t_contract$_IVerifier_$1130_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9034:5:29","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"9044:9:29","type":""}],"src":"8976:162:29"},{"body":{"nodeType":"YulBlock","src":"9222:53:29","statements":[{"nodeType":"YulAssignment","src":"9232:37:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9263:5:29"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"9245:17:29"},"nodeType":"YulFunctionCall","src":"9245:24:29"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"9232:9:29"}]}]},"name":"convert_t_contract$_IVerifier_$1130_to_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9202:5:29","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"9212:9:29","type":""}],"src":"9144:131:29"},{"body":{"nodeType":"YulBlock","src":"9332:103:29","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"9355:3:29"},{"name":"src","nodeType":"YulIdentifier","src":"9360:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"9365:6:29"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"9342:12:29"},"nodeType":"YulFunctionCall","src":"9342:30:29"},"nodeType":"YulExpressionStatement","src":"9342:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"9413:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"9418:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9409:3:29"},"nodeType":"YulFunctionCall","src":"9409:16:29"},{"kind":"number","nodeType":"YulLiteral","src":"9427:1:29","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9402:6:29"},"nodeType":"YulFunctionCall","src":"9402:27:29"},"nodeType":"YulExpressionStatement","src":"9402:27:29"}]},"name":"copy_calldata_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"9314:3:29","type":""},{"name":"dst","nodeType":"YulTypedName","src":"9319:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"9324:6:29","type":""}],"src":"9281:154:29"},{"body":{"nodeType":"YulBlock","src":"9490:258:29","statements":[{"nodeType":"YulVariableDeclaration","src":"9500:10:29","value":{"kind":"number","nodeType":"YulLiteral","src":"9509:1:29","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"9504:1:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"9569:63:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"9594:3:29"},{"name":"i","nodeType":"YulIdentifier","src":"9599:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9590:3:29"},"nodeType":"YulFunctionCall","src":"9590:11:29"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"9613:3:29"},{"name":"i","nodeType":"YulIdentifier","src":"9618:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9609:3:29"},"nodeType":"YulFunctionCall","src":"9609:11:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9603:5:29"},"nodeType":"YulFunctionCall","src":"9603:18:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9583:6:29"},"nodeType":"YulFunctionCall","src":"9583:39:29"},"nodeType":"YulExpressionStatement","src":"9583:39:29"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"9530:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"9533:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"9527:2:29"},"nodeType":"YulFunctionCall","src":"9527:13:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"9541:19:29","statements":[{"nodeType":"YulAssignment","src":"9543:15:29","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"9552:1:29"},{"kind":"number","nodeType":"YulLiteral","src":"9555:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9548:3:29"},"nodeType":"YulFunctionCall","src":"9548:10:29"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"9543:1:29"}]}]},"pre":{"nodeType":"YulBlock","src":"9523:3:29","statements":[]},"src":"9519:113:29"},{"body":{"nodeType":"YulBlock","src":"9666:76:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"9716:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"9721:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9712:3:29"},"nodeType":"YulFunctionCall","src":"9712:16:29"},{"kind":"number","nodeType":"YulLiteral","src":"9730:1:29","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9705:6:29"},"nodeType":"YulFunctionCall","src":"9705:27:29"},"nodeType":"YulExpressionStatement","src":"9705:27:29"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"9647:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"9650:6:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9644:2:29"},"nodeType":"YulFunctionCall","src":"9644:13:29"},"nodeType":"YulIf","src":"9641:2:29"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"9472:3:29","type":""},{"name":"dst","nodeType":"YulTypedName","src":"9477:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"9482:6:29","type":""}],"src":"9441:307:29"},{"body":{"nodeType":"YulBlock","src":"9805:269:29","statements":[{"nodeType":"YulAssignment","src":"9815:22:29","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"9829:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"9835:1:29","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"9825:3:29"},"nodeType":"YulFunctionCall","src":"9825:12:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"9815:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"9846:38:29","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"9876:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"9882:1:29","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9872:3:29"},"nodeType":"YulFunctionCall","src":"9872:12:29"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"9850:18:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"9923:51:29","statements":[{"nodeType":"YulAssignment","src":"9937:27:29","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9951:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"9959:4:29","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9947:3:29"},"nodeType":"YulFunctionCall","src":"9947:17:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"9937:6:29"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"9903:18:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9896:6:29"},"nodeType":"YulFunctionCall","src":"9896:26:29"},"nodeType":"YulIf","src":"9893:2:29"},{"body":{"nodeType":"YulBlock","src":"10026:42:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"10040:16:29"},"nodeType":"YulFunctionCall","src":"10040:18:29"},"nodeType":"YulExpressionStatement","src":"10040:18:29"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"9990:18:29"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10013:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"10021:2:29","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10010:2:29"},"nodeType":"YulFunctionCall","src":"10010:14:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9987:2:29"},"nodeType":"YulFunctionCall","src":"9987:38:29"},"nodeType":"YulIf","src":"9984:2:29"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"9789:4:29","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"9798:6:29","type":""}],"src":"9754:320:29"},{"body":{"nodeType":"YulBlock","src":"10123:238:29","statements":[{"nodeType":"YulVariableDeclaration","src":"10133:58:29","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10155:6:29"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"10185:4:29"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"10163:21:29"},"nodeType":"YulFunctionCall","src":"10163:27:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10151:3:29"},"nodeType":"YulFunctionCall","src":"10151:40:29"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"10137:10:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"10302:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"10304:16:29"},"nodeType":"YulFunctionCall","src":"10304:18:29"},"nodeType":"YulExpressionStatement","src":"10304:18:29"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"10245:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"10257:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10242:2:29"},"nodeType":"YulFunctionCall","src":"10242:34:29"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"10281:10:29"},{"name":"memPtr","nodeType":"YulIdentifier","src":"10293:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10278:2:29"},"nodeType":"YulFunctionCall","src":"10278:22:29"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"10239:2:29"},"nodeType":"YulFunctionCall","src":"10239:62:29"},"nodeType":"YulIf","src":"10236:2:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10340:2:29","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"10344:10:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10333:6:29"},"nodeType":"YulFunctionCall","src":"10333:22:29"},"nodeType":"YulExpressionStatement","src":"10333:22:29"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"10109:6:29","type":""},{"name":"size","nodeType":"YulTypedName","src":"10117:4:29","type":""}],"src":"10080:281:29"},{"body":{"nodeType":"YulBlock","src":"10395:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10412:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10415:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10405:6:29"},"nodeType":"YulFunctionCall","src":"10405:88:29"},"nodeType":"YulExpressionStatement","src":"10405:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10509:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10512:4:29","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10502:6:29"},"nodeType":"YulFunctionCall","src":"10502:15:29"},"nodeType":"YulExpressionStatement","src":"10502:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10533:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10536:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10526:6:29"},"nodeType":"YulFunctionCall","src":"10526:15:29"},"nodeType":"YulExpressionStatement","src":"10526:15:29"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"10367:180:29"},{"body":{"nodeType":"YulBlock","src":"10581:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10598:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10601:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10591:6:29"},"nodeType":"YulFunctionCall","src":"10591:88:29"},"nodeType":"YulExpressionStatement","src":"10591:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10695:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10698:4:29","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10688:6:29"},"nodeType":"YulFunctionCall","src":"10688:15:29"},"nodeType":"YulExpressionStatement","src":"10688:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10719:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10722:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10712:6:29"},"nodeType":"YulFunctionCall","src":"10712:15:29"},"nodeType":"YulExpressionStatement","src":"10712:15:29"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"10553:180:29"},{"body":{"nodeType":"YulBlock","src":"10767:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10784:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10787:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10777:6:29"},"nodeType":"YulFunctionCall","src":"10777:88:29"},"nodeType":"YulExpressionStatement","src":"10777:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10881:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10884:4:29","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10874:6:29"},"nodeType":"YulFunctionCall","src":"10874:15:29"},"nodeType":"YulExpressionStatement","src":"10874:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10905:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10908:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10898:6:29"},"nodeType":"YulFunctionCall","src":"10898:15:29"},"nodeType":"YulExpressionStatement","src":"10898:15:29"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"10739:180:29"},{"body":{"nodeType":"YulBlock","src":"10973:54:29","statements":[{"nodeType":"YulAssignment","src":"10983:38:29","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11001:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"11008:2:29","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10997:3:29"},"nodeType":"YulFunctionCall","src":"10997:14:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11017:2:29","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11013:3:29"},"nodeType":"YulFunctionCall","src":"11013:7:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10993:3:29"},"nodeType":"YulFunctionCall","src":"10993:28:29"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"10983:6:29"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10956:5:29","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"10966:6:29","type":""}],"src":"10925:102:29"},{"body":{"nodeType":"YulBlock","src":"11076:79:29","statements":[{"body":{"nodeType":"YulBlock","src":"11133:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11142:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11145:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11135:6:29"},"nodeType":"YulFunctionCall","src":"11135:12:29"},"nodeType":"YulExpressionStatement","src":"11135:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11099:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11124:5:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"11106:17:29"},"nodeType":"YulFunctionCall","src":"11106:24:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"11096:2:29"},"nodeType":"YulFunctionCall","src":"11096:35:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11089:6:29"},"nodeType":"YulFunctionCall","src":"11089:43:29"},"nodeType":"YulIf","src":"11086:2:29"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11069:5:29","type":""}],"src":"11033:122:29"}]},"contents":"{\n\n    function abi_decode_available_length_t_string_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert(0, 0) }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256t_string_memory_ptr(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value2 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_contract$_IVerifier_$1130_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_IVerifier_$1130_to_t_address(value))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_struct$_IncrementalTreeData_$1197_storage_ptr_to_t_uint256_fromStack_library(value, pos) {\n        mstore(pos, value)\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack_library(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address_t_string_memory_ptr_t_uint256__to_t_address_t_string_memory_ptr_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value1,  tail)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_uint256_t_uint256_t_string_memory_ptr__to_t_address_t_uint256_t_uint256_t_uint256_t_string_memory_ptr__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        mstore(add(headStart, 128), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value4,  tail)\n\n    }\n\n    function abi_encode_tuple_t_contract$_IVerifier_$1130__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_IVerifier_$1130_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_encode_tuple_t_struct$_IncrementalTreeData_$1197_storage_ptr_t_uint256__to_t_uint256_t_uint256__fromStack_library_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_struct$_IncrementalTreeData_$1197_storage_ptr_to_t_uint256_fromStack_library(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack_library(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_struct$_IncrementalTreeData_$1197_storage_ptr_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_library_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_struct$_IncrementalTreeData_$1197_storage_ptr_to_t_uint256_fromStack_library(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack_library(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack_library(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        if lt(x, y) { panic_error_0x11() }\n\n        diff := sub(x, y)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function convert_t_contract$_IVerifier_$1130_to_t_address(value) -> converted {\n        converted := convert_t_contract$_IVerifier_$1130_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_IVerifier_$1130_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(value)\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n","id":29,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{"@creds-protocol/contracts/zk-kit/incremental-merkle-tree.sol/IncrementalBinaryTree.sol":{"IncrementalBinaryTree":[{"length":20,"start":2204},{"length":20,"start":2484}]}},"object":"608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063c308dd5b11610066578063c308dd5b1461022a578063dabc4d5114610248578063e69743cd14610278578063eb49610614610294576100cf565b80638da5cb5b146101c0578063909d9ef7146101de578063ac1eff68146101fa576100cf565b80632e9868f8146100d4578063439d7275146100f25780634ce39ead14610110578063638480be1461012e5780636389e1071461015e57806381cc7a451461018e575b600080fd5b6100dc6102b2565b6040516100e99190610dba565b60405180910390f35b6100fa610340565b6040516101079190610dba565b60405180910390f35b6101186103ce565b6040516101259190610cec565b60405180910390f35b61014860048036038101906101439190610ba4565b6103f4565b6040516101559190610e3c565b60405180910390f35b61017860048036038101906101739190610ba4565b610413565b6040516101859190610e3c565b60405180910390f35b6101a860048036038101906101a39190610ba4565b610432565b6040516101b793929190610d07565b60405180910390f35b6101c8610504565b6040516101d59190610cec565b60405180910390f35b6101f860048036038101906101f39190610c09565b61052a565b005b610214600480360381019061020f9190610ba4565b610594565b6040516102219190610d9f565b60405180910390f35b6102326105c7565b60405161023f9190610cec565b60405180910390f35b610262600480360381019061025d9190610ba4565b6105ed565b60405161026f9190610e3c565b60405180910390f35b610292600480360381019061028d9190610bcd565b61060c565b005b61029c61061a565b6040516102a99190610e3c565b60405180910390f35b600280546102bf90611055565b80601f01602080910402602001604051908101604052809291908181526020018280546102eb90611055565b80156103385780601f1061030d57610100808354040283529160200191610338565b820191906000526020600020905b81548152906001019060200180831161031b57829003601f168201915b505050505081565b6003805461034d90611055565b80601f016020809104026020016040519081016040528092919081815260200182805461037990611055565b80156103c65780601f1061039b576101008083540402835291602001916103c6565b820191906000526020600020905b8154815290600101906020018083116103a957829003601f168201915b505050505081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000838152602001908152602001600020600201549050919050565b6000806000838152602001908152602001600020600001549050919050565b60076020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101805461047b90611055565b80601f01602080910402602001604051908101604052809291908181526020018280546104a790611055565b80156104f45780601f106104c9576101008083540402835291602001916104f4565b820191906000526020600020905b8154815290600101906020018083116104d757829003601f168201915b5050505050908060020154905083565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006105366008610620565b9050610542600861062e565b61054f8185853386610644565b7f2ed4f0a950535d9dbe363dbcdaedbbdf03aa9f33d5b1b70b74554debef4d10f43382868686604051610586959493929190610d45565b60405180910390a150505050565b60066020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000838152602001908152602001600020600101549050919050565b61061682826107a5565b5050565b60045481565b600081600001549050919050565b6001816000016000828254019250508190555050565b83600073ffffffffffffffffffffffffffffffffffffffff166006600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156106df576040517f679101ad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106eb338787876107ed565b826007600088815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160076000888152602001908152602001600020600101908051906020019061076a929190610a84565b50610e10600760008881526020019081526020016000206002018190555060016004546107979190610f29565b600481905550505050505050565b6107af828261095d565b60006107ba836105ed565b90504260076000858152602001908152602001600020600301600083815260200190815260200160002081905550505050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018310610846576040517fe730108f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061085184610413565b14610888576040517f632ab44600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008084815260200190815260200160002073__$fb9ee77876a75724f11f9f12d9558a3f31$__631095fbb4909184846040518463ffffffff1660e01b81526004016108d693929190610e05565b60006040518083038186803b1580156108ee57600080fd5b505af4158015610902573d6000803e3d6000fd5b50505050828473ffffffffffffffffffffffffffffffffffffffff167f8cd7e348e0ad6531fc8e95ec90286ba9246aa70c3d94d7fca9eb8afd6e78c35e848460405161094f929190610e57565b60405180910390a350505050565b600061096883610413565b14156109a0576040517f84124a0d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008083815260200190815260200160002073__$fb9ee77876a75724f11f9f12d9558a3f31$__63168703fa9091836040518363ffffffff1660e01b81526004016109ec929190610ddc565b60006040518083038186803b158015610a0457600080fd5b505af4158015610a18573d6000803e3d6000fd5b505050506000610a27836105ed565b905060006001610a36856103f4565b610a409190610f7f565b9050837fe5b5631e8acf74ed776b8262e656d2b63e56882d6eb3e7d6e8b8c09661f2ca03828585604051610a7693929190610e80565b60405180910390a250505050565b828054610a9090611055565b90600052602060002090601f016020900481019282610ab25760008555610af9565b82601f10610acb57805160ff1916838001178555610af9565b82800160010185558215610af9579182015b82811115610af8578251825591602001919060010190610add565b5b509050610b069190610b0a565b5090565b5b80821115610b23576000816000905550600101610b0b565b5090565b6000610b3a610b3584610edc565b610eb7565b905082815260208101848484011115610b5257600080fd5b610b5d848285611013565b509392505050565b600082601f830112610b7657600080fd5b8135610b86848260208601610b27565b91505092915050565b600081359050610b9e81611156565b92915050565b600060208284031215610bb657600080fd5b6000610bc484828501610b8f565b91505092915050565b60008060408385031215610be057600080fd5b6000610bee85828601610b8f565b9250506020610bff85828601610b8f565b9150509250929050565b600080600060608486031215610c1e57600080fd5b6000610c2c86828701610b8f565b9350506020610c3d86828701610b8f565b925050604084013567ffffffffffffffff811115610c5a57600080fd5b610c6686828701610b65565b9150509250925092565b610c7981610fb3565b82525050565b610c8881610fef565b82525050565b6000610c9982610f0d565b610ca38185610f18565b9350610cb3818560208601611022565b610cbc81611145565b840191505092915050565b8082525050565b610cd781610fe5565b82525050565b610ce681610fe5565b82525050565b6000602082019050610d016000830184610c70565b92915050565b6000606082019050610d1c6000830186610c70565b8181036020830152610d2e8185610c8e565b9050610d3d6040830184610cce565b949350505050565b600060a082019050610d5a6000830188610c70565b610d676020830187610cce565b610d746040830186610cce565b610d816060830185610cce565b8181036080830152610d938184610c8e565b90509695505050505050565b6000602082019050610db46000830184610c7f565b92915050565b60006020820190508181036000830152610dd48184610c8e565b905092915050565b6000604082019050610df16000830185610cc7565b610dfe6020830184610cdd565b9392505050565b6000606082019050610e1a6000830186610cc7565b610e276020830185610cdd565b610e346040830184610cdd565b949350505050565b6000602082019050610e516000830184610cce565b92915050565b6000604082019050610e6c6000830185610cce565b610e796020830184610cce565b9392505050565b6000606082019050610e956000830186610cce565b610ea26020830185610cce565b610eaf6040830184610cce565b949350505050565b6000610ec1610ed2565b9050610ecd8282611087565b919050565b6000604051905090565b600067ffffffffffffffff821115610ef757610ef6611116565b5b610f0082611145565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000610f3482610fe5565b9150610f3f83610fe5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610f7457610f736110b8565b5b828201905092915050565b6000610f8a82610fe5565b9150610f9583610fe5565b925082821015610fa857610fa76110b8565b5b828203905092915050565b6000610fbe82610fc5565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610ffa82611001565b9050919050565b600061100c82610fc5565b9050919050565b82818337600083830152505050565b60005b83811015611040578082015181840152602081019050611025565b8381111561104f576000848401525b50505050565b6000600282049050600182168061106d57607f821691505b60208210811415611081576110806110e7565b5b50919050565b61109082611145565b810181811067ffffffffffffffff821117156110af576110ae611116565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b61115f81610fe5565b811461116a57600080fd5b5056fea2646970667358221220dd2571cc5f732723909b8df8a96a3e9c98a295162094be23a0e6494c2d49a4d764736f6c63430008040033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xC308DD5B GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xC308DD5B EQ PUSH2 0x22A JUMPI DUP1 PUSH4 0xDABC4D51 EQ PUSH2 0x248 JUMPI DUP1 PUSH4 0xE69743CD EQ PUSH2 0x278 JUMPI DUP1 PUSH4 0xEB496106 EQ PUSH2 0x294 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1C0 JUMPI DUP1 PUSH4 0x909D9EF7 EQ PUSH2 0x1DE JUMPI DUP1 PUSH4 0xAC1EFF68 EQ PUSH2 0x1FA JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x2E9868F8 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x439D7275 EQ PUSH2 0xF2 JUMPI DUP1 PUSH4 0x4CE39EAD EQ PUSH2 0x110 JUMPI DUP1 PUSH4 0x638480BE EQ PUSH2 0x12E JUMPI DUP1 PUSH4 0x6389E107 EQ PUSH2 0x15E JUMPI DUP1 PUSH4 0x81CC7A45 EQ PUSH2 0x18E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDC PUSH2 0x2B2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0xDBA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFA PUSH2 0x340 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x107 SWAP2 SWAP1 PUSH2 0xDBA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x118 PUSH2 0x3CE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x125 SWAP2 SWAP1 PUSH2 0xCEC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x148 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x143 SWAP2 SWAP1 PUSH2 0xBA4 JUMP JUMPDEST PUSH2 0x3F4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x155 SWAP2 SWAP1 PUSH2 0xE3C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x178 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x173 SWAP2 SWAP1 PUSH2 0xBA4 JUMP JUMPDEST PUSH2 0x413 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x185 SWAP2 SWAP1 PUSH2 0xE3C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1A3 SWAP2 SWAP1 PUSH2 0xBA4 JUMP JUMPDEST PUSH2 0x432 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xD07 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C8 PUSH2 0x504 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D5 SWAP2 SWAP1 PUSH2 0xCEC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F3 SWAP2 SWAP1 PUSH2 0xC09 JUMP JUMPDEST PUSH2 0x52A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x214 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x20F SWAP2 SWAP1 PUSH2 0xBA4 JUMP JUMPDEST PUSH2 0x594 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x221 SWAP2 SWAP1 PUSH2 0xD9F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x232 PUSH2 0x5C7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23F SWAP2 SWAP1 PUSH2 0xCEC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x262 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x25D SWAP2 SWAP1 PUSH2 0xBA4 JUMP JUMPDEST PUSH2 0x5ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26F SWAP2 SWAP1 PUSH2 0xE3C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x292 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x28D SWAP2 SWAP1 PUSH2 0xBCD JUMP JUMPDEST PUSH2 0x60C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x29C PUSH2 0x61A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A9 SWAP2 SWAP1 PUSH2 0xE3C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH2 0x2BF SWAP1 PUSH2 0x1055 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2EB SWAP1 PUSH2 0x1055 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x338 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x30D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x338 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x31B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH2 0x34D SWAP1 PUSH2 0x1055 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x379 SWAP1 PUSH2 0x1055 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3C6 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x39B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3C6 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3A9 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x47B SWAP1 PUSH2 0x1055 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x4A7 SWAP1 PUSH2 0x1055 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4F4 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4C9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x4F4 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x4D7 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 POP DUP4 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x536 PUSH1 0x8 PUSH2 0x620 JUMP JUMPDEST SWAP1 POP PUSH2 0x542 PUSH1 0x8 PUSH2 0x62E JUMP JUMPDEST PUSH2 0x54F DUP2 DUP6 DUP6 CALLER DUP7 PUSH2 0x644 JUMP JUMPDEST PUSH32 0x2ED4F0A950535D9DBE363DBCDAEDBBDF03AA9F33D5B1B70B74554DEBEF4D10F4 CALLER DUP3 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x586 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xD45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x616 DUP3 DUP3 PUSH2 0x7A5 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST DUP4 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x6 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x6DF JUMPI PUSH1 0x40 MLOAD PUSH32 0x679101AD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x6EB CALLER DUP8 DUP8 DUP8 PUSH2 0x7ED JUMP JUMPDEST DUP3 PUSH1 0x7 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0x7 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x76A SWAP3 SWAP2 SWAP1 PUSH2 0xA84 JUMP JUMPDEST POP PUSH2 0xE10 PUSH1 0x7 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x4 SLOAD PUSH2 0x797 SWAP2 SWAP1 PUSH2 0xF29 JUMP JUMPDEST PUSH1 0x4 DUP2 SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x7AF DUP3 DUP3 PUSH2 0x95D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7BA DUP4 PUSH2 0x5ED JUMP JUMPDEST SWAP1 POP TIMESTAMP PUSH1 0x7 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH32 0x30644E72E131A029B85045B68181585D2833E84879B9709143E1F593F0000001 DUP4 LT PUSH2 0x846 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE730108F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x851 DUP5 PUSH2 0x413 JUMP JUMPDEST EQ PUSH2 0x888 JUMPI PUSH1 0x40 MLOAD PUSH32 0x632AB44600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH20 0x0 PUSH4 0x1095FBB4 SWAP1 SWAP2 DUP5 DUP5 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D6 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xE05 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x902 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP3 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8CD7E348E0AD6531FC8E95EC90286BA9246AA70C3D94D7FCA9EB8AFD6E78C35E DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x94F SWAP3 SWAP2 SWAP1 PUSH2 0xE57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x968 DUP4 PUSH2 0x413 JUMP JUMPDEST EQ ISZERO PUSH2 0x9A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x84124A0D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH20 0x0 PUSH4 0x168703FA SWAP1 SWAP2 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9EC SWAP3 SWAP2 SWAP1 PUSH2 0xDDC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA04 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xA18 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 PUSH2 0xA27 DUP4 PUSH2 0x5ED JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH2 0xA36 DUP6 PUSH2 0x3F4 JUMP JUMPDEST PUSH2 0xA40 SWAP2 SWAP1 PUSH2 0xF7F JUMP JUMPDEST SWAP1 POP DUP4 PUSH32 0xE5B5631E8ACF74ED776B8262E656D2B63E56882D6EB3E7D6E8B8C09661F2CA03 DUP3 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0xA76 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xE80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0xA90 SWAP1 PUSH2 0x1055 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0xAB2 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0xAF9 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0xACB JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0xAF9 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0xAF9 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0xAF8 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xADD JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0xB06 SWAP2 SWAP1 PUSH2 0xB0A JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0xB23 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0xB0B JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB3A PUSH2 0xB35 DUP5 PUSH2 0xEDC JUMP JUMPDEST PUSH2 0xEB7 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0xB52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB5D DUP5 DUP3 DUP6 PUSH2 0x1013 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xB76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xB86 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xB27 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB9E DUP2 PUSH2 0x1156 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBB6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBC4 DUP5 DUP3 DUP6 ADD PUSH2 0xB8F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBE0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBEE DUP6 DUP3 DUP7 ADD PUSH2 0xB8F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xBFF DUP6 DUP3 DUP7 ADD PUSH2 0xB8F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xC2C DUP7 DUP3 DUP8 ADD PUSH2 0xB8F JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xC3D DUP7 DUP3 DUP8 ADD PUSH2 0xB8F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC66 DUP7 DUP3 DUP8 ADD PUSH2 0xB65 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0xC79 DUP2 PUSH2 0xFB3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xC88 DUP2 PUSH2 0xFEF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC99 DUP3 PUSH2 0xF0D JUMP JUMPDEST PUSH2 0xCA3 DUP2 DUP6 PUSH2 0xF18 JUMP JUMPDEST SWAP4 POP PUSH2 0xCB3 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1022 JUMP JUMPDEST PUSH2 0xCBC DUP2 PUSH2 0x1145 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xCD7 DUP2 PUSH2 0xFE5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xCE6 DUP2 PUSH2 0xFE5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xD01 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC70 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xD1C PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xC70 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xD2E DUP2 DUP6 PUSH2 0xC8E JUMP JUMPDEST SWAP1 POP PUSH2 0xD3D PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xCCE JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0xD5A PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0xC70 JUMP JUMPDEST PUSH2 0xD67 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0xCCE JUMP JUMPDEST PUSH2 0xD74 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0xCCE JUMP JUMPDEST PUSH2 0xD81 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0xCCE JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0xD93 DUP2 DUP5 PUSH2 0xC8E JUMP JUMPDEST SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xDB4 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC7F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xDD4 DUP2 DUP5 PUSH2 0xC8E JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xDF1 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xCC7 JUMP JUMPDEST PUSH2 0xDFE PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xCDD JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xE1A PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xCC7 JUMP JUMPDEST PUSH2 0xE27 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xCDD JUMP JUMPDEST PUSH2 0xE34 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xCDD JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE51 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCCE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xE6C PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xCCE JUMP JUMPDEST PUSH2 0xE79 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xCCE JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xE95 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xCCE JUMP JUMPDEST PUSH2 0xEA2 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xCCE JUMP JUMPDEST PUSH2 0xEAF PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xCCE JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEC1 PUSH2 0xED2 JUMP JUMPDEST SWAP1 POP PUSH2 0xECD DUP3 DUP3 PUSH2 0x1087 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xEF7 JUMPI PUSH2 0xEF6 PUSH2 0x1116 JUMP JUMPDEST JUMPDEST PUSH2 0xF00 DUP3 PUSH2 0x1145 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF34 DUP3 PUSH2 0xFE5 JUMP JUMPDEST SWAP2 POP PUSH2 0xF3F DUP4 PUSH2 0xFE5 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0xF74 JUMPI PUSH2 0xF73 PUSH2 0x10B8 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF8A DUP3 PUSH2 0xFE5 JUMP JUMPDEST SWAP2 POP PUSH2 0xF95 DUP4 PUSH2 0xFE5 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0xFA8 JUMPI PUSH2 0xFA7 PUSH2 0x10B8 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFBE DUP3 PUSH2 0xFC5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFA DUP3 PUSH2 0x1001 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100C DUP3 PUSH2 0xFC5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1040 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1025 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x104F JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x106D JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1081 JUMPI PUSH2 0x1080 PUSH2 0x10E7 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1090 DUP3 PUSH2 0x1145 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x10AF JUMPI PUSH2 0x10AE PUSH2 0x1116 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x115F DUP2 PUSH2 0xFE5 JUMP JUMPDEST DUP2 EQ PUSH2 0x116A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDD 0x25 PUSH18 0xCC5F732723909B8DF8A96A3E9C98A2951620 SWAP5 0xBE 0x23 LOG0 0xE6 0x49 0x4C 0x2D 0x49 LOG4 0xD7 PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ","sourceMap":"177:1103:26:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;384:24:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;414:26;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;352;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4827:157:3;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4617:139;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;751:37:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;303:20:26;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;668:438;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;637:46:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;484:81;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4418:137:3;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1112:166:26;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;446:31:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;384:24;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;414:26::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;352:::-;;;;;;;;;;;;;:::o;4827:157:3:-;4918:7;4944:10;:18;4955:6;4944:18;;;;;;;;;;;:33;;;4937:40;;4827:157;;;:::o;4617:139::-;4699:7;4725:10;:18;4736:6;4725:18;;;;;;;;;;;:24;;;4718:31;;4617:139;;;:::o;751:37:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;303:20:26:-;;;;;;;;;;;;;:::o;668:438::-;801:15;819:18;:8;:16;:18::i;:::-;801:36;;847:20;:8;:18;:20::i;:::-;877:68;888:7;897:15;914:9;925:10;937:7;877:10;:68::i;:::-;960:139;985:10;1009:7;1030:15;1059:9;1082:7;960:139;;;;;;;;;;:::i;:::-;;;;;;;;668:438;;;;:::o;637:46:0:-;;;;;;;;;;;;;;;;;;;;;;:::o;484:81::-;;;;;;;;;;;;;:::o;4418:137:3:-;4499:7;4525:10;:18;4536:6;4525:18;;;;;;;;;;;:23;;;4518:30;;4418:137;;;:::o;1112:166:26:-;1232:39;1244:6;1252:18;1232:11;:39::i;:::-;1112:166;;:::o;446:31:0:-;;;;:::o;827:112:19:-;892:7;918;:14;;;911:21;;827:112;;;:::o;945:123::-;1050:1;1032:7;:14;;;:19;;;;;;;;;;;945:123;:::o;2207:475:0:-;2409:15;1272:1;1225:49;;1233:9;:26;1243:15;1233:26;;;;;;;;;;;;;;;;;;;;;1225:49;;;1221:130;;;1297:43;;;;;;;;;;;;;;1221:130;2436:59:::1;2448:10;2460:6;2468:15;2485:9;2436:11;:59::i;:::-;2528:5;2506;:13;2512:6;2506:13;;;;;;;;;;;:19;;;:27;;;;;;;;;;;;;;;;;;2567:7;2543:5;:13;2549:6;2543:13;;;;;;;;;;;:21;;:31;;;;;;;;;;;;:::i;:::-;;2619:7;2584:5;:13;2590:6;2584:13;;;;;;;;;;;:32;;:42;;;;2674:1;2655:16;;:20;;;;:::i;:::-;2636:16;:39;;;;2207:475:::0;;;;;;:::o;3224:274::-;3308:40;3321:6;3329:18;3308:12;:40::i;:::-;3359:22;3384:25;3402:6;3384:17;:25::i;:::-;3359:50;;3476:15;3420:5;:13;3426:6;3420:13;;;;;;;;;;;:37;;:53;3458:14;3420:53;;;;;;;;;;;:71;;;;3224:274;;;:::o;954:526:3:-;93:77:1;1120:6:3;:28;1116:115;;1171:49;;;;;;;;;;;;;;1116:115;1275:1;1245:26;1264:6;1245:18;:26::i;:::-;:31;1241:100;;1299:31;;;;;;;;;;;;;;1241:100;1351:10;:18;1362:6;1351:18;;;;;;;;;;;:23;;;;1375:15;1392:9;1351:51;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1438:6;1430;1418:55;;;1446:15;1463:9;1418:55;;;;;;;:::i;:::-;;;;;;;;954:526;;;;:::o;1647:460::-;1774:1;1744:26;1763:6;1744:18;:26::i;:::-;:31;1740:99;;;1798:30;;;;;;;;;;;;;;1740:99;1849:10;:18;1860:6;1849:18;;;;;;;;;;;:25;;;;1875:18;1849:45;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1905:22;1930:25;1948:6;1930:17;:25::i;:::-;1905:50;;1965:13;2019:1;1981:35;2009:6;1981:27;:35::i;:::-;:39;;;;:::i;:::-;1965:55;;2050:6;2036:64;2058:5;2065:18;2085:14;2036:64;;;;;;;;:::i;:::-;;;;;;;;1647:460;;;;:::o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:345:29:-;85:5;110:66;126:49;168:6;126:49;:::i;:::-;110:66;:::i;:::-;101:75;;199:6;192:5;185:21;237:4;230:5;226:16;275:3;266:6;261:3;257:16;254:25;251:2;;;292:1;289;282:12;251:2;305:41;339:6;334:3;329;305:41;:::i;:::-;91:261;;;;;;:::o;372:273::-;428:5;477:3;470:4;462:6;458:17;454:27;444:2;;495:1;492;485:12;444:2;535:6;522:20;560:79;635:3;627:6;620:4;612:6;608:17;560:79;:::i;:::-;551:88;;434:211;;;;;:::o;651:139::-;697:5;735:6;722:20;713:29;;751:33;778:5;751:33;:::i;:::-;703:87;;;;:::o;796:262::-;855:6;904:2;892:9;883:7;879:23;875:32;872:2;;;920:1;917;910:12;872:2;963:1;988:53;1033:7;1024:6;1013:9;1009:22;988:53;:::i;:::-;978:63;;934:117;862:196;;;;:::o;1064:407::-;1132:6;1140;1189:2;1177:9;1168:7;1164:23;1160:32;1157:2;;;1205:1;1202;1195:12;1157:2;1248:1;1273:53;1318:7;1309:6;1298:9;1294:22;1273:53;:::i;:::-;1263:63;;1219:117;1375:2;1401:53;1446:7;1437:6;1426:9;1422:22;1401:53;:::i;:::-;1391:63;;1346:118;1147:324;;;;;:::o;1477:665::-;1564:6;1572;1580;1629:2;1617:9;1608:7;1604:23;1600:32;1597:2;;;1645:1;1642;1635:12;1597:2;1688:1;1713:53;1758:7;1749:6;1738:9;1734:22;1713:53;:::i;:::-;1703:63;;1659:117;1815:2;1841:53;1886:7;1877:6;1866:9;1862:22;1841:53;:::i;:::-;1831:63;;1786:118;1971:2;1960:9;1956:18;1943:32;2002:18;1994:6;1991:30;1988:2;;;2034:1;2031;2024:12;1988:2;2062:63;2117:7;2108:6;2097:9;2093:22;2062:63;:::i;:::-;2052:73;;1914:221;1587:555;;;;;:::o;2148:118::-;2235:24;2253:5;2235:24;:::i;:::-;2230:3;2223:37;2213:53;;:::o;2272:167::-;2377:55;2426:5;2377:55;:::i;:::-;2372:3;2365:68;2355:84;;:::o;2445:364::-;2533:3;2561:39;2594:5;2561:39;:::i;:::-;2616:71;2680:6;2675:3;2616:71;:::i;:::-;2609:78;;2696:52;2741:6;2736:3;2729:4;2722:5;2718:16;2696:52;:::i;:::-;2773:29;2795:6;2773:29;:::i;:::-;2768:3;2764:39;2757:46;;2537:272;;;;;:::o;2815:145::-;2948:5;2943:3;2936:18;2926:34;;:::o;2966:118::-;3053:24;3071:5;3053:24;:::i;:::-;3048:3;3041:37;3031:53;;:::o;3090:126::-;3185:24;3203:5;3185:24;:::i;:::-;3180:3;3173:37;3163:53;;:::o;3222:222::-;3315:4;3353:2;3342:9;3338:18;3330:26;;3366:71;3434:1;3423:9;3419:17;3410:6;3366:71;:::i;:::-;3320:124;;;;:::o;3450:533::-;3619:4;3657:2;3646:9;3642:18;3634:26;;3670:71;3738:1;3727:9;3723:17;3714:6;3670:71;:::i;:::-;3788:9;3782:4;3778:20;3773:2;3762:9;3758:18;3751:48;3816:78;3889:4;3880:6;3816:78;:::i;:::-;3808:86;;3904:72;3972:2;3961:9;3957:18;3948:6;3904:72;:::i;:::-;3624:359;;;;;;:::o;3989:755::-;4214:4;4252:3;4241:9;4237:19;4229:27;;4266:71;4334:1;4323:9;4319:17;4310:6;4266:71;:::i;:::-;4347:72;4415:2;4404:9;4400:18;4391:6;4347:72;:::i;:::-;4429;4497:2;4486:9;4482:18;4473:6;4429:72;:::i;:::-;4511;4579:2;4568:9;4564:18;4555:6;4511:72;:::i;:::-;4631:9;4625:4;4621:20;4615:3;4604:9;4600:19;4593:49;4659:78;4732:4;4723:6;4659:78;:::i;:::-;4651:86;;4219:525;;;;;;;;:::o;4750:258::-;4861:4;4899:2;4888:9;4884:18;4876:26;;4912:89;4998:1;4987:9;4983:17;4974:6;4912:89;:::i;:::-;4866:142;;;;:::o;5014:313::-;5127:4;5165:2;5154:9;5150:18;5142:26;;5214:9;5208:4;5204:20;5200:1;5189:9;5185:17;5178:47;5242:78;5315:4;5306:6;5242:78;:::i;:::-;5234:86;;5132:195;;;;:::o;5333:432::-;5500:4;5538:2;5527:9;5523:18;5515:26;;5551:117;5665:1;5654:9;5650:17;5641:6;5551:117;:::i;:::-;5678:80;5754:2;5743:9;5739:18;5730:6;5678:80;:::i;:::-;5505:260;;;;;:::o;5771:550::-;5966:4;6004:2;5993:9;5989:18;5981:26;;6017:117;6131:1;6120:9;6116:17;6107:6;6017:117;:::i;:::-;6144:80;6220:2;6209:9;6205:18;6196:6;6144:80;:::i;:::-;6234;6310:2;6299:9;6295:18;6286:6;6234:80;:::i;:::-;5971:350;;;;;;:::o;6327:222::-;6420:4;6458:2;6447:9;6443:18;6435:26;;6471:71;6539:1;6528:9;6524:17;6515:6;6471:71;:::i;:::-;6425:124;;;;:::o;6555:332::-;6676:4;6714:2;6703:9;6699:18;6691:26;;6727:71;6795:1;6784:9;6780:17;6771:6;6727:71;:::i;:::-;6808:72;6876:2;6865:9;6861:18;6852:6;6808:72;:::i;:::-;6681:206;;;;;:::o;6893:442::-;7042:4;7080:2;7069:9;7065:18;7057:26;;7093:71;7161:1;7150:9;7146:17;7137:6;7093:71;:::i;:::-;7174:72;7242:2;7231:9;7227:18;7218:6;7174:72;:::i;:::-;7256;7324:2;7313:9;7309:18;7300:6;7256:72;:::i;:::-;7047:288;;;;;;:::o;7341:129::-;7375:6;7402:20;;:::i;:::-;7392:30;;7431:33;7459:4;7451:6;7431:33;:::i;:::-;7382:88;;;:::o;7476:75::-;7509:6;7542:2;7536:9;7526:19;;7516:35;:::o;7557:308::-;7619:4;7709:18;7701:6;7698:30;7695:2;;;7731:18;;:::i;:::-;7695:2;7769:29;7791:6;7769:29;:::i;:::-;7761:37;;7853:4;7847;7843:15;7835:23;;7624:241;;;:::o;7871:99::-;7923:6;7957:5;7951:12;7941:22;;7930:40;;;:::o;7976:169::-;8060:11;8094:6;8089:3;8082:19;8134:4;8129:3;8125:14;8110:29;;8072:73;;;;:::o;8151:305::-;8191:3;8210:20;8228:1;8210:20;:::i;:::-;8205:25;;8244:20;8262:1;8244:20;:::i;:::-;8239:25;;8398:1;8330:66;8326:74;8323:1;8320:81;8317:2;;;8404:18;;:::i;:::-;8317:2;8448:1;8445;8441:9;8434:16;;8195:261;;;;:::o;8462:191::-;8502:4;8522:20;8540:1;8522:20;:::i;:::-;8517:25;;8556:20;8574:1;8556:20;:::i;:::-;8551:25;;8595:1;8592;8589:8;8586:2;;;8600:18;;:::i;:::-;8586:2;8645:1;8642;8638:9;8630:17;;8507:146;;;;:::o;8659:96::-;8696:7;8725:24;8743:5;8725:24;:::i;:::-;8714:35;;8704:51;;;:::o;8761:126::-;8798:7;8838:42;8831:5;8827:54;8816:65;;8806:81;;;:::o;8893:77::-;8930:7;8959:5;8948:16;;8938:32;;;:::o;8976:162::-;9044:9;9077:55;9126:5;9077:55;:::i;:::-;9064:68;;9054:84;;;:::o;9144:131::-;9212:9;9245:24;9263:5;9245:24;:::i;:::-;9232:37;;9222:53;;;:::o;9281:154::-;9365:6;9360:3;9355;9342:30;9427:1;9418:6;9413:3;9409:16;9402:27;9332:103;;;:::o;9441:307::-;9509:1;9519:113;9533:6;9530:1;9527:13;9519:113;;;9618:1;9613:3;9609:11;9603:18;9599:1;9594:3;9590:11;9583:39;9555:2;9552:1;9548:10;9543:15;;9519:113;;;9650:6;9647:1;9644:13;9641:2;;;9730:1;9721:6;9716:3;9712:16;9705:27;9641:2;9490:258;;;;:::o;9754:320::-;9798:6;9835:1;9829:4;9825:12;9815:22;;9882:1;9876:4;9872:12;9903:18;9893:2;;9959:4;9951:6;9947:17;9937:27;;9893:2;10021;10013:6;10010:14;9990:18;9987:38;9984:2;;;10040:18;;:::i;:::-;9984:2;9805:269;;;;:::o;10080:281::-;10163:27;10185:4;10163:27;:::i;:::-;10155:6;10151:40;10293:6;10281:10;10278:22;10257:18;10245:10;10242:34;10239:62;10236:2;;;10304:18;;:::i;:::-;10236:2;10344:10;10340:2;10333:22;10123:238;;;:::o;10367:180::-;10415:77;10412:1;10405:88;10512:4;10509:1;10502:15;10536:4;10533:1;10526:15;10553:180;10601:77;10598:1;10591:88;10698:4;10695:1;10688:15;10722:4;10719:1;10712:15;10739:180;10787:77;10784:1;10777:88;10884:4;10881:1;10874:15;10908:4;10905:1;10898:15;10925:102;10966:6;11017:2;11013:7;11008:2;11001:5;10997:14;10993:28;10983:38;;10973:54;;;:::o;11033:122::-;11106:24;11124:5;11106:24;:::i;:::-;11099:5;11096:35;11086:2;;11145:1;11142;11135:12;11086:2;11076:79;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"903000","executionCost":"infinite","totalCost":"infinite"},"external":{"claimCredToTrustifiedIssuer(uint256,uint256)":"infinite","creds(uint256)":"infinite","credsIssuedCount()":"1217","credsIssuer()":"1259","credsProtocolRegistry()":"1236","getMerkleTreeDepth(uint256)":"infinite","getMerkleTreeRoot(uint256)":"infinite","getNumberOfMerkleTreeLeaves(uint256)":"infinite","issueCred(uint256,uint256,string)":"infinite","issuerName()":"infinite","issuerSymbol()":"infinite","owner()":"1237","verifiers(uint256)":"1649"}},"methodIdentifiers":{"claimCredToTrustifiedIssuer(uint256,uint256)":"e69743cd","creds(uint256)":"81cc7a45","credsIssuedCount()":"eb496106","credsIssuer()":"4ce39ead","credsProtocolRegistry()":"c308dd5b","getMerkleTreeDepth(uint256)":"6389e107","getMerkleTreeRoot(uint256)":"dabc4d51","getNumberOfMerkleTreeLeaves(uint256)":"638480be","issueCred(uint256,uint256,string)":"909d9ef7","issuerName()":"2e9868f8","issuerSymbol()":"439d7275","owner()":"8da5cb5b","verifiers(uint256)":"ac1eff68"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"merkleTreeDepth\",\"type\":\"uint256\"}],\"internalType\":\"struct ICredential.Verifier[]\",\"name\":\"_verifiers\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_issuerName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_issuerSymbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Credential__CallerIsNotTheCredIssuer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Credential__CredAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Credential__CredDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Credential__CredIdIsNotLessThanSnarkScalarField\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Credential__MerkleTreeDepthIsNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Credential__MerkleTreeRootIsExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Credential__MerkleTreeRootIsNotPartOfTheCred\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Credential__YouAreUsingTheSameNillifierTwice\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"CredCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"credId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"merkleTreeDepth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"zeroValue\",\"type\":\"uint256\"}],\"name\":\"CredCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"credId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"identityCommitment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"merkleTreeRoot\",\"type\":\"uint256\"}],\"name\":\"IdentityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"credId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"identityCommitment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"merkleTreeRoot\",\"type\":\"uint256\"}],\"name\":\"IdentityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"credId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"identityCommitment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newIdentityCommitment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"merkleTreeRoot\",\"type\":\"uint256\"}],\"name\":\"IdentityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"IssueCred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nullifierHash\",\"type\":\"uint256\"}],\"name\":\"NullifierHashAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"credId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"merkleTreeRoot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"externalNullifier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nullifierHash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"signal\",\"type\":\"bytes32\"}],\"name\":\"ProofVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"issuerName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"issuerSymbol\",\"type\":\"string\"}],\"name\":\"issuerRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"credId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"identityCommitment\",\"type\":\"uint256\"}],\"name\":\"claimCredToTrustifiedIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"credURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"merkleRootDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"credsIssuedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"credsIssuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"credsProtocolRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"credID\",\"type\":\"uint256\"}],\"name\":\"getMerkleTreeDepth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"credID\",\"type\":\"uint256\"}],\"name\":\"getMerkleTreeRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"credID\",\"type\":\"uint256\"}],\"name\":\"getNumberOfMerkleTreeLeaves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"merkleTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zeroValue\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"credURI\",\"type\":\"string\"}],\"name\":\"issueCred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuerName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuerSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"verifiers\",\"outputs\":[{\"internalType\":\"contract IVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getMerkleTreeDepth(uint256)\":{\"details\":\"See {ICredentialCreds-getMerkleTreeDepth}.\"},\"getMerkleTreeRoot(uint256)\":{\"details\":\"See {ICredentialCreds-getMerkleTreeRoot}.\"},\"getNumberOfMerkleTreeLeaves(uint256)\":{\"details\":\"See {ICredentialCreds-getNumberOfMerkleTreeLeaves}.\"}},\"version\":1},\"userdoc\":{\"events\":{\"NullifierHashAdded(uint256)\":{\"notice\":\"Emitted when a proof is verified correctly and a new nullifier hash is added.\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TrustifiedCred.sol\":\"TrustifiedCred\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@creds-protocol/contracts/CredsIssuer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./interfaces/ICredential.sol\\\";\\nimport \\\"./interfaces/IVerifier.sol\\\";\\nimport \\\"./base/CredentialCore.sol\\\";\\nimport \\\"./base/CredentialCreds.sol\\\";\\nimport \\\"./base/CredsProtocolRegistry.sol\\\";\\n\\n/// @title CredsIssuer\\ncontract CredsIssuer is ICredential, CredentialCore, CredentialCreds {\\n    \\n    address public credsIssuer;\\n    string public issuerName;\\n    string public issuerSymbol;\\n    uint256 public credsIssuedCount;\\n\\n    address public credsProtocolRegistry = 0x414b893562f46f5180971c3389784A447581b2d3;\\n\\n    /// @dev Gets a tree depth and returns its verifier address.\\n    mapping(uint256 => IVerifier) public verifiers;\\n\\n    /// @dev Gets a cred id and returns the cred parameters.\\n    mapping(uint256 => Cred) public creds;\\n    \\n    /// @dev Checks if the cred issuer is the transaction sender.\\n    modifier onlyCredsIssuer() {\\n        if (credsIssuer == _msgSender()) {\\n            revert Credential__CallerIsNotTheCredIssuer();\\n        }\\n        _;\\n    }\\n\\n    /// @dev Checks if there is a verifier for the given tree depth.\\n    /// @param merkleTreeDepth: Depth of the tree.\\n    modifier onlySupportedMerkleTreeDepth(uint256 merkleTreeDepth) {\\n        if (address(verifiers[merkleTreeDepth]) == address(0)) {\\n            revert Credential__MerkleTreeDepthIsNotSupported();\\n        }\\n        _;\\n    }\\n\\n    /// @dev Initializes the Credential verifiers used to verify the user's ZK proofs.\\n    /// @param _verifiers: List of Credential verifiers (address and related Merkle tree depth).\\n    constructor(\\n        Verifier[] memory _verifiers,\\n        address _issuer,\\n        string memory _issuerName,\\n        string memory _issuerSymbol) \\n    {\\n        for (uint8 i = 0; i < _verifiers.length; ) {\\n            verifiers[_verifiers[i].merkleTreeDepth] = IVerifier(_verifiers[i].contractAddress);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        credsIssuer = _issuer;\\n        issuerName =_issuerName;\\n        issuerSymbol =_issuerSymbol; \\n        CredsProtocolRegistry(credsProtocolRegistry).registerIssuer(_issuer, address(this));\\n        emit issuerRegistered(_issuer, _issuerName, _issuerSymbol);\\n    }\\n\\n    function createCred(\\n        uint256 credId,\\n        uint256 merkleTreeDepth,\\n        uint256 zeroValue,\\n        address admin,\\n        string memory credURI\\n    ) internal onlySupportedMerkleTreeDepth(merkleTreeDepth) {\\n        _createCred(msg.sender, credId, merkleTreeDepth, zeroValue);\\n\\n        creds[credId].admin = admin;\\n        creds[credId].credURI = credURI;\\n        creds[credId].merkleRootDuration = 1 hours;\\n        credsIssuedCount = credsIssuedCount + 1;\\n    }\\n\\n    function createCred(\\n        uint256 credId,\\n        uint256 merkleTreeDepth,\\n        uint256 zeroValue,\\n        address admin,\\n        uint256 merkleTreeRootDuration,\\n        string memory credURI\\n    ) internal onlySupportedMerkleTreeDepth(merkleTreeDepth) {\\n        _createCred(msg.sender, credId, merkleTreeDepth, zeroValue);\\n\\n        creds[credId].admin = admin;\\n        creds[credId].credURI = credURI;\\n        creds[credId].merkleRootDuration = merkleTreeRootDuration;\\n        credsIssuedCount = credsIssuedCount + 1;\\n    }\\n\\n    function addIdentity(uint256 credId, uint256 identityCommitment) internal {\\n        _addIdentity(credId, identityCommitment);\\n\\n        uint256 merkleTreeRoot = getMerkleTreeRoot(credId);\\n\\n        creds[credId].merkleRootCreationDates[merkleTreeRoot] = block.timestamp;\\n    }\\n\\n    function addIdentities(uint256 credId, uint256[] calldata identityCommitments)\\n        internal\\n    {\\n        for (uint8 i = 0; i < identityCommitments.length; ) {\\n            _addIdentity(credId, identityCommitments[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        uint256 merkleTreeRoot = getMerkleTreeRoot(credId);\\n\\n        creds[credId].merkleRootCreationDates[merkleTreeRoot] = block.timestamp;\\n    }\\n\\n    function updateIdentity(\\n        uint256 credId,\\n        uint256 identityCommitment,\\n        uint256 newIdentityCommitment,\\n        uint256[] calldata proofSiblings,\\n        uint8[] calldata proofPathIndices\\n    ) internal {\\n        _updateIdentity(credId, identityCommitment, newIdentityCommitment, proofSiblings, proofPathIndices);\\n    }\\n\\n    function removeIdentity(\\n        uint256 credId,\\n        uint256 identityCommitment,\\n        uint256[] calldata proofSiblings,\\n        uint8[] calldata proofPathIndices\\n    ) internal {\\n        _removeIdentity(credId, identityCommitment, proofSiblings, proofPathIndices);\\n    }\\n\\n    function verifyProof(\\n        uint256 credId,\\n        uint256 merkleTreeRoot,\\n        bytes32 signal,\\n        uint256 nullifierHash,\\n        uint256 externalNullifier,\\n        uint256[8] calldata proof\\n    ) internal {\\n        uint256 currentMerkleTreeRoot = getMerkleTreeRoot(credId);\\n\\n        if (currentMerkleTreeRoot == 0) {\\n            revert Credential__CredDoesNotExist();\\n        }\\n\\n        if (merkleTreeRoot != currentMerkleTreeRoot) {\\n            uint256 merkleRootCreationDate = creds[credId].merkleRootCreationDates[merkleTreeRoot];\\n            uint256 merkleRootDuration = creds[credId].merkleRootDuration;\\n\\n            if (merkleRootCreationDate == 0) {\\n                revert Credential__MerkleTreeRootIsNotPartOfTheCred();\\n            }\\n\\n            if (block.timestamp > merkleRootCreationDate + merkleRootDuration) {\\n                revert Credential__MerkleTreeRootIsExpired();\\n            }\\n        }\\n\\n        if (creds[credId].nullifierHashes[nullifierHash]) {\\n            revert Credential__YouAreUsingTheSameNillifierTwice();\\n        }\\n\\n        uint256 merkleTreeDepth = getMerkleTreeDepth(credId);\\n\\n        IVerifier verifier = verifiers[merkleTreeDepth];\\n\\n        _verifyProof(signal, merkleTreeRoot, nullifierHash, externalNullifier, proof, verifier);\\n\\n        creds[credId].nullifierHashes[nullifierHash] = true;\\n\\n        emit ProofVerified(credId, merkleTreeRoot, nullifierHash, externalNullifier, signal);\\n    }\\n}\\n\",\"keccak256\":\"0xfcc940cf44dc2a13655e79132a6ba80c9a1f7e8f005136a7c2a24d746425dab7\",\"license\":\"MIT\"},\"@creds-protocol/contracts/base/CredentialConstants.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nuint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\",\"keccak256\":\"0xc39b4ffdba083c6cf3287f62b663b576f7b4bd7ae2cecf1fc5cb498b56a288d2\",\"license\":\"MIT\"},\"@creds-protocol/contracts/base/CredentialCore.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"../interfaces/ICredentialCore.sol\\\";\\nimport \\\"../interfaces/IVerifier.sol\\\";\\n\\n/// @title Credential core contract.\\n/// @notice Minimal code to allow users to signal their endorsement of an arbitrary string.\\n/// @dev The following code verifies that the proof is correct and saves the hash of the\\n/// nullifier to prevent double-signaling. External nullifier and Merkle trees (i.e. creds) must be\\n/// managed externally.\\ncontract CredentialCore is ICredentialCore {\\n    /// @dev Asserts that no nullifier already exists and if the zero-knowledge proof is valid.\\n    /// Otherwise it reverts.\\n    /// @param signal: Credential signal.\\n    /// @param root: Root of the Merkle tree.\\n    /// @param nullifierHash: Nullifier hash.\\n    /// @param externalNullifier: External nullifier.\\n    /// @param proof: Zero-knowledge proof.\\n    /// @param verifier: Verifier address.\\n    function _verifyProof(\\n        bytes32 signal,\\n        uint256 root,\\n        uint256 nullifierHash,\\n        uint256 externalNullifier,\\n        uint256[8] calldata proof,\\n        IVerifier verifier\\n    ) internal view {\\n        uint256 signalHash = _hashSignal(signal);\\n\\n        verifier.verifyProof(\\n            [proof[0], proof[1]],\\n            [[proof[2], proof[3]], [proof[4], proof[5]]],\\n            [proof[6], proof[7]],\\n            [root, nullifierHash, signalHash, externalNullifier]\\n        );\\n    }\\n\\n    /// @dev Creates a keccak256 hash of the signal.\\n    /// @param signal: Credential signal.\\n    /// @return Hash of the signal.\\n    function _hashSignal(bytes32 signal) private pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(signal))) >> 8;\\n    }\\n}\\n\",\"keccak256\":\"0x6fc6de16a1c6ca1a680af9939e9bb1fa5975c0a495bef46b294094865b792ab9\",\"license\":\"MIT\"},\"@creds-protocol/contracts/base/CredentialCreds.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport {SNARK_SCALAR_FIELD} from \\\"./CredentialConstants.sol\\\";\\nimport \\\"../interfaces/ICredentialCreds.sol\\\";\\nimport \\\"../zk-kit/incremental-merkle-tree.sol/IncrementalBinaryTree.sol\\\";\\nimport \\\"../openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Credential creds contract.\\n/// @dev The following code allows you to create, issue and withdraw creds.\\n/// You can use getters to obtain informations about creds (root, depth, number of leaves).\\nabstract contract CredentialCreds is Context, ICredentialCreds {\\n    using IncrementalBinaryTree for IncrementalTreeData;\\n\\n    /// @dev Gets a cred id and returns the tree data.\\n    mapping(uint256 => IncrementalTreeData) internal merkleTree;\\n\\n    /// @dev Creates a new cred by initializing the associated tree.\\n    /// @param credID: Id of the cred.\\n    /// @param merkleTreeDepth: Depth of the tree.\\n    /// @param zeroValue: Zero value of the tree.\\n    function _createCred(\\n        address issuer,\\n        uint256 credID,\\n        uint256 merkleTreeDepth,\\n        uint256 zeroValue\\n    ) internal virtual {\\n        if (credID >= SNARK_SCALAR_FIELD) {\\n            revert Credential__CredIdIsNotLessThanSnarkScalarField();\\n        }\\n\\n        if (getMerkleTreeDepth(credID) != 0) {\\n            revert Credential__CredAlreadyExists();\\n        }\\n\\n        merkleTree[credID].init(merkleTreeDepth, zeroValue);\\n\\n        emit CredCreated(issuer, credID, merkleTreeDepth, zeroValue);\\n    }\\n\\n    /// @dev Adds an identity commitment to an existing cred.\\n    /// @param credID: Id of the cred.\\n    /// @param identityCommitment: New identity commitment.\\n    function _addIdentity(uint256 credID, uint256 identityCommitment) internal virtual {\\n        if (getMerkleTreeDepth(credID) == 0) {\\n            revert Credential__CredDoesNotExist();\\n        }\\n\\n        merkleTree[credID].insert(identityCommitment);\\n\\n        uint256 merkleTreeRoot = getMerkleTreeRoot(credID);\\n        uint256 index = getNumberOfMerkleTreeLeaves(credID) - 1;\\n\\n        emit IdentityAdded(credID, index, identityCommitment, merkleTreeRoot);\\n    }\\n\\n    /// @dev Updates an identity commitment of an existing cred. A proof of membership is\\n    /// needed to check if the node to be updated is part of the tree.\\n    /// @param credID: Id of the cred.\\n    /// @param identityCommitment: Existing identity commitment to be updated.\\n    /// @param newIdentityCommitment: New identity commitment.\\n    /// @param proofSiblings: Array of the sibling nodes of the proof of membership.\\n    /// @param proofPathIndices: Path of the proof of membership.\\n    function _updateIdentity(\\n        uint256 credID,\\n        uint256 identityCommitment,\\n        uint256 newIdentityCommitment,\\n        uint256[] calldata proofSiblings,\\n        uint8[] calldata proofPathIndices\\n    ) internal virtual {\\n        if (getMerkleTreeRoot(credID) == 0) {\\n            revert Credential__CredDoesNotExist();\\n        }\\n\\n        merkleTree[credID].update(identityCommitment, newIdentityCommitment, proofSiblings, proofPathIndices);\\n\\n        uint256 merkleTreeRoot = getMerkleTreeRoot(credID);\\n        uint256 index = proofPathIndicesToIdentityIndex(proofPathIndices);\\n\\n        emit IdentityUpdated(credID, index, identityCommitment, newIdentityCommitment, merkleTreeRoot);\\n    }\\n\\n    /// @dev Removes an identity commitment from an existing cred. A proof of membership is\\n    /// needed to check if the node to be deleted is part of the tree.\\n    /// @param credID: Id of the cred.\\n    /// @param identityCommitment: Existing identity commitment to be removed.\\n    /// @param proofSiblings: Array of the sibling nodes of the proof of membership.\\n    /// @param proofPathIndices: Path of the proof of membership.\\n    function _removeIdentity(\\n        uint256 credID,\\n        uint256 identityCommitment,\\n        uint256[] calldata proofSiblings,\\n        uint8[] calldata proofPathIndices\\n    ) internal virtual {\\n        if (getMerkleTreeRoot(credID) == 0) {\\n            revert Credential__CredDoesNotExist();\\n        }\\n\\n        merkleTree[credID].remove(identityCommitment, proofSiblings, proofPathIndices);\\n\\n        uint256 merkleTreeRoot = getMerkleTreeRoot(credID);\\n        uint256 index = proofPathIndicesToIdentityIndex(proofPathIndices);\\n\\n        emit IdentityRemoved(credID, index, identityCommitment, merkleTreeRoot);\\n    }\\n\\n    /// @dev See {ICredentialCreds-getMerkleTreeRoot}.\\n    function getMerkleTreeRoot(uint256 credID) public view virtual override returns (uint256) {\\n        return merkleTree[credID].root;\\n    }\\n\\n    /// @dev See {ICredentialCreds-getMerkleTreeDepth}.\\n    function getMerkleTreeDepth(uint256 credID) public view virtual override returns (uint256) {\\n        return merkleTree[credID].depth;\\n    }\\n\\n    /// @dev See {ICredentialCreds-getNumberOfMerkleTreeLeaves}.\\n    function getNumberOfMerkleTreeLeaves(uint256 credID) public view virtual override returns (uint256) {\\n        return merkleTree[credID].numberOfLeaves;\\n    }\\n\\n    /// @dev Converts the path indices of a Merkle proof to the identity commitment index in the tree.\\n    /// @param proofPathIndices: Path of the proof of membership.\\n    /// @return Index of a cred identity.\\n    function proofPathIndicesToIdentityIndex(uint8[] calldata proofPathIndices) private pure returns (uint256) {\\n        uint256 identityIndex = 0;\\n\\n        for (uint8 i = uint8(proofPathIndices.length); i > 0; ) {\\n            if (identityIndex > 0 || proofPathIndices[i - 1] != 0) {\\n                identityIndex *= 2;\\n\\n                if (proofPathIndices[i - 1] == 1) {\\n                    identityIndex += 1;\\n                }\\n            }\\n\\n            unchecked {\\n                --i;\\n            }\\n        }\\n\\n        return identityIndex;\\n    }\\n}\\n\",\"keccak256\":\"0xd2b07442b1b37f4da891d79e9abcfe4986e383256a87f96ccec284acb4f61a55\",\"license\":\"MIT\"},\"@creds-protocol/contracts/base/CredsProtocolRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ncontract CredsProtocolRegistry {\\n\\n    mapping(address => address[]) public issuerContractAddress;\\n    mapping(address => bool) public isRegisteredIssuer;\\n\\n    function registerIssuer(address _issuer, address _issuerContractAddress) external {\\n        issuerContractAddress[_issuer].push(_issuerContractAddress);\\n        isRegisteredIssuer[_issuer] = true;\\n    }\\n\\n}\",\"keccak256\":\"0x10a17aad1cdc2f065689e6e19f2dbbf8d3d21d477625522500111104ca01eecc\",\"license\":\"MIT\"},\"@creds-protocol/contracts/interfaces/ICredential.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/// @title Credential interface.\\n/// @dev Interface of a Credential contract.\\ninterface ICredential {\\n    error Credential__CallerIsNotTheCredIssuer();\\n    error Credential__MerkleTreeDepthIsNotSupported();\\n    error Credential__MerkleTreeRootIsExpired();\\n    error Credential__MerkleTreeRootIsNotPartOfTheCred();\\n    error Credential__YouAreUsingTheSameNillifierTwice();\\n\\n    /// It defines all the cred parameters, in addition to those in the Merkle tree.\\n    struct Cred {\\n        address admin;\\n        string credURI;\\n        uint256 merkleRootDuration;\\n        mapping(uint256 => uint256) merkleRootCreationDates;\\n        mapping(uint256 => bool) nullifierHashes;\\n    }\\n\\n    struct Verifier {\\n        address contractAddress;\\n        uint256 merkleTreeDepth;\\n    }\\n\\n    /// @dev Emitted when an admin is assigned to a cred.\\n    /// @param issuerAddress: Address of the issuer\\n    /// @param issuerName: Name of the issuer\\n    /// @param issuerSymbol: Symbol of the issuer\\n    event issuerRegistered(\\n        address indexed issuerAddress, \\n        string indexed issuerName, \\n        string indexed issuerSymbol\\n    );\\n\\n    /// @dev Emitted when a Credential proof is verified.\\n    /// @param credId: Id of the cred.\\n    /// @param merkleTreeRoot: Root of the Merkle tree.\\n    /// @param externalNullifier: External nullifier.\\n    /// @param nullifierHash: Nullifier hash.\\n    /// @param signal: Credential signal.\\n    event ProofVerified(\\n        uint256 indexed credId,\\n        uint256 merkleTreeRoot,\\n        uint256 externalNullifier,\\n        uint256 nullifierHash,\\n        bytes32 signal\\n    );\\n    \\n}\",\"keccak256\":\"0xc7792328f4945f8f0af16e28766a33dcb2ca6e2c5e5f373cd36412988bf70bb5\",\"license\":\"MIT\"},\"@creds-protocol/contracts/interfaces/ICredentialCore.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/// @title CredentialCore interface.\\n/// @dev Interface of CredentialCore contract.\\ninterface ICredentialCore {\\n    /// @notice Emitted when a proof is verified correctly and a new nullifier hash is added.\\n    /// @param nullifierHash: Hash of external and identity nullifiers.\\n    event NullifierHashAdded(uint256 nullifierHash);\\n}\\n\",\"keccak256\":\"0x1f0ec24e95ce1a7dffa4a51b427e59f27807b6ad81ff92cb36b15ed5de94fc0b\",\"license\":\"MIT\"},\"@creds-protocol/contracts/interfaces/ICredentialCreds.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/// @title CredentialCreds interface.\\n/// @dev Interface of a CredentialCreds contract.\\ninterface ICredentialCreds {\\n    \\n    error Credential__CredDoesNotExist();\\n    error Credential__CredAlreadyExists();\\n    error Credential__CredIdIsNotLessThanSnarkScalarField();\\n\\n    /// @dev Emitted when a new cred is created.\\n    /// @param issuer: Cred Issuer\\n    /// @param credId: Id of the cred.\\n    /// @param merkleTreeDepth: Depth of the tree.\\n    /// @param zeroValue: Zero value of the tree.\\n    event CredCreated(address indexed issuer, uint256 indexed credId, uint256 merkleTreeDepth, uint256 zeroValue);\\n\\n    /// @dev Emitted when a new identity commitment is added.\\n    /// @param credId: Cred id of the cred.\\n    /// @param index: Identity commitment index.\\n    /// @param identityCommitment: New identity commitment.\\n    /// @param merkleTreeRoot: New root hash of the tree.\\n    event IdentityAdded(uint256 indexed credId, uint256 index, uint256 identityCommitment, uint256 merkleTreeRoot);\\n\\n    /// @dev Emitted when an identity commitment is updated.\\n    /// @param credId: Cred id of the cred.\\n    /// @param index: Identity commitment index.\\n    /// @param identityCommitment: Existing identity commitment to be updated.\\n    /// @param newIdentityCommitment: New identity commitment.\\n    /// @param merkleTreeRoot: New root hash of the tree.\\n    event IdentityUpdated(\\n        uint256 indexed credId,\\n        uint256 index,\\n        uint256 identityCommitment,\\n        uint256 newIdentityCommitment,\\n        uint256 merkleTreeRoot\\n    );\\n\\n    /// @dev Emitted when a new identity commitment is removed.\\n    /// @param credId: Cred id of the cred.\\n    /// @param index: Identity commitment index.\\n    /// @param identityCommitment: Existing identity commitment to be removed.\\n    /// @param merkleTreeRoot: New root hash of the tree.\\n    event IdentityRemoved(uint256 indexed credId, uint256 index, uint256 identityCommitment, uint256 merkleTreeRoot);\\n\\n    /// @dev Returns the last root hash of a cred.\\n    /// @param credId: Id of the cred.\\n    /// @return Root hash of the cred.\\n    function getMerkleTreeRoot(uint256 credId) external view returns (uint256);\\n\\n    /// @dev Returns the depth of the tree of a cred.\\n    /// @param credId: Id of the cred.\\n    /// @return Depth of the cred tree.\\n    function getMerkleTreeDepth(uint256 credId) external view returns (uint256);\\n\\n    /// @dev Returns the number of tree leaves of a cred.\\n    /// @param credId: Id of the cred.\\n    /// @return Number of tree leaves.\\n    function getNumberOfMerkleTreeLeaves(uint256 credId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x508ea756edc34a06efaa9c440fc4aaa77b5aa01a8326382806b5d8f35ab9d36e\",\"license\":\"MIT\"},\"@creds-protocol/contracts/interfaces/IVerifier.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/// @title Verifier interface.\\n/// @dev Interface of Verifier contract.\\ninterface IVerifier {\\n    function verifyProof(\\n        uint256[2] memory a,\\n        uint256[2][2] memory b,\\n        uint256[2] memory c,\\n        uint256[4] memory input\\n    ) external view;\\n}\",\"keccak256\":\"0xe0c4acba6ffee755835d287d3978d10d207ebfbb25b49140416e36a609075045\",\"license\":\"MIT\"},\"@creds-protocol/contracts/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@creds-protocol/contracts/zk-kit/incremental-merkle-tree.sol/Hashes.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary PoseidonT3 {\\n    function poseidon(uint256[2] memory) public pure returns (uint256) {}\\n}\\n\\nlibrary PoseidonT6 {\\n    function poseidon(uint256[5] memory) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xc634fec0820a2faab1bc350d94c3151835e8d2c2bc0321d9a198d62712786b81\",\"license\":\"MIT\"},\"@creds-protocol/contracts/zk-kit/incremental-merkle-tree.sol/IncrementalBinaryTree.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {PoseidonT3} from \\\"./Hashes.sol\\\";\\n\\n// Each incremental tree has certain properties and data that will\\n// be used to add new leaves.\\nstruct IncrementalTreeData {\\n    uint256 depth; // Depth of the tree (levels - 1).\\n    uint256 root; // Root hash of the tree.\\n    uint256 numberOfLeaves; // Number of leaves of the tree.\\n    mapping(uint256 => uint256) zeroes; // Zero hashes used for empty nodes (level -> zero hash).\\n    // The nodes of the subtrees used in the last addition of a leaf (level -> [left node, right node]).\\n    mapping(uint256 => uint256[2]) lastSubtrees; // Caching these values is essential to efficient appends.\\n}\\n\\n/// @title Incremental binary Merkle tree.\\n/// @dev The incremental tree allows to calculate the root hash each time a leaf is added, ensuring\\n/// the integrity of the tree.\\nlibrary IncrementalBinaryTree {\\n    uint8 internal constant MAX_DEPTH = 32;\\n    uint256 internal constant SNARK_SCALAR_FIELD =\\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n    /// @dev Initializes a tree.\\n    /// @param self: Tree data.\\n    /// @param depth: Depth of the tree.\\n    /// @param zero: Zero value to be used.\\n    function init(\\n        IncrementalTreeData storage self,\\n        uint256 depth,\\n        uint256 zero\\n    ) public {\\n        require(zero < SNARK_SCALAR_FIELD, \\\"IncrementalBinaryTree: leaf must be < SNARK_SCALAR_FIELD\\\");\\n        require(depth > 0 && depth <= MAX_DEPTH, \\\"IncrementalBinaryTree: tree depth must be between 1 and 32\\\");\\n\\n        self.depth = depth;\\n\\n        for (uint8 i = 0; i < depth; ) {\\n            self.zeroes[i] = zero;\\n            zero = PoseidonT3.poseidon([zero, zero]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        self.root = zero;\\n    }\\n\\n    /// @dev Inserts a leaf in the tree.\\n    /// @param self: Tree data.\\n    /// @param leaf: Leaf to be inserted.\\n    function insert(IncrementalTreeData storage self, uint256 leaf) public {\\n        uint256 depth = self.depth;\\n\\n        require(leaf < SNARK_SCALAR_FIELD, \\\"IncrementalBinaryTree: leaf must be < SNARK_SCALAR_FIELD\\\");\\n        require(self.numberOfLeaves < 2**depth, \\\"IncrementalBinaryTree: tree is full\\\");\\n\\n        uint256 index = self.numberOfLeaves;\\n        uint256 hash = leaf;\\n\\n        for (uint8 i = 0; i < depth; ) {\\n            if (index & 1 == 0) {\\n                self.lastSubtrees[i] = [hash, self.zeroes[i]];\\n            } else {\\n                self.lastSubtrees[i][1] = hash;\\n            }\\n\\n            hash = PoseidonT3.poseidon(self.lastSubtrees[i]);\\n            index >>= 1;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        self.root = hash;\\n        self.numberOfLeaves += 1;\\n    }\\n\\n    /// @dev Updates a leaf in the tree.\\n    /// @param self: Tree data.\\n    /// @param leaf: Leaf to be updated.\\n    /// @param newLeaf: New leaf.\\n    /// @param proofSiblings: Array of the sibling nodes of the proof of membership.\\n    /// @param proofPathIndices: Path of the proof of membership.\\n    function update(\\n        IncrementalTreeData storage self,\\n        uint256 leaf,\\n        uint256 newLeaf,\\n        uint256[] calldata proofSiblings,\\n        uint8[] calldata proofPathIndices\\n    ) public {\\n        require(\\n            verify(self, leaf, proofSiblings, proofPathIndices),\\n            \\\"IncrementalBinaryTree: leaf is not part of the tree\\\"\\n        );\\n\\n        uint256 depth = self.depth;\\n        uint256 hash = newLeaf;\\n\\n        for (uint8 i = 0; i < depth; ) {\\n            if (proofPathIndices[i] == 0) {\\n                if (proofSiblings[i] == self.lastSubtrees[i][1]) {\\n                    self.lastSubtrees[i][0] = hash;\\n                }\\n\\n                hash = PoseidonT3.poseidon([hash, proofSiblings[i]]);\\n            } else {\\n                if (proofSiblings[i] == self.lastSubtrees[i][0]) {\\n                    self.lastSubtrees[i][1] = hash;\\n                }\\n\\n                hash = PoseidonT3.poseidon([proofSiblings[i], hash]);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        self.root = hash;\\n    }\\n\\n    /// @dev Removes a leaf from the tree.\\n    /// @param self: Tree data.\\n    /// @param leaf: Leaf to be removed.\\n    /// @param proofSiblings: Array of the sibling nodes of the proof of membership.\\n    /// @param proofPathIndices: Path of the proof of membership.\\n    function remove(\\n        IncrementalTreeData storage self,\\n        uint256 leaf,\\n        uint256[] calldata proofSiblings,\\n        uint8[] calldata proofPathIndices\\n    ) public {\\n        update(self, leaf, self.zeroes[0], proofSiblings, proofPathIndices);\\n    }\\n\\n    /// @dev Verify if the path is correct and the leaf is part of the tree.\\n    /// @param self: Tree data.\\n    /// @param leaf: Leaf to be removed.\\n    /// @param proofSiblings: Array of the sibling nodes of the proof of membership.\\n    /// @param proofPathIndices: Path of the proof of membership.\\n    /// @return True or false.\\n    function verify(\\n        IncrementalTreeData storage self,\\n        uint256 leaf,\\n        uint256[] calldata proofSiblings,\\n        uint8[] calldata proofPathIndices\\n    ) private view returns (bool) {\\n        require(leaf < SNARK_SCALAR_FIELD, \\\"IncrementalBinaryTree: leaf must be < SNARK_SCALAR_FIELD\\\");\\n        uint256 depth = self.depth;\\n        require(\\n            proofPathIndices.length == depth && proofSiblings.length == depth,\\n            \\\"IncrementalBinaryTree: length of path is not correct\\\"\\n        );\\n\\n        uint256 hash = leaf;\\n\\n        for (uint8 i = 0; i < depth; ) {\\n            require(\\n                proofSiblings[i] < SNARK_SCALAR_FIELD,\\n                \\\"IncrementalBinaryTree: sibling node must be < SNARK_SCALAR_FIELD\\\"\\n            );\\n\\n            if (proofPathIndices[i] == 0) {\\n                hash = PoseidonT3.poseidon([hash, proofSiblings[i]]);\\n            } else {\\n                hash = PoseidonT3.poseidon([proofSiblings[i], hash]);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return hash == self.root;\\n    }\\n}\\n\",\"keccak256\":\"0x7aad99b66b8d77364ad901580b988257596eff6cc19d92986b376685f8dbdd1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/TrustifiedCred.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@creds-protocol/contracts/CredsIssuer.sol\\\";\\n\\ncontract TrustifiedCred is CredsIssuer {\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _credIds;\\n\\n    address public owner;\\n\\n    event CredCreated(address, uint256, uint256, uint256, string);\\n    event IssueCred(address, uint256, uint256);\\n\\n    constructor(\\n        Verifier[] memory _verifiers,\\n        address _issuer,\\n        string memory _issuerName,\\n        string memory _issuerSymbol\\n    ) CredsIssuer(_verifiers, _issuer, _issuerName, _issuerSymbol) {}\\n\\n    function issueCred(\\n        uint256 merkleTreeDepth,\\n        uint256 zeroValue,\\n        string memory credURI\\n    ) public {\\n        uint256 _credId = _credIds.current();\\n        _credIds.increment();\\n        createCred(_credId, merkleTreeDepth, zeroValue, msg.sender, credURI);\\n        emit CredCreated(\\n            msg.sender,\\n            _credId,\\n            merkleTreeDepth,\\n            zeroValue,\\n            credURI\\n        );\\n    }\\n\\n    function claimCredToTrustifiedIssuer(\\n        uint256 credId,\\n        uint256 identityCommitment\\n    ) public {\\n        addIdentity(credId, identityCommitment);\\n    }\\n}\\n\",\"keccak256\":\"0x5fec13fad56514f2244f19a58be5be7dcd9727d6b99c4ad0810f515f815510a9\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}","storageLayout":{"storage":[{"astId":615,"contract":"contracts/TrustifiedCred.sol:TrustifiedCred","label":"merkleTree","offset":0,"slot":"0","type":"t_mapping(t_uint256,t_struct(IncrementalTreeData)1197_storage)"},{"astId":15,"contract":"contracts/TrustifiedCred.sol:TrustifiedCred","label":"credsIssuer","offset":0,"slot":"1","type":"t_address"},{"astId":17,"contract":"contracts/TrustifiedCred.sol:TrustifiedCred","label":"issuerName","offset":0,"slot":"2","type":"t_string_storage"},{"astId":19,"contract":"contracts/TrustifiedCred.sol:TrustifiedCred","label":"issuerSymbol","offset":0,"slot":"3","type":"t_string_storage"},{"astId":21,"contract":"contracts/TrustifiedCred.sol:TrustifiedCred","label":"credsIssuedCount","offset":0,"slot":"4","type":"t_uint256"},{"astId":24,"contract":"contracts/TrustifiedCred.sol:TrustifiedCred","label":"credsProtocolRegistry","offset":0,"slot":"5","type":"t_address"},{"astId":30,"contract":"contracts/TrustifiedCred.sol:TrustifiedCred","label":"verifiers","offset":0,"slot":"6","type":"t_mapping(t_uint256,t_contract(IVerifier)1130)"},{"astId":36,"contract":"contracts/TrustifiedCred.sol:TrustifiedCred","label":"creds","offset":0,"slot":"7","type":"t_mapping(t_uint256,t_struct(Cred)988_storage)"},{"astId":4918,"contract":"contracts/TrustifiedCred.sol:TrustifiedCred","label":"_credIds","offset":0,"slot":"8","type":"t_struct(Counter)3167_storage"},{"astId":4920,"contract":"contracts/TrustifiedCred.sol:TrustifiedCred","label":"owner","offset":0,"slot":"9","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)2_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[2]","numberOfBytes":"64"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(IVerifier)1130":{"encoding":"inplace","label":"contract IVerifier","numberOfBytes":"20"},"t_mapping(t_uint256,t_array(t_uint256)2_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256[2])","numberOfBytes":"32","value":"t_array(t_uint256)2_storage"},"t_mapping(t_uint256,t_bool)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint256,t_contract(IVerifier)1130)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => contract IVerifier)","numberOfBytes":"32","value":"t_contract(IVerifier)1130"},"t_mapping(t_uint256,t_struct(Cred)988_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct ICredential.Cred)","numberOfBytes":"32","value":"t_struct(Cred)988_storage"},"t_mapping(t_uint256,t_struct(IncrementalTreeData)1197_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct IncrementalTreeData)","numberOfBytes":"32","value":"t_struct(IncrementalTreeData)1197_storage"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Counter)3167_storage":{"encoding":"inplace","label":"struct Counters.Counter","members":[{"astId":3166,"contract":"contracts/TrustifiedCred.sol:TrustifiedCred","label":"_value","offset":0,"slot":"0","type":"t_uint256"}],"numberOfBytes":"32"},"t_struct(Cred)988_storage":{"encoding":"inplace","label":"struct ICredential.Cred","members":[{"astId":975,"contract":"contracts/TrustifiedCred.sol:TrustifiedCred","label":"admin","offset":0,"slot":"0","type":"t_address"},{"astId":977,"contract":"contracts/TrustifiedCred.sol:TrustifiedCred","label":"credURI","offset":0,"slot":"1","type":"t_string_storage"},{"astId":979,"contract":"contracts/TrustifiedCred.sol:TrustifiedCred","label":"merkleRootDuration","offset":0,"slot":"2","type":"t_uint256"},{"astId":983,"contract":"contracts/TrustifiedCred.sol:TrustifiedCred","label":"merkleRootCreationDates","offset":0,"slot":"3","type":"t_mapping(t_uint256,t_uint256)"},{"astId":987,"contract":"contracts/TrustifiedCred.sol:TrustifiedCred","label":"nullifierHashes","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_bool)"}],"numberOfBytes":"160"},"t_struct(IncrementalTreeData)1197_storage":{"encoding":"inplace","label":"struct IncrementalTreeData","members":[{"astId":1182,"contract":"contracts/TrustifiedCred.sol:TrustifiedCred","label":"depth","offset":0,"slot":"0","type":"t_uint256"},{"astId":1184,"contract":"contracts/TrustifiedCred.sol:TrustifiedCred","label":"root","offset":0,"slot":"1","type":"t_uint256"},{"astId":1186,"contract":"contracts/TrustifiedCred.sol:TrustifiedCred","label":"numberOfLeaves","offset":0,"slot":"2","type":"t_uint256"},{"astId":1190,"contract":"contracts/TrustifiedCred.sol:TrustifiedCred","label":"zeroes","offset":0,"slot":"3","type":"t_mapping(t_uint256,t_uint256)"},{"astId":1196,"contract":"contracts/TrustifiedCred.sol:TrustifiedCred","label":"lastSubtrees","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_array(t_uint256)2_storage)"}],"numberOfBytes":"160"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"events":{"NullifierHashAdded(uint256)":{"notice":"Emitted when a proof is verified correctly and a new nullifier hash is added."}},"kind":"user","methods":{},"version":1}}},"contracts/TrustifiedCreds.sol":{"TrustifiedCreds":{"abi":[{"inputs":[],"name":"Credential__CallerIsNotTheCredIssuer","type":"error"},{"inputs":[],"name":"Credential__MerkleTreeDepthIsNotSupported","type":"error"},{"inputs":[],"name":"Credential__MerkleTreeRootIsExpired","type":"error"},{"inputs":[],"name":"Credential__MerkleTreeRootIsNotPartOfTheCred","type":"error"},{"inputs":[],"name":"Credential__YouAreUsingTheSameNillifierTwice","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"credId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"merkleTreeRoot","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"externalNullifier","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"nullifierHash","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"signal","type":"bytes32"}],"name":"ProofVerified","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"","type":"address"},{"indexed":false,"internalType":"address","name":"","type":"address"}],"name":"createIssuer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"issuerAddress","type":"address"},{"indexed":true,"internalType":"string","name":"issuerName","type":"string"},{"indexed":true,"internalType":"string","name":"issuerSymbol","type":"string"}],"name":"issuerRegistered","type":"event"},{"inputs":[{"components":[{"internalType":"address","name":"contractAddress","type":"address"},{"internalType":"uint256","name":"merkleTreeDepth","type":"uint256"}],"internalType":"struct ICredential.Verifier[]","name":"_verifiers","type":"tuple[]"},{"internalType":"address","name":"_issuer","type":"address"},{"internalType":"string","name":"_issuerName","type":"string"},{"internalType":"string","name":"_issuerSymbol","type":"string"}],"name":"createCredIssuer","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{"@creds-protocol/contracts/zk-kit/incremental-merkle-tree.sol/IncrementalBinaryTree.sol":{"IncrementalBinaryTree":[{"length":20,"start":6447},{"length":20,"start":6727}]}},"object":"608060405234801561001057600080fd5b5061224b806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200002e5760003560e01c80632779aae81462000033575b600080fd5b6200005160048036038101906200004b91906200031a565b62000053565b005b600084848484604051620000679062000177565b62000076949392919062000529565b604051809103906000f08015801562000093573d6000803e3d6000fd5b5090506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f6b59dd75e5d76f5aed41f1f1c514a52089b859a05855b657a5c4f6f5e8c7f611338260405162000168929190620004fc565b60405180910390a15050505050565b611a7a806200079c83390190565b60006200019c6200019684620005b4565b6200058b565b90508083825260208201905082856040860282011115620001bc57600080fd5b60005b85811015620001f05781620001d58882620002b0565b845260208401935060408301925050600181019050620001bf565b5050509392505050565b6000620002116200020b84620005e3565b6200058b565b9050828152602081018484840111156200022a57600080fd5b62000237848285620006ac565b509392505050565b600081359050620002508162000767565b92915050565b600082601f8301126200026857600080fd5b81356200027a84826020860162000185565b91505092915050565b600082601f8301126200029557600080fd5b8135620002a7848260208601620001fa565b91505092915050565b600060408284031215620002c357600080fd5b620002cf60406200058b565b90506000620002e1848285016200023f565b6000830152506020620002f78482850162000303565b60208301525092915050565b600081359050620003148162000781565b92915050565b600080600080608085870312156200033157600080fd5b600085013567ffffffffffffffff8111156200034c57600080fd5b6200035a8782880162000256565b94505060206200036d878288016200023f565b935050604085013567ffffffffffffffff8111156200038b57600080fd5b620003998782880162000283565b925050606085013567ffffffffffffffff811115620003b757600080fd5b620003c58782880162000283565b91505092959194509250565b6000620003df8383620004b8565b60408301905092915050565b620003f6816200066e565b82525050565b62000407816200066e565b82525050565b60006200041a8262000629565b6200042681856200064c565b9350620004338362000619565b8060005b838110156200046a5781516200044e8882620003d1565b97506200045b836200063f565b92505060018101905062000437565b5085935050505092915050565b6000620004848262000634565b6200049081856200065d565b9350620004a2818560208601620006bb565b620004ad8162000756565b840191505092915050565b604082016000820151620004d06000850182620003eb565b506020820151620004e56020850182620004eb565b50505050565b620004f681620006a2565b82525050565b6000604082019050620005136000830185620003fc565b620005226020830184620003fc565b9392505050565b600060808201905081810360008301526200054581876200040d565b9050620005566020830186620003fc565b81810360408301526200056a818562000477565b9050818103606083015262000580818462000477565b905095945050505050565b600062000597620005aa565b9050620005a58282620006f1565b919050565b6000604051905090565b600067ffffffffffffffff821115620005d257620005d162000727565b5b602082029050602081019050919050565b600067ffffffffffffffff82111562000601576200060062000727565b5b6200060c8262000756565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006200067b8262000682565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015620006db578082015181840152602081019050620006be565b83811115620006eb576000848401525b50505050565b620006fc8262000756565b810181811067ffffffffffffffff821117156200071e576200071d62000727565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b62000772816200066e565b81146200077e57600080fd5b50565b6200078c81620006a2565b81146200079857600080fd5b5056fe608060405273414b893562f46f5180971c3389784a447581b2d3600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200006657600080fd5b5060405162001a7a38038062001a7a83398181016040528101906200008c91906200055b565b8383838360005b84518160ff1610156200018e57848160ff1681518110620000dd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000015160066000878460ff16815181106200012a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160200151815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600101905062000093565b5082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160029080519060200190620001e892919062000316565b5080600390805190602001906200020192919062000316565b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c2551c8284306040518363ffffffff1660e01b81526004016200026192919062000673565b600060405180830381600087803b1580156200027c57600080fd5b505af115801562000291573d6000803e3d6000fd5b5050505080604051620002a591906200065a565b604051809103902082604051620002bd91906200065a565b60405180910390208473ffffffffffffffffffffffffffffffffffffffff167ff51d47712d8574bf3715cf1db64ebb5a5c264fe57ff450433484f786f742ecec60405160405180910390a45050505050505050620008c7565b8280546200032490620007b8565b90600052602060002090601f01602090048101928262000348576000855562000394565b82601f106200036357805160ff191683800117855562000394565b8280016001018555821562000394579182015b828111156200039357825182559160200191906001019062000376565b5b509050620003a39190620003a7565b5090565b5b80821115620003c2576000816000905550600101620003a8565b5090565b6000620003dd620003d784620006c9565b620006a0565b90508083825260208201905082856040860282011115620003fd57600080fd5b60005b85811015620004315781620004168882620004f1565b84526020840193506040830192505060018101905062000400565b5050509392505050565b6000620004526200044c84620006f8565b620006a0565b9050828152602081018484840111156200046b57600080fd5b6200047884828562000782565b509392505050565b600081519050620004918162000893565b92915050565b600082601f830112620004a957600080fd5b8151620004bb848260208601620003c6565b91505092915050565b600082601f830112620004d657600080fd5b8151620004e88482602086016200043b565b91505092915050565b6000604082840312156200050457600080fd5b620005106040620006a0565b90506000620005228482850162000480565b6000830152506020620005388482850162000544565b60208301525092915050565b6000815190506200055581620008ad565b92915050565b600080600080608085870312156200057257600080fd5b600085015167ffffffffffffffff8111156200058d57600080fd5b6200059b8782880162000497565b9450506020620005ae8782880162000480565b935050604085015167ffffffffffffffff811115620005cc57600080fd5b620005da87828801620004c4565b925050606085015167ffffffffffffffff811115620005f857600080fd5b6200060687828801620004c4565b91505092959194509250565b6200061d8162000744565b82525050565b600062000630826200072e565b6200063c818562000739565b93506200064e81856020860162000782565b80840191505092915050565b600062000668828462000623565b915081905092915050565b60006040820190506200068a600083018562000612565b62000699602083018462000612565b9392505050565b6000620006ac620006bf565b9050620006ba8282620007ee565b919050565b6000604051905090565b600067ffffffffffffffff821115620006e757620006e662000853565b5b602082029050602081019050919050565b600067ffffffffffffffff82111562000716576200071562000853565b5b620007218262000882565b9050602081019050919050565b600081519050919050565b600081905092915050565b6000620007518262000758565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015620007a257808201518184015260208101905062000785565b83811115620007b2576000848401525b50505050565b60006002820490506001821680620007d157607f821691505b60208210811415620007e857620007e762000824565b5b50919050565b620007f98262000882565b810181811067ffffffffffffffff821117156200081b576200081a62000853565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6200089e8162000744565b8114620008aa57600080fd5b50565b620008b88162000778565b8114620008c457600080fd5b50565b6111a380620008d76000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063c308dd5b11610066578063c308dd5b1461022a578063dabc4d5114610248578063e69743cd14610278578063eb49610614610294576100cf565b80638da5cb5b146101c0578063909d9ef7146101de578063ac1eff68146101fa576100cf565b80632e9868f8146100d4578063439d7275146100f25780634ce39ead14610110578063638480be1461012e5780636389e1071461015e57806381cc7a451461018e575b600080fd5b6100dc6102b2565b6040516100e99190610dba565b60405180910390f35b6100fa610340565b6040516101079190610dba565b60405180910390f35b6101186103ce565b6040516101259190610cec565b60405180910390f35b61014860048036038101906101439190610ba4565b6103f4565b6040516101559190610e3c565b60405180910390f35b61017860048036038101906101739190610ba4565b610413565b6040516101859190610e3c565b60405180910390f35b6101a860048036038101906101a39190610ba4565b610432565b6040516101b793929190610d07565b60405180910390f35b6101c8610504565b6040516101d59190610cec565b60405180910390f35b6101f860048036038101906101f39190610c09565b61052a565b005b610214600480360381019061020f9190610ba4565b610594565b6040516102219190610d9f565b60405180910390f35b6102326105c7565b60405161023f9190610cec565b60405180910390f35b610262600480360381019061025d9190610ba4565b6105ed565b60405161026f9190610e3c565b60405180910390f35b610292600480360381019061028d9190610bcd565b61060c565b005b61029c61061a565b6040516102a99190610e3c565b60405180910390f35b600280546102bf90611055565b80601f01602080910402602001604051908101604052809291908181526020018280546102eb90611055565b80156103385780601f1061030d57610100808354040283529160200191610338565b820191906000526020600020905b81548152906001019060200180831161031b57829003601f168201915b505050505081565b6003805461034d90611055565b80601f016020809104026020016040519081016040528092919081815260200182805461037990611055565b80156103c65780601f1061039b576101008083540402835291602001916103c6565b820191906000526020600020905b8154815290600101906020018083116103a957829003601f168201915b505050505081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000838152602001908152602001600020600201549050919050565b6000806000838152602001908152602001600020600001549050919050565b60076020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101805461047b90611055565b80601f01602080910402602001604051908101604052809291908181526020018280546104a790611055565b80156104f45780601f106104c9576101008083540402835291602001916104f4565b820191906000526020600020905b8154815290600101906020018083116104d757829003601f168201915b5050505050908060020154905083565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006105366008610620565b9050610542600861062e565b61054f8185853386610644565b7f2ed4f0a950535d9dbe363dbcdaedbbdf03aa9f33d5b1b70b74554debef4d10f43382868686604051610586959493929190610d45565b60405180910390a150505050565b60066020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000838152602001908152602001600020600101549050919050565b61061682826107a5565b5050565b60045481565b600081600001549050919050565b6001816000016000828254019250508190555050565b83600073ffffffffffffffffffffffffffffffffffffffff166006600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156106df576040517f679101ad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106eb338787876107ed565b826007600088815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160076000888152602001908152602001600020600101908051906020019061076a929190610a84565b50610e10600760008881526020019081526020016000206002018190555060016004546107979190610f29565b600481905550505050505050565b6107af828261095d565b60006107ba836105ed565b90504260076000858152602001908152602001600020600301600083815260200190815260200160002081905550505050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018310610846576040517fe730108f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061085184610413565b14610888576040517f632ab44600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008084815260200190815260200160002073__$fb9ee77876a75724f11f9f12d9558a3f31$__631095fbb4909184846040518463ffffffff1660e01b81526004016108d693929190610e05565b60006040518083038186803b1580156108ee57600080fd5b505af4158015610902573d6000803e3d6000fd5b50505050828473ffffffffffffffffffffffffffffffffffffffff167f8cd7e348e0ad6531fc8e95ec90286ba9246aa70c3d94d7fca9eb8afd6e78c35e848460405161094f929190610e57565b60405180910390a350505050565b600061096883610413565b14156109a0576040517f84124a0d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008083815260200190815260200160002073__$fb9ee77876a75724f11f9f12d9558a3f31$__63168703fa9091836040518363ffffffff1660e01b81526004016109ec929190610ddc565b60006040518083038186803b158015610a0457600080fd5b505af4158015610a18573d6000803e3d6000fd5b505050506000610a27836105ed565b905060006001610a36856103f4565b610a409190610f7f565b9050837fe5b5631e8acf74ed776b8262e656d2b63e56882d6eb3e7d6e8b8c09661f2ca03828585604051610a7693929190610e80565b60405180910390a250505050565b828054610a9090611055565b90600052602060002090601f016020900481019282610ab25760008555610af9565b82601f10610acb57805160ff1916838001178555610af9565b82800160010185558215610af9579182015b82811115610af8578251825591602001919060010190610add565b5b509050610b069190610b0a565b5090565b5b80821115610b23576000816000905550600101610b0b565b5090565b6000610b3a610b3584610edc565b610eb7565b905082815260208101848484011115610b5257600080fd5b610b5d848285611013565b509392505050565b600082601f830112610b7657600080fd5b8135610b86848260208601610b27565b91505092915050565b600081359050610b9e81611156565b92915050565b600060208284031215610bb657600080fd5b6000610bc484828501610b8f565b91505092915050565b60008060408385031215610be057600080fd5b6000610bee85828601610b8f565b9250506020610bff85828601610b8f565b9150509250929050565b600080600060608486031215610c1e57600080fd5b6000610c2c86828701610b8f565b9350506020610c3d86828701610b8f565b925050604084013567ffffffffffffffff811115610c5a57600080fd5b610c6686828701610b65565b9150509250925092565b610c7981610fb3565b82525050565b610c8881610fef565b82525050565b6000610c9982610f0d565b610ca38185610f18565b9350610cb3818560208601611022565b610cbc81611145565b840191505092915050565b8082525050565b610cd781610fe5565b82525050565b610ce681610fe5565b82525050565b6000602082019050610d016000830184610c70565b92915050565b6000606082019050610d1c6000830186610c70565b8181036020830152610d2e8185610c8e565b9050610d3d6040830184610cce565b949350505050565b600060a082019050610d5a6000830188610c70565b610d676020830187610cce565b610d746040830186610cce565b610d816060830185610cce565b8181036080830152610d938184610c8e565b90509695505050505050565b6000602082019050610db46000830184610c7f565b92915050565b60006020820190508181036000830152610dd48184610c8e565b905092915050565b6000604082019050610df16000830185610cc7565b610dfe6020830184610cdd565b9392505050565b6000606082019050610e1a6000830186610cc7565b610e276020830185610cdd565b610e346040830184610cdd565b949350505050565b6000602082019050610e516000830184610cce565b92915050565b6000604082019050610e6c6000830185610cce565b610e796020830184610cce565b9392505050565b6000606082019050610e956000830186610cce565b610ea26020830185610cce565b610eaf6040830184610cce565b949350505050565b6000610ec1610ed2565b9050610ecd8282611087565b919050565b6000604051905090565b600067ffffffffffffffff821115610ef757610ef6611116565b5b610f0082611145565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000610f3482610fe5565b9150610f3f83610fe5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610f7457610f736110b8565b5b828201905092915050565b6000610f8a82610fe5565b9150610f9583610fe5565b925082821015610fa857610fa76110b8565b5b828203905092915050565b6000610fbe82610fc5565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610ffa82611001565b9050919050565b600061100c82610fc5565b9050919050565b82818337600083830152505050565b60005b83811015611040578082015181840152602081019050611025565b8381111561104f576000848401525b50505050565b6000600282049050600182168061106d57607f821691505b60208210811415611081576110806110e7565b5b50919050565b61109082611145565b810181811067ffffffffffffffff821117156110af576110ae611116565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b61115f81610fe5565b811461116a57600080fd5b5056fea2646970667358221220dd2571cc5f732723909b8df8a96a3e9c98a295162094be23a0e6494c2d49a4d764736f6c63430008040033a2646970667358221220e85089cae8f5aa310a586ad121e1c11cfe6ae6bb3e76f616acb8d2f6ff844c7464736f6c63430008040033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x224B DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH3 0x2E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2779AAE8 EQ PUSH3 0x33 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x51 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0x4B SWAP2 SWAP1 PUSH3 0x31A JUMP JUMPDEST PUSH3 0x53 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP5 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH3 0x67 SWAP1 PUSH3 0x177 JUMP JUMPDEST PUSH3 0x76 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x529 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x93 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0x6B59DD75E5D76F5AED41F1F1C514A52089B859A05855B657A5C4F6F5E8C7F611 CALLER DUP3 PUSH1 0x40 MLOAD PUSH3 0x168 SWAP3 SWAP2 SWAP1 PUSH3 0x4FC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1A7A DUP1 PUSH3 0x79C DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x19C PUSH3 0x196 DUP5 PUSH3 0x5B4 JUMP JUMPDEST PUSH3 0x58B JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP DUP3 DUP6 PUSH1 0x40 DUP7 MUL DUP3 ADD GT ISZERO PUSH3 0x1BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH3 0x1F0 JUMPI DUP2 PUSH3 0x1D5 DUP9 DUP3 PUSH3 0x2B0 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x40 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x1BF JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x211 PUSH3 0x20B DUP5 PUSH3 0x5E3 JUMP JUMPDEST PUSH3 0x58B JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x22A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x237 DUP5 DUP3 DUP6 PUSH3 0x6AC JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH3 0x250 DUP2 PUSH3 0x767 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x268 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH3 0x27A DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x185 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x295 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH3 0x2A7 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x1FA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x2C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x2CF PUSH1 0x40 PUSH3 0x58B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH3 0x2E1 DUP5 DUP3 DUP6 ADD PUSH3 0x23F JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH3 0x2F7 DUP5 DUP3 DUP6 ADD PUSH3 0x303 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH3 0x314 DUP2 PUSH3 0x781 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x331 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x34C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x35A DUP8 DUP3 DUP9 ADD PUSH3 0x256 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH3 0x36D DUP8 DUP3 DUP9 ADD PUSH3 0x23F JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x38B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x399 DUP8 DUP3 DUP9 ADD PUSH3 0x283 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x3B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x3C5 DUP8 DUP3 DUP9 ADD PUSH3 0x283 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x3DF DUP4 DUP4 PUSH3 0x4B8 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x3F6 DUP2 PUSH3 0x66E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH3 0x407 DUP2 PUSH3 0x66E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x41A DUP3 PUSH3 0x629 JUMP JUMPDEST PUSH3 0x426 DUP2 DUP6 PUSH3 0x64C JUMP JUMPDEST SWAP4 POP PUSH3 0x433 DUP4 PUSH3 0x619 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x46A JUMPI DUP2 MLOAD PUSH3 0x44E DUP9 DUP3 PUSH3 0x3D1 JUMP JUMPDEST SWAP8 POP PUSH3 0x45B DUP4 PUSH3 0x63F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x437 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x484 DUP3 PUSH3 0x634 JUMP JUMPDEST PUSH3 0x490 DUP2 DUP6 PUSH3 0x65D JUMP JUMPDEST SWAP4 POP PUSH3 0x4A2 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH3 0x6BB JUMP JUMPDEST PUSH3 0x4AD DUP2 PUSH3 0x756 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH3 0x4D0 PUSH1 0x0 DUP6 ADD DUP3 PUSH3 0x3EB JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH3 0x4E5 PUSH1 0x20 DUP6 ADD DUP3 PUSH3 0x4EB JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH3 0x4F6 DUP2 PUSH3 0x6A2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH3 0x513 PUSH1 0x0 DUP4 ADD DUP6 PUSH3 0x3FC JUMP JUMPDEST PUSH3 0x522 PUSH1 0x20 DUP4 ADD DUP5 PUSH3 0x3FC JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x545 DUP2 DUP8 PUSH3 0x40D JUMP JUMPDEST SWAP1 POP PUSH3 0x556 PUSH1 0x20 DUP4 ADD DUP7 PUSH3 0x3FC JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH3 0x56A DUP2 DUP6 PUSH3 0x477 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH3 0x580 DUP2 DUP5 PUSH3 0x477 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x597 PUSH3 0x5AA JUMP JUMPDEST SWAP1 POP PUSH3 0x5A5 DUP3 DUP3 PUSH3 0x6F1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x5D2 JUMPI PUSH3 0x5D1 PUSH3 0x727 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x601 JUMPI PUSH3 0x600 PUSH3 0x727 JUMP JUMPDEST JUMPDEST PUSH3 0x60C DUP3 PUSH3 0x756 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x67B DUP3 PUSH3 0x682 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x6DB JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x6BE JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x6EB JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH3 0x6FC DUP3 PUSH3 0x756 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x71E JUMPI PUSH3 0x71D PUSH3 0x727 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x772 DUP2 PUSH3 0x66E JUMP JUMPDEST DUP2 EQ PUSH3 0x77E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0x78C DUP2 PUSH3 0x6A2 JUMP JUMPDEST DUP2 EQ PUSH3 0x798 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH20 0x414B893562F46F5180971C3389784A447581B2D3 PUSH1 0x5 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLVALUE DUP1 ISZERO PUSH3 0x66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1A7A CODESIZE SUB DUP1 PUSH3 0x1A7A DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x8C SWAP2 SWAP1 PUSH3 0x55B JUMP JUMPDEST DUP4 DUP4 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 PUSH1 0xFF AND LT ISZERO PUSH3 0x18E JUMPI DUP5 DUP2 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH3 0xDD JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x6 PUSH1 0x0 DUP8 DUP5 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH3 0x12A JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH3 0x93 JUMP JUMPDEST POP DUP3 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0x2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x1E8 SWAP3 SWAP2 SWAP1 PUSH3 0x316 JUMP JUMPDEST POP DUP1 PUSH1 0x3 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x201 SWAP3 SWAP2 SWAP1 PUSH3 0x316 JUMP JUMPDEST POP PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xC2551C82 DUP5 ADDRESS PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x261 SWAP3 SWAP2 SWAP1 PUSH3 0x673 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x27C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x291 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH1 0x40 MLOAD PUSH3 0x2A5 SWAP2 SWAP1 PUSH3 0x65A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP3 PUSH1 0x40 MLOAD PUSH3 0x2BD SWAP2 SWAP1 PUSH3 0x65A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF51D47712D8574BF3715CF1DB64EBB5A5C264FE57FF450433484F786F742ECEC PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP POP PUSH3 0x8C7 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x324 SWAP1 PUSH3 0x7B8 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x348 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x394 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x363 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x394 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x394 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x393 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x376 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0x3A3 SWAP2 SWAP1 PUSH3 0x3A7 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x3C2 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x3A8 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x3DD PUSH3 0x3D7 DUP5 PUSH3 0x6C9 JUMP JUMPDEST PUSH3 0x6A0 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP DUP3 DUP6 PUSH1 0x40 DUP7 MUL DUP3 ADD GT ISZERO PUSH3 0x3FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH3 0x431 JUMPI DUP2 PUSH3 0x416 DUP9 DUP3 PUSH3 0x4F1 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x40 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x400 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x452 PUSH3 0x44C DUP5 PUSH3 0x6F8 JUMP JUMPDEST PUSH3 0x6A0 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x46B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x478 DUP5 DUP3 DUP6 PUSH3 0x782 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x491 DUP2 PUSH3 0x893 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x4A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x4BB DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x3C6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x4D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x4E8 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x43B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x504 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x510 PUSH1 0x40 PUSH3 0x6A0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH3 0x522 DUP5 DUP3 DUP6 ADD PUSH3 0x480 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH3 0x538 DUP5 DUP3 DUP6 ADD PUSH3 0x544 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x555 DUP2 PUSH3 0x8AD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x572 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP6 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x58D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x59B DUP8 DUP3 DUP9 ADD PUSH3 0x497 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH3 0x5AE DUP8 DUP3 DUP9 ADD PUSH3 0x480 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x5CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x5DA DUP8 DUP3 DUP9 ADD PUSH3 0x4C4 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x5F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x606 DUP8 DUP3 DUP9 ADD PUSH3 0x4C4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH3 0x61D DUP2 PUSH3 0x744 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x630 DUP3 PUSH3 0x72E JUMP JUMPDEST PUSH3 0x63C DUP2 DUP6 PUSH3 0x739 JUMP JUMPDEST SWAP4 POP PUSH3 0x64E DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH3 0x782 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x668 DUP3 DUP5 PUSH3 0x623 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH3 0x68A PUSH1 0x0 DUP4 ADD DUP6 PUSH3 0x612 JUMP JUMPDEST PUSH3 0x699 PUSH1 0x20 DUP4 ADD DUP5 PUSH3 0x612 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x6AC PUSH3 0x6BF JUMP JUMPDEST SWAP1 POP PUSH3 0x6BA DUP3 DUP3 PUSH3 0x7EE JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x6E7 JUMPI PUSH3 0x6E6 PUSH3 0x853 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x716 JUMPI PUSH3 0x715 PUSH3 0x853 JUMP JUMPDEST JUMPDEST PUSH3 0x721 DUP3 PUSH3 0x882 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x751 DUP3 PUSH3 0x758 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x7A2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x785 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x7B2 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x7D1 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x7E8 JUMPI PUSH3 0x7E7 PUSH3 0x824 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x7F9 DUP3 PUSH3 0x882 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x81B JUMPI PUSH3 0x81A PUSH3 0x853 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x89E DUP2 PUSH3 0x744 JUMP JUMPDEST DUP2 EQ PUSH3 0x8AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0x8B8 DUP2 PUSH3 0x778 JUMP JUMPDEST DUP2 EQ PUSH3 0x8C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x11A3 DUP1 PUSH3 0x8D7 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xC308DD5B GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xC308DD5B EQ PUSH2 0x22A JUMPI DUP1 PUSH4 0xDABC4D51 EQ PUSH2 0x248 JUMPI DUP1 PUSH4 0xE69743CD EQ PUSH2 0x278 JUMPI DUP1 PUSH4 0xEB496106 EQ PUSH2 0x294 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1C0 JUMPI DUP1 PUSH4 0x909D9EF7 EQ PUSH2 0x1DE JUMPI DUP1 PUSH4 0xAC1EFF68 EQ PUSH2 0x1FA JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x2E9868F8 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x439D7275 EQ PUSH2 0xF2 JUMPI DUP1 PUSH4 0x4CE39EAD EQ PUSH2 0x110 JUMPI DUP1 PUSH4 0x638480BE EQ PUSH2 0x12E JUMPI DUP1 PUSH4 0x6389E107 EQ PUSH2 0x15E JUMPI DUP1 PUSH4 0x81CC7A45 EQ PUSH2 0x18E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDC PUSH2 0x2B2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0xDBA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFA PUSH2 0x340 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x107 SWAP2 SWAP1 PUSH2 0xDBA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x118 PUSH2 0x3CE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x125 SWAP2 SWAP1 PUSH2 0xCEC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x148 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x143 SWAP2 SWAP1 PUSH2 0xBA4 JUMP JUMPDEST PUSH2 0x3F4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x155 SWAP2 SWAP1 PUSH2 0xE3C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x178 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x173 SWAP2 SWAP1 PUSH2 0xBA4 JUMP JUMPDEST PUSH2 0x413 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x185 SWAP2 SWAP1 PUSH2 0xE3C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1A3 SWAP2 SWAP1 PUSH2 0xBA4 JUMP JUMPDEST PUSH2 0x432 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xD07 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C8 PUSH2 0x504 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D5 SWAP2 SWAP1 PUSH2 0xCEC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F3 SWAP2 SWAP1 PUSH2 0xC09 JUMP JUMPDEST PUSH2 0x52A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x214 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x20F SWAP2 SWAP1 PUSH2 0xBA4 JUMP JUMPDEST PUSH2 0x594 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x221 SWAP2 SWAP1 PUSH2 0xD9F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x232 PUSH2 0x5C7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23F SWAP2 SWAP1 PUSH2 0xCEC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x262 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x25D SWAP2 SWAP1 PUSH2 0xBA4 JUMP JUMPDEST PUSH2 0x5ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26F SWAP2 SWAP1 PUSH2 0xE3C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x292 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x28D SWAP2 SWAP1 PUSH2 0xBCD JUMP JUMPDEST PUSH2 0x60C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x29C PUSH2 0x61A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A9 SWAP2 SWAP1 PUSH2 0xE3C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH2 0x2BF SWAP1 PUSH2 0x1055 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2EB SWAP1 PUSH2 0x1055 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x338 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x30D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x338 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x31B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH2 0x34D SWAP1 PUSH2 0x1055 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x379 SWAP1 PUSH2 0x1055 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3C6 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x39B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3C6 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3A9 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x47B SWAP1 PUSH2 0x1055 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x4A7 SWAP1 PUSH2 0x1055 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4F4 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4C9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x4F4 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x4D7 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 POP DUP4 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x536 PUSH1 0x8 PUSH2 0x620 JUMP JUMPDEST SWAP1 POP PUSH2 0x542 PUSH1 0x8 PUSH2 0x62E JUMP JUMPDEST PUSH2 0x54F DUP2 DUP6 DUP6 CALLER DUP7 PUSH2 0x644 JUMP JUMPDEST PUSH32 0x2ED4F0A950535D9DBE363DBCDAEDBBDF03AA9F33D5B1B70B74554DEBEF4D10F4 CALLER DUP3 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x586 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xD45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x616 DUP3 DUP3 PUSH2 0x7A5 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST DUP4 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x6 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x6DF JUMPI PUSH1 0x40 MLOAD PUSH32 0x679101AD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x6EB CALLER DUP8 DUP8 DUP8 PUSH2 0x7ED JUMP JUMPDEST DUP3 PUSH1 0x7 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0x7 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x76A SWAP3 SWAP2 SWAP1 PUSH2 0xA84 JUMP JUMPDEST POP PUSH2 0xE10 PUSH1 0x7 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x4 SLOAD PUSH2 0x797 SWAP2 SWAP1 PUSH2 0xF29 JUMP JUMPDEST PUSH1 0x4 DUP2 SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x7AF DUP3 DUP3 PUSH2 0x95D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7BA DUP4 PUSH2 0x5ED JUMP JUMPDEST SWAP1 POP TIMESTAMP PUSH1 0x7 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH32 0x30644E72E131A029B85045B68181585D2833E84879B9709143E1F593F0000001 DUP4 LT PUSH2 0x846 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE730108F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x851 DUP5 PUSH2 0x413 JUMP JUMPDEST EQ PUSH2 0x888 JUMPI PUSH1 0x40 MLOAD PUSH32 0x632AB44600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH20 0x0 PUSH4 0x1095FBB4 SWAP1 SWAP2 DUP5 DUP5 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D6 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xE05 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x902 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP3 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8CD7E348E0AD6531FC8E95EC90286BA9246AA70C3D94D7FCA9EB8AFD6E78C35E DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x94F SWAP3 SWAP2 SWAP1 PUSH2 0xE57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x968 DUP4 PUSH2 0x413 JUMP JUMPDEST EQ ISZERO PUSH2 0x9A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x84124A0D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH20 0x0 PUSH4 0x168703FA SWAP1 SWAP2 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9EC SWAP3 SWAP2 SWAP1 PUSH2 0xDDC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA04 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xA18 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 PUSH2 0xA27 DUP4 PUSH2 0x5ED JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH2 0xA36 DUP6 PUSH2 0x3F4 JUMP JUMPDEST PUSH2 0xA40 SWAP2 SWAP1 PUSH2 0xF7F JUMP JUMPDEST SWAP1 POP DUP4 PUSH32 0xE5B5631E8ACF74ED776B8262E656D2B63E56882D6EB3E7D6E8B8C09661F2CA03 DUP3 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0xA76 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xE80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0xA90 SWAP1 PUSH2 0x1055 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0xAB2 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0xAF9 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0xACB JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0xAF9 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0xAF9 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0xAF8 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xADD JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0xB06 SWAP2 SWAP1 PUSH2 0xB0A JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0xB23 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0xB0B JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB3A PUSH2 0xB35 DUP5 PUSH2 0xEDC JUMP JUMPDEST PUSH2 0xEB7 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0xB52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB5D DUP5 DUP3 DUP6 PUSH2 0x1013 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xB76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xB86 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xB27 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB9E DUP2 PUSH2 0x1156 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBB6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBC4 DUP5 DUP3 DUP6 ADD PUSH2 0xB8F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBE0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBEE DUP6 DUP3 DUP7 ADD PUSH2 0xB8F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xBFF DUP6 DUP3 DUP7 ADD PUSH2 0xB8F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xC2C DUP7 DUP3 DUP8 ADD PUSH2 0xB8F JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xC3D DUP7 DUP3 DUP8 ADD PUSH2 0xB8F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC66 DUP7 DUP3 DUP8 ADD PUSH2 0xB65 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0xC79 DUP2 PUSH2 0xFB3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xC88 DUP2 PUSH2 0xFEF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC99 DUP3 PUSH2 0xF0D JUMP JUMPDEST PUSH2 0xCA3 DUP2 DUP6 PUSH2 0xF18 JUMP JUMPDEST SWAP4 POP PUSH2 0xCB3 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1022 JUMP JUMPDEST PUSH2 0xCBC DUP2 PUSH2 0x1145 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xCD7 DUP2 PUSH2 0xFE5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xCE6 DUP2 PUSH2 0xFE5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xD01 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC70 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xD1C PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xC70 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xD2E DUP2 DUP6 PUSH2 0xC8E JUMP JUMPDEST SWAP1 POP PUSH2 0xD3D PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xCCE JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0xD5A PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0xC70 JUMP JUMPDEST PUSH2 0xD67 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0xCCE JUMP JUMPDEST PUSH2 0xD74 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0xCCE JUMP JUMPDEST PUSH2 0xD81 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0xCCE JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0xD93 DUP2 DUP5 PUSH2 0xC8E JUMP JUMPDEST SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xDB4 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC7F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xDD4 DUP2 DUP5 PUSH2 0xC8E JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xDF1 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xCC7 JUMP JUMPDEST PUSH2 0xDFE PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xCDD JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xE1A PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xCC7 JUMP JUMPDEST PUSH2 0xE27 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xCDD JUMP JUMPDEST PUSH2 0xE34 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xCDD JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE51 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCCE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xE6C PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xCCE JUMP JUMPDEST PUSH2 0xE79 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xCCE JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xE95 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xCCE JUMP JUMPDEST PUSH2 0xEA2 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xCCE JUMP JUMPDEST PUSH2 0xEAF PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xCCE JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEC1 PUSH2 0xED2 JUMP JUMPDEST SWAP1 POP PUSH2 0xECD DUP3 DUP3 PUSH2 0x1087 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xEF7 JUMPI PUSH2 0xEF6 PUSH2 0x1116 JUMP JUMPDEST JUMPDEST PUSH2 0xF00 DUP3 PUSH2 0x1145 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF34 DUP3 PUSH2 0xFE5 JUMP JUMPDEST SWAP2 POP PUSH2 0xF3F DUP4 PUSH2 0xFE5 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0xF74 JUMPI PUSH2 0xF73 PUSH2 0x10B8 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF8A DUP3 PUSH2 0xFE5 JUMP JUMPDEST SWAP2 POP PUSH2 0xF95 DUP4 PUSH2 0xFE5 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0xFA8 JUMPI PUSH2 0xFA7 PUSH2 0x10B8 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFBE DUP3 PUSH2 0xFC5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFA DUP3 PUSH2 0x1001 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100C DUP3 PUSH2 0xFC5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1040 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1025 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x104F JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x106D JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1081 JUMPI PUSH2 0x1080 PUSH2 0x10E7 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1090 DUP3 PUSH2 0x1145 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x10AF JUMPI PUSH2 0x10AE PUSH2 0x1116 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x115F DUP2 PUSH2 0xFE5 JUMP JUMPDEST DUP2 EQ PUSH2 0x116A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDD 0x25 PUSH18 0xCC5F732723909B8DF8A96A3E9C98A2951620 SWAP5 0xBE 0x23 LOG0 0xE6 0x49 0x4C 0x2D 0x49 LOG4 0xD7 PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE8 POP DUP10 0xCA 0xE8 CREATE2 0xAA BALANCE EXP PC PUSH11 0xD121E1C11CFE6AE6BB3E76 0xF6 AND 0xAC 0xB8 0xD2 0xF6 SELFDESTRUCT DUP5 0x4C PUSH21 0x64736F6C6343000804003300000000000000000000 ","sourceMap":"153:554:27:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:11182:29","statements":[{"body":{"nodeType":"YulBlock","src":"171:603:29","statements":[{"nodeType":"YulAssignment","src":"181:115:29","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"288:6:29"}],"functionName":{"name":"array_allocation_size_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"206:81:29"},"nodeType":"YulFunctionCall","src":"206:89:29"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"190:15:29"},"nodeType":"YulFunctionCall","src":"190:106:29"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"181:5:29"}]},{"nodeType":"YulVariableDeclaration","src":"305:16:29","value":{"name":"array","nodeType":"YulIdentifier","src":"316:5:29"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"309:3:29","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"338:5:29"},{"name":"length","nodeType":"YulIdentifier","src":"345:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"331:6:29"},"nodeType":"YulFunctionCall","src":"331:21:29"},"nodeType":"YulExpressionStatement","src":"331:21:29"},{"nodeType":"YulAssignment","src":"361:23:29","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"372:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"379:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"368:3:29"},"nodeType":"YulFunctionCall","src":"368:16:29"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"361:3:29"}]},{"nodeType":"YulVariableDeclaration","src":"394:17:29","value":{"name":"offset","nodeType":"YulIdentifier","src":"405:6:29"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"398:3:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"460:36:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"481:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"484:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"474:6:29"},"nodeType":"YulFunctionCall","src":"474:12:29"},"nodeType":"YulExpressionStatement","src":"474:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"430:3:29"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"439:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"447:4:29","type":"","value":"0x40"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"435:3:29"},"nodeType":"YulFunctionCall","src":"435:17:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"426:3:29"},"nodeType":"YulFunctionCall","src":"426:27:29"},{"name":"end","nodeType":"YulIdentifier","src":"455:3:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"423:2:29"},"nodeType":"YulFunctionCall","src":"423:36:29"},"nodeType":"YulIf","src":"420:2:29"},{"body":{"nodeType":"YulBlock","src":"565:203:29","statements":[{"nodeType":"YulVariableDeclaration","src":"580:21:29","value":{"name":"src","nodeType":"YulIdentifier","src":"598:3:29"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"584:10:29","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"622:3:29"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"673:10:29"},{"name":"end","nodeType":"YulIdentifier","src":"685:3:29"}],"functionName":{"name":"abi_decode_t_struct$_Verifier_$993_memory_ptr","nodeType":"YulIdentifier","src":"627:45:29"},"nodeType":"YulFunctionCall","src":"627:62:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"615:6:29"},"nodeType":"YulFunctionCall","src":"615:75:29"},"nodeType":"YulExpressionStatement","src":"615:75:29"},{"nodeType":"YulAssignment","src":"703:21:29","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"714:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"719:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"710:3:29"},"nodeType":"YulFunctionCall","src":"710:14:29"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"703:3:29"}]},{"nodeType":"YulAssignment","src":"737:21:29","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"748:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"753:4:29","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"744:3:29"},"nodeType":"YulFunctionCall","src":"744:14:29"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"737:3:29"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"527:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"530:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"524:2:29"},"nodeType":"YulFunctionCall","src":"524:13:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"538:18:29","statements":[{"nodeType":"YulAssignment","src":"540:14:29","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"549:1:29"},{"kind":"number","nodeType":"YulLiteral","src":"552:1:29","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"545:3:29"},"nodeType":"YulFunctionCall","src":"545:9:29"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"540:1:29"}]}]},"pre":{"nodeType":"YulBlock","src":"509:14:29","statements":[{"nodeType":"YulVariableDeclaration","src":"511:10:29","value":{"kind":"number","nodeType":"YulLiteral","src":"520:1:29","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"515:1:29","type":""}]}]},"src":"505:263:29"}]},"name":"abi_decode_available_length_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"141:6:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"149:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"157:3:29","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"165:5:29","type":""}],"src":"44:730:29"},{"body":{"nodeType":"YulBlock","src":"864:261:29","statements":[{"nodeType":"YulAssignment","src":"874:75:29","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"941:6:29"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"899:41:29"},"nodeType":"YulFunctionCall","src":"899:49:29"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"883:15:29"},"nodeType":"YulFunctionCall","src":"883:66:29"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"874:5:29"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"965:5:29"},{"name":"length","nodeType":"YulIdentifier","src":"972:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"958:6:29"},"nodeType":"YulFunctionCall","src":"958:21:29"},"nodeType":"YulExpressionStatement","src":"958:21:29"},{"nodeType":"YulVariableDeclaration","src":"988:27:29","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"1003:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"1010:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"999:3:29"},"nodeType":"YulFunctionCall","src":"999:16:29"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"992:3:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"1053:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1062:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1065:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1055:6:29"},"nodeType":"YulFunctionCall","src":"1055:12:29"},"nodeType":"YulExpressionStatement","src":"1055:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1034:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"1039:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1030:3:29"},"nodeType":"YulFunctionCall","src":"1030:16:29"},{"name":"end","nodeType":"YulIdentifier","src":"1048:3:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1027:2:29"},"nodeType":"YulFunctionCall","src":"1027:25:29"},"nodeType":"YulIf","src":"1024:2:29"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1102:3:29"},{"name":"dst","nodeType":"YulIdentifier","src":"1107:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"1112:6:29"}],"functionName":{"name":"copy_calldata_to_memory","nodeType":"YulIdentifier","src":"1078:23:29"},"nodeType":"YulFunctionCall","src":"1078:41:29"},"nodeType":"YulExpressionStatement","src":"1078:41:29"}]},"name":"abi_decode_available_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"837:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"842:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"850:3:29","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"858:5:29","type":""}],"src":"780:345:29"},{"body":{"nodeType":"YulBlock","src":"1183:87:29","statements":[{"nodeType":"YulAssignment","src":"1193:29:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1215:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1202:12:29"},"nodeType":"YulFunctionCall","src":"1202:20:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1193:5:29"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1258:5:29"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1231:26:29"},"nodeType":"YulFunctionCall","src":"1231:33:29"},"nodeType":"YulExpressionStatement","src":"1231:33:29"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1161:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"1169:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1177:5:29","type":""}],"src":"1131:139:29"},{"body":{"nodeType":"YulBlock","src":"1415:251:29","statements":[{"body":{"nodeType":"YulBlock","src":"1464:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1473:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1476:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1466:6:29"},"nodeType":"YulFunctionCall","src":"1466:12:29"},"nodeType":"YulExpressionStatement","src":"1466:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1443:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"1451:4:29","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1439:3:29"},"nodeType":"YulFunctionCall","src":"1439:17:29"},{"name":"end","nodeType":"YulIdentifier","src":"1458:3:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1435:3:29"},"nodeType":"YulFunctionCall","src":"1435:27:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1428:6:29"},"nodeType":"YulFunctionCall","src":"1428:35:29"},"nodeType":"YulIf","src":"1425:2:29"},{"nodeType":"YulVariableDeclaration","src":"1489:34:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1516:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1503:12:29"},"nodeType":"YulFunctionCall","src":"1503:20:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1493:6:29","type":""}]},{"nodeType":"YulAssignment","src":"1532:128:29","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1633:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"1641:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1629:3:29"},"nodeType":"YulFunctionCall","src":"1629:17:29"},{"name":"length","nodeType":"YulIdentifier","src":"1648:6:29"},{"name":"end","nodeType":"YulIdentifier","src":"1656:3:29"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"1541:87:29"},"nodeType":"YulFunctionCall","src":"1541:119:29"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1532:5:29"}]}]},"name":"abi_decode_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1393:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"1401:3:29","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1409:5:29","type":""}],"src":"1313:353:29"},{"body":{"nodeType":"YulBlock","src":"1748:211:29","statements":[{"body":{"nodeType":"YulBlock","src":"1797:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1806:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1809:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1799:6:29"},"nodeType":"YulFunctionCall","src":"1799:12:29"},"nodeType":"YulExpressionStatement","src":"1799:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1776:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"1784:4:29","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1772:3:29"},"nodeType":"YulFunctionCall","src":"1772:17:29"},{"name":"end","nodeType":"YulIdentifier","src":"1791:3:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1768:3:29"},"nodeType":"YulFunctionCall","src":"1768:27:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1761:6:29"},"nodeType":"YulFunctionCall","src":"1761:35:29"},"nodeType":"YulIf","src":"1758:2:29"},{"nodeType":"YulVariableDeclaration","src":"1822:34:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1849:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1836:12:29"},"nodeType":"YulFunctionCall","src":"1836:20:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1826:6:29","type":""}]},{"nodeType":"YulAssignment","src":"1865:88:29","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1926:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"1934:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1922:3:29"},"nodeType":"YulFunctionCall","src":"1922:17:29"},{"name":"length","nodeType":"YulIdentifier","src":"1941:6:29"},{"name":"end","nodeType":"YulIdentifier","src":"1949:3:29"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"1874:47:29"},"nodeType":"YulFunctionCall","src":"1874:79:29"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1865:5:29"}]}]},"name":"abi_decode_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1726:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"1734:3:29","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1742:5:29","type":""}],"src":"1686:273:29"},{"body":{"nodeType":"YulBlock","src":"2080:449:29","statements":[{"body":{"nodeType":"YulBlock","src":"2124:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2133:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2136:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2126:6:29"},"nodeType":"YulFunctionCall","src":"2126:12:29"},"nodeType":"YulExpressionStatement","src":"2126:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"2101:3:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"2106:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2097:3:29"},"nodeType":"YulFunctionCall","src":"2097:19:29"},{"kind":"number","nodeType":"YulLiteral","src":"2118:4:29","type":"","value":"0x40"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2093:3:29"},"nodeType":"YulFunctionCall","src":"2093:30:29"},"nodeType":"YulIf","src":"2090:2:29"},{"nodeType":"YulAssignment","src":"2149:30:29","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2174:4:29","type":"","value":"0x40"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2158:15:29"},"nodeType":"YulFunctionCall","src":"2158:21:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2149:5:29"}]},{"nodeType":"YulBlock","src":"2189:161:29","statements":[{"nodeType":"YulVariableDeclaration","src":"2235:15:29","value":{"kind":"number","nodeType":"YulLiteral","src":"2249:1:29","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2239:6:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2275:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"2282:4:29","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2271:3:29"},"nodeType":"YulFunctionCall","src":"2271:16:29"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2314:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"2325:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2310:3:29"},"nodeType":"YulFunctionCall","src":"2310:22:29"},{"name":"end","nodeType":"YulIdentifier","src":"2334:3:29"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2289:20:29"},"nodeType":"YulFunctionCall","src":"2289:49:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2264:6:29"},"nodeType":"YulFunctionCall","src":"2264:75:29"},"nodeType":"YulExpressionStatement","src":"2264:75:29"}]},{"nodeType":"YulBlock","src":"2360:162:29","statements":[{"nodeType":"YulVariableDeclaration","src":"2406:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"2420:2:29","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2410:6:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2447:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"2454:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2443:3:29"},"nodeType":"YulFunctionCall","src":"2443:16:29"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2486:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"2497:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2482:3:29"},"nodeType":"YulFunctionCall","src":"2482:22:29"},{"name":"end","nodeType":"YulIdentifier","src":"2506:3:29"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2461:20:29"},"nodeType":"YulFunctionCall","src":"2461:49:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2436:6:29"},"nodeType":"YulFunctionCall","src":"2436:75:29"},"nodeType":"YulExpressionStatement","src":"2436:75:29"}]}]},"name":"abi_decode_t_struct$_Verifier_$993_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2055:9:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"2066:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2074:5:29","type":""}],"src":"2000:529:29"},{"body":{"nodeType":"YulBlock","src":"2587:87:29","statements":[{"nodeType":"YulAssignment","src":"2597:29:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2619:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2606:12:29"},"nodeType":"YulFunctionCall","src":"2606:20:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2597:5:29"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2662:5:29"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"2635:26:29"},"nodeType":"YulFunctionCall","src":"2635:33:29"},"nodeType":"YulExpressionStatement","src":"2635:33:29"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2565:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"2573:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2581:5:29","type":""}],"src":"2535:139:29"},{"body":{"nodeType":"YulBlock","src":"2867:930:29","statements":[{"body":{"nodeType":"YulBlock","src":"2914:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2923:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2926:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2916:6:29"},"nodeType":"YulFunctionCall","src":"2916:12:29"},"nodeType":"YulExpressionStatement","src":"2916:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2888:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"2897:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2884:3:29"},"nodeType":"YulFunctionCall","src":"2884:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"2909:3:29","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2880:3:29"},"nodeType":"YulFunctionCall","src":"2880:33:29"},"nodeType":"YulIf","src":"2877:2:29"},{"nodeType":"YulBlock","src":"2940:260:29","statements":[{"nodeType":"YulVariableDeclaration","src":"2955:45:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2986:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"2997:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2982:3:29"},"nodeType":"YulFunctionCall","src":"2982:17:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2969:12:29"},"nodeType":"YulFunctionCall","src":"2969:31:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2959:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"3047:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3056:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3059:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3049:6:29"},"nodeType":"YulFunctionCall","src":"3049:12:29"},"nodeType":"YulExpressionStatement","src":"3049:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3019:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"3027:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3016:2:29"},"nodeType":"YulFunctionCall","src":"3016:30:29"},"nodeType":"YulIf","src":"3013:2:29"},{"nodeType":"YulAssignment","src":"3077:113:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3162:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"3173:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3158:3:29"},"nodeType":"YulFunctionCall","src":"3158:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3182:7:29"}],"functionName":{"name":"abi_decode_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"3087:70:29"},"nodeType":"YulFunctionCall","src":"3087:103:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3077:6:29"}]}]},{"nodeType":"YulBlock","src":"3210:118:29","statements":[{"nodeType":"YulVariableDeclaration","src":"3225:16:29","value":{"kind":"number","nodeType":"YulLiteral","src":"3239:2:29","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3229:6:29","type":""}]},{"nodeType":"YulAssignment","src":"3255:63:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3290:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"3301:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3286:3:29"},"nodeType":"YulFunctionCall","src":"3286:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3310:7:29"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3265:20:29"},"nodeType":"YulFunctionCall","src":"3265:53:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3255:6:29"}]}]},{"nodeType":"YulBlock","src":"3338:221:29","statements":[{"nodeType":"YulVariableDeclaration","src":"3353:46:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3384:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"3395:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3380:3:29"},"nodeType":"YulFunctionCall","src":"3380:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3367:12:29"},"nodeType":"YulFunctionCall","src":"3367:32:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3357:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"3446:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3455:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3458:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3448:6:29"},"nodeType":"YulFunctionCall","src":"3448:12:29"},"nodeType":"YulExpressionStatement","src":"3448:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3418:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"3426:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3415:2:29"},"nodeType":"YulFunctionCall","src":"3415:30:29"},"nodeType":"YulIf","src":"3412:2:29"},{"nodeType":"YulAssignment","src":"3476:73:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3521:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"3532:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3517:3:29"},"nodeType":"YulFunctionCall","src":"3517:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3541:7:29"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"3486:30:29"},"nodeType":"YulFunctionCall","src":"3486:63:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3476:6:29"}]}]},{"nodeType":"YulBlock","src":"3569:221:29","statements":[{"nodeType":"YulVariableDeclaration","src":"3584:46:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3615:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"3626:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3611:3:29"},"nodeType":"YulFunctionCall","src":"3611:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3598:12:29"},"nodeType":"YulFunctionCall","src":"3598:32:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3588:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"3677:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3686:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3689:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3679:6:29"},"nodeType":"YulFunctionCall","src":"3679:12:29"},"nodeType":"YulExpressionStatement","src":"3679:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3649:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"3657:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3646:2:29"},"nodeType":"YulFunctionCall","src":"3646:30:29"},"nodeType":"YulIf","src":"3643:2:29"},{"nodeType":"YulAssignment","src":"3707:73:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3752:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"3763:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3748:3:29"},"nodeType":"YulFunctionCall","src":"3748:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3772:7:29"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"3717:30:29"},"nodeType":"YulFunctionCall","src":"3717:63:29"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"3707:6:29"}]}]}]},"name":"abi_decode_tuple_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptrt_addresst_string_memory_ptrt_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2813:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2824:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2836:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2844:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2852:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2860:6:29","type":""}],"src":"2680:1117:29"},{"body":{"nodeType":"YulBlock","src":"3933:149:29","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4027:6:29"},{"name":"pos","nodeType":"YulIdentifier","src":"4035:3:29"}],"functionName":{"name":"abi_encode_t_struct$_Verifier_$993_memory_ptr_to_t_struct$_Verifier_$993_memory_ptr","nodeType":"YulIdentifier","src":"3943:83:29"},"nodeType":"YulFunctionCall","src":"3943:96:29"},"nodeType":"YulExpressionStatement","src":"3943:96:29"},{"nodeType":"YulAssignment","src":"4048:28:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4066:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"4071:4:29","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4062:3:29"},"nodeType":"YulFunctionCall","src":"4062:14:29"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"4048:10:29"}]}]},"name":"abi_encodeUpdatedPos_t_struct$_Verifier_$993_memory_ptr_to_t_struct$_Verifier_$993_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"3906:6:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3914:3:29","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"3922:10:29","type":""}],"src":"3803:279:29"},{"body":{"nodeType":"YulBlock","src":"4143:53:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4160:3:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4183:5:29"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"4165:17:29"},"nodeType":"YulFunctionCall","src":"4165:24:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4153:6:29"},"nodeType":"YulFunctionCall","src":"4153:37:29"},"nodeType":"YulExpressionStatement","src":"4153:37:29"}]},"name":"abi_encode_t_address_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4131:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4138:3:29","type":""}],"src":"4088:108:29"},{"body":{"nodeType":"YulBlock","src":"4267:53:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4284:3:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4307:5:29"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"4289:17:29"},"nodeType":"YulFunctionCall","src":"4289:24:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4277:6:29"},"nodeType":"YulFunctionCall","src":"4277:37:29"},"nodeType":"YulExpressionStatement","src":"4277:37:29"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4255:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4262:3:29","type":""}],"src":"4202:118:29"},{"body":{"nodeType":"YulBlock","src":"4570:758:29","statements":[{"nodeType":"YulVariableDeclaration","src":"4580:93:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4667:5:29"}],"functionName":{"name":"array_length_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"4594:72:29"},"nodeType":"YulFunctionCall","src":"4594:79:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"4584:6:29","type":""}]},{"nodeType":"YulAssignment","src":"4682:118:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4788:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"4793:6:29"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4689:98:29"},"nodeType":"YulFunctionCall","src":"4689:111:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"4682:3:29"}]},{"nodeType":"YulVariableDeclaration","src":"4809:96:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4899:5:29"}],"functionName":{"name":"array_dataslot_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"4824:74:29"},"nodeType":"YulFunctionCall","src":"4824:81:29"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"4813:7:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4914:21:29","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"4928:7:29"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"4918:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"5004:299:29","statements":[{"nodeType":"YulVariableDeclaration","src":"5018:34:29","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"5045:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5039:5:29"},"nodeType":"YulFunctionCall","src":"5039:13:29"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"5022:13:29","type":""}]},{"nodeType":"YulAssignment","src":"5065:120:29","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"5166:13:29"},{"name":"pos","nodeType":"YulIdentifier","src":"5181:3:29"}],"functionName":{"name":"abi_encodeUpdatedPos_t_struct$_Verifier_$993_memory_ptr_to_t_struct$_Verifier_$993_memory_ptr","nodeType":"YulIdentifier","src":"5072:93:29"},"nodeType":"YulFunctionCall","src":"5072:113:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5065:3:29"}]},{"nodeType":"YulAssignment","src":"5198:95:29","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"5286:6:29"}],"functionName":{"name":"array_nextElement_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"5208:77:29"},"nodeType":"YulFunctionCall","src":"5208:85:29"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"5198:6:29"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4966:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"4969:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4963:2:29"},"nodeType":"YulFunctionCall","src":"4963:13:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4977:18:29","statements":[{"nodeType":"YulAssignment","src":"4979:14:29","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4988:1:29"},{"kind":"number","nodeType":"YulLiteral","src":"4991:1:29","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4984:3:29"},"nodeType":"YulFunctionCall","src":"4984:9:29"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"4979:1:29"}]}]},"pre":{"nodeType":"YulBlock","src":"4948:14:29","statements":[{"nodeType":"YulVariableDeclaration","src":"4950:10:29","value":{"kind":"number","nodeType":"YulLiteral","src":"4959:1:29","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"4954:1:29","type":""}]}]},"src":"4944:359:29"},{"nodeType":"YulAssignment","src":"5312:10:29","value":{"name":"pos","nodeType":"YulIdentifier","src":"5319:3:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"5312:3:29"}]}]},"name":"abi_encode_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4549:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4556:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4565:3:29","type":""}],"src":"4396:932:29"},{"body":{"nodeType":"YulBlock","src":"5426:272:29","statements":[{"nodeType":"YulVariableDeclaration","src":"5436:53:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5483:5:29"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"5450:32:29"},"nodeType":"YulFunctionCall","src":"5450:39:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"5440:6:29","type":""}]},{"nodeType":"YulAssignment","src":"5498:78:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5564:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"5569:6:29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"5505:58:29"},"nodeType":"YulFunctionCall","src":"5505:71:29"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5498:3:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5611:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"5618:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5607:3:29"},"nodeType":"YulFunctionCall","src":"5607:16:29"},{"name":"pos","nodeType":"YulIdentifier","src":"5625:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"5630:6:29"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"5585:21:29"},"nodeType":"YulFunctionCall","src":"5585:52:29"},"nodeType":"YulExpressionStatement","src":"5585:52:29"},{"nodeType":"YulAssignment","src":"5646:46:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5657:3:29"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5684:6:29"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"5662:21:29"},"nodeType":"YulFunctionCall","src":"5662:29:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5653:3:29"},"nodeType":"YulFunctionCall","src":"5653:39:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"5646:3:29"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5407:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5414:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"5422:3:29","type":""}],"src":"5334:364:29"},{"body":{"nodeType":"YulBlock","src":"5876:413:29","statements":[{"nodeType":"YulVariableDeclaration","src":"5886:26:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5902:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"5907:4:29","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5898:3:29"},"nodeType":"YulFunctionCall","src":"5898:14:29"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"5890:4:29","type":""}]},{"nodeType":"YulBlock","src":"5922:175:29","statements":[{"nodeType":"YulVariableDeclaration","src":"5968:43:29","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5998:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"6005:4:29","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5994:3:29"},"nodeType":"YulFunctionCall","src":"5994:16:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5988:5:29"},"nodeType":"YulFunctionCall","src":"5988:23:29"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"5972:12:29","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"6058:12:29"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6076:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"6081:4:29","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6072:3:29"},"nodeType":"YulFunctionCall","src":"6072:14:29"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"6024:33:29"},"nodeType":"YulFunctionCall","src":"6024:63:29"},"nodeType":"YulExpressionStatement","src":"6024:63:29"}]},{"nodeType":"YulBlock","src":"6107:175:29","statements":[{"nodeType":"YulVariableDeclaration","src":"6153:43:29","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6183:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"6190:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6179:3:29"},"nodeType":"YulFunctionCall","src":"6179:16:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6173:5:29"},"nodeType":"YulFunctionCall","src":"6173:23:29"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"6157:12:29","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"6243:12:29"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6261:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"6266:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6257:3:29"},"nodeType":"YulFunctionCall","src":"6257:14:29"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"6209:33:29"},"nodeType":"YulFunctionCall","src":"6209:63:29"},"nodeType":"YulExpressionStatement","src":"6209:63:29"}]}]},"name":"abi_encode_t_struct$_Verifier_$993_memory_ptr_to_t_struct$_Verifier_$993_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5863:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5870:3:29","type":""}],"src":"5770:519:29"},{"body":{"nodeType":"YulBlock","src":"6350:53:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6367:3:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6390:5:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"6372:17:29"},"nodeType":"YulFunctionCall","src":"6372:24:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6360:6:29"},"nodeType":"YulFunctionCall","src":"6360:37:29"},"nodeType":"YulExpressionStatement","src":"6360:37:29"}]},"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6338:5:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6345:3:29","type":""}],"src":"6295:108:29"},{"body":{"nodeType":"YulBlock","src":"6535:206:29","statements":[{"nodeType":"YulAssignment","src":"6545:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6557:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6568:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6553:3:29"},"nodeType":"YulFunctionCall","src":"6553:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6545:4:29"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6625:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6638:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6649:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6634:3:29"},"nodeType":"YulFunctionCall","src":"6634:17:29"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"6581:43:29"},"nodeType":"YulFunctionCall","src":"6581:71:29"},"nodeType":"YulExpressionStatement","src":"6581:71:29"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"6706:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6719:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6730:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6715:3:29"},"nodeType":"YulFunctionCall","src":"6715:18:29"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"6662:43:29"},"nodeType":"YulFunctionCall","src":"6662:72:29"},"nodeType":"YulExpressionStatement","src":"6662:72:29"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6499:9:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6511:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6519:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6530:4:29","type":""}],"src":"6409:332:29"},{"body":{"nodeType":"YulBlock","src":"7069:664:29","statements":[{"nodeType":"YulAssignment","src":"7079:27:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7091:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"7102:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7087:3:29"},"nodeType":"YulFunctionCall","src":"7087:19:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7079:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7127:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"7138:1:29","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7123:3:29"},"nodeType":"YulFunctionCall","src":"7123:17:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"7146:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"7152:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7142:3:29"},"nodeType":"YulFunctionCall","src":"7142:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7116:6:29"},"nodeType":"YulFunctionCall","src":"7116:47:29"},"nodeType":"YulExpressionStatement","src":"7116:47:29"},{"nodeType":"YulAssignment","src":"7172:166:29","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7324:6:29"},{"name":"tail","nodeType":"YulIdentifier","src":"7333:4:29"}],"functionName":{"name":"abi_encode_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7180:143:29"},"nodeType":"YulFunctionCall","src":"7180:158:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7172:4:29"}]},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7392:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7405:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"7416:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7401:3:29"},"nodeType":"YulFunctionCall","src":"7401:18:29"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"7348:43:29"},"nodeType":"YulFunctionCall","src":"7348:72:29"},"nodeType":"YulExpressionStatement","src":"7348:72:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7441:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"7452:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7437:3:29"},"nodeType":"YulFunctionCall","src":"7437:18:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"7461:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"7467:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7457:3:29"},"nodeType":"YulFunctionCall","src":"7457:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7430:6:29"},"nodeType":"YulFunctionCall","src":"7430:48:29"},"nodeType":"YulExpressionStatement","src":"7430:48:29"},{"nodeType":"YulAssignment","src":"7487:86:29","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"7559:6:29"},{"name":"tail","nodeType":"YulIdentifier","src":"7568:4:29"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7495:63:29"},"nodeType":"YulFunctionCall","src":"7495:78:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7487:4:29"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7594:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"7605:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7590:3:29"},"nodeType":"YulFunctionCall","src":"7590:18:29"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"7614:4:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"7620:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7610:3:29"},"nodeType":"YulFunctionCall","src":"7610:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7583:6:29"},"nodeType":"YulFunctionCall","src":"7583:48:29"},"nodeType":"YulExpressionStatement","src":"7583:48:29"},{"nodeType":"YulAssignment","src":"7640:86:29","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"7712:6:29"},{"name":"tail","nodeType":"YulIdentifier","src":"7721:4:29"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7648:63:29"},"nodeType":"YulFunctionCall","src":"7648:78:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7640:4:29"}]}]},"name":"abi_encode_tuple_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr_t_address_t_string_memory_ptr_t_string_memory_ptr__to_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr_t_address_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7017:9:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"7029:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7037:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7045:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7053:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7064:4:29","type":""}],"src":"6747:986:29"},{"body":{"nodeType":"YulBlock","src":"7780:88:29","statements":[{"nodeType":"YulAssignment","src":"7790:30:29","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"7800:18:29"},"nodeType":"YulFunctionCall","src":"7800:20:29"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7790:6:29"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7849:6:29"},{"name":"size","nodeType":"YulIdentifier","src":"7857:4:29"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"7829:19:29"},"nodeType":"YulFunctionCall","src":"7829:33:29"},"nodeType":"YulExpressionStatement","src":"7829:33:29"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"7764:4:29","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"7773:6:29","type":""}],"src":"7739:129:29"},{"body":{"nodeType":"YulBlock","src":"7914:35:29","statements":[{"nodeType":"YulAssignment","src":"7924:19:29","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7940:2:29","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7934:5:29"},"nodeType":"YulFunctionCall","src":"7934:9:29"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7924:6:29"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"7907:6:29","type":""}],"src":"7874:75:29"},{"body":{"nodeType":"YulBlock","src":"8062:229:29","statements":[{"body":{"nodeType":"YulBlock","src":"8167:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"8169:16:29"},"nodeType":"YulFunctionCall","src":"8169:18:29"},"nodeType":"YulExpressionStatement","src":"8169:18:29"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8139:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"8147:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8136:2:29"},"nodeType":"YulFunctionCall","src":"8136:30:29"},"nodeType":"YulIf","src":"8133:2:29"},{"nodeType":"YulAssignment","src":"8199:25:29","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8211:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"8219:4:29","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8207:3:29"},"nodeType":"YulFunctionCall","src":"8207:17:29"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"8199:4:29"}]},{"nodeType":"YulAssignment","src":"8261:23:29","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"8273:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"8279:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8269:3:29"},"nodeType":"YulFunctionCall","src":"8269:15:29"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"8261:4:29"}]}]},"name":"array_allocation_size_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"8046:6:29","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"8057:4:29","type":""}],"src":"7955:336:29"},{"body":{"nodeType":"YulBlock","src":"8364:241:29","statements":[{"body":{"nodeType":"YulBlock","src":"8469:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"8471:16:29"},"nodeType":"YulFunctionCall","src":"8471:18:29"},"nodeType":"YulExpressionStatement","src":"8471:18:29"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8441:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"8449:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8438:2:29"},"nodeType":"YulFunctionCall","src":"8438:30:29"},"nodeType":"YulIf","src":"8435:2:29"},{"nodeType":"YulAssignment","src":"8501:37:29","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8531:6:29"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"8509:21:29"},"nodeType":"YulFunctionCall","src":"8509:29:29"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"8501:4:29"}]},{"nodeType":"YulAssignment","src":"8575:23:29","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"8587:4:29"},{"kind":"number","nodeType":"YulLiteral","src":"8593:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8583:3:29"},"nodeType":"YulFunctionCall","src":"8583:15:29"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"8575:4:29"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"8348:6:29","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"8359:4:29","type":""}],"src":"8297:308:29"},{"body":{"nodeType":"YulBlock","src":"8708:60:29","statements":[{"nodeType":"YulAssignment","src":"8718:11:29","value":{"name":"ptr","nodeType":"YulIdentifier","src":"8726:3:29"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"8718:4:29"}]},{"nodeType":"YulAssignment","src":"8739:22:29","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8751:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"8756:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8747:3:29"},"nodeType":"YulFunctionCall","src":"8747:14:29"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"8739:4:29"}]}]},"name":"array_dataslot_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"8695:3:29","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"8703:4:29","type":""}],"src":"8611:157:29"},{"body":{"nodeType":"YulBlock","src":"8873:40:29","statements":[{"nodeType":"YulAssignment","src":"8884:22:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8900:5:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8894:5:29"},"nodeType":"YulFunctionCall","src":"8894:12:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"8884:6:29"}]}]},"name":"array_length_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8856:5:29","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"8866:6:29","type":""}],"src":"8774:139:29"},{"body":{"nodeType":"YulBlock","src":"8978:40:29","statements":[{"nodeType":"YulAssignment","src":"8989:22:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9005:5:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8999:5:29"},"nodeType":"YulFunctionCall","src":"8999:12:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"8989:6:29"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8961:5:29","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"8971:6:29","type":""}],"src":"8919:99:29"},{"body":{"nodeType":"YulBlock","src":"9124:38:29","statements":[{"nodeType":"YulAssignment","src":"9134:22:29","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"9146:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"9151:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9142:3:29"},"nodeType":"YulFunctionCall","src":"9142:14:29"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"9134:4:29"}]}]},"name":"array_nextElement_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"9111:3:29","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"9119:4:29","type":""}],"src":"9024:138:29"},{"body":{"nodeType":"YulBlock","src":"9304:73:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9321:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"9326:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9314:6:29"},"nodeType":"YulFunctionCall","src":"9314:19:29"},"nodeType":"YulExpressionStatement","src":"9314:19:29"},{"nodeType":"YulAssignment","src":"9342:29:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9361:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"9366:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9357:3:29"},"nodeType":"YulFunctionCall","src":"9357:14:29"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"9342:11:29"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9276:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"9281:6:29","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"9292:11:29","type":""}],"src":"9168:209:29"},{"body":{"nodeType":"YulBlock","src":"9479:73:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9496:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"9501:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9489:6:29"},"nodeType":"YulFunctionCall","src":"9489:19:29"},"nodeType":"YulExpressionStatement","src":"9489:19:29"},{"nodeType":"YulAssignment","src":"9517:29:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9536:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"9541:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9532:3:29"},"nodeType":"YulFunctionCall","src":"9532:14:29"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"9517:11:29"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9451:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"9456:6:29","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"9467:11:29","type":""}],"src":"9383:169:29"},{"body":{"nodeType":"YulBlock","src":"9603:51:29","statements":[{"nodeType":"YulAssignment","src":"9613:35:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9642:5:29"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"9624:17:29"},"nodeType":"YulFunctionCall","src":"9624:24:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"9613:7:29"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9585:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"9595:7:29","type":""}],"src":"9558:96:29"},{"body":{"nodeType":"YulBlock","src":"9705:81:29","statements":[{"nodeType":"YulAssignment","src":"9715:65:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9730:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"9737:42:29","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9726:3:29"},"nodeType":"YulFunctionCall","src":"9726:54:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"9715:7:29"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9687:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"9697:7:29","type":""}],"src":"9660:126:29"},{"body":{"nodeType":"YulBlock","src":"9837:32:29","statements":[{"nodeType":"YulAssignment","src":"9847:16:29","value":{"name":"value","nodeType":"YulIdentifier","src":"9858:5:29"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"9847:7:29"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9819:5:29","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"9829:7:29","type":""}],"src":"9792:77:29"},{"body":{"nodeType":"YulBlock","src":"9926:103:29","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"9949:3:29"},{"name":"src","nodeType":"YulIdentifier","src":"9954:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"9959:6:29"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"9936:12:29"},"nodeType":"YulFunctionCall","src":"9936:30:29"},"nodeType":"YulExpressionStatement","src":"9936:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"10007:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"10012:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10003:3:29"},"nodeType":"YulFunctionCall","src":"10003:16:29"},{"kind":"number","nodeType":"YulLiteral","src":"10021:1:29","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9996:6:29"},"nodeType":"YulFunctionCall","src":"9996:27:29"},"nodeType":"YulExpressionStatement","src":"9996:27:29"}]},"name":"copy_calldata_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"9908:3:29","type":""},{"name":"dst","nodeType":"YulTypedName","src":"9913:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"9918:6:29","type":""}],"src":"9875:154:29"},{"body":{"nodeType":"YulBlock","src":"10084:258:29","statements":[{"nodeType":"YulVariableDeclaration","src":"10094:10:29","value":{"kind":"number","nodeType":"YulLiteral","src":"10103:1:29","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"10098:1:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"10163:63:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"10188:3:29"},{"name":"i","nodeType":"YulIdentifier","src":"10193:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10184:3:29"},"nodeType":"YulFunctionCall","src":"10184:11:29"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"10207:3:29"},{"name":"i","nodeType":"YulIdentifier","src":"10212:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10203:3:29"},"nodeType":"YulFunctionCall","src":"10203:11:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10197:5:29"},"nodeType":"YulFunctionCall","src":"10197:18:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10177:6:29"},"nodeType":"YulFunctionCall","src":"10177:39:29"},"nodeType":"YulExpressionStatement","src":"10177:39:29"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"10124:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"10127:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10121:2:29"},"nodeType":"YulFunctionCall","src":"10121:13:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"10135:19:29","statements":[{"nodeType":"YulAssignment","src":"10137:15:29","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"10146:1:29"},{"kind":"number","nodeType":"YulLiteral","src":"10149:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10142:3:29"},"nodeType":"YulFunctionCall","src":"10142:10:29"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"10137:1:29"}]}]},"pre":{"nodeType":"YulBlock","src":"10117:3:29","statements":[]},"src":"10113:113:29"},{"body":{"nodeType":"YulBlock","src":"10260:76:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"10310:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"10315:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10306:3:29"},"nodeType":"YulFunctionCall","src":"10306:16:29"},{"kind":"number","nodeType":"YulLiteral","src":"10324:1:29","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10299:6:29"},"nodeType":"YulFunctionCall","src":"10299:27:29"},"nodeType":"YulExpressionStatement","src":"10299:27:29"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"10241:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"10244:6:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10238:2:29"},"nodeType":"YulFunctionCall","src":"10238:13:29"},"nodeType":"YulIf","src":"10235:2:29"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"10066:3:29","type":""},{"name":"dst","nodeType":"YulTypedName","src":"10071:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"10076:6:29","type":""}],"src":"10035:307:29"},{"body":{"nodeType":"YulBlock","src":"10391:238:29","statements":[{"nodeType":"YulVariableDeclaration","src":"10401:58:29","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10423:6:29"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"10453:4:29"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"10431:21:29"},"nodeType":"YulFunctionCall","src":"10431:27:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10419:3:29"},"nodeType":"YulFunctionCall","src":"10419:40:29"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"10405:10:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"10570:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"10572:16:29"},"nodeType":"YulFunctionCall","src":"10572:18:29"},"nodeType":"YulExpressionStatement","src":"10572:18:29"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"10513:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"10525:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10510:2:29"},"nodeType":"YulFunctionCall","src":"10510:34:29"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"10549:10:29"},{"name":"memPtr","nodeType":"YulIdentifier","src":"10561:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10546:2:29"},"nodeType":"YulFunctionCall","src":"10546:22:29"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"10507:2:29"},"nodeType":"YulFunctionCall","src":"10507:62:29"},"nodeType":"YulIf","src":"10504:2:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10608:2:29","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"10612:10:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10601:6:29"},"nodeType":"YulFunctionCall","src":"10601:22:29"},"nodeType":"YulExpressionStatement","src":"10601:22:29"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"10377:6:29","type":""},{"name":"size","nodeType":"YulTypedName","src":"10385:4:29","type":""}],"src":"10348:281:29"},{"body":{"nodeType":"YulBlock","src":"10663:152:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10680:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10683:77:29","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10673:6:29"},"nodeType":"YulFunctionCall","src":"10673:88:29"},"nodeType":"YulExpressionStatement","src":"10673:88:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10777:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10780:4:29","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10770:6:29"},"nodeType":"YulFunctionCall","src":"10770:15:29"},"nodeType":"YulExpressionStatement","src":"10770:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10801:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10804:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10794:6:29"},"nodeType":"YulFunctionCall","src":"10794:15:29"},"nodeType":"YulExpressionStatement","src":"10794:15:29"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"10635:180:29"},{"body":{"nodeType":"YulBlock","src":"10869:54:29","statements":[{"nodeType":"YulAssignment","src":"10879:38:29","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10897:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"10904:2:29","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10893:3:29"},"nodeType":"YulFunctionCall","src":"10893:14:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10913:2:29","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"10909:3:29"},"nodeType":"YulFunctionCall","src":"10909:7:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10889:3:29"},"nodeType":"YulFunctionCall","src":"10889:28:29"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"10879:6:29"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10852:5:29","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"10862:6:29","type":""}],"src":"10821:102:29"},{"body":{"nodeType":"YulBlock","src":"10972:79:29","statements":[{"body":{"nodeType":"YulBlock","src":"11029:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11038:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11041:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11031:6:29"},"nodeType":"YulFunctionCall","src":"11031:12:29"},"nodeType":"YulExpressionStatement","src":"11031:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10995:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11020:5:29"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"11002:17:29"},"nodeType":"YulFunctionCall","src":"11002:24:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10992:2:29"},"nodeType":"YulFunctionCall","src":"10992:35:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10985:6:29"},"nodeType":"YulFunctionCall","src":"10985:43:29"},"nodeType":"YulIf","src":"10982:2:29"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10965:5:29","type":""}],"src":"10929:122:29"},{"body":{"nodeType":"YulBlock","src":"11100:79:29","statements":[{"body":{"nodeType":"YulBlock","src":"11157:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11166:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11169:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11159:6:29"},"nodeType":"YulFunctionCall","src":"11159:12:29"},"nodeType":"YulExpressionStatement","src":"11159:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11123:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11148:5:29"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"11130:17:29"},"nodeType":"YulFunctionCall","src":"11130:24:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"11120:2:29"},"nodeType":"YulFunctionCall","src":"11120:35:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11113:6:29"},"nodeType":"YulFunctionCall","src":"11113:43:29"},"nodeType":"YulIf","src":"11110:2:29"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11093:5:29","type":""}],"src":"11057:122:29"}]},"contents":"{\n\n    // struct ICredential.Verifier[]\n    function abi_decode_available_length_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let src := offset\n        if gt(add(src, mul(length, 0x40)), end) {\n            revert(0, 0)\n        }\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_struct$_Verifier_$993_memory_ptr(elementPos, end))\n            dst := add(dst, 0x20)\n            src := add(src, 0x40)\n        }\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert(0, 0) }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    // struct ICredential.Verifier[]\n    function abi_decode_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    // struct ICredential.Verifier\n    function abi_decode_t_struct$_Verifier_$993_memory_ptr(headStart, end) -> value {\n        if slt(sub(end, headStart), 0x40) { revert(0, 0) }\n        value := allocate_memory(0x40)\n\n        {\n            // contractAddress\n\n            let offset := 0\n\n            mstore(add(value, 0x00), abi_decode_t_address(add(headStart, offset), end))\n\n        }\n\n        {\n            // merkleTreeDepth\n\n            let offset := 32\n\n            mstore(add(value, 0x20), abi_decode_t_uint256(add(headStart, offset), end))\n\n        }\n\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptrt_addresst_string_memory_ptrt_string_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value0 := abi_decode_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value2 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value3 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encodeUpdatedPos_t_struct$_Verifier_$993_memory_ptr_to_t_struct$_Verifier_$993_memory_ptr(value0, pos) -> updatedPos {\n        abi_encode_t_struct$_Verifier_$993_memory_ptr_to_t_struct$_Verifier_$993_memory_ptr(value0, pos)\n        updatedPos := add(pos, 0x40)\n    }\n\n    function abi_encode_t_address_to_t_address(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    // struct ICredential.Verifier[] -> struct ICredential.Verifier[]\n    function abi_encode_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_struct$_Verifier_$993_memory_ptr_to_t_struct$_Verifier_$993_memory_ptr(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    // struct ICredential.Verifier -> struct ICredential.Verifier\n    function abi_encode_t_struct$_Verifier_$993_memory_ptr_to_t_struct$_Verifier_$993_memory_ptr(value, pos)  {\n        let tail := add(pos, 0x40)\n\n        {\n            // contractAddress\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // merkleTreeDepth\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x20))\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr_t_address_t_string_memory_ptr_t_string_memory_ptr__to_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr_t_address_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr_fromStack(value0,  tail)\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        mstore(add(headStart, 64), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value2,  tail)\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_dataslot_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function array_length_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_nextElement_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_struct$_Verifier_$993_memory_ptr_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n","id":29,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{"@creds-protocol/contracts/zk-kit/incremental-merkle-tree.sol/IncrementalBinaryTree.sol":{"IncrementalBinaryTree":[{"length":20,"start":6415},{"length":20,"start":6695}]}},"object":"60806040523480156200001157600080fd5b50600436106200002e5760003560e01c80632779aae81462000033575b600080fd5b6200005160048036038101906200004b91906200031a565b62000053565b005b600084848484604051620000679062000177565b62000076949392919062000529565b604051809103906000f08015801562000093573d6000803e3d6000fd5b5090506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f6b59dd75e5d76f5aed41f1f1c514a52089b859a05855b657a5c4f6f5e8c7f611338260405162000168929190620004fc565b60405180910390a15050505050565b611a7a806200079c83390190565b60006200019c6200019684620005b4565b6200058b565b90508083825260208201905082856040860282011115620001bc57600080fd5b60005b85811015620001f05781620001d58882620002b0565b845260208401935060408301925050600181019050620001bf565b5050509392505050565b6000620002116200020b84620005e3565b6200058b565b9050828152602081018484840111156200022a57600080fd5b62000237848285620006ac565b509392505050565b600081359050620002508162000767565b92915050565b600082601f8301126200026857600080fd5b81356200027a84826020860162000185565b91505092915050565b600082601f8301126200029557600080fd5b8135620002a7848260208601620001fa565b91505092915050565b600060408284031215620002c357600080fd5b620002cf60406200058b565b90506000620002e1848285016200023f565b6000830152506020620002f78482850162000303565b60208301525092915050565b600081359050620003148162000781565b92915050565b600080600080608085870312156200033157600080fd5b600085013567ffffffffffffffff8111156200034c57600080fd5b6200035a8782880162000256565b94505060206200036d878288016200023f565b935050604085013567ffffffffffffffff8111156200038b57600080fd5b620003998782880162000283565b925050606085013567ffffffffffffffff811115620003b757600080fd5b620003c58782880162000283565b91505092959194509250565b6000620003df8383620004b8565b60408301905092915050565b620003f6816200066e565b82525050565b62000407816200066e565b82525050565b60006200041a8262000629565b6200042681856200064c565b9350620004338362000619565b8060005b838110156200046a5781516200044e8882620003d1565b97506200045b836200063f565b92505060018101905062000437565b5085935050505092915050565b6000620004848262000634565b6200049081856200065d565b9350620004a2818560208601620006bb565b620004ad8162000756565b840191505092915050565b604082016000820151620004d06000850182620003eb565b506020820151620004e56020850182620004eb565b50505050565b620004f681620006a2565b82525050565b6000604082019050620005136000830185620003fc565b620005226020830184620003fc565b9392505050565b600060808201905081810360008301526200054581876200040d565b9050620005566020830186620003fc565b81810360408301526200056a818562000477565b9050818103606083015262000580818462000477565b905095945050505050565b600062000597620005aa565b9050620005a58282620006f1565b919050565b6000604051905090565b600067ffffffffffffffff821115620005d257620005d162000727565b5b602082029050602081019050919050565b600067ffffffffffffffff82111562000601576200060062000727565b5b6200060c8262000756565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006200067b8262000682565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015620006db578082015181840152602081019050620006be565b83811115620006eb576000848401525b50505050565b620006fc8262000756565b810181811067ffffffffffffffff821117156200071e576200071d62000727565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b62000772816200066e565b81146200077e57600080fd5b50565b6200078c81620006a2565b81146200079857600080fd5b5056fe608060405273414b893562f46f5180971c3389784a447581b2d3600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200006657600080fd5b5060405162001a7a38038062001a7a83398181016040528101906200008c91906200055b565b8383838360005b84518160ff1610156200018e57848160ff1681518110620000dd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000015160066000878460ff16815181106200012a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160200151815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600101905062000093565b5082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160029080519060200190620001e892919062000316565b5080600390805190602001906200020192919062000316565b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c2551c8284306040518363ffffffff1660e01b81526004016200026192919062000673565b600060405180830381600087803b1580156200027c57600080fd5b505af115801562000291573d6000803e3d6000fd5b5050505080604051620002a591906200065a565b604051809103902082604051620002bd91906200065a565b60405180910390208473ffffffffffffffffffffffffffffffffffffffff167ff51d47712d8574bf3715cf1db64ebb5a5c264fe57ff450433484f786f742ecec60405160405180910390a45050505050505050620008c7565b8280546200032490620007b8565b90600052602060002090601f01602090048101928262000348576000855562000394565b82601f106200036357805160ff191683800117855562000394565b8280016001018555821562000394579182015b828111156200039357825182559160200191906001019062000376565b5b509050620003a39190620003a7565b5090565b5b80821115620003c2576000816000905550600101620003a8565b5090565b6000620003dd620003d784620006c9565b620006a0565b90508083825260208201905082856040860282011115620003fd57600080fd5b60005b85811015620004315781620004168882620004f1565b84526020840193506040830192505060018101905062000400565b5050509392505050565b6000620004526200044c84620006f8565b620006a0565b9050828152602081018484840111156200046b57600080fd5b6200047884828562000782565b509392505050565b600081519050620004918162000893565b92915050565b600082601f830112620004a957600080fd5b8151620004bb848260208601620003c6565b91505092915050565b600082601f830112620004d657600080fd5b8151620004e88482602086016200043b565b91505092915050565b6000604082840312156200050457600080fd5b620005106040620006a0565b90506000620005228482850162000480565b6000830152506020620005388482850162000544565b60208301525092915050565b6000815190506200055581620008ad565b92915050565b600080600080608085870312156200057257600080fd5b600085015167ffffffffffffffff8111156200058d57600080fd5b6200059b8782880162000497565b9450506020620005ae8782880162000480565b935050604085015167ffffffffffffffff811115620005cc57600080fd5b620005da87828801620004c4565b925050606085015167ffffffffffffffff811115620005f857600080fd5b6200060687828801620004c4565b91505092959194509250565b6200061d8162000744565b82525050565b600062000630826200072e565b6200063c818562000739565b93506200064e81856020860162000782565b80840191505092915050565b600062000668828462000623565b915081905092915050565b60006040820190506200068a600083018562000612565b62000699602083018462000612565b9392505050565b6000620006ac620006bf565b9050620006ba8282620007ee565b919050565b6000604051905090565b600067ffffffffffffffff821115620006e757620006e662000853565b5b602082029050602081019050919050565b600067ffffffffffffffff82111562000716576200071562000853565b5b620007218262000882565b9050602081019050919050565b600081519050919050565b600081905092915050565b6000620007518262000758565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015620007a257808201518184015260208101905062000785565b83811115620007b2576000848401525b50505050565b60006002820490506001821680620007d157607f821691505b60208210811415620007e857620007e762000824565b5b50919050565b620007f98262000882565b810181811067ffffffffffffffff821117156200081b576200081a62000853565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6200089e8162000744565b8114620008aa57600080fd5b50565b620008b88162000778565b8114620008c457600080fd5b50565b6111a380620008d76000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063c308dd5b11610066578063c308dd5b1461022a578063dabc4d5114610248578063e69743cd14610278578063eb49610614610294576100cf565b80638da5cb5b146101c0578063909d9ef7146101de578063ac1eff68146101fa576100cf565b80632e9868f8146100d4578063439d7275146100f25780634ce39ead14610110578063638480be1461012e5780636389e1071461015e57806381cc7a451461018e575b600080fd5b6100dc6102b2565b6040516100e99190610dba565b60405180910390f35b6100fa610340565b6040516101079190610dba565b60405180910390f35b6101186103ce565b6040516101259190610cec565b60405180910390f35b61014860048036038101906101439190610ba4565b6103f4565b6040516101559190610e3c565b60405180910390f35b61017860048036038101906101739190610ba4565b610413565b6040516101859190610e3c565b60405180910390f35b6101a860048036038101906101a39190610ba4565b610432565b6040516101b793929190610d07565b60405180910390f35b6101c8610504565b6040516101d59190610cec565b60405180910390f35b6101f860048036038101906101f39190610c09565b61052a565b005b610214600480360381019061020f9190610ba4565b610594565b6040516102219190610d9f565b60405180910390f35b6102326105c7565b60405161023f9190610cec565b60405180910390f35b610262600480360381019061025d9190610ba4565b6105ed565b60405161026f9190610e3c565b60405180910390f35b610292600480360381019061028d9190610bcd565b61060c565b005b61029c61061a565b6040516102a99190610e3c565b60405180910390f35b600280546102bf90611055565b80601f01602080910402602001604051908101604052809291908181526020018280546102eb90611055565b80156103385780601f1061030d57610100808354040283529160200191610338565b820191906000526020600020905b81548152906001019060200180831161031b57829003601f168201915b505050505081565b6003805461034d90611055565b80601f016020809104026020016040519081016040528092919081815260200182805461037990611055565b80156103c65780601f1061039b576101008083540402835291602001916103c6565b820191906000526020600020905b8154815290600101906020018083116103a957829003601f168201915b505050505081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000838152602001908152602001600020600201549050919050565b6000806000838152602001908152602001600020600001549050919050565b60076020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101805461047b90611055565b80601f01602080910402602001604051908101604052809291908181526020018280546104a790611055565b80156104f45780601f106104c9576101008083540402835291602001916104f4565b820191906000526020600020905b8154815290600101906020018083116104d757829003601f168201915b5050505050908060020154905083565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006105366008610620565b9050610542600861062e565b61054f8185853386610644565b7f2ed4f0a950535d9dbe363dbcdaedbbdf03aa9f33d5b1b70b74554debef4d10f43382868686604051610586959493929190610d45565b60405180910390a150505050565b60066020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000838152602001908152602001600020600101549050919050565b61061682826107a5565b5050565b60045481565b600081600001549050919050565b6001816000016000828254019250508190555050565b83600073ffffffffffffffffffffffffffffffffffffffff166006600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156106df576040517f679101ad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106eb338787876107ed565b826007600088815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160076000888152602001908152602001600020600101908051906020019061076a929190610a84565b50610e10600760008881526020019081526020016000206002018190555060016004546107979190610f29565b600481905550505050505050565b6107af828261095d565b60006107ba836105ed565b90504260076000858152602001908152602001600020600301600083815260200190815260200160002081905550505050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018310610846576040517fe730108f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061085184610413565b14610888576040517f632ab44600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008084815260200190815260200160002073__$fb9ee77876a75724f11f9f12d9558a3f31$__631095fbb4909184846040518463ffffffff1660e01b81526004016108d693929190610e05565b60006040518083038186803b1580156108ee57600080fd5b505af4158015610902573d6000803e3d6000fd5b50505050828473ffffffffffffffffffffffffffffffffffffffff167f8cd7e348e0ad6531fc8e95ec90286ba9246aa70c3d94d7fca9eb8afd6e78c35e848460405161094f929190610e57565b60405180910390a350505050565b600061096883610413565b14156109a0576040517f84124a0d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008083815260200190815260200160002073__$fb9ee77876a75724f11f9f12d9558a3f31$__63168703fa9091836040518363ffffffff1660e01b81526004016109ec929190610ddc565b60006040518083038186803b158015610a0457600080fd5b505af4158015610a18573d6000803e3d6000fd5b505050506000610a27836105ed565b905060006001610a36856103f4565b610a409190610f7f565b9050837fe5b5631e8acf74ed776b8262e656d2b63e56882d6eb3e7d6e8b8c09661f2ca03828585604051610a7693929190610e80565b60405180910390a250505050565b828054610a9090611055565b90600052602060002090601f016020900481019282610ab25760008555610af9565b82601f10610acb57805160ff1916838001178555610af9565b82800160010185558215610af9579182015b82811115610af8578251825591602001919060010190610add565b5b509050610b069190610b0a565b5090565b5b80821115610b23576000816000905550600101610b0b565b5090565b6000610b3a610b3584610edc565b610eb7565b905082815260208101848484011115610b5257600080fd5b610b5d848285611013565b509392505050565b600082601f830112610b7657600080fd5b8135610b86848260208601610b27565b91505092915050565b600081359050610b9e81611156565b92915050565b600060208284031215610bb657600080fd5b6000610bc484828501610b8f565b91505092915050565b60008060408385031215610be057600080fd5b6000610bee85828601610b8f565b9250506020610bff85828601610b8f565b9150509250929050565b600080600060608486031215610c1e57600080fd5b6000610c2c86828701610b8f565b9350506020610c3d86828701610b8f565b925050604084013567ffffffffffffffff811115610c5a57600080fd5b610c6686828701610b65565b9150509250925092565b610c7981610fb3565b82525050565b610c8881610fef565b82525050565b6000610c9982610f0d565b610ca38185610f18565b9350610cb3818560208601611022565b610cbc81611145565b840191505092915050565b8082525050565b610cd781610fe5565b82525050565b610ce681610fe5565b82525050565b6000602082019050610d016000830184610c70565b92915050565b6000606082019050610d1c6000830186610c70565b8181036020830152610d2e8185610c8e565b9050610d3d6040830184610cce565b949350505050565b600060a082019050610d5a6000830188610c70565b610d676020830187610cce565b610d746040830186610cce565b610d816060830185610cce565b8181036080830152610d938184610c8e565b90509695505050505050565b6000602082019050610db46000830184610c7f565b92915050565b60006020820190508181036000830152610dd48184610c8e565b905092915050565b6000604082019050610df16000830185610cc7565b610dfe6020830184610cdd565b9392505050565b6000606082019050610e1a6000830186610cc7565b610e276020830185610cdd565b610e346040830184610cdd565b949350505050565b6000602082019050610e516000830184610cce565b92915050565b6000604082019050610e6c6000830185610cce565b610e796020830184610cce565b9392505050565b6000606082019050610e956000830186610cce565b610ea26020830185610cce565b610eaf6040830184610cce565b949350505050565b6000610ec1610ed2565b9050610ecd8282611087565b919050565b6000604051905090565b600067ffffffffffffffff821115610ef757610ef6611116565b5b610f0082611145565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000610f3482610fe5565b9150610f3f83610fe5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610f7457610f736110b8565b5b828201905092915050565b6000610f8a82610fe5565b9150610f9583610fe5565b925082821015610fa857610fa76110b8565b5b828203905092915050565b6000610fbe82610fc5565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610ffa82611001565b9050919050565b600061100c82610fc5565b9050919050565b82818337600083830152505050565b60005b83811015611040578082015181840152602081019050611025565b8381111561104f576000848401525b50505050565b6000600282049050600182168061106d57607f821691505b60208210811415611081576110806110e7565b5b50919050565b61109082611145565b810181811067ffffffffffffffff821117156110af576110ae611116565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b61115f81610fe5565b811461116a57600080fd5b5056fea2646970667358221220dd2571cc5f732723909b8df8a96a3e9c98a295162094be23a0e6494c2d49a4d764736f6c63430008040033a2646970667358221220e85089cae8f5aa310a586ad121e1c11cfe6ae6bb3e76f616acb8d2f6ff844c7464736f6c63430008040033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH3 0x2E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2779AAE8 EQ PUSH3 0x33 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x51 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0x4B SWAP2 SWAP1 PUSH3 0x31A JUMP JUMPDEST PUSH3 0x53 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP5 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH3 0x67 SWAP1 PUSH3 0x177 JUMP JUMPDEST PUSH3 0x76 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x529 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x93 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0x6B59DD75E5D76F5AED41F1F1C514A52089B859A05855B657A5C4F6F5E8C7F611 CALLER DUP3 PUSH1 0x40 MLOAD PUSH3 0x168 SWAP3 SWAP2 SWAP1 PUSH3 0x4FC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1A7A DUP1 PUSH3 0x79C DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x19C PUSH3 0x196 DUP5 PUSH3 0x5B4 JUMP JUMPDEST PUSH3 0x58B JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP DUP3 DUP6 PUSH1 0x40 DUP7 MUL DUP3 ADD GT ISZERO PUSH3 0x1BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH3 0x1F0 JUMPI DUP2 PUSH3 0x1D5 DUP9 DUP3 PUSH3 0x2B0 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x40 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x1BF JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x211 PUSH3 0x20B DUP5 PUSH3 0x5E3 JUMP JUMPDEST PUSH3 0x58B JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x22A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x237 DUP5 DUP3 DUP6 PUSH3 0x6AC JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH3 0x250 DUP2 PUSH3 0x767 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x268 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH3 0x27A DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x185 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x295 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH3 0x2A7 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x1FA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x2C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x2CF PUSH1 0x40 PUSH3 0x58B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH3 0x2E1 DUP5 DUP3 DUP6 ADD PUSH3 0x23F JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH3 0x2F7 DUP5 DUP3 DUP6 ADD PUSH3 0x303 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH3 0x314 DUP2 PUSH3 0x781 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x331 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x34C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x35A DUP8 DUP3 DUP9 ADD PUSH3 0x256 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH3 0x36D DUP8 DUP3 DUP9 ADD PUSH3 0x23F JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x38B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x399 DUP8 DUP3 DUP9 ADD PUSH3 0x283 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x3B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x3C5 DUP8 DUP3 DUP9 ADD PUSH3 0x283 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x3DF DUP4 DUP4 PUSH3 0x4B8 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x3F6 DUP2 PUSH3 0x66E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH3 0x407 DUP2 PUSH3 0x66E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x41A DUP3 PUSH3 0x629 JUMP JUMPDEST PUSH3 0x426 DUP2 DUP6 PUSH3 0x64C JUMP JUMPDEST SWAP4 POP PUSH3 0x433 DUP4 PUSH3 0x619 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x46A JUMPI DUP2 MLOAD PUSH3 0x44E DUP9 DUP3 PUSH3 0x3D1 JUMP JUMPDEST SWAP8 POP PUSH3 0x45B DUP4 PUSH3 0x63F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x437 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x484 DUP3 PUSH3 0x634 JUMP JUMPDEST PUSH3 0x490 DUP2 DUP6 PUSH3 0x65D JUMP JUMPDEST SWAP4 POP PUSH3 0x4A2 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH3 0x6BB JUMP JUMPDEST PUSH3 0x4AD DUP2 PUSH3 0x756 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH3 0x4D0 PUSH1 0x0 DUP6 ADD DUP3 PUSH3 0x3EB JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH3 0x4E5 PUSH1 0x20 DUP6 ADD DUP3 PUSH3 0x4EB JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH3 0x4F6 DUP2 PUSH3 0x6A2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH3 0x513 PUSH1 0x0 DUP4 ADD DUP6 PUSH3 0x3FC JUMP JUMPDEST PUSH3 0x522 PUSH1 0x20 DUP4 ADD DUP5 PUSH3 0x3FC JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x545 DUP2 DUP8 PUSH3 0x40D JUMP JUMPDEST SWAP1 POP PUSH3 0x556 PUSH1 0x20 DUP4 ADD DUP7 PUSH3 0x3FC JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH3 0x56A DUP2 DUP6 PUSH3 0x477 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH3 0x580 DUP2 DUP5 PUSH3 0x477 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x597 PUSH3 0x5AA JUMP JUMPDEST SWAP1 POP PUSH3 0x5A5 DUP3 DUP3 PUSH3 0x6F1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x5D2 JUMPI PUSH3 0x5D1 PUSH3 0x727 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x601 JUMPI PUSH3 0x600 PUSH3 0x727 JUMP JUMPDEST JUMPDEST PUSH3 0x60C DUP3 PUSH3 0x756 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x67B DUP3 PUSH3 0x682 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x6DB JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x6BE JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x6EB JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH3 0x6FC DUP3 PUSH3 0x756 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x71E JUMPI PUSH3 0x71D PUSH3 0x727 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x772 DUP2 PUSH3 0x66E JUMP JUMPDEST DUP2 EQ PUSH3 0x77E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0x78C DUP2 PUSH3 0x6A2 JUMP JUMPDEST DUP2 EQ PUSH3 0x798 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH20 0x414B893562F46F5180971C3389784A447581B2D3 PUSH1 0x5 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLVALUE DUP1 ISZERO PUSH3 0x66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1A7A CODESIZE SUB DUP1 PUSH3 0x1A7A DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x8C SWAP2 SWAP1 PUSH3 0x55B JUMP JUMPDEST DUP4 DUP4 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 PUSH1 0xFF AND LT ISZERO PUSH3 0x18E JUMPI DUP5 DUP2 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH3 0xDD JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x6 PUSH1 0x0 DUP8 DUP5 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH3 0x12A JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH3 0x93 JUMP JUMPDEST POP DUP3 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0x2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x1E8 SWAP3 SWAP2 SWAP1 PUSH3 0x316 JUMP JUMPDEST POP DUP1 PUSH1 0x3 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x201 SWAP3 SWAP2 SWAP1 PUSH3 0x316 JUMP JUMPDEST POP PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xC2551C82 DUP5 ADDRESS PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x261 SWAP3 SWAP2 SWAP1 PUSH3 0x673 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x27C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x291 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH1 0x40 MLOAD PUSH3 0x2A5 SWAP2 SWAP1 PUSH3 0x65A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP3 PUSH1 0x40 MLOAD PUSH3 0x2BD SWAP2 SWAP1 PUSH3 0x65A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF51D47712D8574BF3715CF1DB64EBB5A5C264FE57FF450433484F786F742ECEC PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP POP PUSH3 0x8C7 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x324 SWAP1 PUSH3 0x7B8 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x348 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x394 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x363 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x394 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x394 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x393 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x376 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0x3A3 SWAP2 SWAP1 PUSH3 0x3A7 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x3C2 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x3A8 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x3DD PUSH3 0x3D7 DUP5 PUSH3 0x6C9 JUMP JUMPDEST PUSH3 0x6A0 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP DUP3 DUP6 PUSH1 0x40 DUP7 MUL DUP3 ADD GT ISZERO PUSH3 0x3FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH3 0x431 JUMPI DUP2 PUSH3 0x416 DUP9 DUP3 PUSH3 0x4F1 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x40 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x400 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x452 PUSH3 0x44C DUP5 PUSH3 0x6F8 JUMP JUMPDEST PUSH3 0x6A0 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x46B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x478 DUP5 DUP3 DUP6 PUSH3 0x782 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x491 DUP2 PUSH3 0x893 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x4A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x4BB DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x3C6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x4D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x4E8 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x43B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x504 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x510 PUSH1 0x40 PUSH3 0x6A0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH3 0x522 DUP5 DUP3 DUP6 ADD PUSH3 0x480 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH3 0x538 DUP5 DUP3 DUP6 ADD PUSH3 0x544 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x555 DUP2 PUSH3 0x8AD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x572 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP6 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x58D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x59B DUP8 DUP3 DUP9 ADD PUSH3 0x497 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH3 0x5AE DUP8 DUP3 DUP9 ADD PUSH3 0x480 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x5CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x5DA DUP8 DUP3 DUP9 ADD PUSH3 0x4C4 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x5F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x606 DUP8 DUP3 DUP9 ADD PUSH3 0x4C4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH3 0x61D DUP2 PUSH3 0x744 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x630 DUP3 PUSH3 0x72E JUMP JUMPDEST PUSH3 0x63C DUP2 DUP6 PUSH3 0x739 JUMP JUMPDEST SWAP4 POP PUSH3 0x64E DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH3 0x782 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x668 DUP3 DUP5 PUSH3 0x623 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH3 0x68A PUSH1 0x0 DUP4 ADD DUP6 PUSH3 0x612 JUMP JUMPDEST PUSH3 0x699 PUSH1 0x20 DUP4 ADD DUP5 PUSH3 0x612 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x6AC PUSH3 0x6BF JUMP JUMPDEST SWAP1 POP PUSH3 0x6BA DUP3 DUP3 PUSH3 0x7EE JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x6E7 JUMPI PUSH3 0x6E6 PUSH3 0x853 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x716 JUMPI PUSH3 0x715 PUSH3 0x853 JUMP JUMPDEST JUMPDEST PUSH3 0x721 DUP3 PUSH3 0x882 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x751 DUP3 PUSH3 0x758 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x7A2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x785 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x7B2 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x7D1 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x7E8 JUMPI PUSH3 0x7E7 PUSH3 0x824 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x7F9 DUP3 PUSH3 0x882 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x81B JUMPI PUSH3 0x81A PUSH3 0x853 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x89E DUP2 PUSH3 0x744 JUMP JUMPDEST DUP2 EQ PUSH3 0x8AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0x8B8 DUP2 PUSH3 0x778 JUMP JUMPDEST DUP2 EQ PUSH3 0x8C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x11A3 DUP1 PUSH3 0x8D7 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xC308DD5B GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xC308DD5B EQ PUSH2 0x22A JUMPI DUP1 PUSH4 0xDABC4D51 EQ PUSH2 0x248 JUMPI DUP1 PUSH4 0xE69743CD EQ PUSH2 0x278 JUMPI DUP1 PUSH4 0xEB496106 EQ PUSH2 0x294 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1C0 JUMPI DUP1 PUSH4 0x909D9EF7 EQ PUSH2 0x1DE JUMPI DUP1 PUSH4 0xAC1EFF68 EQ PUSH2 0x1FA JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x2E9868F8 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x439D7275 EQ PUSH2 0xF2 JUMPI DUP1 PUSH4 0x4CE39EAD EQ PUSH2 0x110 JUMPI DUP1 PUSH4 0x638480BE EQ PUSH2 0x12E JUMPI DUP1 PUSH4 0x6389E107 EQ PUSH2 0x15E JUMPI DUP1 PUSH4 0x81CC7A45 EQ PUSH2 0x18E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDC PUSH2 0x2B2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0xDBA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFA PUSH2 0x340 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x107 SWAP2 SWAP1 PUSH2 0xDBA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x118 PUSH2 0x3CE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x125 SWAP2 SWAP1 PUSH2 0xCEC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x148 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x143 SWAP2 SWAP1 PUSH2 0xBA4 JUMP JUMPDEST PUSH2 0x3F4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x155 SWAP2 SWAP1 PUSH2 0xE3C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x178 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x173 SWAP2 SWAP1 PUSH2 0xBA4 JUMP JUMPDEST PUSH2 0x413 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x185 SWAP2 SWAP1 PUSH2 0xE3C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1A3 SWAP2 SWAP1 PUSH2 0xBA4 JUMP JUMPDEST PUSH2 0x432 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xD07 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C8 PUSH2 0x504 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D5 SWAP2 SWAP1 PUSH2 0xCEC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F3 SWAP2 SWAP1 PUSH2 0xC09 JUMP JUMPDEST PUSH2 0x52A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x214 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x20F SWAP2 SWAP1 PUSH2 0xBA4 JUMP JUMPDEST PUSH2 0x594 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x221 SWAP2 SWAP1 PUSH2 0xD9F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x232 PUSH2 0x5C7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23F SWAP2 SWAP1 PUSH2 0xCEC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x262 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x25D SWAP2 SWAP1 PUSH2 0xBA4 JUMP JUMPDEST PUSH2 0x5ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26F SWAP2 SWAP1 PUSH2 0xE3C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x292 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x28D SWAP2 SWAP1 PUSH2 0xBCD JUMP JUMPDEST PUSH2 0x60C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x29C PUSH2 0x61A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A9 SWAP2 SWAP1 PUSH2 0xE3C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH2 0x2BF SWAP1 PUSH2 0x1055 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2EB SWAP1 PUSH2 0x1055 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x338 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x30D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x338 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x31B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH2 0x34D SWAP1 PUSH2 0x1055 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x379 SWAP1 PUSH2 0x1055 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3C6 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x39B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3C6 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3A9 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x47B SWAP1 PUSH2 0x1055 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x4A7 SWAP1 PUSH2 0x1055 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4F4 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4C9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x4F4 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x4D7 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 POP DUP4 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x536 PUSH1 0x8 PUSH2 0x620 JUMP JUMPDEST SWAP1 POP PUSH2 0x542 PUSH1 0x8 PUSH2 0x62E JUMP JUMPDEST PUSH2 0x54F DUP2 DUP6 DUP6 CALLER DUP7 PUSH2 0x644 JUMP JUMPDEST PUSH32 0x2ED4F0A950535D9DBE363DBCDAEDBBDF03AA9F33D5B1B70B74554DEBEF4D10F4 CALLER DUP3 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x586 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xD45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x616 DUP3 DUP3 PUSH2 0x7A5 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST DUP4 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x6 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x6DF JUMPI PUSH1 0x40 MLOAD PUSH32 0x679101AD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x6EB CALLER DUP8 DUP8 DUP8 PUSH2 0x7ED JUMP JUMPDEST DUP3 PUSH1 0x7 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0x7 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x76A SWAP3 SWAP2 SWAP1 PUSH2 0xA84 JUMP JUMPDEST POP PUSH2 0xE10 PUSH1 0x7 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x4 SLOAD PUSH2 0x797 SWAP2 SWAP1 PUSH2 0xF29 JUMP JUMPDEST PUSH1 0x4 DUP2 SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x7AF DUP3 DUP3 PUSH2 0x95D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7BA DUP4 PUSH2 0x5ED JUMP JUMPDEST SWAP1 POP TIMESTAMP PUSH1 0x7 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH32 0x30644E72E131A029B85045B68181585D2833E84879B9709143E1F593F0000001 DUP4 LT PUSH2 0x846 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE730108F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x851 DUP5 PUSH2 0x413 JUMP JUMPDEST EQ PUSH2 0x888 JUMPI PUSH1 0x40 MLOAD PUSH32 0x632AB44600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH20 0x0 PUSH4 0x1095FBB4 SWAP1 SWAP2 DUP5 DUP5 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D6 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xE05 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x902 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP3 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8CD7E348E0AD6531FC8E95EC90286BA9246AA70C3D94D7FCA9EB8AFD6E78C35E DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x94F SWAP3 SWAP2 SWAP1 PUSH2 0xE57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x968 DUP4 PUSH2 0x413 JUMP JUMPDEST EQ ISZERO PUSH2 0x9A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x84124A0D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH20 0x0 PUSH4 0x168703FA SWAP1 SWAP2 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9EC SWAP3 SWAP2 SWAP1 PUSH2 0xDDC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA04 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xA18 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 PUSH2 0xA27 DUP4 PUSH2 0x5ED JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH2 0xA36 DUP6 PUSH2 0x3F4 JUMP JUMPDEST PUSH2 0xA40 SWAP2 SWAP1 PUSH2 0xF7F JUMP JUMPDEST SWAP1 POP DUP4 PUSH32 0xE5B5631E8ACF74ED776B8262E656D2B63E56882D6EB3E7D6E8B8C09661F2CA03 DUP3 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0xA76 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xE80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0xA90 SWAP1 PUSH2 0x1055 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0xAB2 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0xAF9 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0xACB JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0xAF9 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0xAF9 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0xAF8 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xADD JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0xB06 SWAP2 SWAP1 PUSH2 0xB0A JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0xB23 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0xB0B JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB3A PUSH2 0xB35 DUP5 PUSH2 0xEDC JUMP JUMPDEST PUSH2 0xEB7 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0xB52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB5D DUP5 DUP3 DUP6 PUSH2 0x1013 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xB76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xB86 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xB27 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB9E DUP2 PUSH2 0x1156 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBB6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBC4 DUP5 DUP3 DUP6 ADD PUSH2 0xB8F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBE0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBEE DUP6 DUP3 DUP7 ADD PUSH2 0xB8F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xBFF DUP6 DUP3 DUP7 ADD PUSH2 0xB8F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xC2C DUP7 DUP3 DUP8 ADD PUSH2 0xB8F JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xC3D DUP7 DUP3 DUP8 ADD PUSH2 0xB8F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC66 DUP7 DUP3 DUP8 ADD PUSH2 0xB65 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0xC79 DUP2 PUSH2 0xFB3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xC88 DUP2 PUSH2 0xFEF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC99 DUP3 PUSH2 0xF0D JUMP JUMPDEST PUSH2 0xCA3 DUP2 DUP6 PUSH2 0xF18 JUMP JUMPDEST SWAP4 POP PUSH2 0xCB3 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1022 JUMP JUMPDEST PUSH2 0xCBC DUP2 PUSH2 0x1145 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xCD7 DUP2 PUSH2 0xFE5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xCE6 DUP2 PUSH2 0xFE5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xD01 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC70 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xD1C PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xC70 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xD2E DUP2 DUP6 PUSH2 0xC8E JUMP JUMPDEST SWAP1 POP PUSH2 0xD3D PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xCCE JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0xD5A PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0xC70 JUMP JUMPDEST PUSH2 0xD67 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0xCCE JUMP JUMPDEST PUSH2 0xD74 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0xCCE JUMP JUMPDEST PUSH2 0xD81 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0xCCE JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0xD93 DUP2 DUP5 PUSH2 0xC8E JUMP JUMPDEST SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xDB4 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC7F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xDD4 DUP2 DUP5 PUSH2 0xC8E JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xDF1 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xCC7 JUMP JUMPDEST PUSH2 0xDFE PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xCDD JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xE1A PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xCC7 JUMP JUMPDEST PUSH2 0xE27 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xCDD JUMP JUMPDEST PUSH2 0xE34 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xCDD JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE51 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCCE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xE6C PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xCCE JUMP JUMPDEST PUSH2 0xE79 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xCCE JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xE95 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xCCE JUMP JUMPDEST PUSH2 0xEA2 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xCCE JUMP JUMPDEST PUSH2 0xEAF PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xCCE JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEC1 PUSH2 0xED2 JUMP JUMPDEST SWAP1 POP PUSH2 0xECD DUP3 DUP3 PUSH2 0x1087 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xEF7 JUMPI PUSH2 0xEF6 PUSH2 0x1116 JUMP JUMPDEST JUMPDEST PUSH2 0xF00 DUP3 PUSH2 0x1145 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF34 DUP3 PUSH2 0xFE5 JUMP JUMPDEST SWAP2 POP PUSH2 0xF3F DUP4 PUSH2 0xFE5 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0xF74 JUMPI PUSH2 0xF73 PUSH2 0x10B8 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF8A DUP3 PUSH2 0xFE5 JUMP JUMPDEST SWAP2 POP PUSH2 0xF95 DUP4 PUSH2 0xFE5 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0xFA8 JUMPI PUSH2 0xFA7 PUSH2 0x10B8 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFBE DUP3 PUSH2 0xFC5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFA DUP3 PUSH2 0x1001 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100C DUP3 PUSH2 0xFC5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1040 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1025 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x104F JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x106D JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1081 JUMPI PUSH2 0x1080 PUSH2 0x10E7 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1090 DUP3 PUSH2 0x1145 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x10AF JUMPI PUSH2 0x10AE PUSH2 0x1116 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x115F DUP2 PUSH2 0xFE5 JUMP JUMPDEST DUP2 EQ PUSH2 0x116A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDD 0x25 PUSH18 0xCC5F732723909B8DF8A96A3E9C98A2951620 SWAP5 0xBE 0x23 LOG0 0xE6 0x49 0x4C 0x2D 0x49 LOG4 0xD7 PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE8 POP DUP10 0xCA 0xE8 CREATE2 0xAA BALANCE EXP PC PUSH11 0xD121E1C11CFE6AE6BB3E76 0xF6 AND 0xAC 0xB8 0xD2 0xF6 SELFDESTRUCT DUP5 0x4C PUSH21 0x64736F6C6343000804003300000000000000000000 ","sourceMap":"153:554:27:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;298:407;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;482:16;541:10;553:7;562:11;575:13;522:67;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;482:117;;611:11;:23;623:10;611:23;;;;;;;;;;;;;;;640:8;611:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;664:34;677:10;689:8;664:34;;;;;;;:::i;:::-;;;;;;;;298:407;;;;;:::o;-1:-1:-1:-;;;;;;;;:::o;44:730:29:-;165:5;190:106;206:89;288:6;206:89;:::i;:::-;190:106;:::i;:::-;181:115;;316:5;345:6;338:5;331:21;379:4;372:5;368:16;361:23;;405:6;455:3;447:4;439:6;435:17;430:3;426:27;423:36;420:2;;;484:1;481;474:12;420:2;520:1;505:263;530:6;527:1;524:13;505:263;;;598:3;627:62;685:3;673:10;627:62;:::i;:::-;622:3;615:75;719:4;714:3;710:14;703:21;;753:4;748:3;744:14;737:21;;565:203;552:1;549;545:9;540:14;;505:263;;;509:14;171:603;;;;;;;:::o;780:345::-;858:5;883:66;899:49;941:6;899:49;:::i;:::-;883:66;:::i;:::-;874:75;;972:6;965:5;958:21;1010:4;1003:5;999:16;1048:3;1039:6;1034:3;1030:16;1027:25;1024:2;;;1065:1;1062;1055:12;1024:2;1078:41;1112:6;1107:3;1102;1078:41;:::i;:::-;864:261;;;;;;:::o;1131:139::-;1177:5;1215:6;1202:20;1193:29;;1231:33;1258:5;1231:33;:::i;:::-;1183:87;;;;:::o;1313:353::-;1409:5;1458:3;1451:4;1443:6;1439:17;1435:27;1425:2;;1476:1;1473;1466:12;1425:2;1516:6;1503:20;1541:119;1656:3;1648:6;1641:4;1633:6;1629:17;1541:119;:::i;:::-;1532:128;;1415:251;;;;;:::o;1686:273::-;1742:5;1791:3;1784:4;1776:6;1772:17;1768:27;1758:2;;1809:1;1806;1799:12;1758:2;1849:6;1836:20;1874:79;1949:3;1941:6;1934:4;1926:6;1922:17;1874:79;:::i;:::-;1865:88;;1748:211;;;;;:::o;2000:529::-;2074:5;2118:4;2106:9;2101:3;2097:19;2093:30;2090:2;;;2136:1;2133;2126:12;2090:2;2158:21;2174:4;2158:21;:::i;:::-;2149:30;;2249:1;2289:49;2334:3;2325:6;2314:9;2310:22;2289:49;:::i;:::-;2282:4;2275:5;2271:16;2264:75;2189:161;2420:2;2461:49;2506:3;2497:6;2486:9;2482:22;2461:49;:::i;:::-;2454:4;2447:5;2443:16;2436:75;2360:162;2080:449;;;;:::o;2535:139::-;2581:5;2619:6;2606:20;2597:29;;2635:33;2662:5;2635:33;:::i;:::-;2587:87;;;;:::o;2680:1117::-;2836:6;2844;2852;2860;2909:3;2897:9;2888:7;2884:23;2880:33;2877:2;;;2926:1;2923;2916:12;2877:2;2997:1;2986:9;2982:17;2969:31;3027:18;3019:6;3016:30;3013:2;;;3059:1;3056;3049:12;3013:2;3087:103;3182:7;3173:6;3162:9;3158:22;3087:103;:::i;:::-;3077:113;;2940:260;3239:2;3265:53;3310:7;3301:6;3290:9;3286:22;3265:53;:::i;:::-;3255:63;;3210:118;3395:2;3384:9;3380:18;3367:32;3426:18;3418:6;3415:30;3412:2;;;3458:1;3455;3448:12;3412:2;3486:63;3541:7;3532:6;3521:9;3517:22;3486:63;:::i;:::-;3476:73;;3338:221;3626:2;3615:9;3611:18;3598:32;3657:18;3649:6;3646:30;3643:2;;;3689:1;3686;3679:12;3643:2;3717:63;3772:7;3763:6;3752:9;3748:22;3717:63;:::i;:::-;3707:73;;3569:221;2867:930;;;;;;;:::o;3803:279::-;3922:10;3943:96;4035:3;4027:6;3943:96;:::i;:::-;4071:4;4066:3;4062:14;4048:28;;3933:149;;;;:::o;4088:108::-;4165:24;4183:5;4165:24;:::i;:::-;4160:3;4153:37;4143:53;;:::o;4202:118::-;4289:24;4307:5;4289:24;:::i;:::-;4284:3;4277:37;4267:53;;:::o;4396:932::-;4565:3;4594:79;4667:5;4594:79;:::i;:::-;4689:111;4793:6;4788:3;4689:111;:::i;:::-;4682:118;;4824:81;4899:5;4824:81;:::i;:::-;4928:7;4959:1;4944:359;4969:6;4966:1;4963:13;4944:359;;;5045:6;5039:13;5072:113;5181:3;5166:13;5072:113;:::i;:::-;5065:120;;5208:85;5286:6;5208:85;:::i;:::-;5198:95;;5004:299;4991:1;4988;4984:9;4979:14;;4944:359;;;4948:14;5319:3;5312:10;;4570:758;;;;;;;:::o;5334:364::-;5422:3;5450:39;5483:5;5450:39;:::i;:::-;5505:71;5569:6;5564:3;5505:71;:::i;:::-;5498:78;;5585:52;5630:6;5625:3;5618:4;5611:5;5607:16;5585:52;:::i;:::-;5662:29;5684:6;5662:29;:::i;:::-;5657:3;5653:39;5646:46;;5426:272;;;;;:::o;5770:519::-;5907:4;5902:3;5898:14;6005:4;5998:5;5994:16;5988:23;6024:63;6081:4;6076:3;6072:14;6058:12;6024:63;:::i;:::-;5922:175;6190:4;6183:5;6179:16;6173:23;6209:63;6266:4;6261:3;6257:14;6243:12;6209:63;:::i;:::-;6107:175;5876:413;;;:::o;6295:108::-;6372:24;6390:5;6372:24;:::i;:::-;6367:3;6360:37;6350:53;;:::o;6409:332::-;6530:4;6568:2;6557:9;6553:18;6545:26;;6581:71;6649:1;6638:9;6634:17;6625:6;6581:71;:::i;:::-;6662:72;6730:2;6719:9;6715:18;6706:6;6662:72;:::i;:::-;6535:206;;;;;:::o;6747:986::-;7064:4;7102:3;7091:9;7087:19;7079:27;;7152:9;7146:4;7142:20;7138:1;7127:9;7123:17;7116:47;7180:158;7333:4;7324:6;7180:158;:::i;:::-;7172:166;;7348:72;7416:2;7405:9;7401:18;7392:6;7348:72;:::i;:::-;7467:9;7461:4;7457:20;7452:2;7441:9;7437:18;7430:48;7495:78;7568:4;7559:6;7495:78;:::i;:::-;7487:86;;7620:9;7614:4;7610:20;7605:2;7594:9;7590:18;7583:48;7648:78;7721:4;7712:6;7648:78;:::i;:::-;7640:86;;7069:664;;;;;;;:::o;7739:129::-;7773:6;7800:20;;:::i;:::-;7790:30;;7829:33;7857:4;7849:6;7829:33;:::i;:::-;7780:88;;;:::o;7874:75::-;7907:6;7940:2;7934:9;7924:19;;7914:35;:::o;7955:336::-;8057:4;8147:18;8139:6;8136:30;8133:2;;;8169:18;;:::i;:::-;8133:2;8219:4;8211:6;8207:17;8199:25;;8279:4;8273;8269:15;8261:23;;8062:229;;;:::o;8297:308::-;8359:4;8449:18;8441:6;8438:30;8435:2;;;8471:18;;:::i;:::-;8435:2;8509:29;8531:6;8509:29;:::i;:::-;8501:37;;8593:4;8587;8583:15;8575:23;;8364:241;;;:::o;8611:157::-;8703:4;8726:3;8718:11;;8756:4;8751:3;8747:14;8739:22;;8708:60;;;:::o;8774:139::-;8866:6;8900:5;8894:12;8884:22;;8873:40;;;:::o;8919:99::-;8971:6;9005:5;8999:12;8989:22;;8978:40;;;:::o;9024:138::-;9119:4;9151;9146:3;9142:14;9134:22;;9124:38;;;:::o;9168:209::-;9292:11;9326:6;9321:3;9314:19;9366:4;9361:3;9357:14;9342:29;;9304:73;;;;:::o;9383:169::-;9467:11;9501:6;9496:3;9489:19;9541:4;9536:3;9532:14;9517:29;;9479:73;;;;:::o;9558:96::-;9595:7;9624:24;9642:5;9624:24;:::i;:::-;9613:35;;9603:51;;;:::o;9660:126::-;9697:7;9737:42;9730:5;9726:54;9715:65;;9705:81;;;:::o;9792:77::-;9829:7;9858:5;9847:16;;9837:32;;;:::o;9875:154::-;9959:6;9954:3;9949;9936:30;10021:1;10012:6;10007:3;10003:16;9996:27;9926:103;;;:::o;10035:307::-;10103:1;10113:113;10127:6;10124:1;10121:13;10113:113;;;10212:1;10207:3;10203:11;10197:18;10193:1;10188:3;10184:11;10177:39;10149:2;10146:1;10142:10;10137:15;;10113:113;;;10244:6;10241:1;10238:13;10235:2;;;10324:1;10315:6;10310:3;10306:16;10299:27;10235:2;10084:258;;;;:::o;10348:281::-;10431:27;10453:4;10431:27;:::i;:::-;10423:6;10419:40;10561:6;10549:10;10546:22;10525:18;10513:10;10510:34;10507:62;10504:2;;;10572:18;;:::i;:::-;10504:2;10612:10;10608:2;10601:22;10391:238;;;:::o;10635:180::-;10683:77;10680:1;10673:88;10780:4;10777:1;10770:15;10804:4;10801:1;10794:15;10821:102;10862:6;10913:2;10909:7;10904:2;10897:5;10893:14;10889:28;10879:38;;10869:54;;;:::o;10929:122::-;11002:24;11020:5;11002:24;:::i;:::-;10995:5;10992:35;10982:2;;11041:1;11038;11031:12;10982:2;10972:79;:::o;11057:122::-;11130:24;11148:5;11130:24;:::i;:::-;11123:5;11120:35;11110:2;;11169:1;11166;11159:12;11110:2;11100:79;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1755800","executionCost":"1848","totalCost":"1757648"},"external":{"createCredIssuer((address,uint256)[],address,string,string)":"infinite"}},"methodIdentifiers":{"createCredIssuer((address,uint256)[],address,string,string)":"2779aae8"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Credential__CallerIsNotTheCredIssuer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Credential__MerkleTreeDepthIsNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Credential__MerkleTreeRootIsExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Credential__MerkleTreeRootIsNotPartOfTheCred\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Credential__YouAreUsingTheSameNillifierTwice\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"credId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"merkleTreeRoot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"externalNullifier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nullifierHash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"signal\",\"type\":\"bytes32\"}],\"name\":\"ProofVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"createIssuer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"issuerName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"issuerSymbol\",\"type\":\"string\"}],\"name\":\"issuerRegistered\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"merkleTreeDepth\",\"type\":\"uint256\"}],\"internalType\":\"struct ICredential.Verifier[]\",\"name\":\"_verifiers\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_issuerName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_issuerSymbol\",\"type\":\"string\"}],\"name\":\"createCredIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TrustifiedCreds.sol\":\"TrustifiedCreds\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@creds-protocol/contracts/CredsIssuer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./interfaces/ICredential.sol\\\";\\nimport \\\"./interfaces/IVerifier.sol\\\";\\nimport \\\"./base/CredentialCore.sol\\\";\\nimport \\\"./base/CredentialCreds.sol\\\";\\nimport \\\"./base/CredsProtocolRegistry.sol\\\";\\n\\n/// @title CredsIssuer\\ncontract CredsIssuer is ICredential, CredentialCore, CredentialCreds {\\n    \\n    address public credsIssuer;\\n    string public issuerName;\\n    string public issuerSymbol;\\n    uint256 public credsIssuedCount;\\n\\n    address public credsProtocolRegistry = 0x414b893562f46f5180971c3389784A447581b2d3;\\n\\n    /// @dev Gets a tree depth and returns its verifier address.\\n    mapping(uint256 => IVerifier) public verifiers;\\n\\n    /// @dev Gets a cred id and returns the cred parameters.\\n    mapping(uint256 => Cred) public creds;\\n    \\n    /// @dev Checks if the cred issuer is the transaction sender.\\n    modifier onlyCredsIssuer() {\\n        if (credsIssuer == _msgSender()) {\\n            revert Credential__CallerIsNotTheCredIssuer();\\n        }\\n        _;\\n    }\\n\\n    /// @dev Checks if there is a verifier for the given tree depth.\\n    /// @param merkleTreeDepth: Depth of the tree.\\n    modifier onlySupportedMerkleTreeDepth(uint256 merkleTreeDepth) {\\n        if (address(verifiers[merkleTreeDepth]) == address(0)) {\\n            revert Credential__MerkleTreeDepthIsNotSupported();\\n        }\\n        _;\\n    }\\n\\n    /// @dev Initializes the Credential verifiers used to verify the user's ZK proofs.\\n    /// @param _verifiers: List of Credential verifiers (address and related Merkle tree depth).\\n    constructor(\\n        Verifier[] memory _verifiers,\\n        address _issuer,\\n        string memory _issuerName,\\n        string memory _issuerSymbol) \\n    {\\n        for (uint8 i = 0; i < _verifiers.length; ) {\\n            verifiers[_verifiers[i].merkleTreeDepth] = IVerifier(_verifiers[i].contractAddress);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        credsIssuer = _issuer;\\n        issuerName =_issuerName;\\n        issuerSymbol =_issuerSymbol; \\n        CredsProtocolRegistry(credsProtocolRegistry).registerIssuer(_issuer, address(this));\\n        emit issuerRegistered(_issuer, _issuerName, _issuerSymbol);\\n    }\\n\\n    function createCred(\\n        uint256 credId,\\n        uint256 merkleTreeDepth,\\n        uint256 zeroValue,\\n        address admin,\\n        string memory credURI\\n    ) internal onlySupportedMerkleTreeDepth(merkleTreeDepth) {\\n        _createCred(msg.sender, credId, merkleTreeDepth, zeroValue);\\n\\n        creds[credId].admin = admin;\\n        creds[credId].credURI = credURI;\\n        creds[credId].merkleRootDuration = 1 hours;\\n        credsIssuedCount = credsIssuedCount + 1;\\n    }\\n\\n    function createCred(\\n        uint256 credId,\\n        uint256 merkleTreeDepth,\\n        uint256 zeroValue,\\n        address admin,\\n        uint256 merkleTreeRootDuration,\\n        string memory credURI\\n    ) internal onlySupportedMerkleTreeDepth(merkleTreeDepth) {\\n        _createCred(msg.sender, credId, merkleTreeDepth, zeroValue);\\n\\n        creds[credId].admin = admin;\\n        creds[credId].credURI = credURI;\\n        creds[credId].merkleRootDuration = merkleTreeRootDuration;\\n        credsIssuedCount = credsIssuedCount + 1;\\n    }\\n\\n    function addIdentity(uint256 credId, uint256 identityCommitment) internal {\\n        _addIdentity(credId, identityCommitment);\\n\\n        uint256 merkleTreeRoot = getMerkleTreeRoot(credId);\\n\\n        creds[credId].merkleRootCreationDates[merkleTreeRoot] = block.timestamp;\\n    }\\n\\n    function addIdentities(uint256 credId, uint256[] calldata identityCommitments)\\n        internal\\n    {\\n        for (uint8 i = 0; i < identityCommitments.length; ) {\\n            _addIdentity(credId, identityCommitments[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        uint256 merkleTreeRoot = getMerkleTreeRoot(credId);\\n\\n        creds[credId].merkleRootCreationDates[merkleTreeRoot] = block.timestamp;\\n    }\\n\\n    function updateIdentity(\\n        uint256 credId,\\n        uint256 identityCommitment,\\n        uint256 newIdentityCommitment,\\n        uint256[] calldata proofSiblings,\\n        uint8[] calldata proofPathIndices\\n    ) internal {\\n        _updateIdentity(credId, identityCommitment, newIdentityCommitment, proofSiblings, proofPathIndices);\\n    }\\n\\n    function removeIdentity(\\n        uint256 credId,\\n        uint256 identityCommitment,\\n        uint256[] calldata proofSiblings,\\n        uint8[] calldata proofPathIndices\\n    ) internal {\\n        _removeIdentity(credId, identityCommitment, proofSiblings, proofPathIndices);\\n    }\\n\\n    function verifyProof(\\n        uint256 credId,\\n        uint256 merkleTreeRoot,\\n        bytes32 signal,\\n        uint256 nullifierHash,\\n        uint256 externalNullifier,\\n        uint256[8] calldata proof\\n    ) internal {\\n        uint256 currentMerkleTreeRoot = getMerkleTreeRoot(credId);\\n\\n        if (currentMerkleTreeRoot == 0) {\\n            revert Credential__CredDoesNotExist();\\n        }\\n\\n        if (merkleTreeRoot != currentMerkleTreeRoot) {\\n            uint256 merkleRootCreationDate = creds[credId].merkleRootCreationDates[merkleTreeRoot];\\n            uint256 merkleRootDuration = creds[credId].merkleRootDuration;\\n\\n            if (merkleRootCreationDate == 0) {\\n                revert Credential__MerkleTreeRootIsNotPartOfTheCred();\\n            }\\n\\n            if (block.timestamp > merkleRootCreationDate + merkleRootDuration) {\\n                revert Credential__MerkleTreeRootIsExpired();\\n            }\\n        }\\n\\n        if (creds[credId].nullifierHashes[nullifierHash]) {\\n            revert Credential__YouAreUsingTheSameNillifierTwice();\\n        }\\n\\n        uint256 merkleTreeDepth = getMerkleTreeDepth(credId);\\n\\n        IVerifier verifier = verifiers[merkleTreeDepth];\\n\\n        _verifyProof(signal, merkleTreeRoot, nullifierHash, externalNullifier, proof, verifier);\\n\\n        creds[credId].nullifierHashes[nullifierHash] = true;\\n\\n        emit ProofVerified(credId, merkleTreeRoot, nullifierHash, externalNullifier, signal);\\n    }\\n}\\n\",\"keccak256\":\"0xfcc940cf44dc2a13655e79132a6ba80c9a1f7e8f005136a7c2a24d746425dab7\",\"license\":\"MIT\"},\"@creds-protocol/contracts/base/CredentialConstants.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nuint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\",\"keccak256\":\"0xc39b4ffdba083c6cf3287f62b663b576f7b4bd7ae2cecf1fc5cb498b56a288d2\",\"license\":\"MIT\"},\"@creds-protocol/contracts/base/CredentialCore.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"../interfaces/ICredentialCore.sol\\\";\\nimport \\\"../interfaces/IVerifier.sol\\\";\\n\\n/// @title Credential core contract.\\n/// @notice Minimal code to allow users to signal their endorsement of an arbitrary string.\\n/// @dev The following code verifies that the proof is correct and saves the hash of the\\n/// nullifier to prevent double-signaling. External nullifier and Merkle trees (i.e. creds) must be\\n/// managed externally.\\ncontract CredentialCore is ICredentialCore {\\n    /// @dev Asserts that no nullifier already exists and if the zero-knowledge proof is valid.\\n    /// Otherwise it reverts.\\n    /// @param signal: Credential signal.\\n    /// @param root: Root of the Merkle tree.\\n    /// @param nullifierHash: Nullifier hash.\\n    /// @param externalNullifier: External nullifier.\\n    /// @param proof: Zero-knowledge proof.\\n    /// @param verifier: Verifier address.\\n    function _verifyProof(\\n        bytes32 signal,\\n        uint256 root,\\n        uint256 nullifierHash,\\n        uint256 externalNullifier,\\n        uint256[8] calldata proof,\\n        IVerifier verifier\\n    ) internal view {\\n        uint256 signalHash = _hashSignal(signal);\\n\\n        verifier.verifyProof(\\n            [proof[0], proof[1]],\\n            [[proof[2], proof[3]], [proof[4], proof[5]]],\\n            [proof[6], proof[7]],\\n            [root, nullifierHash, signalHash, externalNullifier]\\n        );\\n    }\\n\\n    /// @dev Creates a keccak256 hash of the signal.\\n    /// @param signal: Credential signal.\\n    /// @return Hash of the signal.\\n    function _hashSignal(bytes32 signal) private pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(signal))) >> 8;\\n    }\\n}\\n\",\"keccak256\":\"0x6fc6de16a1c6ca1a680af9939e9bb1fa5975c0a495bef46b294094865b792ab9\",\"license\":\"MIT\"},\"@creds-protocol/contracts/base/CredentialCreds.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport {SNARK_SCALAR_FIELD} from \\\"./CredentialConstants.sol\\\";\\nimport \\\"../interfaces/ICredentialCreds.sol\\\";\\nimport \\\"../zk-kit/incremental-merkle-tree.sol/IncrementalBinaryTree.sol\\\";\\nimport \\\"../openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Credential creds contract.\\n/// @dev The following code allows you to create, issue and withdraw creds.\\n/// You can use getters to obtain informations about creds (root, depth, number of leaves).\\nabstract contract CredentialCreds is Context, ICredentialCreds {\\n    using IncrementalBinaryTree for IncrementalTreeData;\\n\\n    /// @dev Gets a cred id and returns the tree data.\\n    mapping(uint256 => IncrementalTreeData) internal merkleTree;\\n\\n    /// @dev Creates a new cred by initializing the associated tree.\\n    /// @param credID: Id of the cred.\\n    /// @param merkleTreeDepth: Depth of the tree.\\n    /// @param zeroValue: Zero value of the tree.\\n    function _createCred(\\n        address issuer,\\n        uint256 credID,\\n        uint256 merkleTreeDepth,\\n        uint256 zeroValue\\n    ) internal virtual {\\n        if (credID >= SNARK_SCALAR_FIELD) {\\n            revert Credential__CredIdIsNotLessThanSnarkScalarField();\\n        }\\n\\n        if (getMerkleTreeDepth(credID) != 0) {\\n            revert Credential__CredAlreadyExists();\\n        }\\n\\n        merkleTree[credID].init(merkleTreeDepth, zeroValue);\\n\\n        emit CredCreated(issuer, credID, merkleTreeDepth, zeroValue);\\n    }\\n\\n    /// @dev Adds an identity commitment to an existing cred.\\n    /// @param credID: Id of the cred.\\n    /// @param identityCommitment: New identity commitment.\\n    function _addIdentity(uint256 credID, uint256 identityCommitment) internal virtual {\\n        if (getMerkleTreeDepth(credID) == 0) {\\n            revert Credential__CredDoesNotExist();\\n        }\\n\\n        merkleTree[credID].insert(identityCommitment);\\n\\n        uint256 merkleTreeRoot = getMerkleTreeRoot(credID);\\n        uint256 index = getNumberOfMerkleTreeLeaves(credID) - 1;\\n\\n        emit IdentityAdded(credID, index, identityCommitment, merkleTreeRoot);\\n    }\\n\\n    /// @dev Updates an identity commitment of an existing cred. A proof of membership is\\n    /// needed to check if the node to be updated is part of the tree.\\n    /// @param credID: Id of the cred.\\n    /// @param identityCommitment: Existing identity commitment to be updated.\\n    /// @param newIdentityCommitment: New identity commitment.\\n    /// @param proofSiblings: Array of the sibling nodes of the proof of membership.\\n    /// @param proofPathIndices: Path of the proof of membership.\\n    function _updateIdentity(\\n        uint256 credID,\\n        uint256 identityCommitment,\\n        uint256 newIdentityCommitment,\\n        uint256[] calldata proofSiblings,\\n        uint8[] calldata proofPathIndices\\n    ) internal virtual {\\n        if (getMerkleTreeRoot(credID) == 0) {\\n            revert Credential__CredDoesNotExist();\\n        }\\n\\n        merkleTree[credID].update(identityCommitment, newIdentityCommitment, proofSiblings, proofPathIndices);\\n\\n        uint256 merkleTreeRoot = getMerkleTreeRoot(credID);\\n        uint256 index = proofPathIndicesToIdentityIndex(proofPathIndices);\\n\\n        emit IdentityUpdated(credID, index, identityCommitment, newIdentityCommitment, merkleTreeRoot);\\n    }\\n\\n    /// @dev Removes an identity commitment from an existing cred. A proof of membership is\\n    /// needed to check if the node to be deleted is part of the tree.\\n    /// @param credID: Id of the cred.\\n    /// @param identityCommitment: Existing identity commitment to be removed.\\n    /// @param proofSiblings: Array of the sibling nodes of the proof of membership.\\n    /// @param proofPathIndices: Path of the proof of membership.\\n    function _removeIdentity(\\n        uint256 credID,\\n        uint256 identityCommitment,\\n        uint256[] calldata proofSiblings,\\n        uint8[] calldata proofPathIndices\\n    ) internal virtual {\\n        if (getMerkleTreeRoot(credID) == 0) {\\n            revert Credential__CredDoesNotExist();\\n        }\\n\\n        merkleTree[credID].remove(identityCommitment, proofSiblings, proofPathIndices);\\n\\n        uint256 merkleTreeRoot = getMerkleTreeRoot(credID);\\n        uint256 index = proofPathIndicesToIdentityIndex(proofPathIndices);\\n\\n        emit IdentityRemoved(credID, index, identityCommitment, merkleTreeRoot);\\n    }\\n\\n    /// @dev See {ICredentialCreds-getMerkleTreeRoot}.\\n    function getMerkleTreeRoot(uint256 credID) public view virtual override returns (uint256) {\\n        return merkleTree[credID].root;\\n    }\\n\\n    /// @dev See {ICredentialCreds-getMerkleTreeDepth}.\\n    function getMerkleTreeDepth(uint256 credID) public view virtual override returns (uint256) {\\n        return merkleTree[credID].depth;\\n    }\\n\\n    /// @dev See {ICredentialCreds-getNumberOfMerkleTreeLeaves}.\\n    function getNumberOfMerkleTreeLeaves(uint256 credID) public view virtual override returns (uint256) {\\n        return merkleTree[credID].numberOfLeaves;\\n    }\\n\\n    /// @dev Converts the path indices of a Merkle proof to the identity commitment index in the tree.\\n    /// @param proofPathIndices: Path of the proof of membership.\\n    /// @return Index of a cred identity.\\n    function proofPathIndicesToIdentityIndex(uint8[] calldata proofPathIndices) private pure returns (uint256) {\\n        uint256 identityIndex = 0;\\n\\n        for (uint8 i = uint8(proofPathIndices.length); i > 0; ) {\\n            if (identityIndex > 0 || proofPathIndices[i - 1] != 0) {\\n                identityIndex *= 2;\\n\\n                if (proofPathIndices[i - 1] == 1) {\\n                    identityIndex += 1;\\n                }\\n            }\\n\\n            unchecked {\\n                --i;\\n            }\\n        }\\n\\n        return identityIndex;\\n    }\\n}\\n\",\"keccak256\":\"0xd2b07442b1b37f4da891d79e9abcfe4986e383256a87f96ccec284acb4f61a55\",\"license\":\"MIT\"},\"@creds-protocol/contracts/base/CredsProtocolRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ncontract CredsProtocolRegistry {\\n\\n    mapping(address => address[]) public issuerContractAddress;\\n    mapping(address => bool) public isRegisteredIssuer;\\n\\n    function registerIssuer(address _issuer, address _issuerContractAddress) external {\\n        issuerContractAddress[_issuer].push(_issuerContractAddress);\\n        isRegisteredIssuer[_issuer] = true;\\n    }\\n\\n}\",\"keccak256\":\"0x10a17aad1cdc2f065689e6e19f2dbbf8d3d21d477625522500111104ca01eecc\",\"license\":\"MIT\"},\"@creds-protocol/contracts/interfaces/ICredential.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/// @title Credential interface.\\n/// @dev Interface of a Credential contract.\\ninterface ICredential {\\n    error Credential__CallerIsNotTheCredIssuer();\\n    error Credential__MerkleTreeDepthIsNotSupported();\\n    error Credential__MerkleTreeRootIsExpired();\\n    error Credential__MerkleTreeRootIsNotPartOfTheCred();\\n    error Credential__YouAreUsingTheSameNillifierTwice();\\n\\n    /// It defines all the cred parameters, in addition to those in the Merkle tree.\\n    struct Cred {\\n        address admin;\\n        string credURI;\\n        uint256 merkleRootDuration;\\n        mapping(uint256 => uint256) merkleRootCreationDates;\\n        mapping(uint256 => bool) nullifierHashes;\\n    }\\n\\n    struct Verifier {\\n        address contractAddress;\\n        uint256 merkleTreeDepth;\\n    }\\n\\n    /// @dev Emitted when an admin is assigned to a cred.\\n    /// @param issuerAddress: Address of the issuer\\n    /// @param issuerName: Name of the issuer\\n    /// @param issuerSymbol: Symbol of the issuer\\n    event issuerRegistered(\\n        address indexed issuerAddress, \\n        string indexed issuerName, \\n        string indexed issuerSymbol\\n    );\\n\\n    /// @dev Emitted when a Credential proof is verified.\\n    /// @param credId: Id of the cred.\\n    /// @param merkleTreeRoot: Root of the Merkle tree.\\n    /// @param externalNullifier: External nullifier.\\n    /// @param nullifierHash: Nullifier hash.\\n    /// @param signal: Credential signal.\\n    event ProofVerified(\\n        uint256 indexed credId,\\n        uint256 merkleTreeRoot,\\n        uint256 externalNullifier,\\n        uint256 nullifierHash,\\n        bytes32 signal\\n    );\\n    \\n}\",\"keccak256\":\"0xc7792328f4945f8f0af16e28766a33dcb2ca6e2c5e5f373cd36412988bf70bb5\",\"license\":\"MIT\"},\"@creds-protocol/contracts/interfaces/ICredentialCore.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/// @title CredentialCore interface.\\n/// @dev Interface of CredentialCore contract.\\ninterface ICredentialCore {\\n    /// @notice Emitted when a proof is verified correctly and a new nullifier hash is added.\\n    /// @param nullifierHash: Hash of external and identity nullifiers.\\n    event NullifierHashAdded(uint256 nullifierHash);\\n}\\n\",\"keccak256\":\"0x1f0ec24e95ce1a7dffa4a51b427e59f27807b6ad81ff92cb36b15ed5de94fc0b\",\"license\":\"MIT\"},\"@creds-protocol/contracts/interfaces/ICredentialCreds.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/// @title CredentialCreds interface.\\n/// @dev Interface of a CredentialCreds contract.\\ninterface ICredentialCreds {\\n    \\n    error Credential__CredDoesNotExist();\\n    error Credential__CredAlreadyExists();\\n    error Credential__CredIdIsNotLessThanSnarkScalarField();\\n\\n    /// @dev Emitted when a new cred is created.\\n    /// @param issuer: Cred Issuer\\n    /// @param credId: Id of the cred.\\n    /// @param merkleTreeDepth: Depth of the tree.\\n    /// @param zeroValue: Zero value of the tree.\\n    event CredCreated(address indexed issuer, uint256 indexed credId, uint256 merkleTreeDepth, uint256 zeroValue);\\n\\n    /// @dev Emitted when a new identity commitment is added.\\n    /// @param credId: Cred id of the cred.\\n    /// @param index: Identity commitment index.\\n    /// @param identityCommitment: New identity commitment.\\n    /// @param merkleTreeRoot: New root hash of the tree.\\n    event IdentityAdded(uint256 indexed credId, uint256 index, uint256 identityCommitment, uint256 merkleTreeRoot);\\n\\n    /// @dev Emitted when an identity commitment is updated.\\n    /// @param credId: Cred id of the cred.\\n    /// @param index: Identity commitment index.\\n    /// @param identityCommitment: Existing identity commitment to be updated.\\n    /// @param newIdentityCommitment: New identity commitment.\\n    /// @param merkleTreeRoot: New root hash of the tree.\\n    event IdentityUpdated(\\n        uint256 indexed credId,\\n        uint256 index,\\n        uint256 identityCommitment,\\n        uint256 newIdentityCommitment,\\n        uint256 merkleTreeRoot\\n    );\\n\\n    /// @dev Emitted when a new identity commitment is removed.\\n    /// @param credId: Cred id of the cred.\\n    /// @param index: Identity commitment index.\\n    /// @param identityCommitment: Existing identity commitment to be removed.\\n    /// @param merkleTreeRoot: New root hash of the tree.\\n    event IdentityRemoved(uint256 indexed credId, uint256 index, uint256 identityCommitment, uint256 merkleTreeRoot);\\n\\n    /// @dev Returns the last root hash of a cred.\\n    /// @param credId: Id of the cred.\\n    /// @return Root hash of the cred.\\n    function getMerkleTreeRoot(uint256 credId) external view returns (uint256);\\n\\n    /// @dev Returns the depth of the tree of a cred.\\n    /// @param credId: Id of the cred.\\n    /// @return Depth of the cred tree.\\n    function getMerkleTreeDepth(uint256 credId) external view returns (uint256);\\n\\n    /// @dev Returns the number of tree leaves of a cred.\\n    /// @param credId: Id of the cred.\\n    /// @return Number of tree leaves.\\n    function getNumberOfMerkleTreeLeaves(uint256 credId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x508ea756edc34a06efaa9c440fc4aaa77b5aa01a8326382806b5d8f35ab9d36e\",\"license\":\"MIT\"},\"@creds-protocol/contracts/interfaces/IVerifier.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/// @title Verifier interface.\\n/// @dev Interface of Verifier contract.\\ninterface IVerifier {\\n    function verifyProof(\\n        uint256[2] memory a,\\n        uint256[2][2] memory b,\\n        uint256[2] memory c,\\n        uint256[4] memory input\\n    ) external view;\\n}\",\"keccak256\":\"0xe0c4acba6ffee755835d287d3978d10d207ebfbb25b49140416e36a609075045\",\"license\":\"MIT\"},\"@creds-protocol/contracts/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@creds-protocol/contracts/zk-kit/incremental-merkle-tree.sol/Hashes.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary PoseidonT3 {\\n    function poseidon(uint256[2] memory) public pure returns (uint256) {}\\n}\\n\\nlibrary PoseidonT6 {\\n    function poseidon(uint256[5] memory) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xc634fec0820a2faab1bc350d94c3151835e8d2c2bc0321d9a198d62712786b81\",\"license\":\"MIT\"},\"@creds-protocol/contracts/zk-kit/incremental-merkle-tree.sol/IncrementalBinaryTree.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {PoseidonT3} from \\\"./Hashes.sol\\\";\\n\\n// Each incremental tree has certain properties and data that will\\n// be used to add new leaves.\\nstruct IncrementalTreeData {\\n    uint256 depth; // Depth of the tree (levels - 1).\\n    uint256 root; // Root hash of the tree.\\n    uint256 numberOfLeaves; // Number of leaves of the tree.\\n    mapping(uint256 => uint256) zeroes; // Zero hashes used for empty nodes (level -> zero hash).\\n    // The nodes of the subtrees used in the last addition of a leaf (level -> [left node, right node]).\\n    mapping(uint256 => uint256[2]) lastSubtrees; // Caching these values is essential to efficient appends.\\n}\\n\\n/// @title Incremental binary Merkle tree.\\n/// @dev The incremental tree allows to calculate the root hash each time a leaf is added, ensuring\\n/// the integrity of the tree.\\nlibrary IncrementalBinaryTree {\\n    uint8 internal constant MAX_DEPTH = 32;\\n    uint256 internal constant SNARK_SCALAR_FIELD =\\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n    /// @dev Initializes a tree.\\n    /// @param self: Tree data.\\n    /// @param depth: Depth of the tree.\\n    /// @param zero: Zero value to be used.\\n    function init(\\n        IncrementalTreeData storage self,\\n        uint256 depth,\\n        uint256 zero\\n    ) public {\\n        require(zero < SNARK_SCALAR_FIELD, \\\"IncrementalBinaryTree: leaf must be < SNARK_SCALAR_FIELD\\\");\\n        require(depth > 0 && depth <= MAX_DEPTH, \\\"IncrementalBinaryTree: tree depth must be between 1 and 32\\\");\\n\\n        self.depth = depth;\\n\\n        for (uint8 i = 0; i < depth; ) {\\n            self.zeroes[i] = zero;\\n            zero = PoseidonT3.poseidon([zero, zero]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        self.root = zero;\\n    }\\n\\n    /// @dev Inserts a leaf in the tree.\\n    /// @param self: Tree data.\\n    /// @param leaf: Leaf to be inserted.\\n    function insert(IncrementalTreeData storage self, uint256 leaf) public {\\n        uint256 depth = self.depth;\\n\\n        require(leaf < SNARK_SCALAR_FIELD, \\\"IncrementalBinaryTree: leaf must be < SNARK_SCALAR_FIELD\\\");\\n        require(self.numberOfLeaves < 2**depth, \\\"IncrementalBinaryTree: tree is full\\\");\\n\\n        uint256 index = self.numberOfLeaves;\\n        uint256 hash = leaf;\\n\\n        for (uint8 i = 0; i < depth; ) {\\n            if (index & 1 == 0) {\\n                self.lastSubtrees[i] = [hash, self.zeroes[i]];\\n            } else {\\n                self.lastSubtrees[i][1] = hash;\\n            }\\n\\n            hash = PoseidonT3.poseidon(self.lastSubtrees[i]);\\n            index >>= 1;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        self.root = hash;\\n        self.numberOfLeaves += 1;\\n    }\\n\\n    /// @dev Updates a leaf in the tree.\\n    /// @param self: Tree data.\\n    /// @param leaf: Leaf to be updated.\\n    /// @param newLeaf: New leaf.\\n    /// @param proofSiblings: Array of the sibling nodes of the proof of membership.\\n    /// @param proofPathIndices: Path of the proof of membership.\\n    function update(\\n        IncrementalTreeData storage self,\\n        uint256 leaf,\\n        uint256 newLeaf,\\n        uint256[] calldata proofSiblings,\\n        uint8[] calldata proofPathIndices\\n    ) public {\\n        require(\\n            verify(self, leaf, proofSiblings, proofPathIndices),\\n            \\\"IncrementalBinaryTree: leaf is not part of the tree\\\"\\n        );\\n\\n        uint256 depth = self.depth;\\n        uint256 hash = newLeaf;\\n\\n        for (uint8 i = 0; i < depth; ) {\\n            if (proofPathIndices[i] == 0) {\\n                if (proofSiblings[i] == self.lastSubtrees[i][1]) {\\n                    self.lastSubtrees[i][0] = hash;\\n                }\\n\\n                hash = PoseidonT3.poseidon([hash, proofSiblings[i]]);\\n            } else {\\n                if (proofSiblings[i] == self.lastSubtrees[i][0]) {\\n                    self.lastSubtrees[i][1] = hash;\\n                }\\n\\n                hash = PoseidonT3.poseidon([proofSiblings[i], hash]);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        self.root = hash;\\n    }\\n\\n    /// @dev Removes a leaf from the tree.\\n    /// @param self: Tree data.\\n    /// @param leaf: Leaf to be removed.\\n    /// @param proofSiblings: Array of the sibling nodes of the proof of membership.\\n    /// @param proofPathIndices: Path of the proof of membership.\\n    function remove(\\n        IncrementalTreeData storage self,\\n        uint256 leaf,\\n        uint256[] calldata proofSiblings,\\n        uint8[] calldata proofPathIndices\\n    ) public {\\n        update(self, leaf, self.zeroes[0], proofSiblings, proofPathIndices);\\n    }\\n\\n    /// @dev Verify if the path is correct and the leaf is part of the tree.\\n    /// @param self: Tree data.\\n    /// @param leaf: Leaf to be removed.\\n    /// @param proofSiblings: Array of the sibling nodes of the proof of membership.\\n    /// @param proofPathIndices: Path of the proof of membership.\\n    /// @return True or false.\\n    function verify(\\n        IncrementalTreeData storage self,\\n        uint256 leaf,\\n        uint256[] calldata proofSiblings,\\n        uint8[] calldata proofPathIndices\\n    ) private view returns (bool) {\\n        require(leaf < SNARK_SCALAR_FIELD, \\\"IncrementalBinaryTree: leaf must be < SNARK_SCALAR_FIELD\\\");\\n        uint256 depth = self.depth;\\n        require(\\n            proofPathIndices.length == depth && proofSiblings.length == depth,\\n            \\\"IncrementalBinaryTree: length of path is not correct\\\"\\n        );\\n\\n        uint256 hash = leaf;\\n\\n        for (uint8 i = 0; i < depth; ) {\\n            require(\\n                proofSiblings[i] < SNARK_SCALAR_FIELD,\\n                \\\"IncrementalBinaryTree: sibling node must be < SNARK_SCALAR_FIELD\\\"\\n            );\\n\\n            if (proofPathIndices[i] == 0) {\\n                hash = PoseidonT3.poseidon([hash, proofSiblings[i]]);\\n            } else {\\n                hash = PoseidonT3.poseidon([proofSiblings[i], hash]);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return hash == self.root;\\n    }\\n}\\n\",\"keccak256\":\"0x7aad99b66b8d77364ad901580b988257596eff6cc19d92986b376685f8dbdd1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/TrustifiedCred.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@creds-protocol/contracts/CredsIssuer.sol\\\";\\n\\ncontract TrustifiedCred is CredsIssuer {\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _credIds;\\n\\n    address public owner;\\n\\n    event CredCreated(address, uint256, uint256, uint256, string);\\n    event IssueCred(address, uint256, uint256);\\n\\n    constructor(\\n        Verifier[] memory _verifiers,\\n        address _issuer,\\n        string memory _issuerName,\\n        string memory _issuerSymbol\\n    ) CredsIssuer(_verifiers, _issuer, _issuerName, _issuerSymbol) {}\\n\\n    function issueCred(\\n        uint256 merkleTreeDepth,\\n        uint256 zeroValue,\\n        string memory credURI\\n    ) public {\\n        uint256 _credId = _credIds.current();\\n        _credIds.increment();\\n        createCred(_credId, merkleTreeDepth, zeroValue, msg.sender, credURI);\\n        emit CredCreated(\\n            msg.sender,\\n            _credId,\\n            merkleTreeDepth,\\n            zeroValue,\\n            credURI\\n        );\\n    }\\n\\n    function claimCredToTrustifiedIssuer(\\n        uint256 credId,\\n        uint256 identityCommitment\\n    ) public {\\n        addIdentity(credId, identityCommitment);\\n    }\\n}\\n\",\"keccak256\":\"0x5fec13fad56514f2244f19a58be5be7dcd9727d6b99c4ad0810f515f815510a9\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/TrustifiedCreds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./TrustifiedCred.sol\\\";\\nimport \\\"@creds-protocol/contracts/interfaces/ICredential.sol\\\";\\n\\n\\ncontract TrustifiedCreds is ICredential {\\n    mapping(address => address[]) private credIssuers;\\n\\n    event createIssuer(address, address);\\n\\n    function createCredIssuer(\\n        Verifier[] memory _verifiers,\\n        address _issuer,\\n        string memory _issuerName,\\n        string memory _issuerSymbol\\n    ) public {\\n        address _address = address(\\n            new TrustifiedCred(_verifiers, _issuer, _issuerName, _issuerSymbol)\\n        ); \\n\\n        credIssuers[msg.sender].push(_address);\\n        emit createIssuer(msg.sender, _address);\\n    }\\n}\\n\",\"keccak256\":\"0x308d30dd10f40955bd13240a6224a8041a8f73233ddd0b974b5a2c00c0a77bb0\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":5024,"contract":"contracts/TrustifiedCreds.sol:TrustifiedCreds","label":"credIssuers","offset":0,"slot":"0","type":"t_mapping(t_address,t_array(t_address)dyn_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"base":"t_address","encoding":"dynamic_array","label":"address[]","numberOfBytes":"32"},"t_mapping(t_address,t_array(t_address)dyn_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => address[])","numberOfBytes":"32","value":"t_array(t_address)dyn_storage"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/comman/FERC721URIStorage.sol":{"ERC721URIStorage":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"ERC721 token with storage based token URI management.","kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC721 token with storage based token URI management.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/comman/FERC721URIStorage.sol\":\"ERC721URIStorage\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/comman/FERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n     /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(\\n            _isApprovedOrOwner(from, tokenId),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0bf56000e946e4f517db67e7cfd33b163c947d5d7a715cf55658c338ea657d26\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1729,"contract":"contracts/comman/FERC721URIStorage.sol:ERC721URIStorage","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":1731,"contract":"contracts/comman/FERC721URIStorage.sol:ERC721URIStorage","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":1735,"contract":"contracts/comman/FERC721URIStorage.sol:ERC721URIStorage","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":1739,"contract":"contracts/comman/FERC721URIStorage.sol:ERC721URIStorage","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":1743,"contract":"contracts/comman/FERC721URIStorage.sol:ERC721URIStorage","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":1749,"contract":"contracts/comman/FERC721URIStorage.sol:ERC721URIStorage","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":5086,"contract":"contracts/comman/FERC721URIStorage.sol:ERC721URIStorage","label":"_tokenURIs","offset":0,"slot":"6","type":"t_mapping(t_uint256,t_string_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}